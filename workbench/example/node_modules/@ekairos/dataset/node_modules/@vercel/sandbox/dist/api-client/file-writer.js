"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileWriter = void 0;
const zlib_1 = __importDefault(require("zlib"));
const tar_stream_1 = __importDefault(require("tar-stream"));
const stream_1 = require("stream");
/**
 * Allows to create a Readable stream with methods to write files
 * to it and to finish it. Files written are compressed together
 * and gzipped in the stream.
 */
class FileWriter {
    constructor() {
        const gzip = zlib_1.default.createGzip();
        this.pack = tar_stream_1.default.pack();
        this.readable = this.pack.pipe(gzip);
    }
    /**
     * Allows to add a file to the stream. Size is required to write
     * the tarball header so when content is a stream it must be
     * provided.
     *
     * Returns a Promise resolved once the file is written in the
     * stream.
     */
    async addFile(file) {
        return new Promise((resolve, reject) => {
            const entry = this.pack.entry("size" in file
                ? { name: file.name, size: file.size }
                : { name: file.name, size: file.content.length }, (error) => {
                if (error) {
                    return reject(error);
                }
                else {
                    resolve();
                }
            });
            if (file.content instanceof stream_1.Readable) {
                file.content.pipe(entry);
            }
            else {
                entry.end(file.content);
            }
        });
    }
    /**
     * Allows to finish the stream returning a Promise that will
     * resolve once the readable is effectively closed or
     * errored.
     */
    async end() {
        return new Promise((resolve, reject) => {
            this.readable.on("error", reject);
            this.readable.on("end", resolve);
            this.pack.finalize();
        });
    }
}
exports.FileWriter = FileWriter;
