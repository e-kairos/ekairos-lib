#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read(path9, settings, callback) {
      settings.fs.lstat(path9, (lstatError, lstat) => {
        if (lstatError !== null) {
          callFailureCallback(callback, lstatError);
          return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          callSuccessCallback(callback, lstat);
          return;
        }
        settings.fs.stat(path9, (statError, stat2) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              callFailureCallback(callback, statError);
              return;
            }
            callSuccessCallback(callback, lstat);
            return;
          }
          if (settings.markSymbolicLink) {
            stat2.isSymbolicLink = () => true;
          }
          callSuccessCallback(callback, stat2);
        });
      });
    }
    exports2.read = read;
    function callFailureCallback(callback, error2) {
      callback(error2);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read(path9, settings) {
      const lstat = settings.fs.lstatSync(path9);
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
      }
      try {
        const stat2 = settings.fs.statSync(path9);
        if (settings.markSymbolicLink) {
          stat2.isSymbolicLink = () => true;
        }
        return stat2;
      } catch (error2) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
          return lstat;
        }
        throw error2;
      }
    }
    exports2.read = read;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs6 = require("fs");
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs6.lstat,
      stat: fs6.stat,
      lstatSync: fs6.lstatSync,
      statSync: fs6.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs6 = require_fs();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs6.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports2.default = Settings;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statSync = exports2.stat = exports2.Settings = void 0;
    var async = require_async();
    var sync = require_sync();
    var settings_1 = require_settings();
    exports2.Settings = settings_1.default;
    function stat2(path9, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path9, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path9, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.stat = stat2;
    function statSync2(path9, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path9, settings);
    }
    exports2.statSync = statSync2;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(exports2, module2) {
    "use strict";
    var promise;
    module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// ../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js
var require_run_parallel = __commonJS({
  "../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(exports2, module2) {
    "use strict";
    module2.exports = runParallel;
    var queueMicrotask2 = require_queue_microtask();
    function runParallel(tasks, cb) {
      let results, pending, keys;
      let isSync = true;
      if (Array.isArray(tasks)) {
        results = [];
        pending = tasks.length;
      } else {
        keys = Object.keys(tasks);
        results = {};
        pending = keys.length;
      }
      function done(err) {
        function end() {
          if (cb) cb(err, results);
          cb = null;
        }
        if (isSync) queueMicrotask2(end);
        else end();
      }
      function each2(i, err, result) {
        results[i] = result;
        if (--pending === 0 || err) {
          done(err);
        }
      }
      if (!pending) {
        done(null);
      } else if (keys) {
        keys.forEach(function(key) {
          tasks[key](function(err, result) {
            each2(key, err, result);
          });
        });
      } else {
        tasks.forEach(function(task, i) {
          task(function(err, result) {
            each2(i, err, result);
          });
        });
      }
      isSync = false;
    }
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
    var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
    if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
      throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
    }
    var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
    var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
    var SUPPORTED_MAJOR_VERSION = 10;
    var SUPPORTED_MINOR_VERSION = 10;
    var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
    var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports2.createDirentFromStats = createDirentFromStats;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fs = void 0;
    var fs6 = require_fs2();
    exports2.fs = fs6;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = void 0;
    function joinPathSegments(a, b, separator) {
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var rpl = require_run_parallel();
    var constants_1 = require_constants();
    var utils = require_utils();
    var common = require_common();
    function read(directory, settings, callback) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
      }
      readdir2(directory, settings, callback);
    }
    exports2.read = read;
    function readdirWithFileTypes(directory, settings, callback) {
      settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
          callSuccessCallback(callback, entries);
          return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, rplEntries);
        });
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function makeRplTaskEntry(entry, settings) {
      return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
          done(null, entry);
          return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              done(statError);
              return;
            }
            done(null, entry);
            return;
          }
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          done(null, entry);
        });
      };
    }
    function readdir2(directory, settings, callback) {
      settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const tasks = names.map((name) => {
          const path9 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          return (done) => {
            fsStat.stat(path9, settings.fsStatSettings, (error2, stats) => {
              if (error2 !== null) {
                done(error2);
                return;
              }
              const entry = {
                name,
                path: path9,
                dirent: utils.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              done(null, entry);
            });
          };
        });
        rpl(tasks, (rplError, entries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, entries);
        });
      });
    }
    exports2.readdir = readdir2;
    function callFailureCallback(callback, error2) {
      callback(error2);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var constants_1 = require_constants();
    var utils = require_utils();
    var common = require_common();
    function read(directory, settings) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
      }
      return readdir2(directory, settings);
    }
    exports2.read = read;
    function readdirWithFileTypes(directory, settings) {
      const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
      return dirents.map((dirent) => {
        const entry = {
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
          try {
            const stats = settings.fs.statSync(entry.path);
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          } catch (error2) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              throw error2;
            }
          }
        }
        return entry;
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function readdir2(directory, settings) {
      const names = settings.fs.readdirSync(directory);
      return names.map((name) => {
        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
          name,
          path: entryPath,
          dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
          entry.stats = stats;
        }
        return entry;
      });
    }
    exports2.readdir = readdir2;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs3 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs6 = require("fs");
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs6.lstat,
      stat: fs6.stat,
      lstatSync: fs6.lstatSync,
      statSync: fs6.statSync,
      readdir: fs6.readdir,
      readdirSync: fs6.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path9 = require("path");
    var fsStat = require_out();
    var fs6 = require_fs3();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs6.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path9.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this.followSymbolicLinks,
          fs: this.fs,
          throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports2.default = Settings;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.scandirSync = exports2.scandir = void 0;
    var async = require_async2();
    var sync = require_sync2();
    var settings_1 = require_settings2();
    exports2.Settings = settings_1.default;
    function scandir(path9, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path9, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path9, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.scandir = scandir;
    function scandirSync(path9, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path9, settings);
    }
    exports2.scandirSync = scandirSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
var require_reusify = __commonJS({
  "../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(exports2, module2) {
    "use strict";
    function reusify(Constructor) {
      var head = new Constructor();
      var tail = head;
      function get() {
        var current = head;
        if (current.next) {
          head = current.next;
        } else {
          head = new Constructor();
          tail = head;
        }
        current.next = null;
        return current;
      }
      function release(obj) {
        tail.next = obj;
        tail = obj;
      }
      return {
        get,
        release
      };
    }
    module2.exports = reusify;
  }
});

// ../../node_modules/.pnpm/fastq@1.16.0/node_modules/fastq/queue.js
var require_queue = __commonJS({
  "../../node_modules/.pnpm/fastq@1.16.0/node_modules/fastq/queue.js"(exports2, module2) {
    "use strict";
    var reusify = require_reusify();
    function fastqueue(context2, worker, concurrency) {
      if (typeof context2 === "function") {
        concurrency = worker;
        worker = context2;
        context2 = null;
      }
      if (concurrency < 1) {
        throw new Error("fastqueue concurrency must be greater than 1");
      }
      var cache = reusify(Task);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler2 = null;
      var self = {
        push,
        drain: noop,
        saturated: noop,
        pause,
        paused: false,
        concurrency,
        running,
        resume,
        idle,
        length,
        getQueue,
        unshift,
        empty: noop,
        kill,
        killAndDrain,
        error: error2
      };
      return self;
      function running() {
        return _running;
      }
      function pause() {
        self.paused = true;
      }
      function length() {
        var current = queueHead;
        var counter = 0;
        while (current) {
          current = current.next;
          counter++;
        }
        return counter;
      }
      function getQueue() {
        var current = queueHead;
        var tasks = [];
        while (current) {
          tasks.push(current.value);
          current = current.next;
        }
        return tasks;
      }
      function resume() {
        if (!self.paused) return;
        self.paused = false;
        for (var i = 0; i < self.concurrency; i++) {
          _running++;
          release();
        }
      }
      function idle() {
        return _running === 0 && self.length() === 0;
      }
      function push(value, done) {
        var current = cache.get();
        current.context = context2;
        current.release = release;
        current.value = value;
        current.callback = done || noop;
        current.errorHandler = errorHandler2;
        if (_running === self.concurrency || self.paused) {
          if (queueTail) {
            queueTail.next = current;
            queueTail = current;
          } else {
            queueHead = current;
            queueTail = current;
            self.saturated();
          }
        } else {
          _running++;
          worker.call(context2, current.value, current.worked);
        }
      }
      function unshift(value, done) {
        var current = cache.get();
        current.context = context2;
        current.release = release;
        current.value = value;
        current.callback = done || noop;
        current.errorHandler = errorHandler2;
        if (_running === self.concurrency || self.paused) {
          if (queueHead) {
            current.next = queueHead;
            queueHead = current;
          } else {
            queueHead = current;
            queueTail = current;
            self.saturated();
          }
        } else {
          _running++;
          worker.call(context2, current.value, current.worked);
        }
      }
      function release(holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next) {
          if (!self.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context2, next.value, next.worked);
            if (queueTail === null) {
              self.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self.drain();
        }
      }
      function kill() {
        queueHead = null;
        queueTail = null;
        self.drain = noop;
      }
      function killAndDrain() {
        queueHead = null;
        queueTail = null;
        self.drain();
        self.drain = noop;
      }
      function error2(handler) {
        errorHandler2 = handler;
      }
    }
    function noop() {
    }
    function Task() {
      this.value = null;
      this.callback = noop;
      this.next = null;
      this.release = noop;
      this.context = null;
      this.errorHandler = null;
      var self = this;
      this.worked = function worked(err, result) {
        var callback = self.callback;
        var errorHandler2 = self.errorHandler;
        var val = self.value;
        self.value = null;
        self.callback = noop;
        if (self.errorHandler) {
          errorHandler2(err, val);
        }
        callback.call(self.context, err, result);
        self.release(self);
      };
    }
    function queueAsPromised(context2, worker, concurrency) {
      if (typeof context2 === "function") {
        concurrency = worker;
        worker = context2;
        context2 = null;
      }
      function asyncWrapper(arg, cb) {
        worker.call(this, arg).then(function(res) {
          cb(null, res);
        }, cb);
      }
      var queue2 = fastqueue(context2, asyncWrapper, concurrency);
      var pushCb = queue2.push;
      var unshiftCb = queue2.unshift;
      queue2.push = push;
      queue2.unshift = unshift;
      queue2.drained = drained;
      return queue2;
      function push(value) {
        var p = new Promise(function(resolve2, reject2) {
          pushCb(value, function(err, result) {
            if (err) {
              reject2(err);
              return;
            }
            resolve2(result);
          });
        });
        p.catch(noop);
        return p;
      }
      function unshift(value) {
        var p = new Promise(function(resolve2, reject2) {
          unshiftCb(value, function(err, result) {
            if (err) {
              reject2(err);
              return;
            }
            resolve2(result);
          });
        });
        p.catch(noop);
        return p;
      }
      function drained() {
        if (queue2.idle()) {
          return new Promise(function(resolve2) {
            resolve2();
          });
        }
        var previousDrain = queue2.drain;
        var p = new Promise(function(resolve2) {
          queue2.drain = function() {
            previousDrain();
            resolve2();
          };
        });
        return p;
      }
    }
    module2.exports = fastqueue;
    module2.exports.promise = queueAsPromised;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = exports2.replacePathSegmentSeparator = exports2.isAppliedFilter = exports2.isFatalError = void 0;
    function isFatalError(settings, error2) {
      if (settings.errorFilter === null) {
        return true;
      }
      return !settings.errorFilter(error2);
    }
    exports2.isFatalError = isFatalError;
    function isAppliedFilter(filter2, value) {
      return filter2 === null || filter2(value);
    }
    exports2.isAppliedFilter = isAppliedFilter;
    function replacePathSegmentSeparator(filepath, separator) {
      return filepath.split(/[/\\]/).join(separator);
    }
    exports2.replacePathSegmentSeparator = replacePathSegmentSeparator;
    function joinPathSegments(a, b, separator) {
      if (a === "") {
        return b;
      }
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var common = require_common2();
    var Reader = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
      }
    };
    exports2.default = Reader;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var events_1 = require("events");
    var fsScandir = require_out2();
    var fastq = require_queue();
    var common = require_common2();
    var reader_1 = require_reader();
    var AsyncReader = class extends reader_1.default {
      constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
          if (!this._isFatalError) {
            this._emitter.emit("end");
          }
        };
      }
      read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
          this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed) {
          throw new Error("The reader is already destroyed");
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
      }
      onEntry(callback) {
        this._emitter.on("entry", callback);
      }
      onError(callback) {
        this._emitter.once("error", callback);
      }
      onEnd(callback) {
        this._emitter.once("end", callback);
      }
      _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error2) => {
          if (error2 !== null) {
            this._handleError(error2);
          }
        });
      }
      _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error2, entries) => {
          if (error2 !== null) {
            done(error2, void 0);
            return;
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base);
          }
          done(null, void 0);
        });
      }
      _handleError(error2) {
        if (this._isDestroyed || !common.isFatalError(this._settings, error2)) {
          return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit("error", error2);
      }
      _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
          return;
        }
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _emitEntry(entry) {
        this._emitter.emit("entry", entry);
      }
    };
    exports2.default = AsyncReader;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var async_1 = require_async3();
    var AsyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
      }
      read(callback) {
        this._reader.onError((error2) => {
          callFailureCallback(callback, error2);
        });
        this._reader.onEntry((entry) => {
          this._storage.push(entry);
        });
        this._reader.onEnd(() => {
          callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
      }
    };
    exports2.default = AsyncProvider;
    function callFailureCallback(callback, error2) {
      callback(error2);
    }
    function callSuccessCallback(callback, entries) {
      callback(null, entries);
    }
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require("stream");
    var async_1 = require_async3();
    var StreamProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
          objectMode: true,
          read: () => {
          },
          destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          }
        });
      }
      read() {
        this._reader.onError((error2) => {
          this._stream.emit("error", error2);
        });
        this._reader.onEntry((entry) => {
          this._stream.push(entry);
        });
        this._reader.onEnd(() => {
          this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
      }
    };
    exports2.default = StreamProvider;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsScandir = require_out2();
    var common = require_common2();
    var reader_1 = require_reader();
    var SyncReader = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = /* @__PURE__ */ new Set();
      }
      read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
      }
      _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
      }
      _handleQueue() {
        for (const item of this._queue.values()) {
          this._handleDirectory(item.directory, item.base);
        }
      }
      _handleDirectory(directory, base) {
        try {
          const entries = this._scandir(directory, this._settings.fsScandirSettings);
          for (const entry of entries) {
            this._handleEntry(entry, base);
          }
        } catch (error2) {
          this._handleError(error2);
        }
      }
      _handleError(error2) {
        if (!common.isFatalError(this._settings, error2)) {
          return;
        }
        throw error2;
      }
      _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _pushToStorage(entry) {
        this._storage.push(entry);
      }
    };
    exports2.default = SyncReader;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var sync_1 = require_sync3();
    var SyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
      }
      read() {
        return this._reader.read();
      }
    };
    exports2.default = SyncProvider;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path9 = require("path");
    var fsScandir = require_out2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, void 0);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path9.sep);
        this.fsScandirSettings = new fsScandir.Settings({
          followSymbolicLinks: this._options.followSymbolicLinks,
          fs: this._options.fs,
          pathSegmentSeparator: this._options.pathSegmentSeparator,
          stats: this._options.stats,
          throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports2.default = Settings;
  }
});

// ../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS({
  "../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.walkStream = exports2.walkSync = exports2.walk = void 0;
    var async_1 = require_async4();
    var stream_1 = require_stream();
    var sync_1 = require_sync4();
    var settings_1 = require_settings3();
    exports2.Settings = settings_1.default;
    function walk2(directory, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
      }
      new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
    }
    exports2.walk = walk2;
    function walkSync(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new sync_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkSync = walkSync;
    function walkStream(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new stream_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkStream = walkStream;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// package.json
var require_package = __commonJS({
  "package.json"(exports2, module2) {
    module2.exports = {
      name: "braintrust",
      version: "0.3.7",
      description: "SDK for integrating Braintrust",
      repository: {
        type: "git",
        url: "git+https://github.com/braintrustdata/braintrust-sdk.git",
        directory: "blob/main/js"
      },
      homepage: "https://www.braintrust.dev/docs",
      main: "./dist/index.js",
      module: "./dist/index.mjs",
      types: "./dist/index.d.ts",
      browser: {
        "./dist/index.js": "./dist/browser.js",
        "./dist/index.d.ts": "./dist/browser.d.ts",
        "./dist/index.mjs": "./dist/browser.mjs",
        "./dist/index.d.mts": "./dist/browser.d.mts"
      },
      bin: {
        braintrust: "./dist/cli.js"
      },
      exports: {
        "./package.json": "./package.json",
        ".": {
          types: "./dist/index.d.ts",
          import: "./dist/index.mjs",
          module: "./dist/index.mjs",
          require: "./dist/index.js"
        },
        "./browser": {
          import: "./dist/browser.mjs",
          module: "./dist/browser.mjs",
          require: "./dist/browser.js"
        },
        "./dev": {
          types: "./dev/dist/index.d.ts",
          import: "./dev/dist/index.mjs",
          module: "./dev/dist/index.mjs",
          require: "./dev/dist/index.js"
        },
        "./util": {
          types: "./util/dist/index.d.ts",
          import: "./util/dist/index.mjs",
          module: "./util/dist/index.mjs",
          require: "./util/dist/index.js"
        }
      },
      files: [
        "dist/**/*",
        "dev/dist/**/*",
        "util/dist/**/*"
      ],
      scripts: {
        build: 'cross-env NODE_OPTIONS="--max-old-space-size=8192" tsup',
        watch: "tsup --watch",
        clean: "rm -r dist/* && rm -r dev/dist/*",
        docs: "npx typedoc --options typedoc.json src/index.ts",
        test: "vitest run --exclude src/wrappers/anthropic.test.ts --exclude src/wrappers/oai.test.ts --exclude src/otel.test.ts --exclude src/otel-no-deps.test.ts  --exclude src/wrappers/ai-sdk-v1.test.ts --exclude src/wrappers/ai-sdk-v2.test.ts --exclude src/wrappers/ai-sdk-v3.test.ts",
        "test:anthropic": "vitest run src/wrappers/anthropic.test.ts",
        "test:openai": "vitest run src/wrappers/oai.test.ts",
        "test:otel": "vitest run src/otel.test.ts",
        "test:otel-no-deps": "vitest run src/otel-no-deps.test.ts --reporter=verbose",
        "test:ai-sdk-v1": "vitest run src/wrappers/ai-sdk-v1.test.ts",
        "test:ai-sdk-v2": "vitest run src/wrappers/ai-sdk-v2.test.ts src/wrappers/ai-sdk-v1.test.ts",
        "test:ai-sdk-v3": "vitest run src/wrappers/ai-sdk-v3.test.ts"
      },
      author: "",
      license: "MIT",
      devDependencies: {
        "@ai-sdk/anthropic": "^1.0.5",
        "@anthropic-ai/sdk": "^0.60.0",
        "@jest/globals": "^29.7.0",
        "@nodelib/fs.walk": "^1.2.8",
        "@openai/agents": "^0.0.14",
        "@types/argparse": "^2.0.14",
        "@types/async": "^3.2.24",
        "@types/cli-progress": "^3.11.5",
        "@types/cors": "^2.8.17",
        "@types/express": "^5.0.0",
        "@types/graceful-fs": "^4.1.9",
        "@types/http-errors": "^2.0.4",
        "@types/mustache": "^4.2.5",
        "@types/node": "^20.10.5",
        "@types/pluralize": "^0.0.30",
        "@types/uuid": "^9.0.7",
        ai: "^4.3.16",
        async: "^3.2.5",
        autoevals: "^0.0.131",
        "cross-env": "^7.0.3",
        "npm-run-all": "^4.1.5",
        "openapi-zod-client": "^1.18.3",
        prettier: "^3.5.3",
        tinybench: "^4.0.1",
        "ts-jest": "^29.1.4",
        tsup: "^8.3.5",
        typedoc: "^0.28.5",
        "typedoc-plugin-markdown": "^4.6.4",
        typescript: "5.4.4",
        "vite-tsconfig-paths": "^4.3.2",
        vitest: "^2.1.9"
      },
      dependencies: {
        "@ai-sdk/provider": "^1.1.3",
        "@next/env": "^14.2.3",
        "@vercel/functions": "^1.0.2",
        argparse: "^2.0.1",
        chalk: "^4.1.2",
        "cli-progress": "^3.12.0",
        cors: "^2.8.5",
        dotenv: "^16.4.5",
        esbuild: "^0.25.9",
        "eventsource-parser": "^1.1.2",
        express: "^4.21.2",
        "graceful-fs": "^4.2.11",
        "http-errors": "^2.0.0",
        minimatch: "^9.0.3",
        mustache: "^4.2.0",
        pluralize: "^8.0.0",
        "simple-git": "^3.21.0",
        slugify: "^1.6.6",
        "source-map": "^0.7.4",
        uuid: "^9.0.1",
        zod: "^3.25.34",
        "zod-to-json-schema": "^3.22.5"
      },
      peerDependencies: {
        zod: "^3.25.34"
      }
    };
  }
});

// src/cli.ts
var cli_exports = {};
__export(cli_exports, {
  buildEvaluators: () => buildEvaluators,
  handleBuildFailure: () => handleBuildFailure,
  initializeHandles: () => initializeHandles
});
module.exports = __toCommonJS(cli_exports);
var esbuild = __toESM(require("esbuild"));
var dotenv2 = __toESM(require("dotenv"));
var import_fs2 = __toESM(require("fs"));
var import_os = __toESM(require("os"));
var import_path6 = __toESM(require("path"));
var import_util14 = __toESM(require("util"));
var fsWalk = __toESM(require_out3());
var import_minimatch = require("minimatch");
var import_argparse = require("argparse");
var import_uuid2 = require("uuid");
var import_pluralize4 = __toESM(require("pluralize"));

// src/logger.ts
var import_uuid = require("uuid");

// src/queue.ts
var DEFAULT_QUEUE_SIZE = 15e3;
var Queue = class {
  items = [];
  maxSize;
  enforceSizeLimit = false;
  constructor(maxSize) {
    if (maxSize < 1) {
      console.warn(
        `maxSize ${maxSize} is <1, using default ${DEFAULT_QUEUE_SIZE}`
      );
      maxSize = DEFAULT_QUEUE_SIZE;
    }
    this.maxSize = maxSize;
  }
  /**
   * Set queue size limit enforcement. When enabled, the queue will drop new items
   * when it reaches maxSize. When disabled (default), the queue can grow unlimited.
   */
  enforceQueueSizeLimit(enforce) {
    this.enforceSizeLimit = enforce;
  }
  push(...items) {
    const dropped = [];
    for (const item of items) {
      if (!this.enforceSizeLimit) {
        this.items.push(item);
      } else {
        if (this.items.length >= this.maxSize) {
          dropped.push(item);
        } else {
          this.items.push(item);
        }
      }
    }
    return dropped;
  }
  peek() {
    return this.items[0];
  }
  drain() {
    const items = [...this.items];
    this.items = [];
    return items;
  }
  clear() {
    this.items = [];
  }
  length() {
    return this.items.length;
  }
  get capacity() {
    return this.maxSize;
  }
};

// util/db_fields.ts
var TRANSACTION_ID_FIELD = "_xact_id";
var IS_MERGE_FIELD = "_is_merge";
var AUDIT_SOURCE_FIELD = "_audit_source";
var AUDIT_METADATA_FIELD = "_audit_metadata";
var VALID_SOURCES = ["app", "api", "external"];
var PARENT_ID_FIELD = "_parent_id";

// util/span_identifier_v3.ts
var uuid3 = __toESM(require("uuid"));

// util/span_identifier_v2.ts
var uuid2 = __toESM(require("uuid"));

// util/span_identifier_v1.ts
var uuid = __toESM(require("uuid"));
var import_v3 = require("zod/v3");
function tryMakeUuid(s) {
  try {
    const ret = uuid.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER = 1;
var INVALID_ENCODING_ERRMSG = "SpanComponents string is not properly encoded. This may be due to a version mismatch between the SDK library used to export the span and the library used to decode it. Please make sure you are using the same SDK version across the board";
var SpanObjectTypeV1 = /* @__PURE__ */ ((SpanObjectTypeV12) => {
  SpanObjectTypeV12[SpanObjectTypeV12["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV12[SpanObjectTypeV12["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV12;
})(SpanObjectTypeV1 || {});
var SpanObjectTypeV1EnumSchema = import_v3.z.nativeEnum(SpanObjectTypeV1);
var SpanRowIdsV1 = class {
  rowId;
  spanId;
  rootSpanId;
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV1 = class _SpanComponentsV1 {
  objectType;
  objectId;
  rowIds;
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.rowIds = args.rowIds;
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER,
        this.objectType,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid(
      this.objectId
    );
    if (!objectIdIsUUID) {
      throw new Error("object_id component must be a valid UUID");
    }
    allBuffers.push(objectIdBytes);
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV1EnumSchema.parse(rawBytes[1]);
      if (![0, 1].includes(rawBytes[2])) {
        throw new Error();
      }
      if (![0, 1].includes(rawBytes[3])) {
        throw new Error();
      }
      const hasRowId = rawBytes[2] == 1;
      const rowIdIsUUID = rawBytes[3] == 1;
      const objectId = uuid.stringify(rawBytes.subarray(4, 20));
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        const spanId = uuid.stringify(rawBytes.subarray(20, 36));
        const rootSpanId = uuid.stringify(rawBytes.subarray(36, 52));
        const rowId = rowIdIsUUID ? uuid.stringify(rawBytes.subarray(52)) : rawBytes.subarray(52).toString("utf-8");
        return new SpanRowIdsV1({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV1({ objectType, objectId, rowIds });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG);
    }
  }
  objectIdFields() {
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      rowIds: this.rowIds?.toObject()
    };
  }
};

// util/span_identifier_v2.ts
var import_v32 = require("zod/v3");
function tryMakeUuid2(s) {
  try {
    const ret = uuid2.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER2 = 2;
var INVALID_ENCODING_ERRMSG2 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER2}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var INTEGER_ENCODING_NUM_BYTES = 4;
var SpanObjectTypeV2 = /* @__PURE__ */ ((SpanObjectTypeV22) => {
  SpanObjectTypeV22[SpanObjectTypeV22["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV22[SpanObjectTypeV22["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV22;
})(SpanObjectTypeV2 || {});
var SpanObjectTypeV2EnumSchema = import_v32.z.nativeEnum(SpanObjectTypeV2);
var SpanRowIdsV2 = class {
  rowId;
  spanId;
  rootSpanId;
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV2 = class _SpanComponentsV2 {
  objectType;
  objectId;
  computeObjectMetadataArgs;
  rowIds;
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.computeObjectMetadataArgs = args.computeObjectMetadataArgs;
    this.rowIds = args.rowIds;
    if (!(this.objectId || this.computeObjectMetadataArgs)) {
      throw new Error(
        "Must provide either objectId or computeObjectMetadataArgs"
      );
    }
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid2(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER2,
        this.objectType,
        this.objectId ? 1 : 0,
        this.computeObjectMetadataArgs ? 1 : 0,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    if (this.objectId) {
      const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid2(
        this.objectId
      );
      if (!objectIdIsUUID) {
        throw new Error("object_id component must be a valid UUID");
      }
      allBuffers.push(objectIdBytes);
    }
    if (this.computeObjectMetadataArgs) {
      const computeObjectMetadataBytes = Buffer.from(
        JSON.stringify(this.computeObjectMetadataArgs),
        "utf-8"
      );
      const serializedLenBytes = Buffer.alloc(INTEGER_ENCODING_NUM_BYTES);
      serializedLenBytes.writeInt32BE(computeObjectMetadataBytes.length);
      allBuffers.push(serializedLenBytes, computeObjectMetadataBytes);
    }
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid2(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid2(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] < ENCODING_VERSION_NUMBER2) {
        const spanComponentsOld = SpanComponentsV1.fromStr(s);
        return new _SpanComponentsV2({
          objectType: SpanObjectTypeV2EnumSchema.parse(
            spanComponentsOld.objectType
          ),
          objectId: spanComponentsOld.objectId,
          rowIds: spanComponentsOld.rowIds ? new SpanRowIdsV2({
            rowId: spanComponentsOld.rowIds.rowId,
            spanId: spanComponentsOld.rowIds.spanId,
            rootSpanId: spanComponentsOld.rowIds.rootSpanId
          }) : void 0
        });
      }
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER2) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV2EnumSchema.parse(rawBytes[1]);
      for (let i = 2; i < 6; ++i) {
        if (![0, 1].includes(rawBytes[i])) {
          throw new Error();
        }
      }
      const hasObjectId = rawBytes[2] == 1;
      const hasComputeObjectMetadataArgs = rawBytes[3] == 1;
      const hasRowId = rawBytes[4] == 1;
      const rowIdIsUUID = rawBytes[5] == 1;
      let byteCursor = 6;
      let objectId = void 0;
      if (hasObjectId) {
        const nextByteCursor = byteCursor + 16;
        objectId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
      }
      let computeObjectMetadataArgs;
      if (hasComputeObjectMetadataArgs) {
        let nextByteCursor = byteCursor + INTEGER_ENCODING_NUM_BYTES;
        const serializedLenBytes = rawBytes.readInt32BE(byteCursor);
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + serializedLenBytes;
        computeObjectMetadataArgs = JSON.parse(
          rawBytes.subarray(byteCursor, nextByteCursor).toString("utf-8")
        );
        byteCursor = nextByteCursor;
      }
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        let nextByteCursor = byteCursor + 16;
        const spanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + 16;
        const rootSpanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        const rowId = rowIdIsUUID ? uuid2.stringify(rawBytes.subarray(byteCursor)) : rawBytes.subarray(byteCursor).toString("utf-8");
        return new SpanRowIdsV2({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV2({
        objectType,
        objectId,
        computeObjectMetadataArgs,
        rowIds
      });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG2);
    }
  }
  objectIdFields() {
    if (!this.objectId) {
      throw new Error(
        "Impossible: cannot invoke `object_id_fields` unless SpanComponentsV2 is initialized with an `object_id`"
      );
    }
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      computeObjectMetadataArgs: this.computeObjectMetadataArgs,
      rowIds: this.rowIds?.toObject()
    };
  }
};

// util/span_identifier_v3.ts
var import_v33 = require("zod/v3");

// util/bytes.ts
function concatUint8Arrays(...arrays) {
  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  for (const arr of arrays) {
    result.set(arr, offset);
    offset += arr.length;
  }
  return result;
}
function uint8ArrayToBase64(uint8Array) {
  let binary = "";
  for (let i = 0; i < uint8Array.length; i++) {
    binary += String.fromCharCode(uint8Array[i]);
  }
  return btoa(binary);
}
function base64ToUint8Array(base64) {
  const binary = atob(base64);
  const uint8Array = new Uint8Array(binary.length);
  for (let i = 0; i < binary.length; i++) {
    uint8Array[i] = binary.charCodeAt(i);
  }
  return uint8Array;
}
function uint8ArrayToString(uint8Array) {
  const decoder = new TextDecoder("utf-8");
  return decoder.decode(uint8Array);
}
function stringToUint8Array(str) {
  const encoder = new TextEncoder();
  return encoder.encode(str);
}

// util/span_identifier_v3.ts
function tryMakeUuid3(s) {
  try {
    const ret = uuid3.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: new Uint8Array(ret), isUUID: true };
  } catch {
    return { bytes: void 0, isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER3 = 3;
var INVALID_ENCODING_ERRMSG3 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER3}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var SpanObjectTypeV3 = /* @__PURE__ */ ((SpanObjectTypeV32) => {
  SpanObjectTypeV32[SpanObjectTypeV32["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV32[SpanObjectTypeV32["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  SpanObjectTypeV32[SpanObjectTypeV32["PLAYGROUND_LOGS"] = 3] = "PLAYGROUND_LOGS";
  return SpanObjectTypeV32;
})(SpanObjectTypeV3 || {});
var spanObjectTypeV3EnumSchema = import_v33.z.nativeEnum(SpanObjectTypeV3);
function spanObjectTypeV3ToString(objectType) {
  switch (objectType) {
    case 1 /* EXPERIMENT */:
      return "experiment";
    case 2 /* PROJECT_LOGS */:
      return "project_logs";
    case 3 /* PLAYGROUND_LOGS */:
      return "playground_logs";
    default:
      const x = objectType;
      throw new Error(`Unknown SpanObjectTypeV3: ${x}`);
  }
}
var InternalSpanComponentUUIDFields = /* @__PURE__ */ ((InternalSpanComponentUUIDFields2) => {
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["OBJECT_ID"] = 1] = "OBJECT_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROW_ID"] = 2] = "ROW_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["SPAN_ID"] = 3] = "SPAN_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROOT_SPAN_ID"] = 4] = "ROOT_SPAN_ID";
  return InternalSpanComponentUUIDFields2;
})(InternalSpanComponentUUIDFields || {});
var internalSpanComponentUUIDFieldsEnumSchema = import_v33.z.nativeEnum(
  InternalSpanComponentUUIDFields
);
var _INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME = {
  [1 /* OBJECT_ID */]: "object_id",
  [2 /* ROW_ID */]: "row_id",
  [3 /* SPAN_ID */]: "span_id",
  [4 /* ROOT_SPAN_ID */]: "root_span_id"
};
var spanComponentsV3Schema = import_v33.z.object({
  object_type: spanObjectTypeV3EnumSchema,
  // TODO(manu): We should have a more elaborate zod schema for
  // `propagated_event`. This will required zod-ifying the contents of
  // sdk/js/util/object.ts.
  propagated_event: import_v33.z.record(import_v33.z.unknown()).nullish()
}).and(
  import_v33.z.union([
    // Must provide one or the other.
    import_v33.z.object({
      object_id: import_v33.z.string().nullish(),
      compute_object_metadata_args: import_v33.z.optional(import_v33.z.null())
    }),
    import_v33.z.object({
      object_id: import_v33.z.optional(import_v33.z.null()),
      compute_object_metadata_args: import_v33.z.record(import_v33.z.unknown())
    })
  ])
).and(
  import_v33.z.union([
    // Either all of these must be provided or none.
    import_v33.z.object({
      row_id: import_v33.z.string(),
      span_id: import_v33.z.string(),
      root_span_id: import_v33.z.string()
    }),
    import_v33.z.object({
      row_id: import_v33.z.optional(import_v33.z.null()),
      span_id: import_v33.z.optional(import_v33.z.null()),
      root_span_id: import_v33.z.optional(import_v33.z.null())
    })
  ])
);
var SpanComponentsV3 = class _SpanComponentsV3 {
  constructor(data) {
    this.data = data;
  }
  toStr() {
    const jsonObj = {
      compute_object_metadata_args: this.data.compute_object_metadata_args || void 0,
      propagated_event: this.data.propagated_event || void 0
    };
    const allBuffers = [];
    allBuffers.push(
      new Uint8Array([ENCODING_VERSION_NUMBER3, this.data.object_type])
    );
    const uuidEntries = [];
    function addUuidField(origVal, fieldId) {
      const ret = tryMakeUuid3(origVal);
      if (ret.isUUID) {
        uuidEntries.push(
          concatUint8Arrays(new Uint8Array([fieldId]), ret.bytes)
        );
      } else {
        jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = origVal;
      }
    }
    if (this.data.object_id) {
      addUuidField(
        this.data.object_id,
        1 /* OBJECT_ID */
      );
    }
    if (this.data.row_id) {
      addUuidField(this.data.row_id, 2 /* ROW_ID */);
    }
    if (this.data.span_id) {
      addUuidField(this.data.span_id, 3 /* SPAN_ID */);
    }
    if (this.data.root_span_id) {
      addUuidField(
        this.data.root_span_id,
        4 /* ROOT_SPAN_ID */
      );
    }
    if (uuidEntries.length > 255) {
      throw new Error("Impossible: too many UUID entries to encode");
    }
    allBuffers.push(new Uint8Array([uuidEntries.length]));
    allBuffers.push(...uuidEntries);
    if (Object.keys(jsonObj).length > 0) {
      allBuffers.push(stringToUint8Array(JSON.stringify(jsonObj)));
    }
    return uint8ArrayToBase64(concatUint8Arrays(...allBuffers));
  }
  static fromStr(s) {
    try {
      const rawBytes = base64ToUint8Array(s);
      const jsonObj = {};
      if (rawBytes[0] < ENCODING_VERSION_NUMBER3) {
        const spanComponentsOld = SpanComponentsV2.fromStr(s);
        jsonObj["object_type"] = spanComponentsOld.objectType;
        jsonObj["object_id"] = spanComponentsOld.objectId;
        jsonObj["compute_object_metadata_args"] = spanComponentsOld.computeObjectMetadataArgs;
        if (spanComponentsOld.rowIds) {
          jsonObj["row_id"] = spanComponentsOld.rowIds.rowId;
          jsonObj["span_id"] = spanComponentsOld.rowIds.spanId;
          jsonObj["root_span_id"] = spanComponentsOld.rowIds.rootSpanId;
        }
      } else {
        jsonObj["object_type"] = rawBytes[1];
        const numUuidEntries = rawBytes[2];
        let byteOffset = 3;
        for (let i = 0; i < numUuidEntries; ++i) {
          const fieldId = internalSpanComponentUUIDFieldsEnumSchema.parse(
            rawBytes[byteOffset]
          );
          const fieldBytes = rawBytes.subarray(byteOffset + 1, byteOffset + 17);
          byteOffset += 17;
          jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = uuid3.stringify(fieldBytes);
        }
        if (byteOffset < rawBytes.length) {
          const remainingJsonObj = JSON.parse(
            uint8ArrayToString(rawBytes.subarray(byteOffset))
          );
          Object.assign(jsonObj, remainingJsonObj);
        }
      }
      return _SpanComponentsV3.fromJsonObj(jsonObj);
    } catch {
      throw new Error(INVALID_ENCODING_ERRMSG3);
    }
  }
  objectIdFields() {
    if (!this.data.object_id) {
      throw new Error(
        "Impossible: cannot invoke `objectIdFields` unless SpanComponentsV3 is initialized with an `object_id`"
      );
    }
    switch (this.data.object_type) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.data.object_id };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.data.object_id, log_id: "g" };
      case 3 /* PLAYGROUND_LOGS */:
        return { prompt_session_id: this.data.object_id, log_id: "x" };
      default:
        const _ = this.data.object_type;
        throw new Error("Impossible");
    }
  }
  async export() {
    return this.toStr();
  }
  static fromJsonObj(jsonObj) {
    return new _SpanComponentsV3(spanComponentsV3Schema.parse(jsonObj));
  }
};
function parseParent(parent) {
  return typeof parent === "string" ? parent : parent ? new SpanComponentsV3({
    object_type: parent.object_type === "experiment" ? 1 /* EXPERIMENT */ : parent.object_type === "playground_logs" ? 3 /* PLAYGROUND_LOGS */ : 2 /* PROJECT_LOGS */,
    object_id: parent.object_id,
    ...parent.row_ids ? {
      row_id: parent.row_ids.id,
      span_id: parent.row_ids.span_id,
      root_span_id: parent.row_ids.root_span_id
    } : {
      row_id: void 0,
      span_id: void 0,
      root_span_id: void 0
    },
    propagated_event: parent.propagated_event
  }).toStr() : void 0;
}

// util/http_headers.ts
var BT_FOUND_EXISTING_HEADER = "x-bt-found-existing";
var BT_CURSOR_HEADER = "x-bt-cursor";

// util/type_util.ts
function isObject(value) {
  return value instanceof Object && !(value instanceof Array);
}
function isArray(value) {
  return value instanceof Array;
}
function isObjectOrArray(value) {
  return value instanceof Object;
}
function isEmpty(a) {
  return a === void 0 || a === null;
}

// util/object_util.ts
function mergeDictsWithPaths({
  mergeInto,
  mergeFrom,
  mergePaths
}) {
  const mergePathsSerialized = new Set(
    mergePaths.map((p) => JSON.stringify(p))
  );
  return mergeDictsWithPathsHelper({
    mergeInto,
    mergeFrom,
    path: [],
    mergePaths: mergePathsSerialized
  });
}
function mergeDictsWithPathsHelper({
  mergeInto,
  mergeFrom,
  path: path9,
  mergePaths
}) {
  Object.entries(mergeFrom).forEach(([k, mergeFromV]) => {
    const fullPath = path9.concat([k]);
    const fullPathSerialized = JSON.stringify(fullPath);
    const mergeIntoV = recordFind(mergeInto, k);
    if (isObject(mergeIntoV) && isObject(mergeFromV) && !mergePaths.has(fullPathSerialized)) {
      mergeDictsWithPathsHelper({
        mergeInto: mergeIntoV,
        mergeFrom: mergeFromV,
        path: fullPath,
        mergePaths
      });
    } else {
      mergeInto[k] = mergeFromV;
    }
  });
  return mergeInto;
}
function mergeDicts(mergeInto, mergeFrom) {
  return mergeDictsWithPaths({ mergeInto, mergeFrom, mergePaths: [] });
}
function mapAt(m, k) {
  const ret = m.get(k);
  if (ret === void 0) {
    throw new Error(`Map does not contain key ${k}`);
  }
  return ret;
}
function recordFind(m, k) {
  return m[k];
}
function getObjValueByPath(row, path9) {
  let curr = row;
  for (const p of path9) {
    if (!isObjectOrArray(curr)) {
      return null;
    }
    curr = curr[p];
  }
  return curr;
}

// util/graph_util.ts
function depthFirstSearch(args) {
  const { graph, firstVisitF, lastVisitF } = args;
  for (const vs of graph.values()) {
    for (const v of vs.values()) {
      if (!graph.has(v)) {
        throw new Error(`Outgoing vertex ${v} must be a key in the graph`);
      }
    }
  }
  const firstVisitedVertices = /* @__PURE__ */ new Set();
  const visitationOrder = args.visitationOrder ?? [...graph.keys()];
  const events = visitationOrder.map((vertex) => ({ eventType: "first", vertex, extras: {} })).reverse();
  while (events.length) {
    const { eventType, vertex, extras } = events.pop();
    if (eventType === "last") {
      lastVisitF?.(vertex);
      continue;
    }
    if (firstVisitedVertices.has(vertex)) {
      continue;
    }
    firstVisitedVertices.add(vertex);
    firstVisitF?.(vertex, { parentVertex: extras.parentVertex });
    events.push({ eventType: "last", vertex, extras: {} });
    mapAt(graph, vertex).forEach((child) => {
      events.push({
        eventType: "first",
        vertex: child,
        extras: { parentVertex: vertex }
      });
    });
  }
}
function undirectedConnectedComponents(graph) {
  const directedGraph = new Map(
    [...graph.vertices].map((v) => [v, /* @__PURE__ */ new Set()])
  );
  for (const [i, j] of graph.edges) {
    mapAt(directedGraph, i).add(j);
    mapAt(directedGraph, j).add(i);
  }
  let labelCounter = 0;
  const vertexLabels = /* @__PURE__ */ new Map();
  const firstVisitF = (vertex, args) => {
    const label = args?.parentVertex !== void 0 ? mapAt(vertexLabels, args?.parentVertex) : labelCounter++;
    vertexLabels.set(vertex, label);
  };
  depthFirstSearch({ graph: directedGraph, firstVisitF });
  const output = Array.from({ length: labelCounter }).map(() => []);
  for (const [vertex, label] of vertexLabels.entries()) {
    output[label].push(vertex);
  }
  return output;
}
function topologicalSort(graph, visitationOrder) {
  const reverseOrdering = [];
  const lastVisitF = (vertex) => {
    reverseOrdering.push(vertex);
  };
  depthFirstSearch({ graph, lastVisitF, visitationOrder });
  return reverseOrdering.reverse();
}

// util/merge_row_batch.ts
function generateMergedRowKey(row, useParentIdForId) {
  return JSON.stringify(
    [
      "org_id",
      "project_id",
      "experiment_id",
      "dataset_id",
      "prompt_session_id",
      "log_id",
      useParentIdForId ?? false ? PARENT_ID_FIELD : "id"
    ].map((k) => row[k])
  );
}
var MERGE_ROW_SKIP_FIELDS = [
  "created",
  "span_id",
  "root_span_id",
  "span_parents",
  "_parent_id"
  // TODO: handle merge paths.
];
function popMergeRowSkipFields(row) {
  const popped = {};
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    if (field in row) {
      popped[field] = row[field];
      delete row[field];
    }
  }
  return popped;
}
function restoreMergeRowSkipFields(row, skipFields) {
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    delete row[field];
    if (field in skipFields) {
      row[field] = skipFields[field];
    }
  }
}
function mergeRowBatch(rows) {
  for (const row of rows) {
    if (row.id === void 0) {
      throw new Error(
        "Logged row is missing an id. This is an internal braintrust error. Please contact us at info@braintrust.dev for help"
      );
    }
  }
  const rowGroups = /* @__PURE__ */ new Map();
  for (const row of rows) {
    const key = generateMergedRowKey(row);
    const existingRow = rowGroups.get(key);
    if (existingRow !== void 0 && row[IS_MERGE_FIELD]) {
      const skipFields = popMergeRowSkipFields(existingRow);
      const preserveNoMerge = !existingRow[IS_MERGE_FIELD];
      mergeDicts(existingRow, row);
      restoreMergeRowSkipFields(existingRow, skipFields);
      if (preserveNoMerge) {
        delete existingRow[IS_MERGE_FIELD];
      }
    } else {
      rowGroups.set(key, row);
    }
  }
  const merged = [...rowGroups.values()];
  const rowToLabel = new Map(
    merged.map((r, i) => [generateMergedRowKey(r), i])
  );
  const graph = new Map(
    Array.from({ length: merged.length }).map((_, i) => [i, /* @__PURE__ */ new Set()])
  );
  merged.forEach((r, i) => {
    const parentId = r[PARENT_ID_FIELD];
    if (!parentId) {
      return;
    }
    const parentRowKey = generateMergedRowKey(
      r,
      true
      /* useParentIdForId */
    );
    const parentLabel = rowToLabel.get(parentRowKey);
    if (parentLabel !== void 0) {
      mapAt(graph, parentLabel).add(i);
    }
  });
  const connectedComponents = undirectedConnectedComponents({
    vertices: new Set(graph.keys()),
    edges: new Set(
      [...graph.entries()].flatMap(
        ([k, vs]) => [...vs].map((v) => {
          const ret = [k, v];
          return ret;
        })
      )
    )
  });
  const buckets = connectedComponents.map(
    (cc) => topologicalSort(
      graph,
      cc
      /* visitationOrder */
    )
  );
  return buckets.map((bucket) => bucket.map((i) => merged[i]));
}
function batchItems(args) {
  let { items } = args;
  const batchMaxNumItems = args.batchMaxNumItems ?? Number.POSITIVE_INFINITY;
  const batchMaxNumBytes = args.batchMaxNumBytes ?? Number.POSITIVE_INFINITY;
  const output = [];
  let nextItems = [];
  let batchSet = [];
  let batch = [];
  let batchLen = 0;
  function addToBatch(item) {
    batch.push(item);
    batchLen += item.length;
  }
  function flushBatch() {
    batchSet.push(batch);
    batch = [];
    batchLen = 0;
  }
  while (items.length) {
    for (const bucket of items) {
      let i = 0;
      for (const item of bucket) {
        if (batch.length === 0 || item.length + batchLen < batchMaxNumBytes && batch.length < batchMaxNumItems) {
          addToBatch(item);
        } else if (i === 0) {
          flushBatch();
          addToBatch(item);
        } else {
          break;
        }
        ++i;
      }
      if (i < bucket.length) {
        nextItems.push(bucket.slice(i));
      }
      if (batchLen >= batchMaxNumBytes || batch.length > batchMaxNumItems) {
        flushBatch();
      }
    }
    if (batch.length) {
      flushBatch();
    }
    if (batchSet.length) {
      output.push(batchSet);
      batchSet = [];
    }
    items = nextItems;
    nextItems = [];
  }
  return output;
}

// util/object.ts
var DEFAULT_IS_LEGACY_DATASET = false;
function ensureDatasetRecord(r, legacy) {
  if (legacy) {
    return ensureLegacyDatasetRecord(r);
  } else {
    return ensureNewDatasetRecord(r);
  }
}
function ensureLegacyDatasetRecord(r) {
  if ("output" in r) {
    return r;
  }
  const row = {
    ...r,
    output: r.expected
  };
  delete row.expected;
  return row;
}
function ensureNewDatasetRecord(r) {
  if ("expected" in r) {
    return r;
  }
  const row = {
    ...r,
    tags: null,
    expected: r.output
  };
  delete row.output;
  return row;
}

// util/json_util.ts
function constructJsonArray(items) {
  return `[${items.join(",")}]`;
}

// util/string_util.ts
function _urljoin(...parts) {
  return parts.map(
    (x, i) => x.replace(/^\//, "").replace(i < parts.length - 1 ? /\/$/ : "", "")
  ).filter((x) => x.trim() !== "").join("/");
}
function capitalize(s, sep) {
  const items = sep ? s.split(sep) : [s];
  return items.map((s2) => s2 ? s2.charAt(0).toUpperCase() + s2.slice(1) : s2).join(sep || "");
}

// util/git_fields.ts
function mergeGitMetadataSettings(s1, s2) {
  if (s1.collect === "all") {
    return s2;
  } else if (s2.collect === "all") {
    return s1;
  } else if (s1.collect === "none") {
    return s1;
  } else if (s2.collect === "none") {
    return s2;
  }
  const fields = (s1.fields ?? []).filter((f) => (s2.fields ?? []).includes(f));
  const collect = fields.length > 0 ? "some" : "none";
  return { collect, fields };
}

// util/xact-ids.ts
var TOP_BITS = BigInt("0x0DE1") << BigInt(48);
var MOD = BigInt(1) << BigInt(64);
var COPRIME = BigInt("205891132094649");
var COPRIME_INVERSE = BigInt("1522336535492693385");
function modularMultiply(value, prime) {
  return value * prime % MOD;
}
function prettifyXact(valueString) {
  const value = BigInt(valueString);
  const encoded = modularMultiply(value, COPRIME);
  return encoded.toString(16).padStart(16, "0");
}
function loadPrettyXact(encodedHex) {
  if (encodedHex.length !== 16) {
    return encodedHex;
  }
  const value = BigInt(`0x${encodedHex}`);
  const multipliedInverse = modularMultiply(value, COPRIME_INVERSE);
  const withTopBits = TOP_BITS | multipliedInverse;
  return withTopBits.toString();
}

// util/zod_util.ts
var import_v34 = require("zod/v3");

// src/generated_types.ts
var import_v35 = require("zod/v3");
var AclObjectType = import_v35.z.union([
  import_v35.z.enum([
    "organization",
    "project",
    "experiment",
    "dataset",
    "prompt",
    "prompt_session",
    "group",
    "role",
    "org_member",
    "project_log",
    "org_project"
  ]),
  import_v35.z.null()
]);
var Permission = import_v35.z.enum([
  "create",
  "read",
  "update",
  "delete",
  "create_acls",
  "read_acls",
  "update_acls",
  "delete_acls"
]);
var Acl = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  object_type: AclObjectType.and(import_v35.z.string()),
  object_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  group_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  permission: Permission.and(import_v35.z.union([import_v35.z.string(), import_v35.z.null()])).optional(),
  restrict_object_type: AclObjectType.and(import_v35.z.unknown()).optional(),
  role_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  _object_org_id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var AISecret = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  updated_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  org_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  type: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional(),
  preview_secret: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var ResponseFormatJsonSchema = import_v35.z.object({
  name: import_v35.z.string(),
  description: import_v35.z.string().optional(),
  schema: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.string()]).optional(),
  strict: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
});
var ResponseFormatNullish = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("json_object") }),
  import_v35.z.object({
    type: import_v35.z.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  import_v35.z.object({ type: import_v35.z.literal("text") }),
  import_v35.z.null()
]);
var AnyModelParams = import_v35.z.object({
  temperature: import_v35.z.number().optional(),
  top_p: import_v35.z.number().optional(),
  max_tokens: import_v35.z.number(),
  max_completion_tokens: import_v35.z.number().optional(),
  frequency_penalty: import_v35.z.number().optional(),
  presence_penalty: import_v35.z.number().optional(),
  response_format: ResponseFormatNullish.optional(),
  tool_choice: import_v35.z.union([
    import_v35.z.literal("auto"),
    import_v35.z.literal("none"),
    import_v35.z.literal("required"),
    import_v35.z.object({
      type: import_v35.z.literal("function"),
      function: import_v35.z.object({ name: import_v35.z.string() })
    })
  ]).optional(),
  function_call: import_v35.z.union([
    import_v35.z.literal("auto"),
    import_v35.z.literal("none"),
    import_v35.z.object({ name: import_v35.z.string() })
  ]).optional(),
  n: import_v35.z.number().optional(),
  stop: import_v35.z.array(import_v35.z.string()).optional(),
  reasoning_effort: import_v35.z.enum(["minimal", "low", "medium", "high"]).optional(),
  verbosity: import_v35.z.enum(["low", "medium", "high"]).optional(),
  top_k: import_v35.z.number().optional(),
  stop_sequences: import_v35.z.array(import_v35.z.string()).optional(),
  max_tokens_to_sample: import_v35.z.number().optional(),
  maxOutputTokens: import_v35.z.number().optional(),
  topP: import_v35.z.number().optional(),
  topK: import_v35.z.number().optional(),
  use_cache: import_v35.z.boolean().optional()
});
var ApiKey = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  preview_name: import_v35.z.string(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_email: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_given_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_family_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  org_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var AsyncScoringState = import_v35.z.union([
  import_v35.z.object({
    status: import_v35.z.literal("enabled"),
    token: import_v35.z.string(),
    function_ids: import_v35.z.array(import_v35.z.unknown()).min(1),
    skip_logging: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
  }),
  import_v35.z.object({ status: import_v35.z.literal("disabled") }),
  import_v35.z.null(),
  import_v35.z.null()
]);
var AsyncScoringControl = import_v35.z.union([
  import_v35.z.object({ kind: import_v35.z.literal("score_update"), token: import_v35.z.string() }),
  import_v35.z.object({ kind: import_v35.z.literal("state_override"), state: AsyncScoringState }),
  import_v35.z.object({ kind: import_v35.z.literal("state_force_reselect") }),
  import_v35.z.object({ kind: import_v35.z.literal("state_enabled_force_rescore") })
]);
var BraintrustAttachmentReference = import_v35.z.object({
  type: import_v35.z.literal("braintrust_attachment"),
  filename: import_v35.z.string().min(1),
  content_type: import_v35.z.string().min(1),
  key: import_v35.z.string().min(1)
});
var ExternalAttachmentReference = import_v35.z.object({
  type: import_v35.z.literal("external_attachment"),
  filename: import_v35.z.string().min(1),
  content_type: import_v35.z.string().min(1),
  url: import_v35.z.string().min(1)
});
var AttachmentReference = import_v35.z.discriminatedUnion("type", [
  BraintrustAttachmentReference,
  ExternalAttachmentReference
]);
var UploadStatus = import_v35.z.enum(["uploading", "done", "error"]);
var AttachmentStatus = import_v35.z.object({
  upload_status: UploadStatus,
  error_message: import_v35.z.string().optional()
});
var BraintrustModelParams = import_v35.z.object({ use_cache: import_v35.z.boolean() }).partial();
var CallEvent = import_v35.z.union([
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("text_delta")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("reasoning_delta")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("json_delta")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("progress")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("error")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    data: import_v35.z.string(),
    event: import_v35.z.literal("console")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    event: import_v35.z.literal("start"),
    data: import_v35.z.literal("")
  }),
  import_v35.z.object({
    id: import_v35.z.string().optional(),
    event: import_v35.z.literal("done"),
    data: import_v35.z.literal("")
  })
]);
var ChatCompletionContentPartTextWithTitle = import_v35.z.object({
  text: import_v35.z.string().default(""),
  type: import_v35.z.literal("text"),
  cache_control: import_v35.z.object({ type: import_v35.z.literal("ephemeral") }).optional()
});
var ChatCompletionContentPartImageWithTitle = import_v35.z.object({
  image_url: import_v35.z.object({
    url: import_v35.z.string(),
    detail: import_v35.z.union([import_v35.z.literal("auto"), import_v35.z.literal("low"), import_v35.z.literal("high")]).optional()
  }),
  type: import_v35.z.literal("image_url")
});
var ChatCompletionContentPart = import_v35.z.union([
  ChatCompletionContentPartTextWithTitle,
  ChatCompletionContentPartImageWithTitle
]);
var ChatCompletionContentPartText = import_v35.z.object({
  text: import_v35.z.string().default(""),
  type: import_v35.z.literal("text"),
  cache_control: import_v35.z.object({ type: import_v35.z.literal("ephemeral") }).optional()
});
var ChatCompletionMessageToolCall = import_v35.z.object({
  id: import_v35.z.string(),
  function: import_v35.z.object({ arguments: import_v35.z.string(), name: import_v35.z.string() }),
  type: import_v35.z.literal("function")
});
var ChatCompletionMessageReasoning = import_v35.z.object({ id: import_v35.z.string(), content: import_v35.z.string() }).partial();
var ChatCompletionMessageParam = import_v35.z.union([
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("system"),
    name: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPart)]),
    role: import_v35.z.literal("user"),
    name: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    role: import_v35.z.literal("assistant"),
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText), import_v35.z.null()]).optional(),
    function_call: import_v35.z.object({ arguments: import_v35.z.string(), name: import_v35.z.string() }).optional(),
    name: import_v35.z.string().optional(),
    tool_calls: import_v35.z.array(ChatCompletionMessageToolCall).optional(),
    reasoning: import_v35.z.array(ChatCompletionMessageReasoning).optional()
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("tool"),
    tool_call_id: import_v35.z.string().default("")
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    name: import_v35.z.string(),
    role: import_v35.z.literal("function")
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("developer"),
    name: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    role: import_v35.z.literal("model"),
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  })
]);
var ChatCompletionOpenAIMessageParam = import_v35.z.union([
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("system"),
    name: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPart)]),
    role: import_v35.z.literal("user"),
    name: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    role: import_v35.z.literal("assistant"),
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText), import_v35.z.null()]).optional(),
    function_call: import_v35.z.object({ arguments: import_v35.z.string(), name: import_v35.z.string() }).optional(),
    name: import_v35.z.string().optional(),
    tool_calls: import_v35.z.array(ChatCompletionMessageToolCall).optional(),
    reasoning: import_v35.z.array(ChatCompletionMessageReasoning).optional()
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("tool"),
    tool_call_id: import_v35.z.string().default("")
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    name: import_v35.z.string(),
    role: import_v35.z.literal("function")
  }),
  import_v35.z.object({
    content: import_v35.z.union([import_v35.z.string(), import_v35.z.array(ChatCompletionContentPartText)]),
    role: import_v35.z.literal("developer"),
    name: import_v35.z.string().optional()
  })
]);
var ChatCompletionTool = import_v35.z.object({
  function: import_v35.z.object({
    name: import_v35.z.string(),
    description: import_v35.z.string().optional(),
    parameters: import_v35.z.object({}).partial().passthrough().optional()
  }),
  type: import_v35.z.literal("function")
});
var CodeBundle = import_v35.z.object({
  runtime_context: import_v35.z.object({
    runtime: import_v35.z.enum(["node", "python"]),
    version: import_v35.z.string()
  }),
  location: import_v35.z.union([
    import_v35.z.object({
      type: import_v35.z.literal("experiment"),
      eval_name: import_v35.z.string(),
      position: import_v35.z.union([
        import_v35.z.object({ type: import_v35.z.literal("task") }),
        import_v35.z.object({ type: import_v35.z.literal("scorer"), index: import_v35.z.number().int().gte(0) })
      ])
    }),
    import_v35.z.object({ type: import_v35.z.literal("function"), index: import_v35.z.number().int().gte(0) })
  ]),
  bundle_id: import_v35.z.string(),
  preview: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var Dataset = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional()
});
var ObjectReferenceNullish = import_v35.z.union([
  import_v35.z.object({
    object_type: import_v35.z.enum([
      "project_logs",
      "experiment",
      "dataset",
      "prompt",
      "function",
      "prompt_session"
    ]),
    object_id: import_v35.z.string().uuid(),
    id: import_v35.z.string(),
    _xact_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  }),
  import_v35.z.null()
]);
var DatasetEvent = import_v35.z.object({
  id: import_v35.z.string(),
  _xact_id: import_v35.z.string(),
  created: import_v35.z.string().datetime({ offset: true }),
  _pagination_key: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  project_id: import_v35.z.string().uuid(),
  dataset_id: import_v35.z.string().uuid(),
  input: import_v35.z.unknown().optional(),
  expected: import_v35.z.unknown().optional(),
  metadata: import_v35.z.union([
    import_v35.z.object({ model: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]) }).partial().passthrough(),
    import_v35.z.null()
  ]).optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  span_id: import_v35.z.string(),
  root_span_id: import_v35.z.string(),
  is_root: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var EnvVar = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  object_type: import_v35.z.enum(["organization", "project", "function"]),
  object_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  used: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var RepoInfo = import_v35.z.union([
  import_v35.z.object({
    commit: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    branch: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    tag: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    dirty: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]),
    author_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    author_email: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    commit_message: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    commit_time: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    git_diff: import_v35.z.union([import_v35.z.string(), import_v35.z.null()])
  }).partial(),
  import_v35.z.null()
]);
var Experiment = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  repo_info: RepoInfo.optional(),
  commit: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  base_exp_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  dataset_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  dataset_version: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  public: import_v35.z.boolean(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional()
});
var SpanType = import_v35.z.union([
  import_v35.z.enum(["llm", "score", "function", "eval", "task", "tool"]),
  import_v35.z.null()
]);
var SpanAttributes = import_v35.z.union([
  import_v35.z.object({ name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]), type: SpanType }).partial().passthrough(),
  import_v35.z.null()
]);
var ExperimentEvent = import_v35.z.object({
  id: import_v35.z.string(),
  _xact_id: import_v35.z.string(),
  created: import_v35.z.string().datetime({ offset: true }),
  _pagination_key: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  project_id: import_v35.z.string().uuid(),
  experiment_id: import_v35.z.string().uuid(),
  input: import_v35.z.unknown().optional(),
  output: import_v35.z.unknown().optional(),
  expected: import_v35.z.unknown().optional(),
  error: import_v35.z.unknown().optional(),
  scores: import_v35.z.union([import_v35.z.record(import_v35.z.union([import_v35.z.number(), import_v35.z.null()])), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([
    import_v35.z.object({ model: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]) }).partial().passthrough(),
    import_v35.z.null()
  ]).optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  metrics: import_v35.z.union([import_v35.z.record(import_v35.z.number()), import_v35.z.null()]).optional(),
  context: import_v35.z.union([
    import_v35.z.object({
      caller_functionname: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      caller_filename: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      caller_lineno: import_v35.z.union([import_v35.z.number(), import_v35.z.null()])
    }).partial().passthrough(),
    import_v35.z.null()
  ]).optional(),
  span_id: import_v35.z.string(),
  span_parents: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  root_span_id: import_v35.z.string(),
  span_attributes: SpanAttributes.optional(),
  is_root: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var ExtendedSavedFunctionId = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("function"), id: import_v35.z.string() }),
  import_v35.z.object({ type: import_v35.z.literal("global"), name: import_v35.z.string() }),
  import_v35.z.object({
    type: import_v35.z.literal("slug"),
    project_id: import_v35.z.string(),
    slug: import_v35.z.string()
  })
]);
var PromptBlockDataNullish = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("completion"), content: import_v35.z.string() }),
  import_v35.z.object({
    type: import_v35.z.literal("chat"),
    messages: import_v35.z.array(ChatCompletionMessageParam),
    tools: import_v35.z.string().optional()
  }),
  import_v35.z.null()
]);
var ModelParams = import_v35.z.union([
  import_v35.z.object({
    use_cache: import_v35.z.boolean(),
    temperature: import_v35.z.number(),
    top_p: import_v35.z.number(),
    max_tokens: import_v35.z.number(),
    max_completion_tokens: import_v35.z.number(),
    frequency_penalty: import_v35.z.number(),
    presence_penalty: import_v35.z.number(),
    response_format: ResponseFormatNullish,
    tool_choice: import_v35.z.union([
      import_v35.z.literal("auto"),
      import_v35.z.literal("none"),
      import_v35.z.literal("required"),
      import_v35.z.object({
        type: import_v35.z.literal("function"),
        function: import_v35.z.object({ name: import_v35.z.string() })
      })
    ]),
    function_call: import_v35.z.union([
      import_v35.z.literal("auto"),
      import_v35.z.literal("none"),
      import_v35.z.object({ name: import_v35.z.string() })
    ]),
    n: import_v35.z.number(),
    stop: import_v35.z.array(import_v35.z.string()),
    reasoning_effort: import_v35.z.enum(["minimal", "low", "medium", "high"]),
    verbosity: import_v35.z.enum(["low", "medium", "high"])
  }).partial().passthrough(),
  import_v35.z.object({
    use_cache: import_v35.z.boolean().optional(),
    max_tokens: import_v35.z.number(),
    temperature: import_v35.z.number(),
    top_p: import_v35.z.number().optional(),
    top_k: import_v35.z.number().optional(),
    stop_sequences: import_v35.z.array(import_v35.z.string()).optional(),
    max_tokens_to_sample: import_v35.z.number().optional()
  }).passthrough(),
  import_v35.z.object({
    use_cache: import_v35.z.boolean(),
    temperature: import_v35.z.number(),
    maxOutputTokens: import_v35.z.number(),
    topP: import_v35.z.number(),
    topK: import_v35.z.number()
  }).partial().passthrough(),
  import_v35.z.object({
    use_cache: import_v35.z.boolean(),
    temperature: import_v35.z.number(),
    topK: import_v35.z.number()
  }).partial().passthrough(),
  import_v35.z.object({ use_cache: import_v35.z.boolean() }).partial().passthrough()
]);
var PromptOptionsNullish = import_v35.z.union([
  import_v35.z.object({ model: import_v35.z.string(), params: ModelParams, position: import_v35.z.string() }).partial(),
  import_v35.z.null()
]);
var PromptParserNullish = import_v35.z.union([
  import_v35.z.object({
    type: import_v35.z.literal("llm_classifier"),
    use_cot: import_v35.z.boolean(),
    choice_scores: import_v35.z.record(import_v35.z.number().gte(0).lte(1))
  }),
  import_v35.z.null()
]);
var SavedFunctionId = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("function"), id: import_v35.z.string() }),
  import_v35.z.object({ type: import_v35.z.literal("global"), name: import_v35.z.string() })
]);
var PromptDataNullish = import_v35.z.union([
  import_v35.z.object({
    prompt: PromptBlockDataNullish,
    options: PromptOptionsNullish,
    parser: PromptParserNullish,
    tool_functions: import_v35.z.union([import_v35.z.array(SavedFunctionId), import_v35.z.null()]),
    origin: import_v35.z.union([
      import_v35.z.object({
        prompt_id: import_v35.z.string(),
        project_id: import_v35.z.string(),
        prompt_version: import_v35.z.string()
      }).partial(),
      import_v35.z.null()
    ])
  }).partial(),
  import_v35.z.null()
]);
var FunctionTypeEnumNullish = import_v35.z.union([
  import_v35.z.enum(["llm", "scorer", "task", "tool"]),
  import_v35.z.null()
]);
var FunctionIdRef = import_v35.z.object({}).partial().passthrough();
var PromptBlockData = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("completion"), content: import_v35.z.string() }),
  import_v35.z.object({
    type: import_v35.z.literal("chat"),
    messages: import_v35.z.array(ChatCompletionMessageParam),
    tools: import_v35.z.string().optional()
  })
]);
var GraphNode = import_v35.z.union([
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("function"),
    function: FunctionIdRef
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("input")
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("output")
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("literal"),
    value: import_v35.z.unknown().optional()
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("btql"),
    expr: import_v35.z.string()
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("gate"),
    condition: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("aggregator")
  }),
  import_v35.z.object({
    description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    position: import_v35.z.union([import_v35.z.object({ x: import_v35.z.number(), y: import_v35.z.number() }), import_v35.z.null()]).optional(),
    type: import_v35.z.literal("prompt_template"),
    prompt: PromptBlockData
  })
]);
var GraphEdge = import_v35.z.object({
  source: import_v35.z.object({ node: import_v35.z.string().max(1024), variable: import_v35.z.string() }),
  target: import_v35.z.object({ node: import_v35.z.string().max(1024), variable: import_v35.z.string() }),
  purpose: import_v35.z.enum(["control", "data", "messages"])
});
var GraphData = import_v35.z.object({
  type: import_v35.z.literal("graph"),
  nodes: import_v35.z.record(GraphNode),
  edges: import_v35.z.record(GraphEdge)
});
var FunctionData = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("prompt") }),
  import_v35.z.object({
    type: import_v35.z.literal("code"),
    data: import_v35.z.union([
      import_v35.z.object({ type: import_v35.z.literal("bundle") }).and(CodeBundle),
      import_v35.z.object({
        type: import_v35.z.literal("inline"),
        runtime_context: import_v35.z.object({
          runtime: import_v35.z.enum(["node", "python"]),
          version: import_v35.z.string()
        }),
        code: import_v35.z.string()
      })
    ])
  }),
  GraphData,
  import_v35.z.object({
    type: import_v35.z.literal("remote_eval"),
    endpoint: import_v35.z.string(),
    eval_name: import_v35.z.string(),
    parameters: import_v35.z.object({}).partial().passthrough()
  }),
  import_v35.z.object({ type: import_v35.z.literal("global"), name: import_v35.z.string() })
]);
var Function2 = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  _xact_id: import_v35.z.string(),
  project_id: import_v35.z.string().uuid(),
  log_id: import_v35.z.literal("p"),
  org_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  slug: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  function_data: FunctionData,
  origin: import_v35.z.union([
    import_v35.z.object({
      object_type: AclObjectType.and(import_v35.z.string()),
      object_id: import_v35.z.string().uuid(),
      internal: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
    }),
    import_v35.z.null()
  ]).optional(),
  function_schema: import_v35.z.union([
    import_v35.z.object({ parameters: import_v35.z.unknown(), returns: import_v35.z.unknown() }).partial(),
    import_v35.z.null()
  ]).optional()
});
var FunctionFormat = import_v35.z.enum(["llm", "code", "global", "graph"]);
var PromptData = import_v35.z.object({
  prompt: PromptBlockDataNullish,
  options: PromptOptionsNullish,
  parser: PromptParserNullish,
  tool_functions: import_v35.z.union([import_v35.z.array(SavedFunctionId), import_v35.z.null()]),
  origin: import_v35.z.union([
    import_v35.z.object({
      prompt_id: import_v35.z.string(),
      project_id: import_v35.z.string(),
      prompt_version: import_v35.z.string()
    }).partial(),
    import_v35.z.null()
  ])
}).partial();
var FunctionTypeEnum = import_v35.z.enum(["llm", "scorer", "task", "tool"]);
var FunctionId = import_v35.z.union([
  import_v35.z.object({ function_id: import_v35.z.string(), version: import_v35.z.string().optional() }),
  import_v35.z.object({
    project_name: import_v35.z.string(),
    slug: import_v35.z.string(),
    version: import_v35.z.string().optional()
  }),
  import_v35.z.object({ global_function: import_v35.z.string() }),
  import_v35.z.object({
    prompt_session_id: import_v35.z.string(),
    prompt_session_function_id: import_v35.z.string(),
    version: import_v35.z.string().optional()
  }),
  import_v35.z.object({
    inline_context: import_v35.z.object({
      runtime: import_v35.z.enum(["node", "python"]),
      version: import_v35.z.string()
    }),
    code: import_v35.z.string(),
    name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  }),
  import_v35.z.object({
    inline_prompt: PromptData.optional(),
    inline_function: import_v35.z.object({}).partial().passthrough(),
    function_type: FunctionTypeEnum.optional(),
    name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  }),
  import_v35.z.object({
    inline_prompt: PromptData,
    function_type: FunctionTypeEnum.optional(),
    name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
  })
]);
var FunctionObjectType = import_v35.z.enum([
  "prompt",
  "tool",
  "scorer",
  "task",
  "agent"
]);
var FunctionOutputType = import_v35.z.enum(["completion", "score", "any"]);
var GitMetadataSettings = import_v35.z.object({
  collect: import_v35.z.enum(["all", "none", "some"]),
  fields: import_v35.z.array(
    import_v35.z.enum([
      "commit",
      "branch",
      "tag",
      "dirty",
      "author_name",
      "author_email",
      "commit_message",
      "commit_time",
      "git_diff"
    ])
  ).optional()
});
var Group = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  org_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  member_users: import_v35.z.union([import_v35.z.array(import_v35.z.string().uuid()), import_v35.z.null()]).optional(),
  member_groups: import_v35.z.union([import_v35.z.array(import_v35.z.string().uuid()), import_v35.z.null()]).optional()
});
var IfExists = import_v35.z.enum(["error", "ignore", "replace"]);
var InvokeParent = import_v35.z.union([
  import_v35.z.object({
    object_type: import_v35.z.enum(["project_logs", "experiment", "playground_logs"]),
    object_id: import_v35.z.string(),
    row_ids: import_v35.z.union([
      import_v35.z.object({
        id: import_v35.z.string(),
        span_id: import_v35.z.string(),
        root_span_id: import_v35.z.string()
      }),
      import_v35.z.null()
    ]).optional(),
    propagated_event: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional()
  }),
  import_v35.z.string()
]);
var StreamingMode = import_v35.z.union([import_v35.z.enum(["auto", "parallel"]), import_v35.z.null()]);
var InvokeFunction = FunctionId.and(
  import_v35.z.object({
    input: import_v35.z.unknown(),
    expected: import_v35.z.unknown(),
    metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]),
    tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]),
    messages: import_v35.z.array(ChatCompletionMessageParam),
    parent: InvokeParent,
    stream: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]),
    mode: StreamingMode,
    strict: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()])
  }).partial()
);
var MessageRole = import_v35.z.enum([
  "system",
  "user",
  "assistant",
  "function",
  "tool",
  "model",
  "developer"
]);
var ObjectReference = import_v35.z.object({
  object_type: import_v35.z.enum([
    "project_logs",
    "experiment",
    "dataset",
    "prompt",
    "function",
    "prompt_session"
  ]),
  object_id: import_v35.z.string().uuid(),
  id: import_v35.z.string(),
  _xact_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var OnlineScoreConfig = import_v35.z.union([
  import_v35.z.object({
    sampling_rate: import_v35.z.number().gte(0).lte(1),
    scorers: import_v35.z.array(SavedFunctionId),
    btql_filter: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
    apply_to_root_span: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
    apply_to_span_names: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
    skip_logging: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
  }),
  import_v35.z.null()
]);
var Organization = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  api_url: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  is_universal_api: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  proxy_url: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  realtime_url: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var ProjectSettings = import_v35.z.union([
  import_v35.z.object({
    comparison_key: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    baseline_experiment_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    spanFieldOrder: import_v35.z.union([
      import_v35.z.array(
        import_v35.z.object({
          object_type: import_v35.z.string(),
          column_id: import_v35.z.string(),
          position: import_v35.z.string(),
          layout: import_v35.z.union([import_v35.z.literal("full"), import_v35.z.literal("two_column"), import_v35.z.null()]).optional()
        })
      ),
      import_v35.z.null()
    ]),
    remote_eval_sources: import_v35.z.union([
      import_v35.z.array(
        import_v35.z.object({
          url: import_v35.z.string(),
          name: import_v35.z.string(),
          description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
        })
      ),
      import_v35.z.null()
    ])
  }).partial(),
  import_v35.z.null()
]);
var Project = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  org_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  settings: ProjectSettings.optional()
});
var RetentionObjectType = import_v35.z.enum([
  "project_logs",
  "experiment",
  "dataset"
]);
var ProjectAutomation = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  config: import_v35.z.union([
    import_v35.z.object({
      event_type: import_v35.z.literal("logs"),
      btql_filter: import_v35.z.string(),
      interval_seconds: import_v35.z.number().gte(1).lte(2592e3),
      action: import_v35.z.object({ type: import_v35.z.literal("webhook"), url: import_v35.z.string() })
    }),
    import_v35.z.object({
      event_type: import_v35.z.literal("btql_export"),
      export_definition: import_v35.z.union([
        import_v35.z.object({ type: import_v35.z.literal("log_traces") }),
        import_v35.z.object({ type: import_v35.z.literal("log_spans") }),
        import_v35.z.object({ type: import_v35.z.literal("btql_query"), btql_query: import_v35.z.string() })
      ]),
      export_path: import_v35.z.string(),
      format: import_v35.z.enum(["jsonl", "parquet"]),
      interval_seconds: import_v35.z.number().gte(1).lte(2592e3),
      credentials: import_v35.z.object({
        type: import_v35.z.literal("aws_iam"),
        role_arn: import_v35.z.string(),
        external_id: import_v35.z.string()
      }),
      batch_size: import_v35.z.union([import_v35.z.number(), import_v35.z.null()]).optional()
    }),
    import_v35.z.object({
      event_type: import_v35.z.literal("retention"),
      object_type: RetentionObjectType,
      retention_days: import_v35.z.number().gte(0)
    })
  ])
});
var ProjectLogsEvent = import_v35.z.object({
  id: import_v35.z.string(),
  _xact_id: import_v35.z.string(),
  _pagination_key: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.string().datetime({ offset: true }),
  org_id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  log_id: import_v35.z.literal("g"),
  input: import_v35.z.unknown().optional(),
  output: import_v35.z.unknown().optional(),
  expected: import_v35.z.unknown().optional(),
  error: import_v35.z.unknown().optional(),
  scores: import_v35.z.union([import_v35.z.record(import_v35.z.union([import_v35.z.number(), import_v35.z.null()])), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([
    import_v35.z.object({ model: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]) }).partial().passthrough(),
    import_v35.z.null()
  ]).optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  metrics: import_v35.z.union([import_v35.z.record(import_v35.z.number()), import_v35.z.null()]).optional(),
  context: import_v35.z.union([
    import_v35.z.object({
      caller_functionname: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      caller_filename: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      caller_lineno: import_v35.z.union([import_v35.z.number(), import_v35.z.null()])
    }).partial().passthrough(),
    import_v35.z.null()
  ]).optional(),
  span_id: import_v35.z.string(),
  span_parents: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  root_span_id: import_v35.z.string(),
  is_root: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  span_attributes: SpanAttributes.optional(),
  origin: ObjectReferenceNullish.optional()
});
var ProjectScoreType = import_v35.z.enum([
  "slider",
  "categorical",
  "weighted",
  "minimum",
  "maximum",
  "online",
  "free-form"
]);
var ProjectScoreCategory = import_v35.z.object({
  name: import_v35.z.string(),
  value: import_v35.z.number()
});
var ProjectScoreCategories = import_v35.z.union([
  import_v35.z.array(ProjectScoreCategory),
  import_v35.z.record(import_v35.z.number()),
  import_v35.z.array(import_v35.z.string()),
  import_v35.z.null()
]);
var ProjectScoreConfig = import_v35.z.union([
  import_v35.z.object({
    multi_select: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]),
    destination: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    online: OnlineScoreConfig
  }).partial(),
  import_v35.z.null()
]);
var ProjectScore = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  score_type: ProjectScoreType,
  categories: ProjectScoreCategories.optional(),
  config: ProjectScoreConfig.optional(),
  position: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var ProjectTag = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  color: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  position: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var Prompt = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  _xact_id: import_v35.z.string(),
  project_id: import_v35.z.string().uuid(),
  log_id: import_v35.z.literal("p"),
  org_id: import_v35.z.string().uuid(),
  name: import_v35.z.string(),
  slug: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional(),
  metadata: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional()
});
var PromptOptions = import_v35.z.object({ model: import_v35.z.string(), params: ModelParams, position: import_v35.z.string() }).partial();
var PromptSessionEvent = import_v35.z.object({
  id: import_v35.z.string(),
  _xact_id: import_v35.z.string(),
  created: import_v35.z.string().datetime({ offset: true }),
  _pagination_key: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  project_id: import_v35.z.string().uuid(),
  prompt_session_id: import_v35.z.string().uuid(),
  prompt_session_data: import_v35.z.unknown().optional(),
  prompt_data: import_v35.z.unknown().optional(),
  function_data: import_v35.z.unknown().optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  object_data: import_v35.z.unknown().optional(),
  completion: import_v35.z.unknown().optional(),
  tags: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]).optional()
});
var ResponseFormat = import_v35.z.union([
  import_v35.z.object({ type: import_v35.z.literal("json_object") }),
  import_v35.z.object({
    type: import_v35.z.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  import_v35.z.object({ type: import_v35.z.literal("text") })
]);
var Role = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  org_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  member_permissions: import_v35.z.union([
    import_v35.z.array(
      import_v35.z.object({
        permission: Permission,
        restrict_object_type: AclObjectType.optional()
      })
    ),
    import_v35.z.null()
  ]).optional(),
  member_roles: import_v35.z.union([import_v35.z.array(import_v35.z.string().uuid()), import_v35.z.null()]).optional()
});
var RunEval = import_v35.z.object({
  project_id: import_v35.z.string(),
  data: import_v35.z.union([
    import_v35.z.object({
      dataset_id: import_v35.z.string(),
      _internal_btql: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional()
    }),
    import_v35.z.object({
      project_name: import_v35.z.string(),
      dataset_name: import_v35.z.string(),
      _internal_btql: import_v35.z.union([import_v35.z.object({}).partial().passthrough(), import_v35.z.null()]).optional()
    }),
    import_v35.z.object({ data: import_v35.z.array(import_v35.z.unknown()) })
  ]),
  task: FunctionId.and(import_v35.z.unknown()),
  scores: import_v35.z.array(FunctionId),
  experiment_name: import_v35.z.string().optional(),
  metadata: import_v35.z.object({}).partial().passthrough().optional(),
  parent: InvokeParent.and(import_v35.z.unknown()).optional(),
  stream: import_v35.z.boolean().optional(),
  trial_count: import_v35.z.union([import_v35.z.number(), import_v35.z.null()]).optional(),
  is_public: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  timeout: import_v35.z.union([import_v35.z.number(), import_v35.z.null()]).optional(),
  max_concurrency: import_v35.z.union([import_v35.z.number(), import_v35.z.null()]).optional().default(10),
  base_experiment_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  base_experiment_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  git_metadata_settings: GitMetadataSettings.and(
    import_v35.z.union([import_v35.z.object({}).partial(), import_v35.z.null()])
  ).optional(),
  repo_info: RepoInfo.and(import_v35.z.unknown()).optional(),
  strict: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional(),
  stop_token: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  extra_messages: import_v35.z.string().optional(),
  tags: import_v35.z.array(import_v35.z.string()).optional()
});
var ServiceToken = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  preview_name: import_v35.z.string(),
  service_account_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  service_account_email: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  service_account_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  org_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var SpanIFrame = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  project_id: import_v35.z.string().uuid(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  name: import_v35.z.string(),
  description: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  url: import_v35.z.string(),
  post_message: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
});
var SSEConsoleEventData = import_v35.z.object({
  stream: import_v35.z.enum(["stderr", "stdout"]),
  message: import_v35.z.string()
});
var SSEProgressEventData = import_v35.z.object({
  id: import_v35.z.string(),
  object_type: FunctionObjectType,
  origin: ObjectReferenceNullish.and(import_v35.z.unknown()).optional(),
  format: FunctionFormat,
  output_type: FunctionOutputType,
  name: import_v35.z.string(),
  event: import_v35.z.enum([
    "reasoning_delta",
    "text_delta",
    "json_delta",
    "error",
    "console",
    "start",
    "done",
    "progress"
  ]),
  data: import_v35.z.string()
});
var ToolFunctionDefinition = import_v35.z.object({
  type: import_v35.z.literal("function"),
  function: import_v35.z.object({
    name: import_v35.z.string(),
    description: import_v35.z.string().optional(),
    parameters: import_v35.z.object({}).partial().passthrough().optional(),
    strict: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]).optional()
  })
});
var User = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  given_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  family_name: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  email: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  avatar_url: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});
var ViewDataSearch = import_v35.z.union([
  import_v35.z.object({
    filter: import_v35.z.union([import_v35.z.array(import_v35.z.unknown()), import_v35.z.null()]),
    tag: import_v35.z.union([import_v35.z.array(import_v35.z.unknown()), import_v35.z.null()]),
    match: import_v35.z.union([import_v35.z.array(import_v35.z.unknown()), import_v35.z.null()]),
    sort: import_v35.z.union([import_v35.z.array(import_v35.z.unknown()), import_v35.z.null()])
  }).partial(),
  import_v35.z.null()
]);
var ViewData = import_v35.z.union([
  import_v35.z.object({ search: ViewDataSearch }).partial(),
  import_v35.z.null()
]);
var ViewOptions = import_v35.z.union([
  import_v35.z.object({
    viewType: import_v35.z.literal("monitor"),
    options: import_v35.z.object({
      spanType: import_v35.z.union([import_v35.z.enum(["range", "frame"]), import_v35.z.null()]),
      rangeValue: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      frameStart: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      frameEnd: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      tzUTC: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]),
      chartVisibility: import_v35.z.union([import_v35.z.record(import_v35.z.boolean()), import_v35.z.null()]),
      projectId: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
      type: import_v35.z.union([import_v35.z.enum(["project", "experiment"]), import_v35.z.null()]),
      groupBy: import_v35.z.union([import_v35.z.string(), import_v35.z.null()])
    }).partial()
  }),
  import_v35.z.object({
    columnVisibility: import_v35.z.union([import_v35.z.record(import_v35.z.boolean()), import_v35.z.null()]),
    columnOrder: import_v35.z.union([import_v35.z.array(import_v35.z.string()), import_v35.z.null()]),
    columnSizing: import_v35.z.union([import_v35.z.record(import_v35.z.number()), import_v35.z.null()]),
    grouping: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    rowHeight: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    tallGroupRows: import_v35.z.union([import_v35.z.boolean(), import_v35.z.null()]),
    layout: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    chartHeight: import_v35.z.union([import_v35.z.number(), import_v35.z.null()]),
    excludedMeasures: import_v35.z.union([
      import_v35.z.array(
        import_v35.z.object({
          type: import_v35.z.enum(["none", "score", "metric", "metadata"]),
          value: import_v35.z.string()
        })
      ),
      import_v35.z.null()
    ]),
    yMetric: import_v35.z.union([
      import_v35.z.object({
        type: import_v35.z.enum(["none", "score", "metric", "metadata"]),
        value: import_v35.z.string()
      }),
      import_v35.z.null()
    ]),
    xAxis: import_v35.z.union([
      import_v35.z.object({
        type: import_v35.z.enum(["none", "score", "metric", "metadata"]),
        value: import_v35.z.string()
      }),
      import_v35.z.null()
    ]),
    symbolGrouping: import_v35.z.union([
      import_v35.z.object({
        type: import_v35.z.enum(["none", "score", "metric", "metadata"]),
        value: import_v35.z.string()
      }),
      import_v35.z.null()
    ]),
    xAxisAggregation: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]),
    chartAnnotations: import_v35.z.union([
      import_v35.z.array(import_v35.z.object({ id: import_v35.z.string(), text: import_v35.z.string() })),
      import_v35.z.null()
    ]),
    timeRangeFilter: import_v35.z.union([
      import_v35.z.string(),
      import_v35.z.object({ from: import_v35.z.string(), to: import_v35.z.string() }),
      import_v35.z.null()
    ])
  }).partial(),
  import_v35.z.null()
]);
var View = import_v35.z.object({
  id: import_v35.z.string().uuid(),
  object_type: AclObjectType.and(import_v35.z.string()),
  object_id: import_v35.z.string().uuid(),
  view_type: import_v35.z.enum([
    "projects",
    "experiments",
    "experiment",
    "playgrounds",
    "playground",
    "datasets",
    "dataset",
    "prompts",
    "tools",
    "scorers",
    "logs",
    "agents",
    "monitor"
  ]),
  name: import_v35.z.string(),
  created: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  view_data: ViewData.optional(),
  options: ViewOptions.optional(),
  user_id: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional(),
  deleted_at: import_v35.z.union([import_v35.z.string(), import_v35.z.null()]).optional()
});

// src/logger.ts
var import_functions = require("@vercel/functions");
var import_mustache2 = __toESM(require("mustache"));
var import_zod = require("zod");

// src/functions/stream.ts
var import_eventsource_parser = require("eventsource-parser");
var import_v36 = require("zod/v3");
var braintrustStreamChunkSchema = import_v36.z.union([
  import_v36.z.object({
    type: import_v36.z.literal("text_delta"),
    data: import_v36.z.string()
  }),
  import_v36.z.object({
    type: import_v36.z.literal("reasoning_delta"),
    data: import_v36.z.string()
  }),
  import_v36.z.object({
    type: import_v36.z.literal("json_delta"),
    data: import_v36.z.string()
  }),
  import_v36.z.object({
    type: import_v36.z.literal("error"),
    data: import_v36.z.string()
  }),
  import_v36.z.object({
    type: import_v36.z.literal("console"),
    data: SSEConsoleEventData
  }),
  import_v36.z.object({
    type: import_v36.z.literal("progress"),
    data: SSEProgressEventData
  }),
  import_v36.z.object({
    type: import_v36.z.literal("start"),
    data: import_v36.z.string()
  }),
  import_v36.z.object({
    type: import_v36.z.literal("done"),
    data: import_v36.z.string()
  })
]);
var BraintrustStream = class _BraintrustStream {
  stream;
  memoizedFinalValue;
  signal;
  constructor(baseStream, { signal } = {}) {
    this.signal = signal;
    this.stream = baseStream.pipeThrough(btStreamParser(), { signal });
  }
  /**
   * Copy the stream. This returns a new stream that shares the same underlying
   * stream (via `tee`). Since streams are consumed in Javascript, use `copy()` if you
   * need to use the stream multiple times.
   *
   * @returns A new stream that you can independently consume.
   */
  copy() {
    const [newStream, copyStream] = this.stream.tee();
    this.stream = copyStream;
    return new _BraintrustStream(newStream, { signal: this.signal });
  }
  /**
   * Get the underlying ReadableStream.
   *
   * @returns The underlying ReadableStream<BraintrustStreamChunk>.
   */
  toReadableStream() {
    return this.stream;
  }
  /**
   * Returns an async iterator for the BraintrustStream.
   * This allows for easy consumption of the stream using a for-await...of loop.
   *
   * @returns An async iterator that yields BraintrustStreamChunk objects.
   */
  [Symbol.asyncIterator]() {
    const reader = this.stream.getReader();
    return {
      async next() {
        const { done, value } = await reader.read();
        if (done) {
          reader.releaseLock();
          return { done: true, value: void 0 };
        }
        return { done: false, value };
      },
      async return() {
        reader.releaseLock();
        return { done: true, value: void 0 };
      },
      async throw(error2) {
        reader.releaseLock();
        throw error2;
      }
    };
  }
  /**
   * Get the final value of the stream. The final value is the concatenation of all
   * the chunks in the stream, deserialized into a string or JSON object, depending on
   * the value's type.
   *
   * This function returns a promise that resolves when the stream is closed, and
   * contains the final value. Multiple calls to `finalValue()` will return the same
   * promise, so it is safe to call this multiple times.
   *
   * This function consumes the stream, so if you need to use the stream multiple
   * times, you should call `copy()` first.
   *
   * @returns A promise that resolves with the final value of the stream or `undefined` if the stream is empty.
   */
  finalValue() {
    if (this.memoizedFinalValue) {
      return this.memoizedFinalValue;
    }
    this.memoizedFinalValue = new Promise((resolve2, reject2) => {
      this.stream.pipeThrough(createFinalValuePassThroughStream(resolve2, reject2), {
        signal: this.signal
      }).pipeTo(devNullWritableStream(), { signal: this.signal }).catch(reject2);
    });
    return this.memoizedFinalValue;
  }
  static parseRawEvent(event) {
    switch (event.event) {
      case "text_delta":
        return {
          type: "text_delta",
          data: JSON.parse(event.data)
        };
      case "reasoning_delta":
        return {
          type: "reasoning_delta",
          data: JSON.parse(event.data)
        };
      case "json_delta":
        return {
          type: "json_delta",
          data: event.data
        };
      case "error":
        return {
          type: "error",
          data: JSON.parse(event.data)
        };
      case "progress":
        return {
          type: "progress",
          data: SSEProgressEventData.parse(JSON.parse(event.data))
        };
      case "console":
        return {
          type: "console",
          data: SSEConsoleEventData.parse(JSON.parse(event.data))
        };
      case "start":
        return {
          type: "start",
          data: ""
        };
      case "done":
        return {
          type: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
  static serializeRawEvent(event) {
    switch (event.type) {
      case "text_delta":
        return {
          event: "text_delta",
          data: JSON.stringify(event.data)
        };
      case "reasoning_delta":
        return {
          event: "reasoning_delta",
          data: JSON.stringify(event.data)
        };
      case "json_delta":
        return {
          event: "json_delta",
          data: event.data
        };
      case "error":
        return {
          event: "error",
          data: JSON.stringify(event.data)
        };
      case "progress":
        return {
          event: "progress",
          data: JSON.stringify(event.data)
        };
      case "console":
        return {
          event: "console",
          data: JSON.stringify(event.data)
        };
      case "start":
        return {
          event: "start",
          data: ""
        };
      case "done":
        return {
          event: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
};
function btStreamParser() {
  const decoder = new TextDecoder();
  let parser;
  return new TransformStream({
    async start(controller) {
      parser = (0, import_eventsource_parser.createParser)((event) => {
        if (event.type === "reconnect-interval") {
          return;
        }
        const parsed = CallEvent.safeParse(event);
        if (!parsed.success) {
          throw new Error(`Failed to parse event: ${parsed.error}`);
        }
        controller.enqueue(BraintrustStream.parseRawEvent(parsed.data));
      });
    },
    async transform(chunk, controller) {
      if (chunk instanceof Uint8Array) {
        parser.feed(decoder.decode(chunk));
      } else if (typeof chunk === "string") {
        parser.feed(chunk);
      } else {
        controller.enqueue(chunk);
      }
    },
    async flush(controller) {
      controller.terminate();
    }
  });
}
function createFinalValuePassThroughStream(onFinal, onError) {
  const decoder = new TextDecoder();
  const textChunks = [];
  const jsonChunks = [];
  const reasoningChunks = [];
  const transformStream = new TransformStream({
    transform(chunk, controller) {
      if (typeof chunk === "string") {
        textChunks.push(chunk);
        controller.enqueue({
          type: "text_delta",
          data: chunk
        });
      } else if (chunk instanceof Uint8Array) {
        textChunks.push(decoder.decode(chunk));
        controller.enqueue({
          type: "text_delta",
          data: decoder.decode(chunk)
        });
      } else if (braintrustStreamChunkSchema.safeParse(chunk).success) {
        const chunkType = chunk.type;
        switch (chunkType) {
          case "text_delta":
            textChunks.push(chunk.data);
            break;
          case "json_delta":
            jsonChunks.push(chunk.data);
            break;
          case "reasoning_delta":
            reasoningChunks.push(chunk.data);
            break;
          case "error":
            onError(chunk.data);
            break;
          case "progress":
          case "start":
          case "done":
          case "console":
            break;
          default:
            const _type = chunkType;
            onError(`Unknown chunk type: ${_type}`);
        }
        controller.enqueue(chunk);
      } else {
        onError(`Unknown chunk type ${JSON.stringify(chunk)}`);
      }
    },
    flush(controller) {
      if (jsonChunks.length > 0) {
        onFinal(JSON.parse(jsonChunks.join("")));
      } else if (textChunks.length > 0) {
        onFinal(textChunks.join(""));
      } else if (reasoningChunks.length > 0) {
        onFinal(reasoningChunks.join(""));
      } else {
        onFinal(void 0);
      }
      controller.terminate();
    }
  });
  return transformStream;
}
function devNullWritableStream() {
  return new WritableStream({
    write(chunk) {
    },
    close() {
    },
    abort(reason) {
    },
    start(controller) {
    }
  });
}

// src/isomorph.ts
var DefaultAsyncLocalStorage = class {
  constructor() {
  }
  enterWith(_) {
  }
  run(_, callback) {
    return callback();
  }
  getStore() {
    return void 0;
  }
};
var iso = {
  getRepoInfo: async (_settings) => void 0,
  getPastNAncestors: async () => [],
  getEnv: (_name) => void 0,
  getCallerLocation: () => void 0,
  newAsyncLocalStorage: () => new DefaultAsyncLocalStorage(),
  processOn: (_0, _1) => {
  }
};
var isomorph_default = iso;

// src/prompt-cache/disk-cache.ts
function canUseDiskCache() {
  return !!(isomorph_default.hash && isomorph_default.gunzip && isomorph_default.gzip && isomorph_default.stat && isomorph_default.readFile && isomorph_default.writeFile && isomorph_default.utimes && isomorph_default.readdir && isomorph_default.mkdir && isomorph_default.unlink && isomorph_default.homedir);
}
var DiskCache = class {
  dir;
  max;
  mkdir;
  logWarnings;
  /**
   * Creates a new DiskCache instance.
   * @param options - Configuration options for the cache.
   */
  constructor(options) {
    if (!canUseDiskCache()) {
      throw new Error("Disk cache is not supported on this platform");
    }
    this.dir = options.cacheDir;
    this.max = options.max;
    this.logWarnings = options.logWarnings ?? true;
    this.mkdir = options.mkdir ?? true;
  }
  getEntryPath(key) {
    const hashed = isomorph_default.hash(key);
    return isomorph_default.pathJoin(this.dir, hashed);
  }
  /**
   * Retrieves a value from the cache.
   * Updates the entry's access time when read.
   *
   * @param key - The key to look up in the cache.
   * @returns The cached value if found, undefined otherwise.
   */
  async get(key) {
    try {
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gunzip(await isomorph_default.readFile(filePath));
      await isomorph_default.utimes(filePath, /* @__PURE__ */ new Date(), /* @__PURE__ */ new Date());
      return JSON.parse(data.toString());
    } catch (e) {
      if (e.code === "ENOENT") {
        return void 0;
      }
      if (this.logWarnings) {
        console.warn("Failed to read from disk cache", e);
      }
      return void 0;
    }
  }
  /**
   * Stores a value in the cache.
   * If the cache is at its maximum size, the least recently used entries will be evicted.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   */
  async set(key, value) {
    try {
      if (this.mkdir) {
        await isomorph_default.mkdir(this.dir, { recursive: true });
      }
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gzip(JSON.stringify(value));
      await isomorph_default.writeFile(filePath, data);
      await this.evictOldestIfFull();
    } catch (e) {
      if (this.logWarnings) {
        console.warn("Failed to write to disk cache", e);
      }
      return;
    }
  }
  async evictOldestIfFull() {
    if (!this.max) {
      return;
    }
    const files = await isomorph_default.readdir(this.dir);
    const paths = files.map((file) => isomorph_default.pathJoin(this.dir, file));
    if (paths.length <= this.max) {
      return;
    }
    const stats = await Promise.all(
      paths.map(async (path9) => {
        const stat2 = await isomorph_default.stat(path9);
        return {
          path: path9,
          mtime: stat2.mtime.getTime()
        };
      })
    );
    stats.sort((a, b) => a.mtime - b.mtime);
    const toRemove = stats.slice(0, stats.length - this.max);
    await Promise.all(toRemove.map((stat2) => isomorph_default.unlink(stat2.path)));
  }
};

// src/prompt-cache/lru-cache.ts
var LRUCache = class {
  cache;
  maxSize;
  constructor(options = {}) {
    this.cache = /* @__PURE__ */ new Map();
    this.maxSize = options.max;
  }
  /**
   * Retrieves a value from the cache.
   * If the key exists, the item is marked as most recently used.
   *
   * @param key - The key to look up.
   * @returns The cached value if found, undefined otherwise.
   */
  get(key) {
    const value = this.cache.get(key);
    if (value === void 0) {
      return void 0;
    }
    this.cache.delete(key);
    this.cache.set(key, value);
    return value;
  }
  /**
   * Stores a value in the cache.
   * If the key already exists, the value is updated and marked as most recently used.
   * If the cache is at its maximum size, the least recently used item is evicted.
   *
   * @param key - The key to store.
   * @param value - The value to store.
   */
  set(key, value) {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.maxSize && this.cache.size >= this.maxSize) {
      const first = this.cache.keys().next().value;
      this.cache.delete(first);
    }
    this.cache.set(key, value);
  }
  /**
   * Removes all items from the cache.
   */
  clear() {
    this.cache.clear();
  }
};

// src/prompt-cache/prompt-cache.ts
function createCacheKey(key) {
  if (key.id) {
    return `id:${key.id}`;
  }
  const prefix = key.projectId ?? key.projectName;
  if (!prefix) {
    throw new Error("Either projectId or projectName must be provided");
  }
  if (!key.slug) {
    throw new Error("Slug must be provided when not using ID");
  }
  return `${prefix}:${key.slug}:${key.version ?? "latest"}`;
}
var PromptCache = class {
  memoryCache;
  diskCache;
  constructor(options) {
    this.memoryCache = options.memoryCache;
    this.diskCache = options.diskCache;
  }
  /**
   * Retrieves a prompt from the cache.
   * First checks the in-memory LRU cache, then falls back to checking the disk cache if available.
   */
  async get(key) {
    const cacheKey = createCacheKey(key);
    const memoryPrompt = this.memoryCache.get(cacheKey);
    if (memoryPrompt !== void 0) {
      return memoryPrompt;
    }
    if (this.diskCache) {
      const diskPrompt = await this.diskCache.get(cacheKey);
      if (!diskPrompt) {
        return void 0;
      }
      this.memoryCache.set(cacheKey, diskPrompt);
      return diskPrompt;
    }
    return void 0;
  }
  /**
   * Stores a prompt in the cache.
   * Writes to the in-memory cache and the disk cache if available.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   * @throws If there is an error writing to the disk cache.
   */
  async set(key, value) {
    const cacheKey = createCacheKey(key);
    this.memoryCache.set(cacheKey, value);
    if (this.diskCache) {
      await this.diskCache.set(cacheKey, value);
    }
  }
};

// src/util.ts
var GLOBAL_PROJECT = "Global";
function runCatchFinally(f, catchF, finallyF) {
  let runSyncCleanup = true;
  try {
    const ret = f();
    if (ret instanceof Promise) {
      runSyncCleanup = false;
      return ret.catch(catchF).finally(finallyF);
    } else {
      return ret;
    }
  } catch (e) {
    return catchF(e);
  } finally {
    if (runSyncCleanup) {
      finallyF();
    }
  }
}
function getCurrentUnixTimestamp() {
  return (/* @__PURE__ */ new Date()).getTime() / 1e3;
}
function isEmpty2(a) {
  return a === void 0 || a === null;
}
var LazyValue = class {
  callable;
  resolvedValue = void 0;
  value = {
    computedState: "uninitialized"
  };
  constructor(callable) {
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    this.value = {
      computedState: "in_progress",
      val: this.callable().then((x) => {
        this.value.computedState = "succeeded";
        this.resolvedValue = x;
        return x;
      })
    };
    return this.value.val;
  }
  getSync() {
    return {
      resolved: this.value.computedState === "succeeded",
      value: this.resolvedValue
    };
  }
  // If this is true, the caller should be able to obtain the LazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
};
var SyncLazyValue = class {
  callable;
  value = {
    computedState: "uninitialized"
  };
  constructor(callable) {
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    const result = this.callable();
    this.value = { computedState: "succeeded", val: result };
    return result;
  }
  // If this is true, the caller should be able to obtain the SyncLazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
};
function addAzureBlobHeaders(headers, url) {
  if (url.includes("blob.core.windows.net")) {
    headers["x-ms-blob-type"] = "BlockBlob";
  }
}
var InternalAbortError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "InternalAbortError";
  }
};

// src/mustache-utils.ts
var import_mustache = __toESM(require("mustache"));
function lintTemplate(template, context2) {
  const variables = getMustacheVars(template);
  for (const variable of variables) {
    const arrPathsReplaced = variable[1].replaceAll(/\.\d+/g, ".0");
    const fieldExists = getObjValueByPath(context2, arrPathsReplaced.split(".")) !== void 0;
    if (!fieldExists) {
      throw new Error(`Variable '${variable[1]}' does not exist.`);
    }
  }
}
function getMustacheVars(prompt) {
  try {
    return import_mustache.default.parse(prompt).filter(
      (span) => span[0] === "name" || span[0] === "&"
    );
  } catch {
    return [];
  }
}

// src/logger.ts
var BRAINTRUST_ATTACHMENT = BraintrustAttachmentReference.shape.type.value;
var EXTERNAL_ATTACHMENT = ExternalAttachmentReference.shape.type.value;
var BRAINTRUST_PARAMS = Object.keys(BraintrustModelParams.shape);
var REDACTION_FIELDS = [
  "input",
  "output",
  "expected",
  "metadata",
  "context",
  "scores",
  "metrics"
];
var MaskingError = class {
  constructor(fieldName, errorType) {
    this.fieldName = fieldName;
    this.errorType = errorType;
  }
  get errorMsg() {
    return `ERROR: Failed to mask field '${this.fieldName}' - ${this.errorType}`;
  }
};
function applyMaskingToField(maskingFunction, data, fieldName) {
  try {
    return maskingFunction(data);
  } catch (error2) {
    const errorType = error2 instanceof Error ? error2.constructor.name : "Error";
    if (fieldName === "scores" || fieldName === "metrics") {
      return new MaskingError(fieldName, errorType);
    }
    if (fieldName === "metadata") {
      return {
        error: `ERROR: Failed to mask field '${fieldName}' - ${errorType}`
      };
    }
    return `ERROR: Failed to mask field '${fieldName}' - ${errorType}`;
  }
}
var NoopSpan = class {
  id;
  spanId;
  rootSpanId;
  spanParents;
  kind = "span";
  constructor() {
    this.id = "";
    this.spanId = "";
    this.rootSpanId = "";
    this.spanParents = [];
  }
  log(_) {
  }
  logFeedback(_event) {
  }
  traced(callback, _1) {
    return callback(this);
  }
  startSpan(_1) {
    return this;
  }
  end(args) {
    return args?.endTime ?? getCurrentUnixTimestamp();
  }
  async export() {
    return "";
  }
  async permalink() {
    return NOOP_SPAN_PERMALINK;
  }
  link() {
    return NOOP_SPAN_PERMALINK;
  }
  async flush() {
  }
  close(args) {
    return this.end(args);
  }
  setAttributes(_args) {
  }
  startSpanWithParents(_spanId, _spanParents, _args) {
    return this;
  }
  state() {
    return _internalGetGlobalState();
  }
};
var NOOP_SPAN = new NoopSpan();
var NOOP_SPAN_PERMALINK = "https://braintrust.dev/noop-span";
var loginSchema = import_zod.z.strictObject({
  appUrl: import_zod.z.string(),
  appPublicUrl: import_zod.z.string(),
  orgName: import_zod.z.string(),
  apiUrl: import_zod.z.string(),
  proxyUrl: import_zod.z.string(),
  loginToken: import_zod.z.string(),
  orgId: import_zod.z.string().nullish(),
  gitMetadataSettings: GitMetadataSettings.nullish()
});
var stateNonce = 0;
var BraintrustState = class _BraintrustState {
  constructor(loginParams) {
    this.loginParams = loginParams;
    this.id = `${(/* @__PURE__ */ new Date()).toLocaleString()}-${stateNonce++}`;
    this.currentExperiment = void 0;
    this.currentLogger = void 0;
    this.currentParent = isomorph_default.newAsyncLocalStorage();
    this.currentSpan = isomorph_default.newAsyncLocalStorage();
    if (loginParams.fetch) {
      this.fetch = loginParams.fetch;
    }
    const defaultGetLogConn = async () => {
      await this.login({});
      return this.apiConn();
    };
    this._bgLogger = new SyncLazyValue(
      () => new HTTPBackgroundLogger(new LazyValue(defaultGetLogConn), loginParams)
    );
    this.resetLoginInfo();
    const memoryCache = new LRUCache({
      max: Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_MEMORY_MAX")) ?? 1 << 10
    });
    const diskCache = canUseDiskCache() ? new DiskCache({
      cacheDir: isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DIR") ?? `${isomorph_default.getEnv("HOME") ?? isomorph_default.homedir()}/.braintrust/prompt_cache`,
      max: Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DISK_MAX")) ?? 1 << 20
    }) : void 0;
    this.promptCache = new PromptCache({ memoryCache, diskCache });
  }
  id;
  currentExperiment;
  // Note: the value of IsAsyncFlush doesn't really matter here, since we
  // (safely) dynamically cast it whenever retrieving the logger.
  currentLogger;
  currentParent;
  currentSpan;
  // Any time we re-log in, we directly update the apiConn inside the logger.
  // This is preferable to replacing the whole logger, which would create the
  // possibility of multiple loggers floating around, which may not log in a
  // deterministic order.
  _bgLogger;
  _overrideBgLogger = null;
  appUrl = null;
  appPublicUrl = null;
  loginToken = null;
  orgId = null;
  orgName = null;
  apiUrl = null;
  proxyUrl = null;
  loggedIn = false;
  gitMetadataSettings;
  fetch = globalThis.fetch;
  _appConn = null;
  _apiConn = null;
  _proxyConn = null;
  promptCache;
  resetLoginInfo() {
    this.appUrl = null;
    this.appPublicUrl = null;
    this.loginToken = null;
    this.orgId = null;
    this.orgName = null;
    this.apiUrl = null;
    this.proxyUrl = null;
    this.loggedIn = false;
    this.gitMetadataSettings = void 0;
    this._appConn = null;
    this._apiConn = null;
    this._proxyConn = null;
  }
  copyLoginInfo(other) {
    this.appUrl = other.appUrl;
    this.appPublicUrl = other.appPublicUrl;
    this.loginToken = other.loginToken;
    this.orgId = other.orgId;
    this.orgName = other.orgName;
    this.apiUrl = other.apiUrl;
    this.proxyUrl = other.proxyUrl;
    this.loggedIn = other.loggedIn;
    this.gitMetadataSettings = other.gitMetadataSettings;
    this._appConn = other._appConn;
    this._apiConn = other._apiConn;
    this.loginReplaceApiConn(this.apiConn());
    this._proxyConn = other._proxyConn;
  }
  serialize() {
    if (!this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without being logged in"
      );
    }
    if (!this.appUrl || !this.appPublicUrl || !this.apiUrl || !this.proxyUrl || !this.orgName || !this.loginToken || !this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without all login attributes"
      );
    }
    return {
      appUrl: this.appUrl,
      appPublicUrl: this.appPublicUrl,
      loginToken: this.loginToken,
      orgId: this.orgId,
      orgName: this.orgName,
      apiUrl: this.apiUrl,
      proxyUrl: this.proxyUrl,
      gitMetadataSettings: this.gitMetadataSettings
    };
  }
  static deserialize(serialized, opts) {
    const serializedParsed = loginSchema.safeParse(serialized);
    if (!serializedParsed.success) {
      throw new Error(
        `Cannot deserialize BraintrustState: ${serializedParsed.error.message}`
      );
    }
    const state = new _BraintrustState({ ...opts });
    for (const key of Object.keys(loginSchema.shape)) {
      state[key] = serializedParsed.data[key];
    }
    if (!state.loginToken) {
      throw new Error(
        "Cannot deserialize BraintrustState without a login token"
      );
    }
    state.apiConn().set_token(state.loginToken);
    state.apiConn().make_long_lived();
    state.appConn().set_token(state.loginToken);
    if (state.proxyUrl) {
      state.proxyConn().make_long_lived();
      state.proxyConn().set_token(state.loginToken);
    }
    state.loggedIn = true;
    state.loginReplaceApiConn(state.apiConn());
    return state;
  }
  setFetch(fetch2) {
    this.loginParams.fetch = fetch2;
    this.fetch = fetch2;
    this._apiConn?.setFetch(fetch2);
    this._appConn?.setFetch(fetch2);
  }
  setMaskingFunction(maskingFunction) {
    this.bgLogger().setMaskingFunction(maskingFunction);
  }
  async login(loginParams) {
    if (this.apiUrl && !loginParams.forceLogin) {
      return;
    }
    const newState = await loginToState({
      ...this.loginParams,
      ...Object.fromEntries(
        Object.entries(loginParams).filter(([k, v]) => !isEmpty2(v))
      )
    });
    this.copyLoginInfo(newState);
  }
  appConn() {
    if (!this._appConn) {
      if (!this.appUrl) {
        throw new Error("Must initialize appUrl before requesting appConn");
      }
      this._appConn = new HTTPConnection(this.appUrl, this.fetch);
    }
    return this._appConn;
  }
  apiConn() {
    if (!this._apiConn) {
      if (!this.apiUrl) {
        throw new Error("Must initialize apiUrl before requesting apiConn");
      }
      this._apiConn = new HTTPConnection(this.apiUrl, this.fetch);
    }
    return this._apiConn;
  }
  proxyConn() {
    if (!this.proxyUrl) {
      return this.apiConn();
    }
    if (!this._proxyConn) {
      if (!this.proxyUrl) {
        throw new Error("Must initialize proxyUrl before requesting proxyConn");
      }
      this._proxyConn = new HTTPConnection(this.proxyUrl, this.fetch);
    }
    return this._proxyConn;
  }
  bgLogger() {
    if (this._overrideBgLogger) {
      return this._overrideBgLogger;
    }
    return this._bgLogger.get();
  }
  httpLogger() {
    return this._bgLogger.get();
  }
  setOverrideBgLogger(logger) {
    this._overrideBgLogger = logger;
  }
  // Should only be called by the login function.
  loginReplaceApiConn(apiConn) {
    this._bgLogger.get().internalReplaceApiConn(apiConn);
  }
  disable() {
    this._bgLogger.get().disable();
  }
  enforceQueueSizeLimit(enforce) {
    this._bgLogger.get().enforceQueueSizeLimit(enforce);
  }
};
var _globalState;
function _internalSetInitialState() {
  if (_globalState) {
    console.warn(
      "global state already set, should only call _internalSetInitialState once"
    );
    return;
  }
  _globalState = globalThis.__inherited_braintrust_state || new BraintrustState({
    /*empty login options*/
  });
}
var _internalGetGlobalState = () => _globalState;
var FailedHTTPResponse = class extends Error {
  status;
  text;
  data;
  constructor(status, text, data) {
    super(`${status}: ${text} (${data})`);
    this.status = status;
    this.text = text;
    this.data = data;
  }
};
async function checkResponse(resp) {
  if (resp.ok) {
    return resp;
  } else {
    throw new FailedHTTPResponse(
      resp.status,
      resp.statusText,
      await resp.text()
    );
  }
}
var HTTPConnection = class _HTTPConnection {
  base_url;
  token;
  headers;
  fetch;
  constructor(base_url, fetch2) {
    this.base_url = base_url;
    this.token = null;
    this.headers = {};
    this._reset();
    this.fetch = fetch2;
  }
  setFetch(fetch2) {
    this.fetch = fetch2;
  }
  async ping() {
    try {
      const resp = await this.get("ping");
      return resp.status === 200;
    } catch (e) {
      return false;
    }
  }
  make_long_lived() {
    this._reset();
  }
  static sanitize_token(token) {
    return token.trim();
  }
  set_token(token) {
    token = _HTTPConnection.sanitize_token(token);
    this.token = token;
    this._reset();
  }
  // As far as I can tell, you cannot set the retry/backoff factor here
  _reset() {
    this.headers = {};
    if (this.token) {
      this.headers["Authorization"] = `Bearer ${this.token}`;
    }
  }
  async get(path9, params = void 0, config3) {
    const { headers, ...rest } = config3 || {};
    const url = new URL(_urljoin(this.base_url, path9));
    url.search = new URLSearchParams(
      params ? Object.entries(params).filter(([_, v]) => v !== void 0).flatMap(
        ([k, v]) => v !== void 0 ? typeof v === "string" ? [[k, v]] : v.map((x) => [k, x]) : []
      ) : []
    ).toString();
    const this_fetch = this.fetch;
    const this_headers = this.headers;
    return await checkResponse(
      // Using toString() here makes it work with isomorphic fetch
      await this_fetch(url.toString(), {
        headers: {
          Accept: "application/json",
          ...this_headers,
          ...headers
        },
        keepalive: true,
        ...rest
      })
    );
  }
  async post(path9, params, config3) {
    const { headers, ...rest } = config3 || {};
    const this_fetch = this.fetch;
    const this_base_url = this.base_url;
    const this_headers = this.headers;
    return await checkResponse(
      await this_fetch(_urljoin(this_base_url, path9), {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          ...this_headers,
          ...headers
        },
        body: typeof params === "string" ? params : params ? JSON.stringify(params) : void 0,
        keepalive: true,
        ...rest
      })
    );
  }
  async get_json(object_type, args = void 0, retries = 0) {
    const tries = retries + 1;
    for (let i = 0; i < tries; i++) {
      try {
        const resp = await this.get(`${object_type}`, args);
        return await resp.json();
      } catch (e) {
        if (i < tries - 1) {
          console.log(
            `Retrying API request ${object_type} ${JSON.stringify(args)} ${e.status} ${e.text}`
          );
          continue;
        }
        throw e;
      }
    }
  }
  async post_json(object_type, args = void 0) {
    const resp = await this.post(`${object_type}`, args, {
      headers: { "Content-Type": "application/json" }
    });
    return await resp.json();
  }
};
var BaseAttachment = class {
  reference;
};
var Attachment = class extends BaseAttachment {
  /**
   * The object that replaces this `Attachment` at upload time.
   */
  reference;
  uploader;
  _data;
  state;
  // For debug logging only.
  dataDebugString;
  /**
   * Construct an attachment.
   *
   * @param param A parameter object with:
   *
   * `data`: A string representing the path of the file on disk, or a
   * `Blob`/`ArrayBuffer` with the file's contents. The caller is responsible
   * for ensuring the file/blob/buffer is not modified until upload is complete.
   *
   * `filename`: The desired name of the file in Braintrust after uploading.
   * This parameter is for visualization purposes only and has no effect on
   * attachment storage.
   *
   * `contentType`: The MIME type of the file.
   *
   * `state`: (Optional) For internal use.
   */
  constructor({ data, filename, contentType, state }) {
    super();
    this.reference = {
      type: BRAINTRUST_ATTACHMENT,
      filename,
      content_type: contentType,
      key: newId()
    };
    this.state = state;
    this.dataDebugString = typeof data === "string" ? data : "<in-memory data>";
    this._data = this.initData(data);
    this.uploader = this.initUploader();
  }
  /**
   * On first access, (1) reads the attachment from disk if needed, (2)
   * authenticates with the data plane to request a signed URL, (3) uploads to
   * object store, and (4) updates the attachment.
   *
   * @returns The attachment status.
   */
  async upload() {
    return await this.uploader.get();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment contents from disk or memory on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * A human-readable description for logging and debugging.
   *
   * @returns The debug object. The return type is not stable and may change in
   * a future release.
   */
  debugInfo() {
    return {
      inputData: this.dataDebugString,
      reference: this.reference,
      state: this.state
    };
  }
  initUploader() {
    const doUpload = async (conn, orgId) => {
      const requestParams = {
        key: this.reference.key,
        filename: this.reference.filename,
        content_type: this.reference.content_type,
        org_id: orgId
      };
      const [metadataPromiseResult, dataPromiseResult] = await Promise.allSettled([
        conn.post("/attachment", requestParams),
        this._data.get()
      ]);
      if (metadataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(metadataPromiseResult.reason);
        throw new Error(
          `Failed to request signed URL from API server: ${errorStr}`
        );
      }
      if (dataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(dataPromiseResult.reason);
        throw new Error(`Failed to read file: ${errorStr}`);
      }
      const metadataResponse = metadataPromiseResult.value;
      const data = dataPromiseResult.value;
      let signedUrl;
      let headers;
      try {
        ({ signedUrl, headers } = import_zod.z.object({
          signedUrl: import_zod.z.string().url(),
          headers: import_zod.z.record(import_zod.z.string())
        }).parse(await metadataResponse.json()));
      } catch (error2) {
        if (error2 instanceof import_zod.ZodError) {
          const errorStr = JSON.stringify(error2.flatten());
          throw new Error(`Invalid response from API server: ${errorStr}`);
        }
        throw error2;
      }
      addAzureBlobHeaders(headers, signedUrl);
      let objectStoreResponse;
      try {
        objectStoreResponse = await checkResponse(
          await fetch(signedUrl, {
            method: "PUT",
            headers,
            body: data
          })
        );
      } catch (error2) {
        if (error2 instanceof FailedHTTPResponse) {
          throw new Error(
            `Failed to upload attachment to object store: ${error2.status} ${error2.text} ${error2.data}`
          );
        }
        throw error2;
      }
      return { signedUrl, metadataResponse, objectStoreResponse };
    };
    const errorWrapper = async () => {
      const status = { upload_status: "done" };
      const state = this.state ?? _globalState;
      await state.login({});
      const conn = state.apiConn();
      const orgId = state.orgId ?? "";
      try {
        await doUpload(conn, orgId);
      } catch (error2) {
        status.upload_status = "error";
        status.error_message = error2 instanceof Error ? error2.message : JSON.stringify(error2);
      }
      const requestParams = {
        key: this.reference.key,
        org_id: orgId,
        status
      };
      const statusResponse = await conn.post(
        "/attachment/status",
        requestParams
      );
      if (!statusResponse.ok) {
        const errorStr = JSON.stringify(statusResponse);
        throw new Error(`Couldn't log attachment status: ${errorStr}`);
      }
      return status;
    };
    return new LazyValue(errorWrapper);
  }
  initData(data) {
    if (typeof data === "string") {
      this.ensureFileReadable(data);
      const readFile3 = isomorph_default.readFile;
      if (!readFile3) {
        throw new Error(
          `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
        );
      }
      return new LazyValue(async () => new Blob([await readFile3(data)]));
    } else {
      return new LazyValue(async () => new Blob([data]));
    }
  }
  ensureFileReadable(data) {
    const statSync2 = isomorph_default.statSync;
    if (!statSync2) {
      throw new Error(
        `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
      );
    }
    try {
      statSync2(data);
    } catch (e) {
      console.warn(`Failed to read file: ${e}`);
    }
  }
};
var attachmentMetadataSchema = import_zod.z.object({
  downloadUrl: import_zod.z.string(),
  status: AttachmentStatus
});
var ReadonlyAttachment = class {
  /**
   * Attachment metadata.
   */
  reference;
  _data;
  state;
  /**
   * Construct a ReadonlyAttachment.
   *
   * @param reference The `AttachmentReference` that should be read by the
   * `ReadonlyAttachment` object.
   * @param state (Optional) For internal use.
   * @returns The new `ReadonlyAttachment` object.
   */
  constructor(reference, state) {
    this.reference = reference;
    this.state = state;
    this._data = this.initDownloader();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment
   * contents from the object store on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * Returns the attachment contents as a base64-encoded URL that is suitable
   * for use in a prompt.
   *
   * @returns The attachment contents as a base64-encoded URL.
   */
  async asBase64Url() {
    const buf = await (await this.data()).arrayBuffer();
    const base64 = Buffer.from(buf).toString("base64");
    return `data:${this.reference.content_type};base64,${base64}`;
  }
  /**
   * Fetch the attachment metadata, which includes a downloadUrl and a status.
   * This will re-fetch the status each time in case it changes over time.
   */
  async metadata() {
    const state = this.state ?? _globalState;
    await state.login({});
    const params = {
      filename: this.reference.filename,
      content_type: this.reference.content_type,
      org_id: state.orgId || ""
    };
    if (this.reference.type === "braintrust_attachment") {
      params.key = this.reference.key;
    } else if (this.reference.type === "external_attachment") {
      params.url = this.reference.url;
    }
    const resp = await state.apiConn().get("/attachment", params);
    if (!resp.ok) {
      const errorStr = JSON.stringify(resp);
      throw new Error(`Invalid response from API server: ${errorStr}`);
    }
    return attachmentMetadataSchema.parse(await resp.json());
  }
  /**
   * Fetch the attachment upload status. This will re-fetch the status each time
   * in case it changes over time.
   */
  async status() {
    return (await this.metadata()).status;
  }
  initDownloader() {
    const download = async () => {
      const { downloadUrl, status } = await this.metadata();
      if (status.upload_status !== "done") {
        throw new Error(
          `Expected attachment status "done", got "${status.upload_status}"`
        );
      }
      const objResponse = await fetch(downloadUrl);
      if (objResponse.status !== 200) {
        const error2 = await objResponse.text();
        throw new Error(`Couldn't download attachment: ${error2}`);
      }
      return await objResponse.blob();
    };
    return new LazyValue(download);
  }
};
function logFeedbackImpl(state, parentObjectType, parentObjectId, {
  id,
  expected,
  scores,
  metadata: inputMetadata,
  tags,
  comment,
  source: inputSource
}) {
  const source = inputSource ?? "external";
  if (!VALID_SOURCES.includes(source)) {
    throw new Error(`source must be one of ${VALID_SOURCES}`);
  }
  if (isEmpty2(scores) && isEmpty2(expected) && isEmpty2(tags) && isEmpty2(comment)) {
    throw new Error(
      "At least one of scores, expected, tags, or comment must be specified"
    );
  }
  const validatedEvent = validateAndSanitizeExperimentLogPartialArgs({
    scores,
    metadata: inputMetadata,
    expected,
    tags
  });
  let { metadata, ...updateEvent } = deepCopyEvent(validatedEvent);
  updateEvent = Object.fromEntries(
    Object.entries(updateEvent).filter(([_, v]) => !isEmpty2(v))
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  if (Object.keys(updateEvent).length > 0) {
    const record = new LazyValue(async () => {
      return {
        id,
        ...updateEvent,
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata,
        [IS_MERGE_FIELD]: true
      };
    });
    state.bgLogger().log([record]);
  }
  if (!isEmpty2(comment)) {
    const record = new LazyValue(async () => {
      return {
        id: (0, import_uuid.v4)(),
        created: (/* @__PURE__ */ new Date()).toISOString(),
        origin: {
          // NOTE: We do not know (or care?) what the transaction id of the row that
          // we're commenting on is here, so we omit it.
          id
        },
        comment: {
          text: comment
        },
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata
      };
    });
    state.bgLogger().log([record]);
  }
}
function updateSpanImpl({
  state,
  parentObjectType,
  parentObjectId,
  id,
  event
}) {
  const updateEvent = deepCopyEvent(
    validateAndSanitizeExperimentLogPartialArgs({
      id,
      ...event
    })
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  const record = new LazyValue(async () => ({
    id,
    ...updateEvent,
    ...await parentIds(),
    [IS_MERGE_FIELD]: true
  }));
  state.bgLogger().log([record]);
}
function spanComponentsToObjectIdLambda(state, components) {
  if (components.data.object_id) {
    const ret = components.data.object_id;
    return async () => ret;
  }
  if (!components.data.compute_object_metadata_args) {
    throw new Error(
      "Impossible: must provide either objectId or computeObjectMetadataArgs"
    );
  }
  switch (components.data.object_type) {
    case 1 /* EXPERIMENT */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for experiments"
      );
    case 3 /* PLAYGROUND_LOGS */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for prompt sessions"
      );
    case 2 /* PROJECT_LOGS */:
      return async () => (await computeLoggerMetadata(state, {
        ...components.data.compute_object_metadata_args
      })).project.id;
    default:
      const x = components.data.object_type;
      throw new Error(`Unknown object type: ${x}`);
  }
}
async function spanComponentsToObjectId({
  components,
  state
}) {
  return await spanComponentsToObjectIdLambda(
    state ?? _globalState,
    components
  )();
}
var ERR_PERMALINK = "https://braintrust.dev/error-generating-link";
function getErrPermlink(msg) {
  if (msg == "") {
    return ERR_PERMALINK;
  }
  return `${ERR_PERMALINK}?msg=${encodeURIComponent(msg)}`;
}
async function permalink(slug, opts) {
  if (slug === "") {
    return NOOP_SPAN_PERMALINK;
  }
  const state = opts?.state ?? _globalState;
  const getOrgName = async () => {
    if (opts?.orgName) {
      return opts.orgName;
    }
    await state.login({});
    if (!state.orgName) {
      throw new Error("provide-org-or-login");
    }
    return state.orgName;
  };
  const getAppUrl = async () => {
    if (opts?.appUrl) {
      return opts.appUrl;
    }
    await state.login({});
    if (!state.appUrl) {
      throw new Error("provide-app-url-or-login");
    }
    return state.appUrl;
  };
  try {
    const components = SpanComponentsV3.fromStr(slug);
    const object_type = spanObjectTypeV3ToString(components.data.object_type);
    const [orgName, appUrl, object_id] = await Promise.all([
      getOrgName(),
      getAppUrl(),
      spanComponentsToObjectId({ components, state })
    ]);
    const id = components.data.row_id;
    if (!id) {
      throw new Error("Span slug does not refer to an individual row");
    }
    const urlParams = new URLSearchParams({ object_type, object_id, id });
    return `${appUrl}/app/${orgName}/object?${urlParams}`;
  } catch (e) {
    if (e instanceof FailedHTTPResponse) {
      return getErrPermlink(`http-error-${e.status}`);
    }
    return getErrPermlink(e instanceof Error ? e.message : String(e));
  }
}
function startSpanParentArgs(args) {
  let argParentObjectId = void 0;
  let argParentSpanIds = void 0;
  let argPropagatedEvent = void 0;
  if (args.parent) {
    if (args.parentSpanIds) {
      throw new Error("Cannot specify both parent and parentSpanIds");
    }
    const parentComponents = SpanComponentsV3.fromStr(args.parent);
    if (args.parentObjectType !== parentComponents.data.object_type) {
      throw new Error(
        `Mismatch between expected span parent object type ${args.parentObjectType} and provided type ${parentComponents.data.object_type}`
      );
    }
    const parentComponentsObjectIdLambda = spanComponentsToObjectIdLambda(
      args.state,
      parentComponents
    );
    const computeParentObjectId = async () => {
      const parentComponentsObjectId = await parentComponentsObjectIdLambda();
      if (await args.parentObjectId.get() !== parentComponentsObjectId) {
        throw new Error(
          `Mismatch between expected span parent object id ${await args.parentObjectId.get()} and provided id ${parentComponentsObjectId}`
        );
      }
      return await args.parentObjectId.get();
    };
    argParentObjectId = new LazyValue(computeParentObjectId);
    if (parentComponents.data.row_id) {
      argParentSpanIds = {
        spanId: parentComponents.data.span_id,
        rootSpanId: parentComponents.data.root_span_id
      };
    }
    argPropagatedEvent = args.propagatedEvent ?? (parentComponents.data.propagated_event ?? void 0);
  } else {
    argParentObjectId = args.parentObjectId;
    argParentSpanIds = args.parentSpanIds;
    argPropagatedEvent = args.propagatedEvent;
  }
  return {
    parentObjectType: args.parentObjectType,
    parentObjectId: argParentObjectId,
    parentComputeObjectMetadataArgs: args.parentComputeObjectMetadataArgs,
    parentSpanIds: argParentSpanIds,
    propagatedEvent: argPropagatedEvent
  };
}
var Logger = class {
  state;
  lazyMetadata;
  _asyncFlush;
  computeMetadataArgs;
  lastStartTime;
  lazyId;
  calledStartSpan;
  // For type identification.
  kind = "logger";
  constructor(state, lazyMetadata, logOptions = {}) {
    this.lazyMetadata = lazyMetadata;
    this._asyncFlush = logOptions.asyncFlush;
    this.computeMetadataArgs = logOptions.computeMetadataArgs;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get org_id() {
    return (async () => {
      return (await this.lazyMetadata.get()).org_id;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  get id() {
    return (async () => (await this.project).id)();
  }
  parentObjectType() {
    return 2 /* PROJECT_LOGS */;
  }
  /**
   * Log a single event. The event will be batched and uploaded behind the scenes if `logOptions.asyncFlush` is true.
   *
   * @param event The event to log.
   * @param event.input: (Optional) the arguments that uniquely define a user input (an arbitrary, JSON serializable object).
   * @param event.output: (Optional) the output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: (Optional) a dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the logger elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !options?.allowConcurrentWithSpans) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `logger.traced` and then log with `span.log`"
      );
    }
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    const ret = span.id;
    if (this.asyncFlush === true) {
      return ret;
    } else {
      return (async () => {
        await this.flush();
        return ret;
      })();
    }
  }
  /**
   * Create a new toplevel span underneath the logger. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    if (this.asyncFlush) {
      return ret;
    } else {
      return (async () => {
        const awaitedRet = await ret;
        await this.flush();
        return awaitedRet;
      })();
    }
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this logger's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: this.computeMetadataArgs,
        parentSpanIds: args?.parentSpanIds,
        propagatedEvent: args?.propagatedEvent
      }),
      defaultRootType: "task" /* TASK */
    });
  }
  /**
   * Log feedback to an event. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the logger that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      ...this.computeMetadataArgs && !this.lazyId.hasSucceeded ? { compute_object_metadata_args: this.computeMetadataArgs } : { object_id: await this.lazyId.get() }
    }).toStr();
  }
  /*
   * Flush any pending logs to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  get asyncFlush() {
    return this._asyncFlush;
  }
};
function castLogger(logger, asyncFlush) {
  if (logger === void 0) return void 0;
  if (asyncFlush !== void 0 && !!asyncFlush !== !!logger.asyncFlush) {
    throw new Error(
      `Asserted asyncFlush setting ${asyncFlush} does not match stored logger's setting ${logger.asyncFlush}`
    );
  }
  return logger;
}
function constructLogs3Data(items) {
  return `{"rows": ${constructJsonArray(items)}, "api_version": 2}`;
}
function now() {
  return (/* @__PURE__ */ new Date()).getTime();
}
var BACKGROUND_LOGGER_BASE_SLEEP_TIME_S = 1;
var HTTPBackgroundLogger = class _HTTPBackgroundLogger {
  apiConn;
  queue;
  activeFlush = Promise.resolve();
  activeFlushResolved = true;
  activeFlushError = void 0;
  onFlushError;
  maskingFunction = null;
  syncFlush = false;
  // 6 MB for the AWS lambda gateway (from our own testing).
  maxRequestSize = 6 * 1024 * 1024;
  defaultBatchSize = 100;
  numTries = 3;
  queueDropExceedingMaxsize = DEFAULT_QUEUE_SIZE;
  queueDropLoggingPeriod = 60;
  failedPublishPayloadsDir = void 0;
  allPublishPayloadsDir = void 0;
  _disabled = false;
  queueDropLoggingState = {
    numDropped: 0,
    lastLoggedTimestamp: 0
  };
  constructor(apiConn, opts) {
    opts = opts ?? {};
    this.apiConn = apiConn;
    const syncFlushEnv = Number(isomorph_default.getEnv("BRAINTRUST_SYNC_FLUSH"));
    if (!isNaN(syncFlushEnv)) {
      this.syncFlush = Boolean(syncFlushEnv);
    }
    const defaultBatchSizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_DEFAULT_BATCH_SIZE")
    );
    if (!isNaN(defaultBatchSizeEnv)) {
      this.defaultBatchSize = defaultBatchSizeEnv;
    }
    const maxRequestSizeEnv = Number(isomorph_default.getEnv("BRAINTRUST_MAX_REQUEST_SIZE"));
    if (!isNaN(maxRequestSizeEnv)) {
      this.maxRequestSize = maxRequestSizeEnv;
    }
    const numTriesEnv = Number(isomorph_default.getEnv("BRAINTRUST_NUM_RETRIES"));
    if (!isNaN(numTriesEnv)) {
      this.numTries = numTriesEnv + 1;
    }
    const queueDropExceedingMaxsizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_EXCEEDING_MAXSIZE")
    );
    if (!isNaN(queueDropExceedingMaxsizeEnv)) {
      this.queueDropExceedingMaxsize = queueDropExceedingMaxsizeEnv;
    }
    this.queue = new Queue(this.queueDropExceedingMaxsize);
    const queueDropLoggingPeriodEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_LOGGING_PERIOD")
    );
    if (!isNaN(queueDropLoggingPeriodEnv)) {
      this.queueDropLoggingPeriod = queueDropLoggingPeriodEnv;
    }
    const failedPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_FAILED_PUBLISH_PAYLOADS_DIR"
    );
    if (failedPublishPayloadsDirEnv) {
      this.failedPublishPayloadsDir = failedPublishPayloadsDirEnv;
    }
    const allPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_ALL_PUBLISH_PAYLOADS_DIR"
    );
    if (allPublishPayloadsDirEnv) {
      this.allPublishPayloadsDir = allPublishPayloadsDirEnv;
    }
    if (!opts.noExitFlush) {
      isomorph_default.processOn("beforeExit", async () => {
        await this.flush();
      });
    }
    this.onFlushError = opts.onFlushError;
  }
  setMaskingFunction(maskingFunction) {
    this.maskingFunction = maskingFunction;
  }
  log(items) {
    if (this._disabled) {
      return;
    }
    const droppedItems = this.queue.push(...items);
    if (!this.syncFlush) {
      this.triggerActiveFlush();
    }
    if (droppedItems.length) {
      this.registerDroppedItemCount(droppedItems.length);
      if (this.allPublishPayloadsDir || this.failedPublishPayloadsDir) {
        this.dumpDroppedEvents(droppedItems);
      }
    }
  }
  async flush() {
    if (this.syncFlush) {
      this.triggerActiveFlush();
    }
    await this.activeFlush;
    if (this.activeFlushError) {
      const err = this.activeFlushError;
      this.activeFlushError = void 0;
      if (this.syncFlush) {
        throw err;
      }
    }
  }
  async flushOnce(args) {
    if (this._disabled) {
      this.queue.clear();
      return;
    }
    const batchSize = args?.batchSize ?? this.defaultBatchSize;
    const wrappedItems = this.queue.drain();
    const [allItems, attachments] = await this.unwrapLazyValues(wrappedItems);
    if (allItems.length === 0) {
      return;
    }
    const allItemsStr = allItems.map(
      (bucket) => bucket.map((item) => JSON.stringify(item))
    );
    const batchSets = batchItems({
      items: allItemsStr,
      batchMaxNumItems: batchSize,
      batchMaxNumBytes: this.maxRequestSize / 2
    });
    for (const batchSet of batchSets) {
      const postPromises = batchSet.map(
        (batch) => (async () => {
          try {
            await this.submitLogsRequest(batch);
            return { type: "success" };
          } catch (e) {
            return { type: "error", value: e };
          }
        })()
      );
      const results = await Promise.all(postPromises);
      const failingResultErrors = results.map((r) => r.type === "success" ? void 0 : r.value).filter((r) => r !== void 0);
      if (failingResultErrors.length) {
        throw new AggregateError(
          failingResultErrors,
          `Encountered the following errors while logging:`
        );
      }
    }
    const attachmentErrors = [];
    for (const attachment of attachments) {
      try {
        const result = await attachment.upload();
        if (result.upload_status === "error") {
          throw new Error(result.error_message);
        }
      } catch (error2) {
        attachmentErrors.push(error2);
      }
    }
    if (attachmentErrors.length === 1) {
      throw attachmentErrors[0];
    } else if (attachmentErrors.length > 1) {
      throw new AggregateError(
        attachmentErrors,
        `Encountered the following errors while uploading attachments:`
      );
    }
    if (this.queue.length() > 0) {
      await this.flushOnce(args);
    }
  }
  async unwrapLazyValues(wrappedItems) {
    for (let i = 0; i < this.numTries; ++i) {
      try {
        const items = await Promise.all(wrappedItems.map((x) => x.get()));
        const attachments = [];
        items.forEach((item) => extractAttachments(item, attachments));
        let mergedItems = mergeRowBatch(items);
        if (this.maskingFunction) {
          mergedItems = mergedItems.map(
            (batch) => batch.map((item) => {
              const maskedItem = { ...item };
              for (const field of REDACTION_FIELDS) {
                if (item[field] !== void 0) {
                  const maskedValue = applyMaskingToField(
                    this.maskingFunction,
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    item[field],
                    field
                  );
                  if (maskedValue instanceof MaskingError) {
                    delete maskedItem[field];
                    if (maskedItem.error) {
                      maskedItem.error = `${maskedItem.error}; ${maskedValue.errorMsg}`;
                    } else {
                      maskedItem.error = maskedValue.errorMsg;
                    }
                  } else {
                    maskedItem[field] = maskedValue;
                  }
                }
              }
              return maskedItem;
            })
          );
        }
        return [mergedItems, attachments];
      } catch (e) {
        let errmsg = "Encountered error when constructing records to flush";
        const isRetrying = i + 1 < this.numTries;
        if (isRetrying) {
          errmsg += ". Retrying";
        }
        console.warn(errmsg);
        if (!isRetrying) {
          console.warn(
            `Failed to construct log records to flush after ${this.numTries} attempts. Dropping batch`
          );
          throw e;
        } else {
          console.warn(e);
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve2) => setTimeout(resolve2, sleepTimeS * 1e3)
          );
        }
      }
    }
    throw new Error("Impossible");
  }
  async submitLogsRequest(items) {
    const conn = await this.apiConn.get();
    const dataStr = constructLogs3Data(items);
    if (this.allPublishPayloadsDir) {
      await _HTTPBackgroundLogger.writePayloadToDir({
        payloadDir: this.allPublishPayloadsDir,
        payload: dataStr
      });
    }
    for (let i = 0; i < this.numTries; i++) {
      const startTime = now();
      let error2 = void 0;
      try {
        await conn.post_json("logs3", dataStr);
      } catch (e) {
        error2 = e;
      }
      if (error2 === void 0) {
        return;
      }
      const isRetrying = i + 1 < this.numTries;
      const retryingText = isRetrying ? "" : " Retrying";
      const errorText = (() => {
        if (error2 instanceof FailedHTTPResponse) {
          return `${error2.status} (${error2.text}): ${error2.data}`;
        } else {
          return `${error2}`;
        }
      })();
      const errMsg = `log request failed. Elapsed time: ${(now() - startTime) / 1e3} seconds. Payload size: ${dataStr.length}.${retryingText}
Error: ${errorText}`;
      if (!isRetrying && this.failedPublishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({
          payloadDir: this.failedPublishPayloadsDir,
          payload: dataStr
        });
        this.logFailedPayloadsDir();
      }
      if (!isRetrying) {
        console.warn(
          `log request failed after ${this.numTries} retries. Dropping batch`
        );
        throw new Error(errMsg);
      } else {
        console.warn(errMsg);
        if (isRetrying) {
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve2) => setTimeout(resolve2, sleepTimeS * 1e3)
          );
        }
      }
    }
  }
  registerDroppedItemCount(numItems) {
    if (numItems <= 0) {
      return;
    }
    this.queueDropLoggingState.numDropped += numItems;
    const timeNow = getCurrentUnixTimestamp();
    if (timeNow - this.queueDropLoggingState.lastLoggedTimestamp > this.queueDropLoggingPeriod) {
      console.warn(
        `Dropped ${this.queueDropLoggingState.numDropped} elements due to full queue`
      );
      if (this.failedPublishPayloadsDir) {
        this.logFailedPayloadsDir();
      }
      this.queueDropLoggingState.numDropped = 0;
      this.queueDropLoggingState.lastLoggedTimestamp = timeNow;
    }
  }
  async dumpDroppedEvents(wrappedItems) {
    const publishPayloadsDir = [
      this.allPublishPayloadsDir,
      this.failedPublishPayloadsDir
    ].reduce((acc, x) => x ? acc.concat([x]) : acc, new Array());
    if (!(wrappedItems.length && publishPayloadsDir.length)) {
      return;
    }
    try {
      const [allItems, allAttachments] = await this.unwrapLazyValues(wrappedItems);
      const dataStr = constructLogs3Data(
        allItems.map((x) => JSON.stringify(x))
      );
      const attachmentStr = JSON.stringify(
        allAttachments.map((a) => a.debugInfo())
      );
      const payload = `{"data": ${dataStr}, "attachments": ${attachmentStr}}
`;
      for (const payloadDir of publishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({ payloadDir, payload });
      }
    } catch (e) {
      console.error(e);
    }
  }
  static async writePayloadToDir({
    payloadDir,
    payload
  }) {
    if (!(isomorph_default.pathJoin && isomorph_default.mkdir && isomorph_default.writeFile)) {
      console.warn(
        "Cannot dump payloads: filesystem-operations not supported on this platform"
      );
      return;
    }
    const payloadFile = isomorph_default.pathJoin(
      payloadDir,
      `payload_${getCurrentUnixTimestamp()}_${(0, import_uuid.v4)().slice(0, 8)}.json`
    );
    try {
      await isomorph_default.mkdir(payloadDir, { recursive: true });
      await isomorph_default.writeFile(payloadFile, payload);
    } catch (e) {
      console.error(
        `Failed to write failed payload to output file ${payloadFile}:
`,
        e
      );
    }
  }
  triggerActiveFlush() {
    if (this.activeFlushResolved) {
      this.activeFlushResolved = false;
      this.activeFlushError = void 0;
      this.activeFlush = (async () => {
        try {
          await this.flushOnce();
        } catch (err) {
          if (err instanceof AggregateError) {
            for (const e of err.errors) {
              this.onFlushError?.(e);
            }
          } else {
            this.onFlushError?.(err);
          }
          this.activeFlushError = err;
        } finally {
          this.activeFlushResolved = true;
        }
      })();
      (0, import_functions.waitUntil)(this.activeFlush);
    }
  }
  logFailedPayloadsDir() {
    console.warn(`Logging failed payloads to ${this.failedPublishPayloadsDir}`);
  }
  // Should only be called by BraintrustState.
  internalReplaceApiConn(apiConn) {
    this.apiConn = new LazyValue(async () => apiConn);
  }
  disable() {
    this._disabled = true;
  }
  enforceQueueSizeLimit(enforce) {
    this.queue.enforceQueueSizeLimit(enforce);
  }
};
function init(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either init(project, options) or init(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    experiment,
    description,
    dataset,
    baseExperiment,
    isPublic,
    open,
    update,
    appUrl,
    apiKey,
    orgName,
    forceLogin,
    fetch: fetch2,
    metadata,
    gitMetadataSettings,
    projectId,
    baseExperimentId,
    repoInfo: repoInfo2,
    state: stateArg
  } = options;
  if (!project && !projectId) {
    throw new Error("Must specify at least one of project or projectId");
  }
  if (open && update) {
    throw new Error("Cannot open and update an experiment at the same time");
  }
  const state = stateArg ?? _globalState;
  state.enforceQueueSizeLimit(false);
  if (open) {
    if (isEmpty2(experiment)) {
      throw new Error(`Cannot open an experiment without specifying its name`);
    }
    const lazyMetadata2 = new LazyValue(
      async () => {
        await state.login({ apiKey, appUrl, orgName, fetch: fetch2, forceLogin });
        const args = {
          project_name: project,
          project_id: projectId,
          org_name: state.orgName,
          experiment_name: experiment
        };
        const response = await state.appConn().post_json("api/experiment/get", args);
        if (response.length === 0) {
          throw new Error(
            `Experiment ${experiment} not found in project ${projectId ?? project}.`
          );
        }
        const info = response[0];
        return {
          project: {
            id: info.project_id,
            name: project ?? "UNKNOWN_PROJECT",
            fullInfo: {}
          },
          experiment: {
            id: info.id,
            name: info.name,
            fullInfo: info
          }
        };
      }
    );
    return new ReadonlyExperiment(
      stateArg ?? _globalState,
      lazyMetadata2
    );
  }
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({ apiKey, appUrl, orgName });
      const args = {
        project_name: project,
        project_id: projectId,
        org_id: state.orgId,
        update
      };
      if (experiment) {
        args["experiment_name"] = experiment;
      }
      if (description) {
        args["description"] = description;
      }
      const repoInfoArg = await (async () => {
        if (repoInfo2) {
          return repoInfo2;
        }
        let mergedGitMetadataSettings = {
          ...state.gitMetadataSettings || {
            collect: "all"
          }
        };
        if (gitMetadataSettings) {
          mergedGitMetadataSettings = mergeGitMetadataSettings(
            mergedGitMetadataSettings,
            gitMetadataSettings
          );
        }
        return await isomorph_default.getRepoInfo(mergedGitMetadataSettings);
      })();
      if (repoInfoArg) {
        args["repo_info"] = repoInfoArg;
      }
      if (baseExperimentId) {
        args["base_exp_id"] = baseExperimentId;
      } else if (baseExperiment) {
        args["base_experiment"] = baseExperiment;
      } else {
        args["ancestor_commits"] = await isomorph_default.getPastNAncestors();
      }
      if (dataset !== void 0) {
        args["dataset_id"] = await dataset.id;
        args["dataset_version"] = await dataset.version();
      }
      if (isPublic !== void 0) {
        args["public"] = isPublic;
      }
      if (metadata) {
        args["metadata"] = metadata;
      }
      let response = null;
      while (true) {
        try {
          response = await state.appConn().post_json("api/experiment/register", args);
          break;
        } catch (e) {
          if (args["base_experiment"] && `${"data" in e && e.data}`.includes("base experiment")) {
            console.warn(
              `Base experiment ${args["base_experiment"]} not found.`
            );
            delete args["base_experiment"];
          } else {
            throw e;
          }
        }
      }
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        experiment: {
          id: response.experiment.id,
          name: response.experiment.name,
          created: response.experiment.created,
          fullInfo: response.experiment
        }
      };
    }
  );
  const ret = new Experiment2(state, lazyMetadata, dataset);
  if (options.setCurrent ?? true) {
    state.currentExperiment = ret;
  }
  return ret;
}
function initDataset(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either initDataset(project, options) or initDataset(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    dataset,
    description,
    version: version2,
    appUrl,
    apiKey,
    orgName,
    fetch: fetch2,
    forceLogin,
    projectId,
    metadata,
    useOutput: legacy,
    state: stateArg,
    _internal_btql
  } = options;
  const state = stateArg ?? _globalState;
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({
        orgName,
        apiKey,
        appUrl,
        fetch: fetch2,
        forceLogin
      });
      const args = {
        org_id: state.orgId,
        project_name: project,
        project_id: projectId,
        dataset_name: dataset,
        description,
        metadata
      };
      const response = await state.appConn().post_json("api/dataset/register", args);
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        dataset: {
          id: response.dataset.id,
          name: response.dataset.name,
          fullInfo: response.dataset
        }
      };
    }
  );
  return new Dataset2(
    stateArg ?? _globalState,
    lazyMetadata,
    version2,
    legacy,
    _internal_btql
  );
}
async function computeLoggerMetadata(state, {
  project_name,
  project_id
}) {
  await state.login({});
  const org_id = state.orgId;
  if (isEmpty2(project_id)) {
    const response = await state.appConn().post_json("api/project/register", {
      project_name: project_name || GLOBAL_PROJECT,
      org_id
    });
    return {
      org_id,
      project: {
        id: response.project.id,
        name: response.project.name,
        fullInfo: response.project
      }
    };
  } else if (isEmpty2(project_name)) {
    const response = await state.appConn().get_json("api/project", {
      id: project_id
    });
    return {
      org_id,
      project: {
        id: project_id,
        name: response.name,
        fullInfo: response.project
      }
    };
  } else {
    return {
      org_id,
      project: { id: project_id, name: project_name, fullInfo: {} }
    };
  }
}
async function login(options = {}) {
  const { forceLogin = false } = options || {};
  if (_globalState.loggedIn && !forceLogin) {
    let checkUpdatedParam2 = function(varname, arg, orig) {
      if (!isEmpty2(arg) && !isEmpty2(orig) && arg !== orig) {
        throw new Error(
          `Re-logging in with different ${varname} (${arg}) than original (${orig}). To force re-login, pass \`forceLogin: true\``
        );
      }
    };
    var checkUpdatedParam = checkUpdatedParam2;
    checkUpdatedParam2("appUrl", options.appUrl, _globalState.appUrl);
    checkUpdatedParam2(
      "apiKey",
      options.apiKey ? HTTPConnection.sanitize_token(options.apiKey) : void 0,
      _globalState.loginToken
    );
    checkUpdatedParam2("orgName", options.orgName, _globalState.orgName);
    return _globalState;
  }
  await _globalState.login(options);
  globalThis.__inherited_braintrust_state = _globalState;
  return _globalState;
}
async function loginToState(options = {}) {
  const {
    appUrl = isomorph_default.getEnv("BRAINTRUST_APP_URL") || "https://www.braintrust.dev",
    apiKey = isomorph_default.getEnv("BRAINTRUST_API_KEY"),
    orgName = isomorph_default.getEnv("BRAINTRUST_ORG_NAME"),
    fetch: fetch2 = globalThis.fetch
  } = options || {};
  const appPublicUrl = isomorph_default.getEnv("BRAINTRUST_APP_PUBLIC_URL") || appUrl;
  const state = new BraintrustState(options);
  state.resetLoginInfo();
  state.appUrl = appUrl;
  state.appPublicUrl = appPublicUrl;
  let conn = null;
  if (!apiKey) {
    throw new Error(
      "Please specify an api key (e.g. by setting BRAINTRUST_API_KEY)."
    );
  } else if (apiKey === TEST_API_KEY) {
    const testOrgInfo = [
      {
        id: "test-org-id",
        name: "test-org-name",
        api_url: "https://braintrust.dev/fake-api-url"
      }
    ];
    state.loggedIn = true;
    state.loginToken = TEST_API_KEY;
    _saveOrgInfo(state, testOrgInfo, testOrgInfo[0].name);
    return state;
  } else {
    const resp = await checkResponse(
      await fetch2(_urljoin(state.appUrl, `/api/apikey/login`), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      })
    );
    const info = await resp.json();
    _saveOrgInfo(state, info.org_info, orgName);
    if (!state.apiUrl) {
      if (orgName) {
        throw new Error(
          `Unable to log into organization '${orgName}'. Are you sure this credential is scoped to the organization?`
        );
      } else {
        throw new Error(
          "Unable to log into any organization with the provided credential."
        );
      }
    }
    conn = state.apiConn();
    conn.set_token(apiKey);
    if (!conn) {
      throw new Error("Conn should be set at this point (a bug)");
    }
    conn.make_long_lived();
    state.appConn().set_token(apiKey);
    if (state.proxyUrl) {
      state.proxyConn().set_token(apiKey);
    }
    state.loginToken = conn.token;
    state.loggedIn = true;
    state.loginReplaceApiConn(conn);
  }
  return state;
}
function currentExperiment(options) {
  const state = options?.state ?? _globalState;
  return state.currentExperiment;
}
function currentLogger(options) {
  const state = options?.state ?? _globalState;
  return castLogger(state.currentLogger, options?.asyncFlush);
}
function currentSpan(options) {
  const state = options?.state ?? _globalState;
  return state.currentSpan.getStore() ?? NOOP_SPAN;
}
function getSpanParentObject(options) {
  const state = options?.state ?? _globalState;
  const parentSpan = currentSpan({ state });
  if (!Object.is(parentSpan, NOOP_SPAN)) {
    return parentSpan;
  }
  const parentStr = options?.parent ?? state.currentParent.getStore();
  if (parentStr) return SpanComponentsV3.fromStr(parentStr);
  const experiment = currentExperiment();
  if (experiment) {
    return experiment;
  }
  const logger = currentLogger(options);
  if (logger) {
    return logger;
  }
  return NOOP_SPAN;
}
function logError(span, error2) {
  let errorMessage = "<error>";
  let stackTrace = "";
  if (error2 instanceof Error) {
    errorMessage = error2.message;
    stackTrace = error2.stack || "";
  } else {
    errorMessage = String(error2);
  }
  span.log({ error: `${errorMessage}

${stackTrace}` });
}
function traced(callback, args) {
  const { span, isSyncFlushLogger } = startSpanAndIsLogger(args);
  const ret = runCatchFinally(
    () => {
      if (args?.setCurrent ?? true) {
        return withCurrent(span, callback);
      } else {
        return callback(span);
      }
    },
    (e) => {
      logError(span, e);
      throw e;
    },
    () => span.end()
  );
  if (args?.asyncFlush === void 0 || args?.asyncFlush) {
    return ret;
  } else {
    return (async () => {
      const awaitedRet = await ret;
      if (isSyncFlushLogger) {
        await span.flush();
      }
      return awaitedRet;
    })();
  }
}
function startSpan(args) {
  return startSpanAndIsLogger(args).span;
}
async function flush(options) {
  const state = options?.state ?? _globalState;
  return await state.bgLogger().flush();
}
function startSpanAndIsLogger(args) {
  const state = args?.state ?? _globalState;
  const parentObject = getSpanParentObject({
    asyncFlush: args?.asyncFlush,
    parent: args?.parent,
    state
  });
  if (parentObject instanceof SpanComponentsV3) {
    const parentSpanIds = parentObject.data.row_id ? {
      spanId: parentObject.data.span_id,
      rootSpanId: parentObject.data.root_span_id
    } : void 0;
    const span = new SpanImpl({
      state,
      ...args,
      parentObjectType: parentObject.data.object_type,
      parentObjectId: new LazyValue(
        spanComponentsToObjectIdLambda(state, parentObject)
      ),
      parentComputeObjectMetadataArgs: parentObject.data.compute_object_metadata_args ?? void 0,
      parentSpanIds,
      propagatedEvent: args?.propagatedEvent ?? // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      (parentObject.data.propagated_event ?? void 0)
    });
    return {
      span,
      isSyncFlushLogger: parentObject.data.object_type === 2 /* PROJECT_LOGS */ && // Since there's no parent logger here, we're free to choose the async flush
      // behavior, and therefore propagate along whatever we get from the arguments
      args?.asyncFlush === false
    };
  } else {
    const span = parentObject.startSpan(args);
    return {
      span,
      isSyncFlushLogger: parentObject.kind === "logger" && parentObject.asyncFlush === false
    };
  }
}
function withCurrent(span, callback, state = void 0) {
  return (state ?? _globalState).currentSpan.run(span, () => callback(span));
}
function withParent(parent, callback, state = void 0) {
  return (state ?? _globalState).currentParent.run(parent, () => callback());
}
function _saveOrgInfo(state, org_info, org_name) {
  if (org_info.length === 0) {
    throw new Error("This user is not part of any organizations.");
  }
  for (const org of org_info) {
    if (org_name === void 0 || org.name === org_name) {
      state.orgId = org.id;
      state.orgName = org.name;
      state.apiUrl = isomorph_default.getEnv("BRAINTRUST_API_URL") ?? org.api_url;
      state.proxyUrl = isomorph_default.getEnv("BRAINTRUST_PROXY_URL") ?? org.proxy_url;
      state.gitMetadataSettings = org.git_metadata || void 0;
      break;
    }
  }
  if (state.orgId === void 0) {
    throw new Error(
      `Organization ${org_name} not found. Must be one of ${org_info.map((x) => x.name).join(", ")}`
    );
  }
}
function validateTags(tags) {
  const seen = /* @__PURE__ */ new Set();
  for (const tag of tags) {
    if (typeof tag !== "string") {
      throw new Error("tags must be strings");
    }
    if (seen.has(tag)) {
      throw new Error(`duplicate tag: ${tag}`);
    }
  }
}
function validateAndSanitizeExperimentLogPartialArgs(event) {
  if (event.scores) {
    if (Array.isArray(event.scores)) {
      throw new Error("scores must be an object, not an array");
    }
    for (let [name, score] of Object.entries(event.scores)) {
      if (typeof name !== "string") {
        throw new Error("score names must be strings");
      }
      if (score === null || score === void 0) {
        continue;
      }
      if (typeof score === "boolean") {
        score = score ? 1 : 0;
        event.scores[name] = score;
      }
      if (typeof score !== "number") {
        throw new Error("score values must be numbers");
      }
      if (score < 0 || score > 1) {
        throw new Error("score values must be between 0 and 1");
      }
    }
  }
  if (event.metadata) {
    for (const key of Object.keys(event.metadata)) {
      if (typeof key !== "string") {
        throw new Error("metadata keys must be strings");
      }
    }
  }
  if (event.metrics) {
    for (const [key, value] of Object.entries(event.metrics)) {
      if (typeof key !== "string") {
        throw new Error("metric keys must be strings");
      }
      if (value !== void 0 && typeof value !== "number") {
        throw new Error("metric values must be numbers");
      }
    }
  }
  if ("input" in event && event.input && "inputs" in event && event.inputs) {
    throw new Error(
      "Only one of input or inputs (deprecated) can be specified. Prefer input."
    );
  }
  if ("tags" in event && event.tags) {
    validateTags(event.tags);
  }
  if ("inputs" in event) {
    const { inputs, ...rest } = event;
    return { input: inputs, ...rest };
  } else {
    return { ...event };
  }
}
function deepCopyEvent(event) {
  const attachments = [];
  const IDENTIFIER = "_bt_internal_saved_attachment";
  const savedAttachmentSchema = import_zod.z.strictObject({ [IDENTIFIER]: import_zod.z.number() });
  const serialized = JSON.stringify(event, (_k, v) => {
    if (v instanceof SpanImpl || v instanceof NoopSpan) {
      return `<span>`;
    } else if (v instanceof Experiment2) {
      return `<experiment>`;
    } else if (v instanceof Dataset2) {
      return `<dataset>`;
    } else if (v instanceof Logger) {
      return `<logger>`;
    } else if (v instanceof BaseAttachment) {
      const idx = attachments.push(v);
      return { [IDENTIFIER]: idx - 1 };
    } else if (v instanceof ReadonlyAttachment) {
      return v.reference;
    }
    return v;
  });
  const x = JSON.parse(serialized, (_k, v) => {
    const parsedAttachment = savedAttachmentSchema.safeParse(v);
    if (parsedAttachment.success) {
      return attachments[parsedAttachment.data[IDENTIFIER]];
    }
    return v;
  });
  return x;
}
function extractAttachments(event, attachments) {
  for (const [key, value] of Object.entries(event)) {
    if (!value) {
      continue;
    }
    if (value instanceof BaseAttachment) {
      attachments.push(value);
      event[key] = value.reference;
      continue;
    }
    if (value?.type === BRAINTRUST_ATTACHMENT && value.key && !value.uploader) {
      continue;
    }
    if (value?.reference?.type === BRAINTRUST_ATTACHMENT && value?.uploader) {
      const attachment = new Attachment({
        data: value.dataDebugString,
        filename: value.reference.filename,
        contentType: value.reference.content_type
      });
      attachments.push(attachment);
      event[key] = attachment.reference;
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    extractAttachments(value, attachments);
  }
}
function enrichAttachments(event, state) {
  for (const [key, value] of Object.entries(event)) {
    const parsedValue = AttachmentReference.safeParse(value);
    if (parsedValue.success) {
      event[key] = new ReadonlyAttachment(parsedValue.data, state);
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    enrichAttachments(value, state);
  }
  return event;
}
async function resolveAttachmentsToBase64(event, state) {
  for (const [key, value] of Object.entries(event)) {
    if (value instanceof ReadonlyAttachment) {
      event[key] = await value.asBase64Url();
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    await resolveAttachmentsToBase64(value, state);
  }
  return event;
}
function validateAndSanitizeExperimentLogFullArgs(event, hasDataset) {
  if ("input" in event && !isEmpty2(event.input) && "inputs" in event && !isEmpty2(event.inputs) || !("input" in event) && !("inputs" in event)) {
    throw new Error(
      "Exactly one of input or inputs (deprecated) must be specified. Prefer input."
    );
  }
  if (isEmpty2(event.output)) {
    throw new Error("output must be specified");
  }
  if (isEmpty2(event.scores)) {
    throw new Error("scores must be specified");
  }
  if (hasDataset && event.datasetRecordId === void 0) {
    throw new Error("datasetRecordId must be specified when using a dataset");
  } else if (!hasDataset && event.datasetRecordId !== void 0) {
    throw new Error(
      "datasetRecordId cannot be specified when not using a dataset"
    );
  }
  return event;
}
var INTERNAL_BTQL_LIMIT = 1e3;
var MAX_BTQL_ITERATIONS = 1e4;
var ObjectFetcher = class {
  constructor(objectType, pinnedVersion, mutateRecord, _internal_btql) {
    this.objectType = objectType;
    this.pinnedVersion = pinnedVersion;
    this.mutateRecord = mutateRecord;
    this._internal_btql = _internal_btql;
  }
  _fetchedData = void 0;
  get id() {
    throw new Error("ObjectFetcher subclasses must have an 'id' attribute");
  }
  async getState() {
    throw new Error("ObjectFetcher subclasses must have a 'getState' method");
  }
  async *fetch() {
    const records = await this.fetchedData();
    for (const record of records) {
      yield record;
    }
  }
  [Symbol.asyncIterator]() {
    return this.fetch();
  }
  async fetchedData() {
    if (this._fetchedData === void 0) {
      const state = await this.getState();
      let data = void 0;
      let cursor = void 0;
      let iterations = 0;
      while (true) {
        const resp = await state.apiConn().post(
          `btql`,
          {
            query: {
              ...this._internal_btql,
              select: [
                {
                  op: "star"
                }
              ],
              from: {
                op: "function",
                name: {
                  op: "ident",
                  name: [this.objectType]
                },
                args: [
                  {
                    op: "literal",
                    value: await this.id
                  }
                ]
              },
              cursor,
              limit: INTERNAL_BTQL_LIMIT
            },
            use_columnstore: false,
            brainstore_realtime: true
          },
          { headers: { "Accept-Encoding": "gzip" } }
        );
        const respJson = await resp.json();
        data = (data ?? []).concat(respJson.data);
        if (!respJson.cursor) {
          break;
        }
        cursor = respJson.cursor;
        iterations++;
        if (iterations > MAX_BTQL_ITERATIONS) {
          throw new Error("Too many BTQL iterations");
        }
      }
      this._fetchedData = this.mutateRecord ? data?.map(this.mutateRecord) : data;
    }
    return this._fetchedData || [];
  }
  clearCache() {
    this._fetchedData = void 0;
  }
  async version() {
    if (this.pinnedVersion !== void 0) {
      return this.pinnedVersion;
    } else {
      const fetchedData = await this.fetchedData();
      let maxVersion = void 0;
      for (const record of fetchedData) {
        const xactId = String(record[TRANSACTION_ID_FIELD] ?? "0");
        if (maxVersion === void 0 || xactId > maxVersion) {
          maxVersion = xactId;
        }
      }
      return maxVersion;
    }
  }
};
var Experiment2 = class extends ObjectFetcher {
  lazyMetadata;
  dataset;
  lastStartTime;
  lazyId;
  calledStartSpan;
  state;
  // For type identification.
  kind = "experiment";
  constructor(state, lazyMetadata, dataset) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));
    this.lazyMetadata = lazyMetadata;
    this.dataset = dataset;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  parentObjectType() {
    return 1 /* EXPERIMENT */;
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  /**
   * Log a single event to the experiment. The event will be batched and uploaded behind the scenes.
   *
   * @param event The event to log.
   * @param event.input: The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical.
   * @param event.output: The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param event.dataset_record_id: (Optional) the id of the dataset record that this event is associated with. This field is required if and only if the experiment is associated with a dataset. This field is unused and will be removed in a future version.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the experiment elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !options?.allowConcurrentWithSpans) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `experiment.traced` and then log with `span.log`"
      );
    }
    event = validateAndSanitizeExperimentLogFullArgs(event, !!this.dataset);
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    return span.id;
  }
  /**
   * Create a new toplevel span underneath the experiment. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    return ret;
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this experiment's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: void 0,
        parentSpanIds: void 0,
        propagatedEvent: args?.propagatedEvent
      }),
      defaultRootType: "eval" /* EVAL */
    });
  }
  async fetchBaseExperiment() {
    const state = await this.getState();
    const conn = state.appConn();
    try {
      const resp = await conn.post("/api/base_experiment/get_id", {
        id: await this.id
      });
      const base = await resp.json();
      return {
        id: base["base_exp_id"],
        name: base["base_exp_name"]
      };
    } catch (e) {
      if (e instanceof FailedHTTPResponse && e.status === 400) {
        return null;
      } else {
        throw e;
      }
    }
  }
  /**
   * Summarize the experiment, including the scores (compared to the closest reference experiment) and metadata.
   *
   * @param options Options for summarizing the experiment.
   * @param options.summarizeScores Whether to summarize the scores. If False, only the metadata will be returned.
   * @param options.comparisonExperimentId The experiment to compare against. If None, the most recent experiment on the origin's main branch will be used.
   * @returns A summary of the experiment, including the scores (compared to the closest reference experiment) and metadata.
   */
  async summarize(options = {}) {
    let { summarizeScores = true, comparisonExperimentId = void 0 } = options || {};
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const experimentUrl = `${projectUrl}/experiments/${encodeURIComponent(
      await this.name
    )}`;
    let scores = void 0;
    let metrics = void 0;
    let comparisonExperimentName = void 0;
    if (summarizeScores) {
      await this.flush();
      if (comparisonExperimentId === void 0) {
        const baseExperiment = await this.fetchBaseExperiment();
        if (baseExperiment !== null) {
          comparisonExperimentId = baseExperiment.id;
          comparisonExperimentName = baseExperiment.name;
        }
      }
      try {
        const results = await state.apiConn().get_json(
          "/experiment-comparison2",
          {
            experiment_id: await this.id,
            base_experiment_id: comparisonExperimentId
          },
          3
        );
        scores = results["scores"];
        metrics = results["metrics"];
      } catch (e) {
        console.warn(
          `Failed to fetch experiment scores and metrics: ${e}

View complete results in Braintrust or run experiment.summarize() again.`
        );
        scores = {};
        metrics = {};
      }
    }
    return {
      projectName: (await this.project).name,
      experimentName: await this.name,
      projectId: (await this.project).id,
      experimentId: await this.id,
      projectUrl,
      experimentUrl,
      comparisonExperimentName,
      scores: scores ?? {},
      metrics: metrics ?? {}
    };
  }
  /**
   * Log feedback to an event in the experiment. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the experiment that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      object_id: await this.id
    }).toStr();
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
};
var ReadonlyExperiment = class extends ObjectFetcher {
  constructor(state, lazyMetadata) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  async *asDataset() {
    const records = this.fetch();
    for await (const record of records) {
      if (record.root_span_id !== record.span_id) {
        continue;
      }
      const { output, expected: expectedRecord, metadata } = record;
      const expected = expectedRecord ?? output;
      yield {
        input: record.input,
        tags: record.tags,
        expected,
        metadata
      };
    }
  }
};
var executionCounter = 0;
function newId() {
  return (0, import_uuid.v4)();
}
var SpanImpl = class _SpanImpl {
  _state;
  isMerge;
  loggedEndTime;
  propagatedEvent;
  // For internal use only.
  parentObjectType;
  parentObjectId;
  parentComputeObjectMetadataArgs;
  _id;
  _spanId;
  _rootSpanId;
  _spanParents;
  kind = "span";
  constructor(args) {
    this._state = args.state;
    const spanAttributes = args.spanAttributes ?? {};
    const rawEvent = args.event ?? {};
    const type = args.type ?? (args.parentSpanIds ? void 0 : args.defaultRootType);
    this.loggedEndTime = void 0;
    this.parentObjectType = args.parentObjectType;
    this.parentObjectId = args.parentObjectId;
    this.parentComputeObjectMetadataArgs = args.parentComputeObjectMetadataArgs;
    this.propagatedEvent = args.propagatedEvent;
    if (this.propagatedEvent) {
      mergeDicts(rawEvent, this.propagatedEvent);
    }
    const { id: eventId, ...event } = rawEvent;
    const callerLocation = isomorph_default.getCallerLocation();
    const name = (() => {
      if (args.name) return args.name;
      if (!args.parentSpanIds) return "root";
      if (callerLocation) {
        const pathComponents = callerLocation.caller_filename.split("/");
        const filename = pathComponents[pathComponents.length - 1];
        return [callerLocation.caller_functionname].concat(
          filename ? [`${filename}:${callerLocation.caller_lineno}`] : []
        ).join(":");
      }
      return "subspan";
    })();
    const internalData = {
      metrics: {
        start: args.startTime ?? getCurrentUnixTimestamp()
      },
      context: { ...callerLocation },
      span_attributes: {
        name,
        type,
        ...spanAttributes,
        exec_counter: executionCounter++
      },
      created: (/* @__PURE__ */ new Date()).toISOString()
    };
    this._id = eventId ?? (0, import_uuid.v4)();
    this._spanId = args.spanId ?? (0, import_uuid.v4)();
    if (args.parentSpanIds) {
      this._rootSpanId = args.parentSpanIds.rootSpanId;
      this._spanParents = "parentSpanIds" in args.parentSpanIds ? args.parentSpanIds.parentSpanIds : [args.parentSpanIds.spanId];
    } else {
      this._rootSpanId = this._spanId;
      this._spanParents = void 0;
    }
    this.isMerge = false;
    this.logInternal({ event, internalData });
    this.isMerge = true;
  }
  get id() {
    return this._id;
  }
  get spanId() {
    return this._spanId;
  }
  get rootSpanId() {
    return this._rootSpanId;
  }
  get spanParents() {
    return this._spanParents ?? [];
  }
  setAttributes(args) {
    this.logInternal({ internalData: { span_attributes: args } });
  }
  setSpanParents(parents) {
    this.logInternal({ internalData: { span_parents: parents } });
  }
  log(event) {
    this.logInternal({ event });
  }
  logInternal({
    event,
    internalData
  }) {
    const [serializableInternalData, lazyInternalData] = splitLoggingData({
      event,
      internalData
    });
    const partialRecord = deepCopyEvent({
      id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      span_parents: this._spanParents,
      ...serializableInternalData,
      [IS_MERGE_FIELD]: this.isMerge
    });
    if (partialRecord.metrics?.end) {
      this.loggedEndTime = partialRecord.metrics?.end;
    }
    if ((partialRecord.tags ?? []).length > 0 && this._spanParents?.length) {
      throw new Error("Tags can only be logged to the root span");
    }
    const computeRecord = async () => ({
      ...partialRecord,
      ...Object.fromEntries(
        await Promise.all(
          Object.entries(lazyInternalData).map(async ([key, value]) => [
            key,
            await value.get()
          ])
        )
      ),
      ...new SpanComponentsV3({
        object_type: this.parentObjectType,
        object_id: await this.parentObjectId.get()
      }).objectIdFields()
    });
    this._state.bgLogger().log([new LazyValue(computeRecord)]);
  }
  logFeedback(event) {
    logFeedbackImpl(this._state, this.parentObjectType, this.parentObjectId, {
      ...event,
      id: this.id
    });
  }
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    return runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
  }
  startSpan(args) {
    const parentSpanIds = args?.parent ? void 0 : { spanId: this._spanId, rootSpanId: this._rootSpanId };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: args?.propagatedEvent ?? this.propagatedEvent
      })
    });
  }
  startSpanWithParents(spanId, spanParents, args) {
    const parentSpanIds = {
      parentSpanIds: spanParents,
      rootSpanId: this._rootSpanId
    };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: args?.propagatedEvent ?? this.propagatedEvent
      }),
      spanId
    });
  }
  end(args) {
    let endTime;
    let internalData = {};
    if (!this.loggedEndTime) {
      endTime = args?.endTime ?? getCurrentUnixTimestamp();
      internalData = { metrics: { end: endTime } };
    } else {
      endTime = this.loggedEndTime;
    }
    this.logInternal({ internalData });
    return endTime;
  }
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType,
      ...this.parentComputeObjectMetadataArgs && !this.parentObjectId.hasSucceeded ? { compute_object_metadata_args: this.parentComputeObjectMetadataArgs } : { object_id: await this.parentObjectId.get() },
      row_id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      propagated_event: this.propagatedEvent
    }).toStr();
  }
  async permalink() {
    return await permalink(await this.export(), {
      state: this._state
    });
  }
  link() {
    if (!this.id) {
      return NOOP_SPAN_PERMALINK;
    }
    try {
      const orgName = this._state.orgName;
      if (!orgName) {
        throw new Error("log-in-or-provide-org-name");
      }
      return this._link(orgName);
    } catch (e) {
      return getErrPermlink(e instanceof Error ? e.message : String(e));
    }
  }
  _link(orgName) {
    const appUrl = this._state.appUrl || "https://www.braintrust.dev";
    const baseUrl = `${appUrl}/app/${orgName}`;
    const args = this.parentComputeObjectMetadataArgs;
    switch (this.parentObjectType) {
      case 2 /* PROJECT_LOGS */: {
        const projectID = args?.project_id || this.parentObjectId.getSync().value;
        const projectName = args?.project_name;
        if (projectID) {
          return `${baseUrl}/object?object_type=project_logs&object_id=${projectID}&id=${this._id}`;
        } else if (projectName) {
          return `${baseUrl}/p/${projectName}/logs?oid=${this._id}`;
        } else {
          return getErrPermlink("provide-project-name-or-id");
        }
      }
      case 1 /* EXPERIMENT */: {
        const expID = args?.experiment_id || this.parentObjectId?.getSync()?.value;
        if (!expID) {
          return getErrPermlink("provide-experiment-id");
        } else {
          return `${baseUrl}/object?object_type=experiment&object_id=${expID}&id=${this._id}`;
        }
      }
      case 3 /* PLAYGROUND_LOGS */: {
        return NOOP_SPAN_PERMALINK;
      }
      default: {
        const _exhaustive = this.parentObjectType;
        _exhaustive;
        return NOOP_SPAN_PERMALINK;
      }
    }
  }
  async flush() {
    return await this._state.bgLogger().flush();
  }
  close(args) {
    return this.end(args);
  }
  state() {
    return this._state;
  }
};
function splitLoggingData({
  event,
  internalData
}) {
  const sanitized = validateAndSanitizeExperimentLogPartialArgs(event ?? {});
  const sanitizedAndInternalData = {};
  mergeDicts(sanitizedAndInternalData, internalData || {});
  mergeDicts(sanitizedAndInternalData, sanitized);
  const serializableInternalData = {};
  const lazyInternalData = {};
  for (const [key, value] of Object.entries(sanitizedAndInternalData)) {
    if (value instanceof BraintrustStream) {
      const streamCopy = value.copy();
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve2, reject2) => {
          streamCopy.toReadableStream().pipeThrough(createFinalValuePassThroughStream(resolve2, reject2)).pipeTo(devNullWritableStream());
        });
      });
    } else if (value instanceof ReadableStream) {
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve2, reject2) => {
          value.pipeThrough(createFinalValuePassThroughStream(resolve2, reject2)).pipeTo(devNullWritableStream());
        });
      });
    } else {
      serializableInternalData[key] = value;
    }
  }
  return [serializableInternalData, lazyInternalData];
}
var Dataset2 = class extends ObjectFetcher {
  constructor(state, lazyMetadata, pinnedVersion, legacy, _internal_btql) {
    const isLegacyDataset = legacy ?? DEFAULT_IS_LEGACY_DATASET;
    if (isLegacyDataset) {
      console.warn(
        `Records will be fetched from this dataset in the legacy format, with the "expected" field renamed to "output". Please update your code to use "expected", and use \`braintrust.initDataset()\` with \`{ useOutput: false }\`, which will become the default in a future version of Braintrust.`
      );
    }
    super(
      "dataset",
      pinnedVersion,
      (r) => (
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        ensureDatasetRecord(
          enrichAttachments(r, this.state),
          isLegacyDataset
        )
      ),
      _internal_btql
    );
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  lazyMetadata;
  __braintrust_dataset_marker = true;
  newRecords = 0;
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  validateEvent({
    metadata,
    expected,
    output,
    tags
  }) {
    if (metadata !== void 0) {
      for (const key of Object.keys(metadata)) {
        if (typeof key !== "string") {
          throw new Error("metadata keys must be strings");
        }
      }
    }
    if (expected !== void 0 && output !== void 0) {
      throw new Error(
        "Only one of expected or output (deprecated) can be specified. Prefer expected."
      );
    }
    if (tags) {
      validateTags(tags);
    }
  }
  createArgs({
    id,
    input,
    expected,
    metadata,
    tags,
    output,
    isMerge
  }) {
    return new LazyValue(async () => {
      const dataset_id = await this.id;
      const expectedValue = expected === void 0 ? output : expected;
      const args = {
        id,
        input,
        expected: expectedValue,
        tags,
        dataset_id,
        created: !isMerge ? (/* @__PURE__ */ new Date()).toISOString() : void 0,
        //if we're merging/updating an event we will not add this ts
        metadata,
        ...!!isMerge ? {
          [IS_MERGE_FIELD]: true
        } : {}
      };
      return args;
    });
  }
  /**
   * Insert a single record to the dataset. The record will be batched and uploaded behind the scenes. If you pass in an `id`,
   * and a record with that `id` already exists, it will be overwritten (upsert).
   *
   * @param event The event to log.
   * @param event.input The argument that uniquely define an input case (an arbitrary, JSON serializable object).
   * @param event.expected The output of your application, including post-processing (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) a list of strings that you can use to filter and group records later.
   * @param event.metadata (Optional) a dictionary with additional data about the test example, model outputs, or just
   * about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the
   * `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @param event.id (Optional) a unique identifier for the event. If you don't provide one, Braintrust will generate one for you.
   * @param event.output: (Deprecated) The output of your application. Use `expected` instead.
   * @returns The `id` of the logged record.
   */
  insert({
    input,
    expected,
    metadata,
    tags,
    id,
    output
  }) {
    this.validateEvent({ metadata, expected, output, tags });
    const rowId = id || (0, import_uuid.v4)();
    const args = this.createArgs(
      deepCopyEvent({
        id: rowId,
        input,
        expected,
        metadata,
        tags,
        output,
        isMerge: false
      })
    );
    this.state.bgLogger().log([args]);
    this.newRecords++;
    return rowId;
  }
  /**
   * Update fields of a single record in the dataset. The updated fields will be batched and uploaded behind the scenes.
   * You must pass in an `id` of the record to update. Only the fields provided will be updated; other fields will remain unchanged.
   *
   * @param event The fields to update in the record.
   * @param event.id The unique identifier of the record to update.
   * @param event.input (Optional) The new input value for the record (an arbitrary, JSON serializable object).
   * @param event.expected (Optional) The new expected output value for the record (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) A list of strings to update the tags of the record.
   * @param event.metadata (Optional) A dictionary to update the metadata of the record. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @returns The `id` of the updated record.
   */
  update({
    input,
    expected,
    metadata,
    tags,
    id
  }) {
    this.validateEvent({ metadata, expected, tags });
    const args = this.createArgs(
      deepCopyEvent({
        id,
        input,
        expected,
        metadata,
        tags,
        isMerge: true
      })
    );
    this.state.bgLogger().log([args]);
    return id;
  }
  delete(id) {
    const args = new LazyValue(async () => ({
      id,
      dataset_id: await this.id,
      created: (/* @__PURE__ */ new Date()).toISOString(),
      _object_delete: true
    }));
    this.state.bgLogger().log([args]);
    return id;
  }
  /**
   * Summarize the dataset, including high level metrics about its size and other metadata.
   * @param summarizeData Whether to summarize the data. If false, only the metadata will be returned.
   * @returns `DatasetSummary`
   * @returns A summary of the dataset.
   */
  async summarize(options = {}) {
    const { summarizeData = true } = options || {};
    await this.flush();
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const datasetUrl = `${projectUrl}/datasets/${encodeURIComponent(
      await this.name
    )}`;
    let dataSummary;
    if (summarizeData) {
      const rawDataSummary = import_zod.z.object({
        total_records: import_zod.z.number()
      }).parse(
        await state.apiConn().get_json(
          "dataset-summary",
          {
            dataset_id: await this.id
          },
          3
        )
      );
      dataSummary = {
        newRecords: this.newRecords,
        totalRecords: rawDataSummary.total_records
      };
    }
    return {
      projectName: (await this.project).name,
      datasetName: await this.name,
      projectUrl,
      datasetUrl,
      dataSummary
    };
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
  static isDataset(data) {
    return typeof data === "object" && data !== null && "__braintrust_dataset_marker" in data;
  }
};
function renderMessage(render, message) {
  return {
    ...message,
    ..."content" in message ? {
      content: isEmpty2(message.content) ? void 0 : typeof message.content === "string" ? render(message.content) : message.content.map((c) => {
        switch (c.type) {
          case "text":
            return { ...c, text: render(c.text) };
          case "image_url":
            if (isObject(c.image_url.url)) {
              throw new Error(
                "Attachments must be replaced with URLs before calling `build()`"
              );
            }
            return {
              ...c,
              image_url: {
                ...c.image_url,
                url: render(c.image_url.url)
              }
            };
          default:
            const _exhaustiveCheck = c;
            return _exhaustiveCheck;
        }
      })
    } : {},
    ..."tool_calls" in message ? {
      tool_calls: isEmpty2(message.tool_calls) ? void 0 : message.tool_calls.map((t) => {
        return {
          type: t.type,
          id: render(t.id),
          function: {
            name: render(t.function.name),
            arguments: render(t.function.arguments)
          }
        };
      })
    } : {},
    ..."tool_call_id" in message ? {
      tool_call_id: render(message.tool_call_id)
    } : {}
  };
}
function deserializePlainStringAsJSON(s) {
  if (s.trim() === "") {
    return { value: null, error: void 0 };
  }
  try {
    return { value: JSON.parse(s), error: void 0 };
  } catch (e) {
    return { value: s, error: e };
  }
}
function renderTemplatedObject(obj, args, options) {
  if (typeof obj === "string") {
    if (options.strict) {
      lintTemplate(obj, args);
    }
    return import_mustache2.default.render(obj, args, void 0, {
      escape: (value) => {
        if (typeof value === "string") {
          return value;
        } else {
          return JSON.stringify(value);
        }
      }
    });
  } else if (isArray(obj)) {
    return obj.map((item) => renderTemplatedObject(item, args, options));
  } else if (isObject(obj)) {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        renderTemplatedObject(value, args, options)
      ])
    );
  }
  return obj;
}
function renderPromptParams(params, args, options) {
  const schemaParsed = import_zod.z.object({
    response_format: import_zod.z.object({
      type: import_zod.z.literal("json_schema"),
      json_schema: ResponseFormatJsonSchema.omit({ schema: true }).extend({
        schema: import_zod.z.unknown()
      })
    })
  }).safeParse(params);
  if (schemaParsed.success) {
    const rawSchema = schemaParsed.data.response_format.json_schema.schema;
    const templatedSchema = renderTemplatedObject(rawSchema, args, options);
    const parsedSchema = typeof templatedSchema === "string" ? deserializePlainStringAsJSON(templatedSchema).value : templatedSchema;
    return {
      ...params,
      response_format: {
        ...schemaParsed.data.response_format,
        json_schema: {
          ...schemaParsed.data.response_format.json_schema,
          schema: parsedSchema
        }
      }
    };
  }
  return params;
}
var Prompt2 = class _Prompt {
  constructor(metadata, defaults, noTrace) {
    this.metadata = metadata;
    this.defaults = defaults;
    this.noTrace = noTrace;
  }
  parsedPromptData;
  hasParsedPromptData = false;
  __braintrust_prompt_marker = true;
  get id() {
    return this.metadata.id;
  }
  get projectId() {
    return this.metadata.project_id;
  }
  get name() {
    return "name" in this.metadata ? this.metadata.name : `Playground function ${this.metadata.id}`;
  }
  get slug() {
    return "slug" in this.metadata ? this.metadata.slug : this.metadata.id;
  }
  get prompt() {
    return this.getParsedPromptData()?.prompt;
  }
  get version() {
    return this.metadata[TRANSACTION_ID_FIELD];
  }
  get options() {
    return this.getParsedPromptData()?.options || {};
  }
  get promptData() {
    return this.getParsedPromptData();
  }
  /**
   * Build the prompt with the given formatting options. The args you pass in will
   * be forwarded to the mustache template that defines the prompt and rendered with
   * the `mustache-js` library.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  build(buildArgs, options = {}) {
    return this.runBuild(buildArgs, {
      flavor: options.flavor ?? "chat",
      messages: options.messages,
      strict: options.strict
    });
  }
  /**
   * This is a special build method that first resolves attachment references, and then
   * calls the regular build method. You should use this if you are building prompts from
   * dataset rows that contain attachments.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  async buildWithAttachments(buildArgs, options = {}) {
    const hydrated = buildArgs instanceof Object ? await resolveAttachmentsToBase64(buildArgs, options.state) : buildArgs;
    return this.runBuild(hydrated, {
      flavor: options.flavor ?? "chat",
      messages: options.messages,
      strict: options.strict
    });
  }
  runBuild(buildArgs, options) {
    const { flavor } = options;
    const params = {
      ...this.defaults,
      ...Object.fromEntries(
        Object.entries(this.options.params || {}).filter(
          ([k, _v]) => !BRAINTRUST_PARAMS.includes(k)
        )
      ),
      ...!isEmpty2(this.options.model) ? {
        model: this.options.model
      } : {}
    };
    if (!("model" in params) || isEmpty2(params.model)) {
      throw new Error(
        "No model specified. Either specify it in the prompt or as a default"
      );
    }
    const spanInfo = this.noTrace ? {} : {
      span_info: {
        metadata: {
          prompt: this.id ? {
            variables: buildArgs,
            id: this.id,
            project_id: this.projectId,
            version: this.version,
            ..."prompt_session_id" in this.metadata ? { prompt_session_id: this.metadata.prompt_session_id } : {}
          } : void 0
        }
      }
    };
    const prompt = this.prompt;
    if (!prompt) {
      throw new Error("Empty prompt");
    }
    const dictArgParsed = import_zod.z.record(import_zod.z.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    const renderedPrompt = _Prompt.renderPrompt({
      prompt,
      buildArgs,
      options
    });
    if (flavor === "chat") {
      if (renderedPrompt.type !== "chat") {
        throw new Error(
          "Prompt is a completion prompt. Use buildCompletion() instead"
        );
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        messages: renderedPrompt.messages,
        ...renderedPrompt.tools ? {
          tools: ChatCompletionTool.array().parse(JSON.parse(renderedPrompt.tools))
        } : void 0
      };
    } else if (flavor === "completion") {
      if (renderedPrompt.type !== "completion") {
        throw new Error(`Prompt is a chat prompt. Use flavor: 'chat' instead`);
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        prompt: renderedPrompt.content
      };
    } else {
      throw new Error("never!");
    }
  }
  static renderPrompt({
    prompt,
    buildArgs,
    options
  }) {
    const escape = (v) => {
      if (v === void 0) {
        throw new Error("Missing!");
      } else if (typeof v === "string") {
        return v;
      } else if (v instanceof ReadonlyAttachment) {
        throw new Error(
          "Use buildWithAttachments() to build prompts with attachments"
        );
      } else {
        return JSON.stringify(v);
      }
    };
    const dictArgParsed = import_zod.z.record(import_zod.z.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    if (prompt.type === "chat") {
      const render = (template) => {
        if (options.strict) {
          lintTemplate(template, variables);
        }
        return import_mustache2.default.render(template, variables, void 0, {
          escape
        });
      };
      const baseMessages = (prompt.messages || []).map(
        (m) => renderMessage(render, m)
      );
      const hasSystemPrompt = baseMessages.some((m) => m.role === "system");
      const messages = [
        ...baseMessages,
        ...(options.messages ?? []).filter(
          (m) => !(hasSystemPrompt && m.role === "system")
        )
      ];
      return {
        type: "chat",
        messages,
        ...prompt.tools?.trim() ? {
          tools: render(prompt.tools)
        } : void 0
      };
    } else if (prompt.type === "completion") {
      if (options.messages) {
        throw new Error(
          "extra messages are not supported for completion prompts"
        );
      }
      if (options.strict) {
        lintTemplate(prompt.content, variables);
      }
      return {
        type: "completion",
        content: import_mustache2.default.render(prompt.content, variables, void 0, {
          escape
        })
      };
    } else {
      const _ = prompt;
      throw new Error(`Invalid prompt type: ${_}`);
    }
  }
  getParsedPromptData() {
    if (!this.hasParsedPromptData) {
      this.parsedPromptData = PromptData.parse(this.metadata.prompt_data);
      this.hasParsedPromptData = true;
    }
    return this.parsedPromptData;
  }
  static isPrompt(data) {
    return typeof data === "object" && data !== null && "__braintrust_prompt_marker" in data;
  }
  static fromPromptData(name, promptData) {
    return new _Prompt(
      {
        name,
        slug: name,
        prompt_data: promptData
      },
      {},
      false
    );
  }
};
var TEST_API_KEY = "___TEST_API_KEY__THIS_IS_NOT_REAL___";

// src/progress.ts
var cliProgress = __toESM(require("cli-progress"));
var MAX_NAME_LENGTH = 40;
function fitNameToSpaces(name, length) {
  const padded = name.padEnd(length);
  if (padded.length <= length) {
    return padded;
  }
  return padded.substring(0, length - 3) + "...";
}
var SimpleProgressReporter = class {
  start(name, _total) {
    console.log(`Running evaluator ${name}`);
  }
  stop() {
  }
  increment(_name) {
  }
};
var BarProgressReporter = class {
  multiBar;
  bars = {};
  constructor() {
    this.multiBar = new cliProgress.MultiBar(
      {
        clearOnComplete: false,
        format: " {bar} | {evaluator} | {percentage}% | {value}/{total} datapoints",
        autopadding: true
      },
      cliProgress.Presets.shades_grey
    );
  }
  start(name, total) {
    const bar = this.multiBar.create(total, 0);
    this.bars[name] = bar;
  }
  stop() {
    this.multiBar.stop();
  }
  increment(name) {
    this.bars[name].increment({
      evaluator: fitNameToSpaces(name, MAX_NAME_LENGTH)
    });
  }
};

// ../../node_modules/.pnpm/async@3.2.5/node_modules/async/dist/async.mjs
function initialParams(fn) {
  return function(...args) {
    var callback = args.pop();
    return fn.call(this, args, callback);
  };
}
var hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
var hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
function fallback(fn) {
  setTimeout(fn, 0);
}
function wrap(defer) {
  return (fn, ...args) => defer(() => fn(...args));
}
var _defer$1;
if (hasQueueMicrotask) {
  _defer$1 = queueMicrotask;
} else if (hasSetImmediate) {
  _defer$1 = setImmediate;
} else if (hasNextTick) {
  _defer$1 = process.nextTick;
} else {
  _defer$1 = fallback;
}
var setImmediate$1 = wrap(_defer$1);
function asyncify(func) {
  if (isAsync(func)) {
    return function(...args) {
      const callback = args.pop();
      const promise = func.apply(this, args);
      return handlePromise(promise, callback);
    };
  }
  return initialParams(function(args, callback) {
    var result;
    try {
      result = func.apply(this, args);
    } catch (e) {
      return callback(e);
    }
    if (result && typeof result.then === "function") {
      return handlePromise(result, callback);
    } else {
      callback(null, result);
    }
  });
}
function handlePromise(promise, callback) {
  return promise.then((value) => {
    invokeCallback(callback, null, value);
  }, (err) => {
    invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));
  });
}
function invokeCallback(callback, error2, value) {
  try {
    callback(error2, value);
  } catch (err) {
    setImmediate$1((e) => {
      throw e;
    }, err);
  }
}
function isAsync(fn) {
  return fn[Symbol.toStringTag] === "AsyncFunction";
}
function isAsyncGenerator(fn) {
  return fn[Symbol.toStringTag] === "AsyncGenerator";
}
function isAsyncIterable(obj) {
  return typeof obj[Symbol.asyncIterator] === "function";
}
function wrapAsync(asyncFn) {
  if (typeof asyncFn !== "function") throw new Error("expected a function");
  return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}
function awaitify(asyncFn, arity) {
  if (!arity) arity = asyncFn.length;
  if (!arity) throw new Error("arity is undefined");
  function awaitable(...args) {
    if (typeof args[arity - 1] === "function") {
      return asyncFn.apply(this, args);
    }
    return new Promise((resolve2, reject2) => {
      args[arity - 1] = (err, ...cbArgs) => {
        if (err) return reject2(err);
        resolve2(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
      };
      asyncFn.apply(this, args);
    });
  }
  return awaitable;
}
function applyEach$1(eachfn) {
  return function applyEach2(fns, ...callArgs) {
    const go = awaitify(function(callback) {
      var that = this;
      return eachfn(fns, (fn, cb) => {
        wrapAsync(fn).apply(that, callArgs.concat(cb));
      }, callback);
    });
    return go;
  };
}
function _asyncMap(eachfn, arr, iteratee, callback) {
  arr = arr || [];
  var results = [];
  var counter = 0;
  var _iteratee = wrapAsync(iteratee);
  return eachfn(arr, (value, _, iterCb) => {
    var index = counter++;
    _iteratee(value, (err, v) => {
      results[index] = v;
      iterCb(err);
    });
  }, (err) => {
    callback(err, results);
  });
}
function isArrayLike(value) {
  return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
}
var breakLoop = {};
var breakLoop$1 = breakLoop;
function once(fn) {
  function wrapper(...args) {
    if (fn === null) return;
    var callFn = fn;
    fn = null;
    callFn.apply(this, args);
  }
  Object.assign(wrapper, fn);
  return wrapper;
}
function getIterator(coll) {
  return coll[Symbol.iterator] && coll[Symbol.iterator]();
}
function createArrayIterator(coll) {
  var i = -1;
  var len = coll.length;
  return function next() {
    return ++i < len ? { value: coll[i], key: i } : null;
  };
}
function createES2015Iterator(iterator) {
  var i = -1;
  return function next() {
    var item = iterator.next();
    if (item.done)
      return null;
    i++;
    return { value: item.value, key: i };
  };
}
function createObjectIterator(obj) {
  var okeys = obj ? Object.keys(obj) : [];
  var i = -1;
  var len = okeys.length;
  return function next() {
    var key = okeys[++i];
    if (key === "__proto__") {
      return next();
    }
    return i < len ? { value: obj[key], key } : null;
  };
}
function createIterator(coll) {
  if (isArrayLike(coll)) {
    return createArrayIterator(coll);
  }
  var iterator = getIterator(coll);
  return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}
function onlyOnce(fn) {
  return function(...args) {
    if (fn === null) throw new Error("Callback was already called.");
    var callFn = fn;
    fn = null;
    callFn.apply(this, args);
  };
}
function asyncEachOfLimit(generator, limit, iteratee, callback) {
  let done = false;
  let canceled = false;
  let awaiting = false;
  let running = 0;
  let idx = 0;
  function replenish() {
    if (running >= limit || awaiting || done) return;
    awaiting = true;
    generator.next().then(({ value, done: iterDone }) => {
      if (canceled || done) return;
      awaiting = false;
      if (iterDone) {
        done = true;
        if (running <= 0) {
          callback(null);
        }
        return;
      }
      running++;
      iteratee(value, idx, iterateeCallback);
      idx++;
      replenish();
    }).catch(handleError);
  }
  function iterateeCallback(err, result) {
    running -= 1;
    if (canceled) return;
    if (err) return handleError(err);
    if (err === false) {
      done = true;
      canceled = true;
      return;
    }
    if (result === breakLoop$1 || done && running <= 0) {
      done = true;
      return callback(null);
    }
    replenish();
  }
  function handleError(err) {
    if (canceled) return;
    awaiting = false;
    done = true;
    callback(err);
  }
  replenish();
}
var eachOfLimit$2 = (limit) => {
  return (obj, iteratee, callback) => {
    callback = once(callback);
    if (limit <= 0) {
      throw new RangeError("concurrency limit cannot be less than 1");
    }
    if (!obj) {
      return callback(null);
    }
    if (isAsyncGenerator(obj)) {
      return asyncEachOfLimit(obj, limit, iteratee, callback);
    }
    if (isAsyncIterable(obj)) {
      return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);
    }
    var nextElem = createIterator(obj);
    var done = false;
    var canceled = false;
    var running = 0;
    var looping = false;
    function iterateeCallback(err, value) {
      if (canceled) return;
      running -= 1;
      if (err) {
        done = true;
        callback(err);
      } else if (err === false) {
        done = true;
        canceled = true;
      } else if (value === breakLoop$1 || done && running <= 0) {
        done = true;
        return callback(null);
      } else if (!looping) {
        replenish();
      }
    }
    function replenish() {
      looping = true;
      while (running < limit && !done) {
        var elem = nextElem();
        if (elem === null) {
          done = true;
          if (running <= 0) {
            callback(null);
          }
          return;
        }
        running += 1;
        iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
      }
      looping = false;
    }
    replenish();
  };
};
function eachOfLimit(coll, limit, iteratee, callback) {
  return eachOfLimit$2(limit)(coll, wrapAsync(iteratee), callback);
}
var eachOfLimit$1 = awaitify(eachOfLimit, 4);
function eachOfArrayLike(coll, iteratee, callback) {
  callback = once(callback);
  var index = 0, completed = 0, { length } = coll, canceled = false;
  if (length === 0) {
    callback(null);
  }
  function iteratorCallback(err, value) {
    if (err === false) {
      canceled = true;
    }
    if (canceled === true) return;
    if (err) {
      callback(err);
    } else if (++completed === length || value === breakLoop$1) {
      callback(null);
    }
  }
  for (; index < length; index++) {
    iteratee(coll[index], index, onlyOnce(iteratorCallback));
  }
}
function eachOfGeneric(coll, iteratee, callback) {
  return eachOfLimit$1(coll, Infinity, iteratee, callback);
}
function eachOf(coll, iteratee, callback) {
  var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
  return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}
var eachOf$1 = awaitify(eachOf, 3);
function map(coll, iteratee, callback) {
  return _asyncMap(eachOf$1, coll, iteratee, callback);
}
var map$1 = awaitify(map, 3);
var applyEach = applyEach$1(map$1);
function eachOfSeries(coll, iteratee, callback) {
  return eachOfLimit$1(coll, 1, iteratee, callback);
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);
function mapSeries(coll, iteratee, callback) {
  return _asyncMap(eachOfSeries$1, coll, iteratee, callback);
}
var mapSeries$1 = awaitify(mapSeries, 3);
var applyEachSeries = applyEach$1(mapSeries$1);
var PROMISE_SYMBOL = Symbol("promiseCallback");
var DLL = class {
  constructor() {
    this.head = this.tail = null;
    this.length = 0;
  }
  removeLink(node) {
    if (node.prev) node.prev.next = node.next;
    else this.head = node.next;
    if (node.next) node.next.prev = node.prev;
    else this.tail = node.prev;
    node.prev = node.next = null;
    this.length -= 1;
    return node;
  }
  empty() {
    while (this.head) this.shift();
    return this;
  }
  insertAfter(node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;
    else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
  }
  insertBefore(node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;
    else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
  }
  unshift(node) {
    if (this.head) this.insertBefore(this.head, node);
    else setInitial(this, node);
  }
  push(node) {
    if (this.tail) this.insertAfter(this.tail, node);
    else setInitial(this, node);
  }
  shift() {
    return this.head && this.removeLink(this.head);
  }
  pop() {
    return this.tail && this.removeLink(this.tail);
  }
  toArray() {
    return [...this];
  }
  *[Symbol.iterator]() {
    var cur = this.head;
    while (cur) {
      yield cur.data;
      cur = cur.next;
    }
  }
  remove(testFn) {
    var curr = this.head;
    while (curr) {
      var { next } = curr;
      if (testFn(curr)) {
        this.removeLink(curr);
      }
      curr = next;
    }
    return this;
  }
};
function setInitial(dll, node) {
  dll.length = 1;
  dll.head = dll.tail = node;
}
function queue$1(worker, concurrency, payload) {
  if (concurrency == null) {
    concurrency = 1;
  } else if (concurrency === 0) {
    throw new RangeError("Concurrency must not be zero");
  }
  var _worker = wrapAsync(worker);
  var numRunning = 0;
  var workersList = [];
  const events = {
    error: [],
    drain: [],
    saturated: [],
    unsaturated: [],
    empty: []
  };
  function on(event, handler) {
    events[event].push(handler);
  }
  function once2(event, handler) {
    const handleAndRemove = (...args) => {
      off(event, handleAndRemove);
      handler(...args);
    };
    events[event].push(handleAndRemove);
  }
  function off(event, handler) {
    if (!event) return Object.keys(events).forEach((ev) => events[ev] = []);
    if (!handler) return events[event] = [];
    events[event] = events[event].filter((ev) => ev !== handler);
  }
  function trigger(event, ...args) {
    events[event].forEach((handler) => handler(...args));
  }
  var processingScheduled = false;
  function _insert(data, insertAtFront, rejectOnError, callback) {
    if (callback != null && typeof callback !== "function") {
      throw new Error("task callback must be a function");
    }
    q.started = true;
    var res, rej;
    function promiseCallback(err, ...args) {
      if (err) return rejectOnError ? rej(err) : res();
      if (args.length <= 1) return res(args[0]);
      res(args);
    }
    var item = q._createTaskItem(
      data,
      rejectOnError ? promiseCallback : callback || promiseCallback
    );
    if (insertAtFront) {
      q._tasks.unshift(item);
    } else {
      q._tasks.push(item);
    }
    if (!processingScheduled) {
      processingScheduled = true;
      setImmediate$1(() => {
        processingScheduled = false;
        q.process();
      });
    }
    if (rejectOnError || !callback) {
      return new Promise((resolve2, reject2) => {
        res = resolve2;
        rej = reject2;
      });
    }
  }
  function _createCB(tasks) {
    return function(err, ...args) {
      numRunning -= 1;
      for (var i = 0, l = tasks.length; i < l; i++) {
        var task = tasks[i];
        var index = workersList.indexOf(task);
        if (index === 0) {
          workersList.shift();
        } else if (index > 0) {
          workersList.splice(index, 1);
        }
        task.callback(err, ...args);
        if (err != null) {
          trigger("error", err, task.data);
        }
      }
      if (numRunning <= q.concurrency - q.buffer) {
        trigger("unsaturated");
      }
      if (q.idle()) {
        trigger("drain");
      }
      q.process();
    };
  }
  function _maybeDrain(data) {
    if (data.length === 0 && q.idle()) {
      setImmediate$1(() => trigger("drain"));
      return true;
    }
    return false;
  }
  const eventMethod = (name) => (handler) => {
    if (!handler) {
      return new Promise((resolve2, reject2) => {
        once2(name, (err, data) => {
          if (err) return reject2(err);
          resolve2(data);
        });
      });
    }
    off(name);
    on(name, handler);
  };
  var isProcessing = false;
  var q = {
    _tasks: new DLL(),
    _createTaskItem(data, callback) {
      return {
        data,
        callback
      };
    },
    *[Symbol.iterator]() {
      yield* q._tasks[Symbol.iterator]();
    },
    concurrency,
    payload,
    buffer: concurrency / 4,
    started: false,
    paused: false,
    push(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, false, false, callback));
      }
      return _insert(data, false, false, callback);
    },
    pushAsync(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, false, true, callback));
      }
      return _insert(data, false, true, callback);
    },
    kill() {
      off();
      q._tasks.empty();
    },
    unshift(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, true, false, callback));
      }
      return _insert(data, true, false, callback);
    },
    unshiftAsync(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, true, true, callback));
      }
      return _insert(data, true, true, callback);
    },
    remove(testFn) {
      q._tasks.remove(testFn);
    },
    process() {
      if (isProcessing) {
        return;
      }
      isProcessing = true;
      while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
        var tasks = [], data = [];
        var l = q._tasks.length;
        if (q.payload) l = Math.min(l, q.payload);
        for (var i = 0; i < l; i++) {
          var node = q._tasks.shift();
          tasks.push(node);
          workersList.push(node);
          data.push(node.data);
        }
        numRunning += 1;
        if (q._tasks.length === 0) {
          trigger("empty");
        }
        if (numRunning === q.concurrency) {
          trigger("saturated");
        }
        var cb = onlyOnce(_createCB(tasks));
        _worker(data, cb);
      }
      isProcessing = false;
    },
    length() {
      return q._tasks.length;
    },
    running() {
      return numRunning;
    },
    workersList() {
      return workersList;
    },
    idle() {
      return q._tasks.length + numRunning === 0;
    },
    pause() {
      q.paused = true;
    },
    resume() {
      if (q.paused === false) {
        return;
      }
      q.paused = false;
      setImmediate$1(q.process);
    }
  };
  Object.defineProperties(q, {
    saturated: {
      writable: false,
      value: eventMethod("saturated")
    },
    unsaturated: {
      writable: false,
      value: eventMethod("unsaturated")
    },
    empty: {
      writable: false,
      value: eventMethod("empty")
    },
    drain: {
      writable: false,
      value: eventMethod("drain")
    },
    error: {
      writable: false,
      value: eventMethod("error")
    }
  });
  return q;
}
function reduce(coll, memo, iteratee, callback) {
  callback = once(callback);
  var _iteratee = wrapAsync(iteratee);
  return eachOfSeries$1(coll, (x, i, iterCb) => {
    _iteratee(memo, x, (err, v) => {
      memo = v;
      iterCb(err);
    });
  }, (err) => callback(err, memo));
}
var reduce$1 = awaitify(reduce, 4);
function mapLimit(coll, limit, iteratee, callback) {
  return _asyncMap(eachOfLimit$2(limit), coll, iteratee, callback);
}
var mapLimit$1 = awaitify(mapLimit, 4);
function concatLimit(coll, limit, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return mapLimit$1(coll, limit, (val, iterCb) => {
    _iteratee(val, (err, ...args) => {
      if (err) return iterCb(err);
      return iterCb(err, args);
    });
  }, (err, mapResults) => {
    var result = [];
    for (var i = 0; i < mapResults.length; i++) {
      if (mapResults[i]) {
        result = result.concat(...mapResults[i]);
      }
    }
    return callback(err, result);
  });
}
var concatLimit$1 = awaitify(concatLimit, 4);
function concat(coll, iteratee, callback) {
  return concatLimit$1(coll, Infinity, iteratee, callback);
}
var concat$1 = awaitify(concat, 3);
function concatSeries(coll, iteratee, callback) {
  return concatLimit$1(coll, 1, iteratee, callback);
}
var concatSeries$1 = awaitify(concatSeries, 3);
function _createTester(check, getResult) {
  return (eachfn, arr, _iteratee, cb) => {
    var testPassed = false;
    var testResult;
    const iteratee = wrapAsync(_iteratee);
    eachfn(arr, (value, _, callback) => {
      iteratee(value, (err, result) => {
        if (err || err === false) return callback(err);
        if (check(result) && !testResult) {
          testPassed = true;
          testResult = getResult(true, value);
          return callback(null, breakLoop$1);
        }
        callback();
      });
    }, (err) => {
      if (err) return cb(err);
      cb(null, testPassed ? testResult : getResult(false));
    });
  };
}
function detect(coll, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);
}
var detect$1 = awaitify(detect, 3);
function detectLimit(coll, limit, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var detectLimit$1 = awaitify(detectLimit, 4);
function detectSeries(coll, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOfLimit$2(1), coll, iteratee, callback);
}
var detectSeries$1 = awaitify(detectSeries, 3);
function consoleFunc(name) {
  return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
    if (typeof console === "object") {
      if (err) {
        if (console.error) {
          console.error(err);
        }
      } else if (console[name]) {
        resultArgs.forEach((x) => console[name](x));
      }
    }
  });
}
var dir = consoleFunc("dir");
function doWhilst(iteratee, test, callback) {
  callback = onlyOnce(callback);
  var _fn = wrapAsync(iteratee);
  var _test = wrapAsync(test);
  var results;
  function next(err, ...args) {
    if (err) return callback(err);
    if (err === false) return;
    results = args;
    _test(...args, check);
  }
  function check(err, truth) {
    if (err) return callback(err);
    if (err === false) return;
    if (!truth) return callback(null, ...results);
    _fn(next);
  }
  return check(null, true);
}
var doWhilst$1 = awaitify(doWhilst, 3);
function _withoutIndex(iteratee) {
  return (value, index, callback) => iteratee(value, callback);
}
function eachLimit$2(coll, iteratee, callback) {
  return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var each = awaitify(eachLimit$2, 3);
function eachLimit(coll, limit, iteratee, callback) {
  return eachOfLimit$2(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$1 = awaitify(eachLimit, 4);
function eachSeries(coll, iteratee, callback) {
  return eachLimit$1(coll, 1, iteratee, callback);
}
var eachSeries$1 = awaitify(eachSeries, 3);
function ensureAsync(fn) {
  if (isAsync(fn)) return fn;
  return function(...args) {
    var callback = args.pop();
    var sync = true;
    args.push((...innerArgs) => {
      if (sync) {
        setImmediate$1(() => callback(...innerArgs));
      } else {
        callback(...innerArgs);
      }
    });
    fn.apply(this, args);
    sync = false;
  };
}
function every(coll, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOf$1, coll, iteratee, callback);
}
var every$1 = awaitify(every, 3);
function everyLimit(coll, limit, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var everyLimit$1 = awaitify(everyLimit, 4);
function everySeries(coll, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOfSeries$1, coll, iteratee, callback);
}
var everySeries$1 = awaitify(everySeries, 3);
function filterArray(eachfn, arr, iteratee, callback) {
  var truthValues = new Array(arr.length);
  eachfn(arr, (x, index, iterCb) => {
    iteratee(x, (err, v) => {
      truthValues[index] = !!v;
      iterCb(err);
    });
  }, (err) => {
    if (err) return callback(err);
    var results = [];
    for (var i = 0; i < arr.length; i++) {
      if (truthValues[i]) results.push(arr[i]);
    }
    callback(null, results);
  });
}
function filterGeneric(eachfn, coll, iteratee, callback) {
  var results = [];
  eachfn(coll, (x, index, iterCb) => {
    iteratee(x, (err, v) => {
      if (err) return iterCb(err);
      if (v) {
        results.push({ index, value: x });
      }
      iterCb(err);
    });
  }, (err) => {
    if (err) return callback(err);
    callback(null, results.sort((a, b) => a.index - b.index).map((v) => v.value));
  });
}
function _filter(eachfn, coll, iteratee, callback) {
  var filter2 = isArrayLike(coll) ? filterArray : filterGeneric;
  return filter2(eachfn, coll, wrapAsync(iteratee), callback);
}
function filter(coll, iteratee, callback) {
  return _filter(eachOf$1, coll, iteratee, callback);
}
var filter$1 = awaitify(filter, 3);
function filterLimit(coll, limit, iteratee, callback) {
  return _filter(eachOfLimit$2(limit), coll, iteratee, callback);
}
var filterLimit$1 = awaitify(filterLimit, 4);
function filterSeries(coll, iteratee, callback) {
  return _filter(eachOfSeries$1, coll, iteratee, callback);
}
var filterSeries$1 = awaitify(filterSeries, 3);
function forever(fn, errback) {
  var done = onlyOnce(errback);
  var task = wrapAsync(ensureAsync(fn));
  function next(err) {
    if (err) return done(err);
    if (err === false) return;
    task(next);
  }
  return next();
}
var forever$1 = awaitify(forever, 2);
function groupByLimit(coll, limit, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return mapLimit$1(coll, limit, (val, iterCb) => {
    _iteratee(val, (err, key) => {
      if (err) return iterCb(err);
      return iterCb(err, { key, val });
    });
  }, (err, mapResults) => {
    var result = {};
    var { hasOwnProperty } = Object.prototype;
    for (var i = 0; i < mapResults.length; i++) {
      if (mapResults[i]) {
        var { key } = mapResults[i];
        var { val } = mapResults[i];
        if (hasOwnProperty.call(result, key)) {
          result[key].push(val);
        } else {
          result[key] = [val];
        }
      }
    }
    return callback(err, result);
  });
}
var groupByLimit$1 = awaitify(groupByLimit, 4);
var log = consoleFunc("log");
function mapValuesLimit(obj, limit, iteratee, callback) {
  callback = once(callback);
  var newObj = {};
  var _iteratee = wrapAsync(iteratee);
  return eachOfLimit$2(limit)(obj, (val, key, next) => {
    _iteratee(val, key, (err, result) => {
      if (err) return next(err);
      newObj[key] = result;
      next(err);
    });
  }, (err) => callback(err, newObj));
}
var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);
var _defer;
if (hasNextTick) {
  _defer = process.nextTick;
} else if (hasSetImmediate) {
  _defer = setImmediate;
} else {
  _defer = fallback;
}
var nextTick = wrap(_defer);
var _parallel = awaitify((eachfn, tasks, callback) => {
  var results = isArrayLike(tasks) ? [] : {};
  eachfn(tasks, (task, key, taskCb) => {
    wrapAsync(task)((err, ...result) => {
      if (result.length < 2) {
        [result] = result;
      }
      results[key] = result;
      taskCb(err);
    });
  }, (err) => callback(err, results));
}, 3);
function queue(worker, concurrency) {
  var _worker = wrapAsync(worker);
  return queue$1((items, cb) => {
    _worker(items[0], cb);
  }, concurrency, 1);
}
function race(tasks, callback) {
  callback = once(callback);
  if (!Array.isArray(tasks)) return callback(new TypeError("First argument to race must be an array of functions"));
  if (!tasks.length) return callback();
  for (var i = 0, l = tasks.length; i < l; i++) {
    wrapAsync(tasks[i])(callback);
  }
}
var race$1 = awaitify(race, 2);
function reject$2(eachfn, arr, _iteratee, callback) {
  const iteratee = wrapAsync(_iteratee);
  return _filter(eachfn, arr, (value, cb) => {
    iteratee(value, (err, v) => {
      cb(err, !v);
    });
  }, callback);
}
function reject(coll, iteratee, callback) {
  return reject$2(eachOf$1, coll, iteratee, callback);
}
var reject$1 = awaitify(reject, 3);
function rejectLimit(coll, limit, iteratee, callback) {
  return reject$2(eachOfLimit$2(limit), coll, iteratee, callback);
}
var rejectLimit$1 = awaitify(rejectLimit, 4);
function rejectSeries(coll, iteratee, callback) {
  return reject$2(eachOfSeries$1, coll, iteratee, callback);
}
var rejectSeries$1 = awaitify(rejectSeries, 3);
function some(coll, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOf$1, coll, iteratee, callback);
}
var some$1 = awaitify(some, 3);
function someLimit(coll, limit, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var someLimit$1 = awaitify(someLimit, 4);
function someSeries(coll, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOfSeries$1, coll, iteratee, callback);
}
var someSeries$1 = awaitify(someSeries, 3);
function sortBy(coll, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return map$1(coll, (x, iterCb) => {
    _iteratee(x, (err, criteria) => {
      if (err) return iterCb(err);
      iterCb(err, { value: x, criteria });
    });
  }, (err, results) => {
    if (err) return callback(err);
    callback(null, results.sort(comparator).map((v) => v.value));
  });
  function comparator(left, right) {
    var a = left.criteria, b = right.criteria;
    return a < b ? -1 : a > b ? 1 : 0;
  }
}
var sortBy$1 = awaitify(sortBy, 3);
function tryEach(tasks, callback) {
  var error2 = null;
  var result;
  return eachSeries$1(tasks, (task, taskCb) => {
    wrapAsync(task)((err, ...args) => {
      if (err === false) return taskCb(err);
      if (args.length < 2) {
        [result] = args;
      } else {
        result = args;
      }
      error2 = err;
      taskCb(err ? null : {});
    });
  }, () => callback(error2, result));
}
var tryEach$1 = awaitify(tryEach);
function whilst(test, iteratee, callback) {
  callback = onlyOnce(callback);
  var _fn = wrapAsync(iteratee);
  var _test = wrapAsync(test);
  var results = [];
  function next(err, ...rest) {
    if (err) return callback(err);
    results = rest;
    if (err === false) return;
    _test(check);
  }
  function check(err, truth) {
    if (err) return callback(err);
    if (err === false) return;
    if (!truth) return callback(null, ...results);
    _fn(next);
  }
  return _test(check);
}
var whilst$1 = awaitify(whilst, 3);
function waterfall(tasks, callback) {
  callback = once(callback);
  if (!Array.isArray(tasks)) return callback(new Error("First argument to waterfall must be an array of functions"));
  if (!tasks.length) return callback();
  var taskIndex = 0;
  function nextTask(args) {
    var task = wrapAsync(tasks[taskIndex++]);
    task(...args, onlyOnce(next));
  }
  function next(err, ...args) {
    if (err === false) return;
    if (err || taskIndex === tasks.length) {
      return callback(err, ...args);
    }
    nextTask(args);
  }
  nextTask([]);
}
var waterfall$1 = awaitify(waterfall);

// src/framework.ts
var import_chalk = __toESM(require("chalk"));
var import_pluralize = __toESM(require("pluralize"));

// src/eval-parameters.ts
var import_v38 = require("zod/v3");

// src/framework2.ts
var import_path = __toESM(require("path"));
var import_slugify = __toESM(require("slugify"));
var import_v37 = require("zod/v3");
var ProjectBuilder = class {
  create(opts) {
    return new Project2(opts);
  }
};
var projects = new ProjectBuilder();
var Project2 = class {
  name;
  id;
  tools;
  prompts;
  scorers;
  _publishableCodeFunctions = [];
  _publishablePrompts = [];
  constructor(args) {
    _initializeSpanContext();
    this.name = "name" in args ? args.name : void 0;
    this.id = "id" in args ? args.id : void 0;
    this.tools = new ToolBuilder(this);
    this.prompts = new PromptBuilder(this);
    this.scorers = new ScorerBuilder(this);
  }
  addPrompt(prompt) {
    this._publishablePrompts.push(prompt);
    if (globalThis._lazy_load) {
      globalThis._evals.prompts.push(prompt);
    }
  }
  addCodeFunction(fn) {
    this._publishableCodeFunctions.push(fn);
    if (globalThis._lazy_load) {
      globalThis._evals.functions.push(fn);
    }
  }
  async publish() {
    if (globalThis._lazy_load) {
      console.warn("publish() is a no-op when running `braintrust push`.");
      return;
    }
    await login();
    const projectMap = new ProjectNameIdMap();
    const functionDefinitions = [];
    if (this._publishableCodeFunctions.length > 0) {
      console.warn(
        "Code functions cannot be published directly. Use `braintrust push` instead."
      );
    }
    if (this._publishablePrompts.length > 0) {
      for (const prompt of this._publishablePrompts) {
        const functionDefinition = await prompt.toFunctionDefinition(projectMap);
        functionDefinitions.push(functionDefinition);
      }
    }
    await _internalGetGlobalState().apiConn().post_json("insert-functions", {
      functions: functionDefinitions
    });
  }
};
var ToolBuilder = class {
  constructor(project) {
    this.project = project;
  }
  taskCounter = 0;
  // This type definition is just a catch all so that the implementation can be
  // less specific than the two more specific declarations above.
  create(opts) {
    this.taskCounter++;
    opts = opts ?? {};
    const { handler, name, slug, parameters, returns, ...rest } = opts;
    let resolvedName = name ?? handler.name;
    if (resolvedName.trim().length === 0) {
      resolvedName = `Tool ${import_path.default.basename(__filename)} ${this.taskCounter}`;
    }
    const tool = new CodeFunction(this.project, {
      handler,
      name: resolvedName,
      slug: slug ?? (0, import_slugify.default)(resolvedName, { lower: true, strict: true }),
      type: "tool",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions
      parameters,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions
      returns,
      ...rest
    });
    this.project.addCodeFunction(tool);
    return tool;
  }
};
var ScorerBuilder = class {
  constructor(project) {
    this.project = project;
  }
  taskCounter = 0;
  create(opts) {
    this.taskCounter++;
    let resolvedName = opts.name;
    if (!resolvedName && "handler" in opts) {
      resolvedName = opts.handler.name;
    }
    if (!resolvedName || resolvedName.trim().length === 0) {
      resolvedName = `Scorer ${import_path.default.basename(__filename)} ${this.taskCounter}`;
    }
    const slug = opts.slug ?? (0, import_slugify.default)(resolvedName, { lower: true, strict: true });
    if ("handler" in opts) {
      const scorer = new CodeFunction(this.project, {
        ...opts,
        name: resolvedName,
        slug,
        type: "scorer"
      });
      this.project.addCodeFunction(scorer);
    } else {
      const promptBlock = "messages" in opts ? {
        type: "chat",
        messages: opts.messages
      } : {
        type: "completion",
        content: opts.prompt
      };
      const promptData = {
        prompt: promptBlock,
        options: {
          model: opts.model,
          params: opts.params
        },
        parser: {
          type: "llm_classifier",
          use_cot: opts.useCot,
          choice_scores: opts.choiceScores
        }
      };
      const codePrompt = new CodePrompt(
        this.project,
        promptData,
        [],
        {
          ...opts,
          name: resolvedName,
          slug
        },
        "scorer"
      );
      this.project.addPrompt(codePrompt);
    }
  }
};
var CodeFunction = class {
  constructor(project, opts) {
    this.project = project;
    this.handler = opts.handler;
    this.name = opts.name;
    this.slug = opts.slug;
    this.description = opts.description;
    this.type = opts.type;
    this.ifExists = opts.ifExists;
    this.parameters = opts.parameters;
    this.returns = opts.returns;
    if (this.returns && !this.parameters) {
      throw new Error("parameters are required if return type is defined");
    }
  }
  handler;
  name;
  slug;
  type;
  description;
  parameters;
  returns;
  ifExists;
  key() {
    return JSON.stringify([
      this.project.id ?? "",
      this.project.name ?? "",
      this.slug
    ]);
  }
};
var CodePrompt = class {
  project;
  name;
  slug;
  prompt;
  ifExists;
  description;
  id;
  functionType;
  toolFunctions;
  constructor(project, prompt, toolFunctions, opts, functionType) {
    this.project = project;
    this.name = opts.name;
    this.slug = opts.slug;
    this.prompt = prompt;
    this.toolFunctions = toolFunctions;
    this.ifExists = opts.ifExists;
    this.description = opts.description;
    this.id = opts.id;
    this.functionType = functionType;
  }
  async toFunctionDefinition(projectNameToId) {
    const prompt_data = {
      ...this.prompt
    };
    if (this.toolFunctions.length > 0) {
      const resolvableToolFunctions = await Promise.all(
        this.toolFunctions.map(async (fn) => {
          if ("slug" in fn) {
            return {
              type: "slug",
              project_id: await projectNameToId.resolve(fn.project),
              slug: fn.slug
            };
          } else {
            return fn;
          }
        })
      );
      prompt_data.tool_functions = // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      resolvableToolFunctions;
    }
    return {
      project_id: await projectNameToId.resolve(this.project),
      name: this.name,
      slug: this.slug,
      description: this.description ?? "",
      function_data: {
        type: "prompt"
      },
      function_type: this.functionType,
      prompt_data,
      if_exists: this.ifExists
    };
  }
};
var promptContentsSchema = import_v37.z.union([
  import_v37.z.object({
    prompt: import_v37.z.string()
  }),
  import_v37.z.object({
    messages: import_v37.z.array(ChatCompletionMessageParam)
  })
]);
var promptDefinitionSchema = promptContentsSchema.and(
  import_v37.z.object({
    model: import_v37.z.string(),
    params: ModelParams.optional()
  })
);
var promptDefinitionWithToolsSchema = promptDefinitionSchema.and(
  import_v37.z.object({
    tools: import_v37.z.array(ToolFunctionDefinition).optional()
  })
);
var PromptBuilder = class {
  constructor(project) {
    this.project = project;
  }
  create(opts) {
    const toolFunctions = [];
    const rawTools = [];
    for (const tool of opts.tools ?? []) {
      if (tool instanceof CodeFunction) {
        toolFunctions.push(tool);
      } else if ("type" in tool && !("function" in tool)) {
        toolFunctions.push(tool);
      } else {
        rawTools.push(tool);
      }
    }
    const slug = opts.slug ?? (0, import_slugify.default)(opts.name, { lower: true, strict: true });
    const promptData = promptDefinitionToPromptData(opts, rawTools);
    const promptRow = {
      id: opts.id,
      _xact_id: opts.version ? loadPrettyXact(opts.version) : void 0,
      name: opts.name,
      slug,
      prompt_data: promptData,
      ...this.project.id !== void 0 ? { project_id: this.project.id } : {}
    };
    const prompt = new Prompt2(
      promptRow,
      {},
      // It doesn't make sense to specify defaults here.
      opts.noTrace ?? false
    );
    const codePrompt = new CodePrompt(this.project, promptData, toolFunctions, {
      ...opts,
      slug
    });
    this.project.addPrompt(codePrompt);
    return prompt;
  }
};
function promptDefinitionToPromptData(promptDefinition, rawTools) {
  const promptBlock = "messages" in promptDefinition ? {
    type: "chat",
    messages: promptDefinition.messages,
    tools: rawTools && rawTools.length > 0 ? JSON.stringify(rawTools) : void 0
  } : {
    type: "completion",
    content: promptDefinition.prompt
  };
  return {
    prompt: promptBlock,
    options: {
      model: promptDefinition.model,
      params: promptDefinition.params
    }
  };
}
var ProjectNameIdMap = class {
  nameToId = {};
  idToName = {};
  async getId(projectName) {
    if (!(projectName in this.nameToId)) {
      const response = await _internalGetGlobalState().appConn().post_json("api/project/register", {
        project_name: projectName
      });
      const result = import_v37.z.object({
        project: Project
      }).parse(response);
      const projectId = result.project.id;
      this.nameToId[projectName] = projectId;
      this.idToName[projectId] = projectName;
    }
    return this.nameToId[projectName];
  }
  async getName(projectId) {
    if (!(projectId in this.idToName)) {
      const response = await _internalGetGlobalState().appConn().post_json("api/project/get", {
        id: projectId
      });
      const result = import_v37.z.array(Project).nonempty().parse(response);
      const projectName = result[0].name;
      this.idToName[projectId] = projectName;
      this.nameToId[projectName] = projectId;
    }
    return this.idToName[projectId];
  }
  async resolve(project) {
    if (project.id) {
      return project.id;
    }
    return this.getId(project.name);
  }
};

// src/eval-parameters.ts
var evalParametersSchema = import_v38.z.record(
  import_v38.z.string(),
  import_v38.z.union([
    import_v38.z.object({
      type: import_v38.z.literal("prompt"),
      default: promptDefinitionWithToolsSchema.optional(),
      description: import_v38.z.string().optional()
    }),
    import_v38.z.instanceof(import_v38.z.ZodType)
    // For Zod schemas
  ])
);
function validateParameters(parameters, parameterSchema) {
  return Object.fromEntries(
    Object.entries(parameterSchema).map(([name, schema]) => {
      const value = parameters[name];
      try {
        if ("type" in schema && schema.type === "prompt") {
          const promptData = value ? PromptData.parse(value) : schema.default ? promptDefinitionToPromptData(
            schema.default,
            schema.default.tools
          ) : void 0;
          if (!promptData) {
            throw new Error(`Parameter '${name}' is required`);
          }
          return [name, Prompt2.fromPromptData(name, promptData)];
        } else {
          const schemaCasted = schema;
          return [name, schemaCasted.parse(value)];
        }
      } catch (e) {
        console.error("Error validating parameter", name, e);
        throw Error(
          `Invalid parameter '${name}': ${e instanceof Error ? e.message : String(e)}`
        );
      }
    })
  );
}

// src/framework.ts
var EvalResultWithSummary = class {
  constructor(summary, results) {
    this.summary = summary;
    this.results = results;
  }
  toString() {
    return formatExperimentSummary(this.summary);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `EvalResultWithSummary(summary="...", results=[...])`;
  }
  toJSON() {
    return {
      summary: this.summary,
      results: this.results
    };
  }
};
function makeEvalName(projectName, experimentName) {
  let out = projectName;
  if (experimentName) {
    out += ` [experimentName=${experimentName}]`;
  }
  return out;
}
function initExperiment(state, options = {}) {
  return init({
    state,
    ...options,
    setCurrent: false
  });
}
function callEvaluatorData(data) {
  const dataResult = typeof data === "function" ? data() : data;
  let baseExperiment = void 0;
  if ("_type" in dataResult && dataResult._type === "BaseExperiment") {
    baseExperiment = dataResult.name;
  }
  return {
    data: dataResult,
    baseExperiment
  };
}
globalThis._evals = {
  functions: [],
  prompts: [],
  evaluators: {},
  reporters: {}
};
function _initializeSpanContext() {
  globalThis._spanContext = { currentSpan, withCurrent, startSpan, NOOP_SPAN };
}
async function Eval(name, evaluator, reporterOrOpts) {
  const options = isEmpty2(reporterOrOpts) ? {} : typeof reporterOrOpts === "string" ? { reporter: reporterOrOpts } : "name" in reporterOrOpts ? { reporter: reporterOrOpts } : reporterOrOpts;
  let evalName = makeEvalName(name, evaluator.experimentName);
  if (globalThis._evals.evaluators[evalName]) {
    evalName = `${evalName}_${Object.keys(_evals).length}`;
  }
  if (globalThis._lazy_load) {
    globalThis._evals.evaluators[evalName] = {
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      evaluator: {
        evalName,
        projectName: name,
        ...evaluator
      },
      reporter: options.reporter
    };
    _initializeSpanContext();
    return new EvalResultWithSummary(
      {
        scores: {},
        metrics: {},
        projectName: "",
        experimentName: ""
      },
      []
    );
  }
  const progressReporter = options.progress ?? new BarProgressReporter();
  if (typeof options.reporter === "string") {
    throw new Error(
      "Must specify a reporter object, not a name. Can only specify reporter names when running 'braintrust eval'"
    );
  }
  const resolvedReporter = options.reporter || defaultReporter;
  try {
    const { data, baseExperiment: defaultBaseExperiment } = callEvaluatorData(
      evaluator.data
    );
    const experiment = options.parent || options.noSendLogs ? null : initExperiment(evaluator.state, {
      ...evaluator.projectId ? { projectId: evaluator.projectId } : { project: name },
      experiment: evaluator.experimentName,
      description: evaluator.description,
      metadata: evaluator.metadata,
      isPublic: evaluator.isPublic,
      update: evaluator.update,
      baseExperiment: evaluator.baseExperimentName ?? defaultBaseExperiment,
      baseExperimentId: evaluator.baseExperimentId,
      gitMetadataSettings: evaluator.gitMetadataSettings,
      repoInfo: evaluator.repoInfo,
      dataset: Dataset2.isDataset(data) ? data : void 0
    });
    if (experiment && options.onStart) {
      const summary = await experiment.summarize({ summarizeScores: false });
      options.onStart(summary);
    }
    try {
      const evalDef = {
        evalName,
        projectName: name,
        ...evaluator,
        data
      };
      let ret;
      if (options.parent) {
        ret = await withParent(
          options.parent,
          () => runEvaluator(
            null,
            evalDef,
            progressReporter,
            [],
            options.stream,
            options.parameters
          ),
          evaluator.state
        );
      } else {
        ret = await runEvaluator(
          experiment,
          evalDef,
          progressReporter,
          [],
          options.stream,
          options.parameters
        );
      }
      progressReporter.stop();
      resolvedReporter.reportEval(evalDef, ret, {
        verbose: true,
        jsonl: false
      });
      return ret;
    } finally {
      if (experiment) {
        experiment.flush().catch(console.error);
      } else if (options.parent) {
        flush().catch(console.error);
      }
    }
  } finally {
    progressReporter.stop();
  }
}
function serializeJSONWithPlainString(v) {
  if (typeof v === "string") {
    return v;
  } else {
    return JSON.stringify(v);
  }
}
function deserializePlainStringAsJSON2(s) {
  try {
    return { value: JSON.parse(s), error: void 0 };
  } catch (e) {
    return { value: s, error: e };
  }
}
function parseFilters(filters) {
  const result = [];
  for (const f of filters) {
    const equalsIdx = f.indexOf("=");
    if (equalsIdx === -1) {
      throw new Error(`Invalid filter ${f}`);
    }
    const [path9, value] = [f.slice(0, equalsIdx), f.slice(equalsIdx + 1)];
    let deserializedValue = deserializePlainStringAsJSON2(value).value;
    if (typeof deserializedValue !== "string") {
      deserializedValue = value;
    }
    result.push({
      path: path9.split("."),
      pattern: new RegExp(deserializedValue)
    });
  }
  return result;
}
function evaluateFilter(object, filter2) {
  const { path: path9, pattern } = filter2;
  const key = path9.reduce(
    (acc, p) => typeof acc === "object" && acc !== null ? (
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      acc[p]
    ) : void 0,
    object
  );
  if (key === void 0) {
    return false;
  }
  return pattern.test(serializeJSONWithPlainString(key));
}
function scorerName(scorer, scorer_idx) {
  return scorer.name || `scorer_${scorer_idx}`;
}
async function runEvaluator(experiment, evaluator, progressReporter, filters, stream, parameters) {
  return await runEvaluatorInternal(
    experiment,
    evaluator,
    progressReporter,
    filters,
    stream,
    parameters
  );
}
async function runEvaluatorInternal(experiment, evaluator, progressReporter, filters, stream, parameters) {
  if (typeof evaluator.data === "string") {
    throw new Error("Unimplemented: string data paths");
  }
  let dataResult = typeof evaluator.data === "function" ? evaluator.data() : evaluator.data;
  parameters = validateParameters(parameters ?? {}, evaluator.parameters ?? {});
  if ("_type" in dataResult) {
    if (dataResult._type !== "BaseExperiment") {
      throw new Error("Invalid _type");
    }
    if (!experiment) {
      throw new Error(
        "Cannot use BaseExperiment() without connecting to Braintrust (you most likely set --no-send-logs)"
      );
    }
    let name = dataResult.name;
    if (isEmpty2(name)) {
      const baseExperiment = await experiment.fetchBaseExperiment();
      if (!baseExperiment) {
        throw new Error("BaseExperiment() failed to fetch base experiment");
      }
      name = baseExperiment.name;
    }
    dataResult = initExperiment(evaluator.state, {
      ...evaluator.projectId ? { projectId: evaluator.projectId } : { project: evaluator.projectName },
      experiment: name,
      open: true
    }).asDataset();
  }
  let data = [];
  if (dataResult instanceof Promise) {
    data = await dataResult;
  } else if (Symbol.asyncIterator in dataResult) {
    data = [];
    for await (const d of dataResult) {
      data.push(d);
    }
  } else {
    data = dataResult;
  }
  const dataWithTrials = data.filter((d) => filters.every((f) => evaluateFilter(d, f))).flatMap(
    (datum) => [...Array(evaluator.trialCount ?? 1).keys()].map((trialIndex) => ({
      datum,
      trialIndex
    }))
  );
  progressReporter.start(evaluator.evalName, dataWithTrials.length);
  const results = [];
  const q = queue(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async ({
      datum,
      trialIndex
    }) => {
      const eventDataset = experiment ? experiment.dataset : Dataset2.isDataset(evaluator.data) ? evaluator.data : void 0;
      const baseEvent = {
        name: "eval",
        spanAttributes: {
          type: "eval" /* EVAL */
        },
        event: {
          input: datum.input,
          expected: "expected" in datum ? datum.expected : void 0,
          tags: datum.tags,
          origin: eventDataset && datum.id && datum._xact_id ? {
            object_type: "dataset",
            object_id: await eventDataset.id,
            id: datum.id,
            created: datum.created,
            _xact_id: datum._xact_id
          } : void 0,
          ...datum.upsert_id ? { id: datum.upsert_id } : {}
        }
      };
      const callback = async (rootSpan) => {
        let metadata = {
          ..."metadata" in datum ? datum.metadata : {}
        };
        const expected = "expected" in datum ? datum.expected : void 0;
        let output = void 0;
        let error2 = void 0;
        let tags = [...datum.tags ?? []];
        const scores = {};
        const scorerNames = evaluator.scores.map(scorerName);
        let unhandledScores = scorerNames;
        try {
          const meta = (o) => metadata = { ...metadata, ...o };
          await rootSpan.traced(
            async (span) => {
              const hooksForTask = {
                meta,
                metadata,
                expected,
                span,
                parameters: parameters ?? {},
                reportProgress: (event) => {
                  stream?.({
                    ...event,
                    id: rootSpan.id,
                    origin: baseEvent.event?.origin,
                    name: evaluator.evalName,
                    object_type: "task"
                  });
                },
                trialIndex,
                tags
              };
              const outputResult = evaluator.task(datum.input, hooksForTask);
              if (outputResult instanceof Promise) {
                output = await outputResult;
              } else {
                output = outputResult;
              }
              tags = hooksForTask.tags ?? [];
              span.log({ output });
            },
            {
              name: "task",
              spanAttributes: { type: "task" /* TASK */ },
              event: { input: datum.input }
            }
          );
          if (tags.length) {
            rootSpan.log({ output, metadata, expected, tags });
          } else {
            rootSpan.log({ output, metadata, expected });
          }
          const scoringArgs = {
            input: datum.input,
            expected: "expected" in datum ? datum.expected : void 0,
            metadata,
            output
          };
          const scoreResults = await Promise.all(
            evaluator.scores.map(async (score, score_idx) => {
              try {
                const runScorer = async (span) => {
                  const scoreResult = score(scoringArgs);
                  const scoreValue = scoreResult instanceof Promise ? await scoreResult : scoreResult;
                  if (scoreValue === null) {
                    return null;
                  }
                  if (Array.isArray(scoreValue)) {
                    for (const s of scoreValue) {
                      if (!(typeof s === "object" && !isEmpty2(s))) {
                        throw new Error(
                          `When returning an array of scores, each score must be a non-empty object. Got: ${JSON.stringify(
                            s
                          )}`
                        );
                      }
                    }
                  }
                  const results3 = Array.isArray(scoreValue) ? scoreValue : typeof scoreValue === "object" && !isEmpty2(scoreValue) ? [scoreValue] : [
                    {
                      name: scorerNames[score_idx],
                      score: scoreValue
                    }
                  ];
                  const getOtherFields = (s) => {
                    const { metadata: _metadata, name: _name, ...rest } = s;
                    return rest;
                  };
                  const resultMetadata = results3.length === 1 ? results3[0].metadata : results3.reduce(
                    (prev, s) => mergeDicts(prev, {
                      [s.name]: s.metadata
                    }),
                    {}
                  );
                  const resultOutput = results3.length === 1 ? getOtherFields(results3[0]) : results3.reduce(
                    (prev, s) => mergeDicts(prev, { [s.name]: getOtherFields(s) }),
                    {}
                  );
                  const scores2 = results3.reduce(
                    (prev, s) => mergeDicts(prev, { [s.name]: s.score }),
                    {}
                  );
                  span.log({
                    output: resultOutput,
                    metadata: resultMetadata,
                    scores: scores2
                  });
                  return results3;
                };
                const results2 = await rootSpan.traced(runScorer, {
                  name: scorerNames[score_idx],
                  spanAttributes: {
                    type: "score" /* SCORE */
                  },
                  event: { input: scoringArgs }
                });
                return { kind: "score", value: results2 };
              } catch (e) {
                return { kind: "error", value: e };
              }
            })
          );
          const failingScorersAndResults = [];
          scoreResults.forEach((results2, i) => {
            const name = scorerNames[i];
            if (results2.kind === "score") {
              (results2.value || []).forEach((result) => {
                scores[result.name] = result.score;
              });
            } else {
              failingScorersAndResults.push({ name, error: results2.value });
            }
          });
          unhandledScores = null;
          if (failingScorersAndResults.length) {
            const scorerErrors = Object.fromEntries(
              failingScorersAndResults.map(({ name, error: error3 }) => [
                name,
                error3 instanceof Error ? error3.stack : `${error3}`
              ])
            );
            metadata["scorer_errors"] = scorerErrors;
            rootSpan.log({
              metadata: { scorer_errors: scorerErrors }
            });
            const names = Object.keys(scorerErrors).join(", ");
            const errors = failingScorersAndResults.map((item) => item.error);
            unhandledScores = Object.keys(scorerErrors);
            console.warn(
              `Found exceptions for the following scorers: ${names}`,
              errors
            );
          }
        } catch (e) {
          logError(rootSpan, e);
          error2 = e;
        } finally {
          progressReporter.increment(evaluator.evalName);
        }
        results.push({
          input: datum.input,
          ..."expected" in datum ? { expected: datum.expected } : {},
          output,
          tags: tags.length ? tags : void 0,
          metadata,
          scores: {
            ...evaluator.errorScoreHandler && unhandledScores ? evaluator.errorScoreHandler({
              rootSpan,
              data: datum,
              unhandledScores
            }) : void 0,
            ...scores
          },
          error: error2,
          origin: baseEvent.event?.origin
        });
      };
      if (!experiment) {
        return await traced(callback, {
          ...baseEvent,
          state: evaluator.state
        });
      } else {
        return await experiment.traced(callback, baseEvent);
      }
    },
    Math.max(evaluator.maxConcurrency ?? dataWithTrials.length, 1)
  );
  q.push(dataWithTrials);
  const cancel = async () => {
    await new Promise((_, reject2) => {
      if (evaluator.timeout) {
        setTimeout(() => {
          reject2(new InternalAbortError("Evaluator timed out"));
        }, evaluator.timeout);
      }
      if (evaluator.signal) {
        evaluator.signal.addEventListener("abort", () => {
          reject2(new InternalAbortError("Evaluator aborted"));
        });
      }
    });
  };
  try {
    await Promise.race([q.drain(), cancel()]);
  } catch (e) {
    if (e instanceof InternalAbortError) {
      q.kill();
    }
    throw e;
  }
  const summary = experiment ? await experiment.summarize({ summarizeScores: evaluator.summarizeScores }) : buildLocalSummary(evaluator, results);
  return new EvalResultWithSummary(summary, results);
}
var error = import_chalk.default.bold.red;
var warning = import_chalk.default.hex("#FFA500");
function logError2(e, verbose) {
  if (!verbose) {
    console.error(`${e}`);
  } else {
    console.error(e);
  }
}
function buildLocalSummary(evaluator, results) {
  const scoresByName = {};
  for (const result of results) {
    for (const [name, score] of Object.entries(result.scores)) {
      const { total, count } = scoresByName[name] || { total: 0, count: 0 };
      if (score === null) {
        continue;
      }
      scoresByName[name] = { total: total + score, count: count + 1 };
    }
  }
  return {
    projectName: evaluator.projectName,
    experimentName: evaluator.evalName,
    scores: Object.fromEntries(
      Object.entries(scoresByName).map(([name, { total, count }]) => [
        name,
        {
          name,
          score: total / count,
          improvements: 0,
          regressions: 0
        }
      ])
    )
  };
}
function reportFailures(evaluator, failingResults, { verbose, jsonl }) {
  if (failingResults.length > 0) {
    console.error(
      warning(
        `Evaluator ${evaluator.evalName} failed with ${(0, import_pluralize.default)(
          "error",
          failingResults.length,
          true
        )}. This evaluation ("${evaluator.evalName}") will not be fully logged.`
      )
    );
    if (jsonl) {
      console.log(
        JSON.stringify({
          evaluatorName: evaluator.evalName,
          errors: failingResults.map(
            (r) => `${r.error instanceof Error ? r.error.stack : r.error}`
          )
        })
      );
    } else {
      for (const result of failingResults) {
        logError2(result.error, verbose);
      }
    }
    if (!verbose && !jsonl) {
      console.error(warning("Add --verbose to see full stack traces."));
    }
  }
}
var defaultReporter = {
  name: "Braintrust default reporter",
  async reportEval(evaluator, result, { verbose, jsonl }) {
    const { results, summary } = result;
    const failingResults = results.filter(
      (r) => r.error !== void 0
    );
    if (failingResults.length > 0) {
      reportFailures(evaluator, failingResults, { verbose, jsonl });
    }
    process.stdout.write(
      jsonl ? JSON.stringify(summary) : formatExperimentSummary(summary)
    );
    process.stdout.write("\n");
    return failingResults.length === 0;
  },
  async reportRun(evalReports) {
    return evalReports.every((r) => r);
  }
};
function formatExperimentSummary(summary) {
  let comparisonLine = "";
  if (summary.comparisonExperimentName) {
    comparisonLine = `${summary.experimentName} compared to ${summary.comparisonExperimentName}:
`;
  }
  const longestScoreName = Math.max(
    ...Object.values(summary.scores).map((score) => score.name.length)
  );
  const longestMetricName = Math.max(
    ...Object.values(summary.metrics ?? {}).map((metric) => metric.name.length)
  );
  return `
=========================SUMMARY=========================
${comparisonLine}` + Object.values(summary.scores).map((score) => formatScoreSummary(score, longestScoreName)).join("\n") + (Object.keys(summary.scores).length ? "\n\n" : "") + Object.values(summary.metrics ?? {}).map((metric) => formatMetricSummary(metric, longestMetricName)).join("\n") + (Object.keys(summary.metrics ?? {}).length ? "\n\n" : "") + (summary.experimentUrl ? `See results for ${summary.experimentName} at ${summary.experimentUrl}` : "");
}
function formatScoreSummary(summary, longestScoreName) {
  const diffString = isEmpty2(summary.diff) ? "" : ` (${summary.diff > 0 ? "+" : ""}${(summary.diff * 100).toFixed(2)}%)`;
  const scoreName = `'${summary.name}'`.padEnd(longestScoreName + 2);
  return `${(summary.score * 100).toFixed(
    2
  )}%${diffString} ${scoreName} score	(${summary.improvements} improvements, ${summary.regressions} regressions)`;
}
function formatMetricSummary(summary, longestMetricName) {
  const fractionDigits = Number.isInteger(summary.metric) ? 0 : 2;
  const metricName = `'${summary.name}'`.padEnd(longestMetricName + 2);
  return `${summary.metric.toFixed(fractionDigits)}${summary.unit} ${metricName}	(${summary.improvements} improvements, ${summary.regressions} regressions)`;
}

// src/node.ts
var import_node_async_hooks = require("async_hooks");
var path2 = __toESM(require("path"));
var fs = __toESM(require("fs/promises"));
var os = __toESM(require("os"));
var fsSync = __toESM(require("fs"));
var crypto = __toESM(require("crypto"));

// src/gitutil.ts
var import_simple_git = require("simple-git");
var COMMON_BASE_BRANCHES = ["main", "master", "develop"];
async function currentRepo() {
  try {
    const git = (0, import_simple_git.simpleGit)();
    if (await git.checkIsRepo()) {
      return git;
    } else {
      return null;
    }
  } catch (e) {
    return null;
  }
}
var _baseBranch = null;
async function getBaseBranch(remote = void 0) {
  if (_baseBranch === null) {
    const git = await currentRepo();
    if (git === null) {
      throw new Error("Not in a git repo");
    }
    const remoteName = remote ?? (await git.getRemotes())[0]?.name;
    if (!remoteName) {
      throw new Error("No remote found");
    }
    let branch = null;
    const repoBranches = new Set((await git.branchLocal()).all);
    const matchingBaseBranches = COMMON_BASE_BRANCHES.filter(
      (b) => repoBranches.has(b)
    );
    if (matchingBaseBranches.length === 1) {
      branch = matchingBaseBranches[0];
    } else {
      try {
        const remoteInfo = await git.remote(["show", remoteName]);
        if (!remoteInfo) {
          throw new Error(`Could not find remote ${remoteName}`);
        }
        const match = remoteInfo.match(/\s*HEAD branch:\s*(.*)$/m);
        if (!match) {
          throw new Error(`Could not find HEAD branch in remote ${remoteName}`);
        }
        branch = match[1];
      } catch {
        branch = "main";
      }
    }
    _baseBranch = { remote: remoteName, branch };
  }
  return _baseBranch;
}
async function getBaseBranchAncestor(remote = void 0) {
  const git = await currentRepo();
  if (git === null) {
    throw new Error("Not in a git repo");
  }
  const { remote: remoteName, branch: baseBranch } = await getBaseBranch(remote);
  const isDirty = (await git.diffSummary()).files.length > 0;
  const head = isDirty ? "HEAD" : "HEAD^";
  try {
    const ancestor = await git.raw([
      "merge-base",
      head,
      `${remoteName}/${baseBranch}`
    ]);
    return ancestor.trim();
  } catch (e) {
    return void 0;
  }
}
async function getPastNAncestors(n = 1e3, remote = void 0) {
  const git = await currentRepo();
  if (git === null) {
    return [];
  }
  let ancestor = void 0;
  try {
    ancestor = await getBaseBranchAncestor(remote);
  } catch (e) {
    console.warn(
      "Skipping git metadata. This is likely because the repository has not been published to a remote yet.",
      `${e}`
    );
  }
  if (!ancestor) {
    return [];
  }
  const commits = await git.log({ from: ancestor, to: "HEAD", maxCount: n });
  return commits.all.map((c) => c.hash);
}
async function attempt(fn) {
  try {
    return await fn();
  } catch (e) {
    return void 0;
  }
}
function truncateToByteLimit(s, byteLimit = 65536) {
  const encoded = new TextEncoder().encode(s);
  if (encoded.length <= byteLimit) {
    return s;
  }
  const truncated = encoded.subarray(0, byteLimit);
  return new TextDecoder().decode(truncated);
}
async function getRepoInfo(settings) {
  if (settings && settings.collect === "none") {
    return void 0;
  }
  const repo = await repoInfo();
  if (!repo || !settings || settings.collect === "all") {
    return repo;
  }
  let sanitized = {};
  settings.fields?.forEach((field) => {
    sanitized = { ...sanitized, [field]: repo[field] };
  });
  return sanitized;
}
async function repoInfo() {
  const git = await currentRepo();
  if (git === null) {
    return void 0;
  }
  let commit = void 0;
  let commit_message = void 0;
  let commit_time = void 0;
  let author_name = void 0;
  let author_email = void 0;
  let tag = void 0;
  let branch = void 0;
  let git_diff = void 0;
  const dirty = (await git.diffSummary()).files.length > 0;
  commit = await attempt(async () => await git.revparse(["HEAD"]));
  commit_message = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%B"])).trim()
  );
  commit_time = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%cI"])).trim()
  );
  author_name = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%aN"])).trim()
  );
  author_email = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%aE"])).trim()
  );
  tag = await attempt(
    async () => (await git.raw(["describe", "--tags", "--exact-match", "--always"])).trim()
  );
  branch = await attempt(
    async () => (await git.raw(["rev-parse", "--abbrev-ref", "HEAD"])).trim()
  );
  if (dirty) {
    git_diff = await attempt(
      async () => truncateToByteLimit(await git.raw(["--no-ext-diff", "diff", "HEAD"]))
    );
  }
  return {
    commit,
    branch,
    tag,
    dirty,
    author_name,
    author_email,
    commit_message,
    commit_time,
    git_diff
  };
}

// src/stackutil.ts
function getStackTrace() {
  const trace = new Error().stack;
  if (typeof trace !== "string") {
    return [];
  }
  const traceLines = trace.split("\n");
  const out = [];
  const stackFrameRegex = /at(.*)\((.*):(\d+):(\d+)\)/;
  for (const traceLine of traceLines.slice(1)) {
    const matches = traceLine.match(stackFrameRegex);
    if (matches === null || matches.length !== 5) {
      continue;
    }
    const entry = {
      functionName: matches[1].trim(),
      fileName: matches[2],
      lineNo: parseInt(matches[3])
    };
    if (!isNaN(entry.lineNo)) {
      out.push(entry);
    }
  }
  return out;
}
function getCallerLocation() {
  let thisDir = void 0;
  const entries = getStackTrace();
  for (const frame of entries) {
    if (thisDir === void 0) {
      thisDir = isomorph_default.pathDirname?.(frame.fileName);
    }
    if (isomorph_default.pathDirname?.(frame.fileName) !== thisDir) {
      return {
        caller_functionname: frame.functionName,
        caller_filename: frame.fileName,
        caller_lineno: frame.lineNo
      };
    }
  }
  return void 0;
}

// src/node.ts
var import_util8 = require("util");
var zlib = __toESM(require("zlib"));
function configureNode() {
  isomorph_default.getRepoInfo = getRepoInfo;
  isomorph_default.getPastNAncestors = getPastNAncestors;
  isomorph_default.getEnv = (name) => process.env[name];
  isomorph_default.getCallerLocation = getCallerLocation;
  isomorph_default.newAsyncLocalStorage = () => new import_node_async_hooks.AsyncLocalStorage();
  isomorph_default.processOn = (event, handler) => {
    process.on(event, handler);
  };
  isomorph_default.pathJoin = path2.join;
  isomorph_default.pathDirname = path2.dirname;
  isomorph_default.mkdir = fs.mkdir;
  isomorph_default.writeFile = fs.writeFile;
  isomorph_default.readFile = fs.readFile;
  isomorph_default.readdir = fs.readdir;
  isomorph_default.stat = fs.stat;
  isomorph_default.statSync = fsSync.statSync;
  isomorph_default.utimes = fs.utimes;
  isomorph_default.unlink = fs.unlink;
  isomorph_default.homedir = os.homedir;
  isomorph_default.gzip = (0, import_util8.promisify)(zlib.gzip);
  isomorph_default.gunzip = (0, import_util8.promisify)(zlib.gunzip);
  isomorph_default.hash = (data) => crypto.createHash("sha256").update(data).digest("hex");
  _internalSetInitialState();
}

// src/cli.ts
var import_env2 = require("@next/env");

// src/functions/upload.ts
var import_fs = __toESM(require("fs"));
var import_path4 = __toESM(require("path"));
var import_zlib = require("zlib");
var import_v39 = require("zod/v3");

// src/functions/infer-source.ts
var import_source_map = require("source-map");
var fs2 = __toESM(require("fs/promises"));

// src/jest/nodeModulesPaths.ts
var path3 = __toESM(require("path"));

// src/jest/tryRealpath.ts
var import_graceful_fs = require("graceful-fs");
function tryRealpath(path9) {
  try {
    path9 = import_graceful_fs.realpathSync.native(path9);
  } catch (error2) {
    if (error2.code !== "ENOENT" && error2.code !== "EISDIR") {
      throw error2;
    }
  }
  return path9;
}

// src/jest/nodeModulesPaths.ts
function nodeModulesPaths(basedir, options) {
  const modules = options && options.moduleDirectory ? Array.from(options.moduleDirectory) : ["node_modules"];
  const basedirAbs = path3.resolve(basedir);
  let prefix = "/";
  if (/^([A-Za-z]:)/.test(basedirAbs)) {
    prefix = "";
  } else if (/^\\\\/.test(basedirAbs)) {
    prefix = "\\\\";
  }
  let physicalBasedir;
  try {
    physicalBasedir = tryRealpath(basedirAbs);
  } catch {
    physicalBasedir = basedirAbs;
  }
  const paths = [physicalBasedir];
  let parsed = path3.parse(physicalBasedir);
  while (parsed.dir !== paths[paths.length - 1]) {
    paths.push(parsed.dir);
    parsed = path3.parse(parsed.dir);
  }
  const dirs = paths.reduce((dirs2, aPath) => {
    for (const moduleDir of modules) {
      if (path3.isAbsolute(moduleDir)) {
        if (aPath === basedirAbs && moduleDir) {
          dirs2.push(moduleDir);
        }
      } else {
        dirs2.push(path3.join(prefix, aPath, moduleDir));
      }
    }
    return dirs2;
  }, []);
  if (options.paths) {
    dirs.push(...options.paths);
  }
  return dirs;
}
function findGlobalPaths() {
  const { root } = path3.parse(process.cwd());
  const globalPath = path3.join(root, "node_modules");
  const resolvePaths = require.resolve.paths("/");
  if (resolvePaths) {
    const rootIndex = resolvePaths.indexOf(globalPath);
    return rootIndex > -1 ? resolvePaths.slice(rootIndex + 1) : [];
  }
  return [];
}
var GlobalPaths = findGlobalPaths();

// src/functions/load-module.ts
var import_path2 = __toESM(require("path"));
function evalWithModuleContext(inFile, evalFn) {
  const modulePaths = [...module.paths];
  try {
    module.paths = nodeModulesPaths(import_path2.default.dirname(inFile), {});
    return evalFn();
  } finally {
    module.paths = modulePaths;
  }
}
function loadModule({
  inFile,
  moduleText
}) {
  return evalWithModuleContext(inFile, () => {
    globalThis._evals = {
      functions: [],
      prompts: [],
      evaluators: {},
      reporters: {}
    };
    globalThis._lazy_load = true;
    globalThis.__inherited_braintrust_state = _internalGetGlobalState();
    const __filename2 = inFile;
    const __dirname = (0, import_path2.dirname)(__filename2);
    new Function("require", "module", "__filename", "__dirname", moduleText)(
      require,
      module,
      __filename2,
      __dirname
    );
    return { ...globalThis._evals };
  });
}

// src/functions/infer-source.ts
var import_path3 = __toESM(require("path"));
async function makeSourceMapContext({
  inFile,
  outFile,
  sourceMapFile
}) {
  const [inFileContents, outFileContents, sourceMap] = await Promise.all([
    fs2.readFile(inFile, "utf8"),
    fs2.readFile(outFile, "utf8"),
    (async () => {
      const sourceMap2 = await fs2.readFile(sourceMapFile, "utf8");
      const sourceMapJSON = JSON.parse(sourceMap2);
      return new import_source_map.SourceMapConsumer(sourceMapJSON);
    })()
  ]);
  return {
    inFiles: { [inFile]: inFileContents.split("\n") },
    outFileModule: loadModule({ inFile, moduleText: outFileContents }),
    outFileLines: outFileContents.split("\n"),
    sourceMapDir: import_path3.default.dirname(sourceMapFile),
    sourceMap
  };
}
function isNative(fn) {
  return /\{\s*\[native code\]\s*\}/.test(Function.prototype.toString.call(fn));
}
function locationToString(location) {
  if (location.type === "experiment") {
    return `eval ${location.eval_name} -> ${location.position.type}`;
  } else {
    return `task ${location.index}`;
  }
}
async function findCodeDefinition({
  location,
  ctx: { inFiles, outFileModule, outFileLines, sourceMapDir, sourceMap }
}) {
  let fn = void 0;
  if (location.type === "experiment") {
    const evaluator = outFileModule.evaluators[location.eval_name]?.evaluator;
    if (!evaluator) {
      console.warn(
        warning(
          `Failed to find evaluator for ${location.eval_name}. Will not display preview.`
        )
      );
      return void 0;
    }
    fn = location.position.type === "task" ? evaluator.task : evaluator.scores[location.position.index];
  } else {
    fn = outFileModule.functions[location.index].handler;
  }
  if (!fn) {
    console.warn(
      warning(
        `Failed to find ${locationToString(location)}. Will not display preview.`
      )
    );
    return void 0;
  }
  const sourceCode = fn.toString();
  if (isNative(fn)) {
    return void 0;
  }
  let lineNumber = 0;
  let columnNumber = -1;
  for (const line of outFileLines) {
    const sourceDefinition = line.indexOf(sourceCode);
    if (sourceDefinition !== -1) {
      columnNumber = sourceDefinition;
      break;
    }
    lineNumber++;
  }
  if (columnNumber === -1) {
    console.warn(warning(`Failed to find code definition for ${fn.name}`));
    return void 0;
  }
  const originalPosition = sourceMap.originalPositionFor({
    line: lineNumber + 1,
    column: columnNumber + 1
  });
  if (originalPosition.source === null || originalPosition.line === null) {
    return void 0;
  }
  if (!inFiles[originalPosition.source]) {
    const originalFile = import_path3.default.join(sourceMapDir, originalPosition.source);
    inFiles[originalPosition.source] = (await fs2.readFile(originalFile, "utf-8")).split("\n");
  }
  const originalLines = inFiles[originalPosition.source];
  const ts = await getTsModule();
  if (!ts) {
    return void 0;
  }
  const sourceFile = ts.createSourceFile(
    originalPosition.source,
    originalLines.join("\n"),
    ts.ScriptTarget.Latest,
    true
  );
  let functionNode = void 0;
  const targetPosition = ts.getPositionOfLineAndCharacter(
    sourceFile,
    originalPosition.line - 1,
    originalPosition.column || 0
  );
  ts.forEachChild(sourceFile, function visit(node) {
    if (node.pos <= targetPosition && targetPosition < node.end) {
      if (ts.isFunctionDeclaration(node) || ts.isFunctionExpression(node) || ts.isArrowFunction(node)) {
        functionNode = node;
      } else {
        ts.forEachChild(node, visit);
      }
    }
  });
  if (!functionNode) {
    return void 0;
  }
  const printer = ts.createPrinter();
  const functionDefinition = printer.printNode(
    ts.EmitHint.Unspecified,
    functionNode,
    sourceFile
  );
  return functionDefinition;
}
var tsModule = void 0;
async function getTsModule() {
  if (!tsModule) {
    try {
      tsModule = require("typescript");
    } catch (e) {
      console.warn(
        warning(
          "Failed to load TypeScript module. Will not use TypeScript to derive preview."
        )
      );
    }
  }
  return tsModule;
}

// src/functions/upload.ts
var import_slugify2 = __toESM(require("slugify"));
var import_zod_to_json_schema = require("zod-to-json-schema");
var import_pluralize2 = __toESM(require("pluralize"));
var pathInfoSchema = import_v39.z.strictObject({
  url: import_v39.z.string(),
  bundleId: import_v39.z.string()
}).strip();
async function uploadHandleBundles({
  buildResults,
  evalToExperiment,
  bundlePromises,
  handles,
  setCurrent,
  verbose,
  defaultIfExists
}) {
  console.error(
    `Processing ${buildResults.length} ${(0, import_pluralize2.default)("file", buildResults.length)}...`
  );
  const projectNameToId = new ProjectNameIdMap();
  const uploadPromises = buildResults.map(async (result) => {
    if (result.type !== "success") {
      return;
    }
    const sourceFile = result.sourceFile;
    const bundleSpecs = [];
    const prompts = [];
    if (setCurrent) {
      for (let i = 0; i < result.evaluator.functions.length; i++) {
        const fn = result.evaluator.functions[i];
        const project_id = await projectNameToId.resolve(fn.project);
        bundleSpecs.push({
          project_id,
          name: fn.name,
          slug: fn.slug,
          description: fn.description ?? "",
          function_type: fn.type,
          location: {
            type: "function",
            index: i
          },
          function_schema: fn.parameters || fn.returns ? {
            parameters: fn.parameters ? (0, import_zod_to_json_schema.zodToJsonSchema)(fn.parameters) : void 0,
            returns: fn.returns ? (0, import_zod_to_json_schema.zodToJsonSchema)(fn.returns) : void 0
          } : void 0,
          if_exists: fn.ifExists
        });
      }
      for (const prompt of result.evaluator.prompts) {
        prompts.push(await prompt.toFunctionDefinition(projectNameToId));
      }
    }
    for (const evaluator of Object.values(result.evaluator.evaluators)) {
      const experiment = evalToExperiment?.[sourceFile]?.[evaluator.evaluator.evalName];
      const baseInfo = {
        project_id: experiment ? (await experiment.project).id : await projectNameToId.getId(evaluator.evaluator.projectName)
      };
      const namePrefix = setCurrent ? evaluator.evaluator.experimentName ? `${evaluator.evaluator.experimentName}` : evaluator.evaluator.evalName : experiment ? `${await experiment.name}` : evaluator.evaluator.evalName;
      const experimentId = experiment ? await experiment.id : void 0;
      const origin = experimentId ? {
        object_type: "experiment",
        object_id: experimentId,
        internal: !setCurrent
      } : void 0;
      const fileSpecs = [
        {
          ...baseInfo,
          // There is a very small chance that someone names a function with the same convention, but
          // let's assume it's low enough that it doesn't matter.
          ...formatNameAndSlug(["eval", namePrefix, "task"]),
          description: `Task for eval ${namePrefix}`,
          location: {
            type: "experiment",
            eval_name: evaluator.evaluator.evalName,
            position: { type: "task" }
          },
          function_type: "task",
          origin
        },
        ...evaluator.evaluator.scores.map((score, i) => {
          const name = scorerName(score, i);
          return {
            ...baseInfo,
            // There is a very small chance that someone names a function with the same convention, but
            // let's assume it's low enough that it doesn't matter.
            ...formatNameAndSlug(["eval", namePrefix, "scorer", name]),
            description: `Score ${name} for eval ${namePrefix}`,
            location: {
              type: "experiment",
              eval_name: evaluator.evaluator.evalName,
              position: { type: "scorer", index: i }
            },
            function_type: "scorer",
            origin
          };
        })
      ];
      bundleSpecs.push(...fileSpecs);
    }
    const slugs = /* @__PURE__ */ new Set();
    for (const spec of bundleSpecs) {
      if (slugs.has(spec.slug)) {
        throw new Error(`Duplicate slug: ${spec.slug}`);
      }
      slugs.add(spec.slug);
    }
    for (const prompt of prompts) {
      if (slugs.has(prompt.slug)) {
        throw new Error(`Duplicate slug: ${prompt.slug}`);
      }
      slugs.add(prompt.slug);
    }
    return await uploadBundles({
      sourceFile,
      prompts,
      bundleSpecs,
      bundlePromises,
      handles,
      defaultIfExists,
      verbose
    });
  });
  const uploadResults = await Promise.all(uploadPromises);
  const numUploaded = uploadResults.length;
  const numFailed = uploadResults.filter((result) => !result).length;
  console.error(
    `${numUploaded} ${(0, import_pluralize2.default)("file", numUploaded)} uploaded ${numFailed > 0 ? `with ${numFailed} error${numFailed > 1 ? "s" : ""}` : "successfully"}.`
  );
  return {
    numTotal: buildResults.length,
    numUploaded,
    numFailed
  };
}
async function uploadBundles({
  sourceFile,
  prompts,
  bundleSpecs,
  bundlePromises,
  handles,
  defaultIfExists,
  verbose
}) {
  const orgId = _internalGetGlobalState().orgId;
  if (!orgId) {
    throw new Error("No organization ID found");
  }
  const loggerConn = _internalGetGlobalState().apiConn();
  const runtime_context = {
    runtime: "node",
    version: process.version.slice(1)
  };
  const bundle = await bundlePromises[sourceFile];
  const bundleFileName = handles[sourceFile].bundleFile;
  if (!bundle || !bundleFileName) {
    return false;
  }
  const sourceMapContextPromise = makeSourceMapContext({
    inFile: sourceFile,
    outFile: bundleFileName,
    sourceMapFile: bundleFileName + ".map"
  });
  let pathInfo = void 0;
  if (bundleSpecs.length > 0) {
    try {
      pathInfo = pathInfoSchema.parse(
        await loggerConn.post_json("function/code", {
          org_id: orgId,
          runtime_context
        })
      );
    } catch (e) {
      if (verbose) {
        console.error(e);
      }
      const msg = e instanceof FailedHTTPResponse ? `Unable to upload your code. ${e.status} (${e.text}): ${e.data}` : `Unable to upload your code. You most likely need to update the API: ${e}`;
      console.error(warning(msg));
      return false;
    }
  }
  if (isEmpty2(bundleFileName)) {
    throw new Error("No bundle file found");
  }
  const bundleFile = import_path4.default.resolve(bundleFileName);
  const uploadPromise = (async () => {
    if (!pathInfo) {
      return true;
    }
    const bundleStream = import_fs.default.createReadStream(bundleFile).pipe((0, import_zlib.createGzip)());
    const bundleData = await new Promise((resolve2, reject2) => {
      const chunks = [];
      bundleStream.on("data", (chunk) => {
        chunks.push(chunk);
      });
      bundleStream.on("end", () => {
        resolve2(Buffer.concat(chunks));
      });
      bundleStream.on("error", reject2);
    });
    const headers = {
      "Content-Encoding": "gzip"
    };
    addAzureBlobHeaders(headers, pathInfo.url);
    const resp = await fetch(pathInfo.url, {
      method: "PUT",
      body: bundleData,
      headers
    });
    if (!resp.ok) {
      throw new Error(
        `Failed to upload bundle: ${resp.status} ${await resp.text()}`
      );
    }
    return true;
  })();
  const sourceMapContext = await sourceMapContextPromise;
  const functionEntries = [
    ...prompts,
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    ...await Promise.all(
      bundleSpecs.map(async (spec) => ({
        project_id: spec.project_id,
        name: spec.name,
        slug: spec.slug,
        description: spec.description,
        function_data: {
          type: "code",
          data: {
            type: "bundle",
            runtime_context,
            location: spec.location,
            bundle_id: pathInfo.bundleId,
            preview: await findCodeDefinition({
              location: spec.location,
              ctx: sourceMapContext
            })
          }
        },
        origin: spec.origin,
        function_type: spec.function_type,
        function_schema: spec.function_schema,
        if_exists: spec.if_exists
      }))
    )
  ].map((fn) => ({
    ...fn,
    if_exists: fn.if_exists ?? defaultIfExists
  }));
  const logPromise = (async () => {
    try {
      await _internalGetGlobalState().apiConn().post_json("insert-functions", {
        functions: functionEntries
      });
    } catch (e) {
      if (verbose) {
        console.error(e);
      }
      const msg = e instanceof FailedHTTPResponse ? `Failed to save function definitions for '${sourceFile}'. ${e.status} (${e.text}): ${e.data}` : `Failed to save function definitions for '${sourceFile}'. You most likely need to update the API: ${e}`;
      console.warn(warning(msg));
      return false;
    }
    return true;
  })();
  const [uploadSuccess, logSuccess] = await Promise.all([
    uploadPromise,
    logPromise
  ]);
  return uploadSuccess && logSuccess;
}
function formatNameAndSlug(pieces) {
  const nonEmptyPieces = pieces.filter((piece) => piece.trim() !== "");
  return {
    name: capitalize(nonEmptyPieces.join(" ")),
    slug: (0, import_slugify2.default)(nonEmptyPieces.join("-"))
  };
}

// src/cli-util/bundle.ts
var import_env = require("@next/env");
var dotenv = __toESM(require("dotenv"));
async function loadCLIEnv(args) {
  (0, import_env.loadEnvConfig)(process.cwd(), true);
  if (args.env_file) {
    const loaded = dotenv.config({ path: args.env_file });
    if (loaded.error) {
      console.error(error(`Error loading ${args.env_file}: ${loaded.error}`));
      process.exit(1);
    }
  }
  await login({
    apiKey: args.api_key,
    orgName: args.org_name,
    appUrl: args.app_url
  });
}
async function bundleCommand(args) {
  await loadCLIEnv(args);
  const handles = await initializeHandles({
    mode: "bundle",
    files: args.files,
    tsconfig: args.tsconfig,
    externalPackages: args.external_packages
  });
  try {
    const allBuildResultsP = Object.values(
      handles
    ).map((handle) => handle.rebuild());
    const bundlePromises = Object.fromEntries(
      Object.entries(handles).map(([inFile, handle]) => [
        inFile,
        handle.bundle()
      ])
    );
    const allBuildResults = await Promise.all(allBuildResultsP);
    const buildResults = [];
    for (const buildResult of allBuildResults) {
      if (buildResult.type === "failure") {
        handleBuildFailure({
          result: buildResult,
          terminateOnFailure: args.terminate_on_failure,
          verbose: args.verbose
        });
      } else {
        buildResults.push(buildResult);
      }
    }
    const { numFailed } = await uploadHandleBundles({
      buildResults,
      bundlePromises,
      handles,
      setCurrent: true,
      verbose: args.verbose,
      defaultIfExists: args.if_exists
    });
    if (numFailed > 0) {
      process.exit(1);
    }
  } finally {
    for (const handle of Object.values(handles)) {
      await handle.destroy();
    }
  }
}

// src/cli-util/pull.ts
var import_v310 = require("zod/v3");
var import_promises = __toESM(require("fs/promises"));
var import_util11 = __toESM(require("util"));
var import_slugify3 = __toESM(require("slugify"));
var import_path5 = __toESM(require("path"));
var import_pluralize3 = __toESM(require("pluralize"));
async function pullCommand(args) {
  await loadCLIEnv(args);
  const loggerConn = _internalGetGlobalState().apiConn();
  const functions = await loggerConn.get_json("/v1/function", {
    ...args.project_id ? { project_id: args.project_id } : {},
    ...args.project_name ? { project_name: args.project_name } : {},
    ...args.slug ? { slug: args.slug } : {},
    ...args.id ? { ids: [args.id] } : {},
    ...args.version ? { version: loadPrettyXact(args.version) } : {}
  });
  const functionObjects = import_v310.z.object({ objects: import_v310.z.array(import_v310.z.unknown()) }).parse(functions);
  const projectNameToFunctions = {};
  const projectNameIdMap = new ProjectNameIdMap();
  for (const rawFunc of functionObjects.objects) {
    const parsedFunc = Function2.safeParse(rawFunc);
    if (!parsedFunc.success) {
      const id = typeof rawFunc === "object" && rawFunc && "id" in rawFunc ? ` ${rawFunc.id}` : "";
      console.warn(
        warning(`Failed to parse function${id}: ${parsedFunc.error.message}`)
      );
      continue;
    }
    const func = parsedFunc.data;
    const projectName = await projectNameIdMap.getName(func.project_id);
    if (!projectNameToFunctions[projectName]) {
      projectNameToFunctions[projectName] = [];
    }
    projectNameToFunctions[projectName].push(func);
  }
  console.log("Found functions in the following projects:");
  for (const projectName of Object.keys(projectNameToFunctions)) {
    console.log(` * ${projectName}`);
  }
  const outputDir = args.output_dir ?? "./braintrust";
  await import_promises.default.mkdir(outputDir, { recursive: true });
  const git = await currentRepo();
  const diffSummary = await git?.diffSummary("HEAD");
  const repoRoot = await git?.revparse(["--show-toplevel"]);
  const dirtyFiles = new Set(
    (diffSummary?.files ?? []).map(
      (f) => import_path5.default.resolve(repoRoot ?? ".", f.file)
    )
  );
  for (const projectName of Object.keys(projectNameToFunctions)) {
    const projectFile = import_path5.default.join(
      outputDir,
      `${(0, import_slugify3.default)(projectName, { lower: true, strict: true, trim: true })}.ts`
    );
    const resolvedProjectFile = import_path5.default.resolve(projectFile);
    const fileExists = await import_promises.default.stat(projectFile).then(
      () => true,
      () => false
    );
    if (args.force) {
      if (fileExists) {
        console.warn(
          warning(
            `Overwriting ${doubleQuote(projectFile)} because --force is set.`
          )
        );
      }
    } else if (dirtyFiles.has(resolvedProjectFile)) {
      console.warn(
        warning(
          `Skipping project ${projectName} because ${doubleQuote(projectFile)} has uncommitted changes.`
        )
      );
      continue;
    } else if (fileExists) {
      if (!git) {
        console.warn(
          warning(
            `Project ${projectName} already exists in ${doubleQuote(projectFile)}. Skipping since this is not a git repository...`
          )
        );
        continue;
      } else {
        console.warn(
          warning(
            `Project ${projectName} already exists in ${doubleQuote(projectFile)}. Overwriting...`
          )
        );
      }
    }
    const projectFileContents = await makeProjectFile({
      projectName,
      projectId: await projectNameIdMap.getId(projectName),
      fileName: projectFile,
      functions: projectNameToFunctions[projectName],
      hasSpecifiedFunction: !!args.slug || !!args.id
    });
    await import_promises.default.writeFile(projectFile, projectFileContents || "");
    console.log(`Wrote ${projectName} to ${doubleQuote(projectFile)}`);
  }
}
async function makeProjectFile({
  projectName,
  projectId,
  fileName,
  functions,
  hasSpecifiedFunction
}) {
  const varNames = {};
  const functionDefinitions = functions.map(
    (f) => makeFunctionDefinition({ func: f, varNames, hasSpecifiedFunction })
  ).filter((f) => f !== null);
  const fileDef = `// This file was automatically generated by braintrust pull. You can
// generate it again by running:
//  $ braintrust pull --project-name ${doubleQuote(projectName)}
// Feel free to edit this file manually, but once you do, you should make sure to
// sync your changes with Braintrust by running:
//  $ braintrust push ${doubleQuote(fileName)}

import braintrust from "braintrust";

const project = braintrust.projects.create({
  id: ${doubleQuote(projectId)},
  name: ${doubleQuote(projectName)},
});

${functionDefinitions.join("\n")}
`;
  const prettier = await getPrettierModule();
  if (prettier) {
    try {
      const formatted = prettier.format(fileDef, {
        parser: "typescript"
      });
      return formatted;
    } catch (error2) {
      console.warn(
        warning(
          `Failed to format with prettier (${error2 instanceof Error ? error2.message : error2}). Using unformatted output.`
        )
      );
      return fileDef;
    }
  }
}
function makeFunctionDefinition({
  func,
  varNames,
  hasSpecifiedFunction
}) {
  if (func.function_data.type !== "prompt") {
    if (hasSpecifiedFunction) {
      console.warn(
        warning(
          `Skipping function ${doubleQuote(func.name)} because it is not a prompt.`
        )
      );
    }
    return null;
  }
  const baseVarName = slugToVarName(func.slug);
  let varName = baseVarName;
  let suffix = 1;
  while (varName in varNames) {
    varName = `${varName}${suffix}`;
    suffix++;
  }
  varNames[varName] = func.slug;
  if (!func.prompt_data || !func.prompt_data.prompt) {
    console.warn(
      warning(
        `Prompt ${doubleQuote(func.name)} has an invalid (empty) prompt definition.`
      )
    );
    return null;
  }
  const objectType = "prompt";
  const prompt = func.prompt_data.prompt;
  const promptContents = prompt.type === "completion" ? `prompt: ${doubleQuote(prompt.content)}` : `messages: ${safeStringify(prompt.messages).trimStart()}`;
  const rawToolsParsed = prompt.type === "chat" && prompt.tools && prompt.tools.length > 0 ? import_v310.z.array(ToolFunctionDefinition).safeParse(JSON.parse(prompt.tools)) : void 0;
  if (rawToolsParsed && !rawToolsParsed.success) {
    console.warn(
      warning(
        `Prompt ${doubleQuote(func.name)} has an invalid tools definition: ${rawToolsParsed.error.message}. Skipping...`
      )
    );
    return null;
  }
  const rawTools = rawToolsParsed ? rawToolsParsed.data : [];
  const { model, params } = func.prompt_data.options ?? {};
  const paramsString = params && Object.keys(params).length > 0 ? `params: ${safeStringify(params).trimStart()},` : "";
  const tools = [
    ...func.prompt_data.tool_functions ?? [],
    ...rawTools
  ];
  const toolsString = tools.length > 0 ? `tools: ${safeStringify(tools).trimStart()},` : "";
  return `export const ${varName} = project.${(0, import_pluralize3.default)(objectType)}.create({
  id: ${doubleQuote(func.id)},
  name: ${doubleQuote(func.name)},
  slug: ${doubleQuote(func.slug)},
  version: ${doubleQuote(prettifyXact(func._xact_id))}, ${printOptionalField("description", func.description)}${printOptionalField("model", model)}
${indent(promptContents, 2)},
${indent(paramsString, 2)}
${indent(toolsString, 2)}
});
`;
}
function doubleQuote(str) {
  return JSON.stringify(str);
}
function slugToVarName(slug) {
  let varName = slug.replace(/^[^a-zA-Z_$]|[^a-zA-Z0-9_$]/g, "_");
  varName = varName.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
  varName = varName.charAt(0).toLowerCase() + varName.slice(1);
  return varName;
}
function indent(str, numSpaces) {
  return str.replace(/^/gm, " ".repeat(numSpaces));
}
function printOptionalField(fieldName, fieldValue) {
  return !isEmpty(fieldValue) ? `
  ${fieldName}: ${doubleQuote(fieldValue)},` : "";
}
var prettierImportAttempted = false;
var prettierModule = void 0;
async function getPrettierModule() {
  if (!prettierModule && !prettierImportAttempted) {
    prettierImportAttempted = true;
    try {
      prettierModule = require("prettier");
    } catch {
      try {
        const importWithTimeout = () => {
          return new Promise((resolve2, reject2) => {
            let resolved = false;
            const timeoutId = setTimeout(() => {
              if (!resolved) {
                resolved = true;
                reject2(new Error("Prettier import timeout"));
              }
            }, 3e3);
            import("prettier").then((module2) => {
              if (!resolved) {
                resolved = true;
                clearTimeout(timeoutId);
                resolve2(module2);
              }
            }).catch((error2) => {
              if (!resolved) {
                resolved = true;
                clearTimeout(timeoutId);
                reject2(error2);
              }
            });
          });
        };
        prettierModule = await importWithTimeout();
      } catch {
        console.warn(
          warning(
            "Failed to load prettier module. Will not use prettier to format output."
          )
        );
        prettierModule = void 0;
      }
    }
  }
  return prettierModule;
}
function safeStringify(obj) {
  try {
    return JSON.stringify(obj, null, 2);
  } catch (error2) {
    try {
      return import_util11.default.inspect(obj, {
        depth: 5,
        maxStringLength: 1e3,
        breakLength: 80,
        compact: false
      });
    } catch {
      return `[Object: Unable to serialize - ${error2 instanceof Error ? error2.message : error2}]`;
    }
  }
}

// dev/server.ts
var import_express = __toESM(require("express"));
var import_cors = __toESM(require("cors"));

// dev/errorHandler.ts
var import_v311 = require("zod/v3");
var errorHandler = (err, req, res, next) => {
  if ("status" in err) {
    res.status(err.status).json({
      error: {
        message: err.message,
        status: err.status
      }
    });
    return;
  }
  if (err instanceof import_v311.z.ZodError) {
    res.status(400).json({
      error: {
        message: "Invalid request",
        errors: err.errors
      }
    });
    return;
  }
  console.error("Internal server error", err);
  res.status(500).json({
    error: {
      message: "Internal server error",
      status: 500
    }
  });
};

// dev/authorize.ts
var import_http_errors = __toESM(require("http-errors"));
function authorizeRequest(req, res, next) {
  try {
    const ctx = {
      appOrigin: extractAllowedOrigin(req.headers[ORIGIN_HEADER]),
      token: void 0,
      state: void 0
    };
    if (req.headers.authorization || req.headers[BRAINTRUST_AUTH_TOKEN_HEADER]) {
      const tokenText = parseBraintrustAuthHeader(req.headers);
      if (!tokenText) {
        return next((0, import_http_errors.default)(400, "Invalid authorization token format"));
      }
      ctx.token = tokenText.toLowerCase() === "null" ? void 0 : tokenText;
    }
    req.ctx = ctx;
    next();
  } catch (e) {
    next(e);
  }
}
var loginCache = new LRUCache({
  max: 32
  // TODO: Make this configurable
});
async function cachedLogin(options) {
  const key = JSON.stringify(options);
  const cached = loginCache.get(key);
  if (cached) {
    return cached;
  }
  const state = await loginToState(options);
  loginCache.set(key, state);
  return state;
}
function makeCheckAuthorized(allowedOrgName) {
  return async (req, _res, next) => {
    if (!req.ctx?.token) {
      return next((0, import_http_errors.default)(401, "Unauthorized"));
    }
    try {
      const state = await cachedLogin({
        apiKey: req.ctx?.token,
        orgName: allowedOrgName
      });
      req.ctx.state = state;
      next();
    } catch (e) {
      console.error("Authorization error:", e);
      return next((0, import_http_errors.default)(401, "Unauthorized"));
    }
  };
}
function parseBraintrustAuthHeader(headers) {
  const tokenString = parseHeader(headers, BRAINTRUST_AUTH_TOKEN_HEADER);
  return tokenString ?? parseAuthHeader(headers) ?? void 0;
}
function parseHeader(headers, headerName) {
  const token = headers[headerName];
  let tokenString;
  if (typeof token === "string") {
    tokenString = token;
  } else if (Array.isArray(token) && token.length > 0) {
    tokenString = token[0];
  }
  return tokenString;
}
function checkOrigin(requestOrigin, callback) {
  if (!requestOrigin) {
    return callback(null, true);
  }
  for (const origin of WHITELISTED_ORIGINS || []) {
    if (origin instanceof RegExp && origin.test(requestOrigin) || origin === requestOrigin) {
      return callback(null, requestOrigin);
    }
  }
  return callback(null, false);
}
var BRAINTRUST_AUTH_TOKEN_HEADER = "x-bt-auth-token";
var ORIGIN_HEADER = "origin";
function extractAllowedOrigin(originHeader) {
  let allowedOrigin = MAIN_ORIGIN;
  checkOrigin(originHeader, (err, origin) => {
    if (!err && originHeader && origin) {
      allowedOrigin = originHeader;
    }
  });
  return allowedOrigin;
}
var MAIN_ORIGIN = "https://www.braintrust.dev";
var WHITELISTED_ORIGINS = [
  MAIN_ORIGIN,
  "https://www.braintrustdata.com",
  new RegExp("https://.*.preview.braintrust.dev")
].concat(
  process.env.WHITELISTED_ORIGIN ? [process.env.WHITELISTED_ORIGIN] : []
).concat(
  process.env.BRAINTRUST_APP_URL ? [process.env.BRAINTRUST_APP_URL] : []
);
function parseAuthHeader(headers) {
  const authHeader = headers["authorization"];
  let authValue = null;
  if (Array.isArray(authHeader)) {
    authValue = authHeader[authHeader.length - 1];
  } else {
    authValue = authHeader;
  }
  if (!authValue) {
    return null;
  }
  const parts = authValue.split(" ");
  if (parts.length !== 2) {
    return null;
  }
  return parts[1];
}
var baseAllowedHeaders = [
  "Content-Type",
  "X-Amz-Date",
  "Authorization",
  "X-Api-Key",
  "X-Amz-Security-Token",
  "x-bt-auth-token",
  "x-bt-parent",
  // These are eval-specific
  "x-bt-org-name",
  "x-bt-stream-fmt",
  "x-bt-use-cache",
  "x-stainless-os",
  "x-stainless-lang",
  "x-stainless-package-version",
  "x-stainless-runtime",
  "x-stainless-runtime-version",
  "x-stainless-arch"
];

// dev/stream.ts
function serializeSSEEvent(event) {
  return Object.entries(event).filter(([_key, value]) => value !== void 0).map(([key, value]) => `${key}: ${value}`).join("\n") + "\n\n";
}

// dev/types.ts
var import_v312 = require("zod/v3");
var evalBodySchema = import_v312.z.object({
  name: import_v312.z.string(),
  parameters: import_v312.z.record(import_v312.z.string(), import_v312.z.unknown()).nullish(),
  data: RunEval.shape.data,
  scores: import_v312.z.array(
    import_v312.z.object({
      function_id: FunctionId,
      name: import_v312.z.string()
    })
  ).nullish(),
  experiment_name: import_v312.z.string().nullish(),
  project_id: import_v312.z.string().nullish(),
  parent: InvokeParent.optional(),
  stream: import_v312.z.boolean().optional()
});
var evalParametersSerializedSchema = import_v312.z.record(
  import_v312.z.string(),
  import_v312.z.union([
    import_v312.z.object({
      type: import_v312.z.literal("prompt"),
      default: PromptData.optional(),
      description: import_v312.z.string().optional()
    }),
    import_v312.z.object({
      type: import_v312.z.literal("data"),
      schema: import_v312.z.record(import_v312.z.unknown()),
      // JSON Schema
      default: import_v312.z.unknown().optional(),
      description: import_v312.z.string().optional()
    })
  ])
);
var evaluatorDefinitionSchema = import_v312.z.object({
  parameters: evalParametersSerializedSchema.optional()
});
var evaluatorDefinitionsSchema = import_v312.z.record(
  import_v312.z.string(),
  evaluatorDefinitionSchema
);

// dev/server.ts
var import_v313 = require("zod/v3");
var import_zod_to_json_schema2 = __toESM(require("zod-to-json-schema"));
function runDevServer(evaluators, opts) {
  const allEvaluators = Object.fromEntries(
    evaluators.map((evaluator) => [evaluator.evalName, evaluator])
  );
  globalThis._lazy_load = false;
  const app = (0, import_express.default)();
  app.use(import_express.default.json({ limit: "1gb" }));
  console.log("Starting server");
  app.use((req, res, next) => {
    if (req.headers["access-control-request-private-network"]) {
      res.setHeader("Access-Control-Allow-Private-Network", "true");
    }
    next();
  });
  const checkAuthorized = makeCheckAuthorized(opts.orgName);
  app.use(
    (0, import_cors.default)({
      origin: checkOrigin,
      methods: ["GET", "PATCH", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: baseAllowedHeaders,
      credentials: true,
      exposedHeaders: [
        BT_CURSOR_HEADER,
        BT_FOUND_EXISTING_HEADER,
        "x-bt-span-id",
        "x-bt-span-export"
      ],
      maxAge: 86400
    })
  );
  app.use(authorizeRequest);
  app.get("/", (req, res) => {
    res.send("Hello, world!");
  });
  app.get("/list", checkAuthorized, (req, res) => {
    const evalDefs = Object.fromEntries(
      Object.entries(allEvaluators).map(([name, evaluator]) => [
        name,
        {
          parameters: evaluator.parameters ? makeEvalParametersSchema(evaluator.parameters) : void 0,
          scores: evaluator.scores.map((score, idx) => ({
            name: scorerName(score, idx)
          }))
        }
      ])
    );
    res.json(evalDefs);
  });
  app.post(
    "/eval",
    checkAuthorized,
    asyncHandler(async (req, res) => {
      const {
        name,
        parameters,
        parent,
        experiment_name,
        project_id,
        data,
        scores,
        stream
      } = evalBodySchema.parse(req.body);
      if (!req.ctx?.state) {
        res.status(500).json({ error: "Braintrust state not initialized in request" });
        return;
      }
      const state = req.ctx.state;
      const evaluator = allEvaluators[name];
      if (!evaluator) {
        res.status(404).json({ error: `Evaluator '${name}' not found` });
        return;
      }
      if (evaluator.parameters && Object.keys(evaluator.parameters).length > 0) {
        try {
          if (!evaluator.parameters) {
            res.status(400).json({
              error: `Evaluator '${name}' does not accept parameters`
            });
            return;
          }
          validateParameters(parameters ?? {}, evaluator.parameters);
        } catch (e) {
          console.error("Error validating parameters", e);
          if (e instanceof import_v313.z.ZodError || e instanceof Error) {
            res.status(400).json({
              error: e.message
            });
            return;
          }
          throw e;
        }
      }
      const resolvedData = await getDataset(state, data);
      const evalData = callEvaluatorData(resolvedData);
      console.log("Starting eval", evaluator.evalName);
      if (stream) {
        res.setHeader("Content-Type", "text/event-stream");
        res.setHeader("Cache-Control", "no-cache");
        res.setHeader("Connection", "keep-alive");
      } else {
        res.setHeader("Content-Type", "application/json");
      }
      const task = async (input, hooks) => {
        const result = await evaluator.task(input, hooks);
        hooks.reportProgress({
          format: "code",
          output_type: "completion",
          event: "json_delta",
          data: JSON.stringify(result)
        });
        return result;
      };
      try {
        const summary = await Eval(
          "worker-thread",
          {
            ...evaluator,
            data: evalData.data,
            scores: evaluator.scores.concat(
              scores?.map(
                (score) => makeScorer(state, score.name, score.function_id)
              ) ?? []
            ),
            task,
            state,
            experimentName: experiment_name ?? void 0,
            projectId: project_id ?? void 0
          },
          {
            // Avoid printing the bar to the console.
            progress: {
              start: () => {
              },
              stop: () => {
                console.log("Finished running experiment");
              },
              increment: () => {
              }
            },
            stream: (data2) => {
              if (stream) {
                res.write(
                  serializeSSEEvent({
                    event: "progress",
                    data: JSON.stringify(data2)
                  })
                );
              }
            },
            onStart: (metadata) => {
              if (stream) {
                res.write(
                  serializeSSEEvent({
                    event: "start",
                    data: JSON.stringify(metadata)
                  })
                );
              }
            },
            parent: parseParent(parent),
            parameters: parameters ?? {}
          }
        );
        if (stream) {
          res.write(
            serializeSSEEvent({
              event: "summary",
              data: JSON.stringify(summary.summary)
            })
          );
          res.write(
            serializeSSEEvent({
              event: "done",
              data: ""
            })
          );
        } else {
          res.json(summary.summary);
        }
      } catch (e) {
        console.error("Error running eval", e);
        if (stream) {
          res.write(
            serializeSSEEvent({
              event: "error",
              data: JSON.stringify(e)
            })
          );
        } else {
          res.status(500).json({ error: e });
        }
      } finally {
        res.end();
      }
    })
  );
  app.use(errorHandler);
  app.listen(opts.port, opts.host, () => {
    console.log(`Dev server running at http://${opts.host}:${opts.port}`);
  });
}
var asyncHandler = (fn) => (req, res, next) => {
  Promise.resolve(fn(req, res, next)).catch(next);
};
async function getDataset(state, data) {
  if ("project_name" in data) {
    return initDataset({
      state,
      project: data.project_name,
      dataset: data.dataset_name,
      _internal_btql: data._internal_btql ?? void 0
    });
  } else if ("dataset_id" in data) {
    const datasetInfo = await getDatasetById({
      state,
      datasetId: data.dataset_id
    });
    return initDataset({
      state,
      projectId: datasetInfo.projectId,
      dataset: datasetInfo.dataset,
      _internal_btql: data._internal_btql ?? void 0
    });
  } else {
    return data.data;
  }
}
var datasetFetchSchema = import_v313.z.object({
  project_id: import_v313.z.string(),
  name: import_v313.z.string()
});
async function getDatasetById({
  state,
  datasetId
}) {
  const dataset = await state.appConn().post_json("api/dataset/get", {
    id: datasetId
  });
  const parsed = import_v313.z.array(datasetFetchSchema).parse(dataset);
  if (parsed.length === 0) {
    throw new Error(`Dataset '${datasetId}' not found`);
  }
  return { projectId: parsed[0].project_id, dataset: parsed[0].name };
}
function makeScorer(state, name, score) {
  const ret = async (input) => {
    const request = {
      ...score,
      input,
      parent: await getSpanParentObject().export(),
      stream: false,
      mode: "auto",
      strict: true
    };
    const result = await state.proxyConn().post(`function/invoke`, request, {
      headers: {
        Accept: "application/json"
      }
    });
    const data = await result.json();
    return data;
  };
  Object.defineProperties(ret, {
    name: { value: `Remote eval scorer (${name})` }
  });
  return ret;
}
function makeEvalParametersSchema(parameters) {
  return Object.fromEntries(
    Object.entries(parameters).map(([name, value]) => {
      if ("type" in value && value.type === "prompt") {
        return [
          name,
          {
            type: "prompt",
            default: value.default ? promptDefinitionToPromptData(value.default) : void 0,
            description: value.description
          }
        ];
      } else {
        const schema = (0, import_zod_to_json_schema2.default)(value);
        return [
          name,
          {
            type: "data",
            schema,
            default: value.default,
            description: value.description
          }
        ];
      }
    })
  );
}

// src/cli-util/external-packages-plugin.ts
function createMarkKnownPackagesExternalPlugin(additionalPackages = []) {
  return {
    name: "make-known-packages-external",
    setup(build2) {
      const knownPackages = [
        "braintrust",
        "autoevals",
        "@braintrust/",
        "config",
        "lightningcss",
        "@mapbox/node-pre-gyp",
        ...additionalPackages
      ];
      const escapedPackages = knownPackages.map((pkg) => {
        const escaped = pkg.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        if (pkg.endsWith("/")) {
          return escaped + ".*";
        }
        return escaped + "(?:\\/.*)?";
      });
      const knownPackagesFilter = new RegExp(
        `^(${escapedPackages.join("|")})$`
      );
      build2.onResolve({ filter: knownPackagesFilter }, (args) => ({
        path: args.path,
        external: true
      }));
    }
  };
}

// src/cli.ts
var { version } = require_package();
var INCLUDE_EVAL = [
  "**/*.eval.ts",
  "**/*.eval.tsx",
  "**/*.eval.js",
  "**/*.eval.jsx"
];
var INCLUDE_BUNDLE = ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"];
var EXCLUDE = ["**/node_modules/**", "**/dist/**", "**/build/**"];
var OUT_EXT = "js";
configureNode();
function evaluateBuildResults(inFile, buildResult) {
  if (!buildResult.outputFiles) {
    return null;
  }
  const moduleText = buildResult.outputFiles[0].text;
  return loadModule({ inFile, moduleText });
}
async function initExperiment2(evaluator, evaluatorData) {
  const { data, baseExperiment: defaultBaseExperiment } = evaluatorData;
  const logger = init({
    state: evaluator.state,
    ...evaluator.projectId ? { projectId: evaluator.projectId } : { project: evaluator.projectName },
    experiment: evaluator.experimentName,
    description: evaluator.description,
    metadata: evaluator.metadata,
    isPublic: evaluator.isPublic,
    update: evaluator.update,
    baseExperiment: evaluator.baseExperimentName ?? defaultBaseExperiment,
    baseExperimentId: evaluator.baseExperimentId,
    gitMetadataSettings: evaluator.gitMetadataSettings,
    repoInfo: evaluator.repoInfo,
    dataset: Dataset2.isDataset(data) ? data : void 0,
    setCurrent: false
  });
  const info = await logger.summarize({ summarizeScores: false });
  console.error(
    `Experiment ${info.experimentName} is running at ${info.experimentUrl}`
  );
  return logger;
}
function resolveReporter(reporter, reporters) {
  if (typeof reporter === "string") {
    if (!reporters[reporter]) {
      throw new Error(`Reporter ${reporter} not found`);
    }
    return reporters[reporter];
  } else if (!isEmpty2(reporter)) {
    return reporter;
  } else if (Object.keys(reporters).length === 0) {
    return defaultReporter;
  } else if (Object.keys(reporters).length === 1) {
    return reporters[Object.keys(reporters)[0]];
  } else {
    const reporterNames = Object.keys(reporters).join(", ");
    throw new Error(
      `Multiple reporters found (${reporterNames}). Please specify a reporter explicitly.`
    );
  }
}
function addReport(evalReports, reporter, report) {
  if (!evalReports[reporter.name]) {
    evalReports[reporter.name] = {
      reporter,
      results: []
    };
  }
  evalReports[reporter.name].results.push(report);
}
function buildWatchPluginForEvaluator(inFile, opts) {
  const evaluators = {
    evaluators: [],
    reporters: {}
  };
  const plugin = {
    name: "run-evalutator-on-end",
    setup(build2) {
      build2.onEnd(async (result) => {
        console.error(`Done building ${inFile}`);
        if (!result.outputFiles) {
          if (opts.verbose) {
            console.warn(`Failed to compile ${inFile}`);
            console.warn(result.errors);
          } else {
            console.warn(`Failed to compile ${inFile}: ${result.errors}`);
          }
          return;
        }
        const evalResult = evaluateBuildResults(inFile, result);
        if (!evalResult) {
          return;
        }
        evaluators.evaluators = evaluators.evaluators.filter(
          (e) => e.sourceFile !== inFile
        );
        for (const evaluator of Object.values(evalResult.evaluators)) {
          evaluators.evaluators.push({
            sourceFile: inFile,
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            evaluator: evaluator.evaluator,
            reporter: evaluator.reporter
          });
        }
        for (const [reporterName, reporter] of Object.entries(
          evalResult.reporters
        )) {
          evaluators.reporters[reporterName] = reporter;
        }
        const evalReports = {};
        for (const evaluatorDef of Object.values(evalResult.evaluators)) {
          const { evaluator, reporter } = evaluatorDef;
          const evalData = callEvaluatorData(evaluator.data);
          const logger = opts.noSendLogs ? null : await initExperiment2(evaluator, evalData);
          const evaluatorResult = await runEvaluator(
            logger,
            {
              ...evaluator,
              data: evalData.data
            },
            opts.progressReporter,
            opts.filters,
            void 0,
            void 0
          );
          const resolvedReporter = resolveReporter(
            reporter,
            evaluators.reporters
            // Let these accumulate across all files.
          );
          const report = resolvedReporter.reportEval(
            evaluator,
            evaluatorResult,
            {
              verbose: opts.verbose,
              jsonl: opts.jsonl
            }
          );
          addReport(evalReports, resolvedReporter, report);
        }
        for (const [reporterName, { reporter, results }] of Object.entries(
          evalReports
        )) {
          const success = await reporter.reportRun(await Promise.all(results));
          if (!success) {
            console.error(error(`Reporter ${reporterName} failed.`));
          }
        }
      });
    }
  };
  return plugin;
}
async function initFile({
  inFile,
  outFile,
  bundleFile,
  tsconfig,
  plugins,
  externalPackages
}) {
  const buildOptions = buildOpts({
    fileName: inFile,
    outFile,
    tsconfig,
    plugins,
    externalPackages
  });
  const ctx = await esbuild.context(buildOptions);
  return {
    inFile,
    outFile,
    bundleFile,
    rebuild: async () => {
      try {
        const result = await ctx.rebuild();
        if (!result.outputFiles) {
          return {
            type: "failure",
            error: new Error("No output file generated"),
            sourceFile: inFile
          };
        }
        const evaluator = evaluateBuildResults(inFile, result) || {
          functions: [],
          prompts: [],
          evaluators: {},
          reporters: {}
        };
        return { type: "success", result, evaluator, sourceFile: inFile };
      } catch (e) {
        return { type: "failure", error: e, sourceFile: inFile };
      }
    },
    bundle: async () => {
      const buildOptions2 = {
        ...buildOpts({
          fileName: inFile,
          outFile: bundleFile,
          tsconfig,
          plugins,
          externalPackages
        }),
        external: [],
        write: true,
        plugins: [],
        minify: true,
        sourcemap: true
      };
      return await esbuild.build(buildOptions2);
    },
    watch: () => {
      ctx.watch();
    },
    destroy: async () => {
      await ctx.dispose();
    }
  };
}
function handleBuildFailure({
  result,
  terminateOnFailure,
  verbose
}) {
  if (terminateOnFailure) {
    throw result.error;
  } else if (verbose) {
    console.warn(`Failed to compile ${result.sourceFile}`);
    console.warn(result.error);
  } else {
    console.warn(
      `Failed to compile ${result.sourceFile}: ${result.error.message}`
    );
  }
}
function updateEvaluators(evaluators, buildResults, opts) {
  for (const result of buildResults) {
    if (result.type === "failure") {
      handleBuildFailure({
        result,
        terminateOnFailure: opts.terminateOnFailure,
        verbose: opts.verbose
      });
      continue;
    }
    for (const evaluator of Object.values(result.evaluator.evaluators)) {
      evaluators.evaluators.push({
        sourceFile: result.sourceFile,
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        evaluator: evaluator.evaluator,
        reporter: evaluator.reporter
      });
    }
    for (const [reporterName, reporter] of Object.entries(
      result.evaluator.reporters
    )) {
      if (evaluators.reporters[reporterName] && evaluators.reporters[reporterName] !== reporter) {
        console.warn(
          warning(
            `Reporter '${reporterName}' already exists. Will skip '${reporterName}' from ${result.sourceFile}.`
          )
        );
        continue;
      }
      evaluators.reporters[reporterName] = reporter;
    }
  }
}
async function runAndWatch({
  handles,
  onExit
}) {
  const count = Object.keys(handles).length;
  console.error(`Watching ${(0, import_pluralize4.default)("file", count, true)}...`);
  Object.values(handles).map((handle) => handle.watch());
  ["SIGINT", "SIGTERM"].forEach((signal) => {
    process.on(signal, function() {
      console.error("Stopped watching.");
      for (const handle of Object.values(handles)) {
        handle.destroy();
      }
      onExit?.();
      process.exit(0);
    });
  });
  await new Promise(() => {
  });
}
async function buildEvaluators(handles, opts) {
  const buildPromises = Object.values(handles).map(
    (handle) => handle.rebuild()
  );
  const buildResults = await Promise.all(buildPromises);
  const evaluators = {
    evaluators: [],
    reporters: {}
  };
  updateEvaluators(evaluators, buildResults, opts);
  return { evaluators, buildResults };
}
async function runOnce(handles, opts) {
  const bundlePromises = opts.bundle ? Object.fromEntries(
    Object.entries(handles).map(([inFile, handle]) => [
      inFile,
      handle.bundle()
    ])
  ) : null;
  const { evaluators, buildResults } = await buildEvaluators(handles, opts);
  if (opts.list) {
    for (const evaluator of evaluators.evaluators) {
      console.log(evaluator.evaluator.evalName);
    }
    return true;
  }
  const evalToExperiment = {};
  const resultPromises = evaluators.evaluators.map(async (evaluator) => {
    const evalData = callEvaluatorData(evaluator.evaluator.data);
    const logger = opts.noSendLogs ? null : await initExperiment2(evaluator.evaluator, evalData);
    try {
      return await runEvaluator(
        logger,
        {
          ...evaluator.evaluator,
          data: evalData.data
        },
        opts.progressReporter,
        opts.filters,
        void 0,
        void 0
      );
    } finally {
      if (logger) {
        if (!evalToExperiment[evaluator.sourceFile]) {
          evalToExperiment[evaluator.sourceFile] = {};
        }
        evalToExperiment[evaluator.sourceFile][evaluator.evaluator.evalName] = logger;
        await logger.flush();
      }
    }
  });
  console.error(`Processing ${resultPromises.length} evaluators...`);
  const allEvalsResults = await Promise.all(resultPromises);
  opts.progressReporter.stop();
  console.error("");
  const evalReports = {};
  for (let idx = 0; idx < evaluators.evaluators.length; idx++) {
    const evaluator = evaluators.evaluators[idx];
    const resolvedReporter = resolveReporter(
      evaluator.reporter,
      evaluators.reporters
    );
    const report = resolvedReporter.reportEval(
      evaluator.evaluator,
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      allEvalsResults[idx],
      {
        verbose: opts.verbose,
        jsonl: opts.jsonl
      }
    );
    addReport(evalReports, resolvedReporter, report);
  }
  if (bundlePromises !== null && Object.entries(evalToExperiment).length > 0) {
    await uploadHandleBundles({
      buildResults: buildResults.filter(
        // We handle errors above, so it's fine to filter down to successes here.
        (result) => result.type === "success"
      ),
      evalToExperiment,
      bundlePromises,
      handles,
      setCurrent: opts.setCurrent,
      defaultIfExists: "replace",
      verbose: opts.verbose
    });
  }
  let allSuccess = true;
  for (const [_reporterName, { reporter, results }] of Object.entries(
    evalReports
  )) {
    const success = await reporter.reportRun(await Promise.all(results));
    allSuccess = allSuccess && success;
  }
  return allSuccess;
}
function checkMatch(pathInput, include_patterns, exclude_patterns) {
  const p = import_path6.default.resolve(pathInput);
  if (include_patterns !== null) {
    let include = false;
    for (const pattern of include_patterns) {
      if ((0, import_minimatch.minimatch)(p, pattern)) {
        include = true;
        break;
      }
    }
    if (!include) {
      return false;
    }
  }
  if (exclude_patterns !== null) {
    let exclude = false;
    for (const pattern of exclude_patterns) {
      if ((0, import_minimatch.minimatch)(p, pattern)) {
        exclude = true;
        break;
      }
    }
    return !exclude;
  }
  return true;
}
async function collectFiles(inputPath, mode) {
  let pathStat = null;
  try {
    pathStat = import_fs2.default.lstatSync(inputPath);
  } catch (e) {
    console.error(error(`Error reading ${inputPath}: ${e}`));
    process.exit(1);
  }
  let files = [];
  if (!pathStat.isDirectory()) {
    if (!checkMatch(
      inputPath,
      mode === "eval" ? INCLUDE_EVAL : INCLUDE_BUNDLE,
      EXCLUDE
    )) {
      const prefix = mode === "eval" ? ".eval" : "";
      console.warn(
        warning(
          `Reading ${inputPath} because it was specified directly. Rename it to end in ${prefix}.ts or .${prefix}.js to include it automatically when you specify a directory.`
        )
      );
    }
    files.push(inputPath);
  } else {
    const walked = await import_util14.default.promisify(fsWalk.walk)(inputPath, {
      deepFilter: (entry) => {
        return checkMatch(entry.path, null, EXCLUDE);
      },
      entryFilter: (entry) => {
        return entry.dirent.isFile() && checkMatch(
          entry.path,
          mode === "eval" ? INCLUDE_EVAL : INCLUDE_BUNDLE,
          EXCLUDE
        );
      }
    });
    files = files.concat(walked.map((entry) => entry.path));
  }
  return files;
}
var nativeNodeModulesPlugin = {
  name: "native-node-modules",
  setup(build2) {
    const nativePackages = /* @__PURE__ */ new Set();
    const addNativePackage = (pkgName) => {
      nativePackages.add(pkgName);
      if (pkgName.includes("@")) {
        const [scope, name] = pkgName.split("/");
        const platformPkgs = [
          `${scope}/${name}-darwin-arm64`,
          `${scope}/${name}-darwin-x64`,
          `${scope}/${name}-linux-x64-gnu`,
          `${scope}/${name}-win32-x64-msvc`
        ];
        platformPkgs.forEach((pkg) => nativePackages.add(pkg));
      }
    };
    build2.onResolve({ filter: /\.node$/ }, (args) => {
      try {
        const path9 = require.resolve(args.path, { paths: [args.resolveDir] });
        const match = path9.match(
          /node_modules[/\\]((?:@[^/\\]+[/\\])?[^/\\]+)/
        );
        if (match) {
          addNativePackage(match[1]);
        }
      } catch {
      }
      return { path: args.path, external: true };
    });
    build2.onResolve(
      { filter: /@[^/]+\/[^/]+-(?:darwin|linux|win32)/ },
      (args) => {
        const match = args.path.match(/^(@[^/]+\/[^/]+)/);
        if (match) {
          addNativePackage(match[1]);
        }
        return { path: args.path, external: true };
      }
    );
    build2.onResolve({ filter: /.*/ }, (args) => {
      if (!args.path.startsWith(".") && !args.path.startsWith("/")) {
        const match = args.path.match(/^(?:@[^/]+\/)?[^/]+/);
        if (match && nativePackages.has(match[0])) {
          return { path: require.resolve(args.path), external: true };
        }
      }
      return null;
    });
  }
};
function buildOpts({
  fileName,
  outFile,
  tsconfig,
  plugins: argPlugins,
  externalPackages
}) {
  const plugins = [
    nativeNodeModulesPlugin,
    createMarkKnownPackagesExternalPlugin(externalPackages),
    ...(argPlugins || []).map((fn) => fn(fileName))
  ];
  return {
    entryPoints: [fileName],
    bundle: true,
    treeShaking: true,
    outfile: outFile,
    platform: "node",
    write: false,
    // Remove the leading "v" from process.version
    target: `node${process.version.slice(1)}`,
    tsconfig,
    external: ["node_modules/*", "fsevents"],
    plugins
  };
}
async function initializeHandles({
  files: inputFiles,
  mode,
  plugins,
  tsconfig,
  externalPackages
}) {
  const files = {};
  const inputPaths = inputFiles.length > 0 ? inputFiles : ["."];
  for (const inputPath of inputPaths) {
    const newFiles = await collectFiles(inputPath, mode);
    if (newFiles.length == 0) {
      console.warn(
        warning(
          `Provided path ${inputPath} is not an eval file or a directory containing eval files, skipping...`
        )
      );
    }
    for (const file of newFiles) {
      files[import_path6.default.resolve(file)] = true;
    }
  }
  if (Object.keys(files).length == 0) {
    console.warn(
      warning("No eval files were found in any of the provided paths.")
    );
    process.exit(0);
  }
  const tmpDir = import_path6.default.join(import_os.default.tmpdir(), `btevals-${(0, import_uuid2.v4)().slice(0, 8)}`);
  const initPromises = [];
  for (const file of Object.keys(files)) {
    const baseName = `${import_path6.default.basename(
      file,
      import_path6.default.extname(file)
    )}-${(0, import_uuid2.v4)().slice(0, 8)}`;
    const outFile = import_path6.default.join(tmpDir, `${baseName}.${OUT_EXT}`);
    const bundleFile = import_path6.default.join(tmpDir, `${baseName}.bundle.js`);
    initPromises.push(
      initFile({
        inFile: file,
        outFile,
        bundleFile,
        plugins,
        tsconfig,
        externalPackages
      })
    );
  }
  const handles = {};
  const initResults = await Promise.all(initPromises);
  for (const result of initResults) {
    handles[result.inFile] = result;
  }
  return handles;
}
async function run(args) {
  (0, import_env2.loadEnvConfig)(process.cwd(), true);
  if (args.env_file) {
    const loaded = dotenv2.config({ path: args.env_file });
    if (loaded.error) {
      console.error(error(`Error loading ${args.env_file}: ${loaded.error}`));
      process.exit(1);
    }
  }
  const evaluatorOpts = {
    verbose: args.verbose,
    apiKey: args.api_key,
    orgName: args.org_name,
    appUrl: args.app_url,
    noSendLogs: !!args.no_send_logs,
    bundle: !!args.bundle || !!args.push,
    setCurrent: !!args.push,
    terminateOnFailure: !!args.terminate_on_failure,
    watch: !!args.watch,
    jsonl: args.jsonl,
    progressReporter: args.no_progress_bars ? new SimpleProgressReporter() : new BarProgressReporter(),
    filters: args.filter ? parseFilters(args.filter) : [],
    list: !!args.list
  };
  if (args.list && args.watch) {
    console.error(error("Cannot specify both --list and --watch."));
    process.exit(1);
  }
  const plugins = evaluatorOpts.watch ? [
    (fileName) => buildWatchPluginForEvaluator(fileName, evaluatorOpts)
  ] : [];
  const handles = await initializeHandles({
    files: args.files,
    mode: "eval",
    tsconfig: args.tsconfig,
    plugins,
    externalPackages: args.external_packages
  });
  if (args.dev) {
    const { evaluators } = await buildEvaluators(handles, evaluatorOpts);
    const allEvaluators = Object.values(evaluators.evaluators).map(
      (e) => e.evaluator
    );
    runDevServer(allEvaluators, {
      host: args.dev_host,
      port: args.dev_port,
      orgName: args.dev_org_name
    });
    return;
  }
  let success = true;
  try {
    if (!evaluatorOpts.noSendLogs) {
      await login({
        apiKey: args.api_key,
        orgName: args.org_name,
        appUrl: args.app_url
      });
    }
    if (args.watch) {
      await runAndWatch({
        handles,
        onExit: () => {
          evaluatorOpts.progressReporter.stop();
        }
      });
    } else {
      success = await runOnce(handles, evaluatorOpts);
    }
  } finally {
    for (const handle of Object.values(handles)) {
      await handle.destroy();
    }
  }
  if (!success) {
    process.exit(1);
  }
}
function addAuthArgs(parser) {
  parser.add_argument("--api-key", {
    help: "Specify a braintrust api key. If the parameter is not specified, the BRAINTRUST_API_KEY environment variable will be used."
  });
  parser.add_argument("--org-name", {
    help: "The name of a specific organization to connect to. This is useful if you belong to multiple."
  });
  parser.add_argument("--app-url", {
    help: "Specify a custom braintrust app url. Defaults to https://www.braintrust.dev. This is only necessary if you are using an experimental version of Braintrust"
  });
  parser.add_argument("--env-file", {
    help: "A path to a .env file containing environment variables to load (via dotenv)."
  });
}
function addCompileArgs(parser) {
  parser.add_argument("--terminate-on-failure", {
    action: "store_true",
    help: "If provided, terminates on a failing eval, instead of the default (moving onto the next one)."
  });
  parser.add_argument("--tsconfig", {
    help: "Specify a custom tsconfig.json file to use."
  });
  parser.add_argument("--external-packages", {
    nargs: "*",
    help: "Additional packages to mark as external during bundling. These packages will not be included in the bundle and must be available at runtime. Use this to resolve bundling errors with native modules or problematic dependencies. Example: --external-packages sqlite3 fsevents @mapbox/node-pre-gyp"
  });
}
async function main() {
  const parser = new import_argparse.ArgumentParser({
    description: "Braintrust CLI"
  });
  parser.add_argument("-v", "--version", { action: "version", version });
  const parentParser = new import_argparse.ArgumentParser({ add_help: false });
  parentParser.add_argument("--verbose", {
    action: "store_true",
    help: "Include additional details, including full stack traces on errors."
  });
  const subparser = parser.add_subparsers({
    required: true
  });
  const parser_run = subparser.add_parser("eval", {
    help: "Run evals locally.",
    parents: [parentParser]
  });
  addAuthArgs(parser_run);
  parser_run.add_argument("--filter", {
    help: "Only run evaluators that match these filters. Each filter is a regular expression (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). For example, --filter metadata.priority='^P0$' input.name='foo.*bar' will only run evaluators that have metadata.priority equal to 'P0' and input.name matching the regular expression 'foo.*bar'.",
    nargs: "*"
  });
  parser_run.add_argument("--list", {
    help: "List, but do not execute, evaluators.",
    action: "store_true"
  });
  parser_run.add_argument("--jsonl", {
    action: "store_true",
    help: "Format score summaries as jsonl, i.e. one JSON-formatted line per summary."
  });
  addCompileArgs(parser_run);
  parser_run.add_argument("--watch", {
    action: "store_true",
    help: "Watch files for changes and rerun evals when changes are detected"
  });
  parser_run.add_argument("--no-send-logs", {
    action: "store_true",
    help: "Do not send logs to Braintrust. Useful for testing evaluators without uploading results."
  });
  parser_run.add_argument("--no-progress-bars", {
    action: "store_true",
    help: "Do not show progress bars when processing evaluators."
  });
  parser_run.add_argument("--bundle", {
    action: "store_true",
    help: "Experimental (do not use unless you know what you're doing)"
  });
  parser_run.add_argument("--push", {
    action: "store_true",
    help: "Push the scorers from the current run to Braintrust. This will mark the current run's scorers as the latest version in the project."
  });
  parser_run.add_argument("files", {
    nargs: "*",
    help: "A list of files or directories to run. If no files are specified, the current directory is used."
  });
  parser_run.add_argument("--dev", {
    action: "store_true",
    help: "Run the evaluators in dev mode. This will start a dev server which you can connect to via the playground's remote evals feature."
  });
  parser_run.add_argument("--dev-host", {
    help: "The host to bind the dev server to. Defaults to localhost. Set to 0.0.0.0 to bind to all interfaces.",
    type: String,
    default: "localhost"
  });
  parser_run.add_argument("--dev-port", {
    help: "The port to bind the dev server to. Defaults to 8300.",
    type: Number,
    default: 8300
  });
  parser_run.add_argument("--dev-org-name", {
    help: "Only allow users that belong this to this org name to run remote evals.",
    type: String
  });
  parser_run.set_defaults({ func: run });
  const parser_push = subparser.add_parser("push", {
    help: "Bundle prompts, tools, scorers, and other resources into Braintrust"
  });
  addAuthArgs(parser_push);
  addCompileArgs(parser_push);
  parser_push.add_argument("files", {
    nargs: "*",
    help: "A list of files or directories containing functions to bundle. If no files are specified, the current directory is used."
  });
  parser_push.add_argument("--if-exists", {
    choices: ["error", "replace", "ignore"],
    default: "error",
    help: "What to do if a function with the same slug already exists. 'error' will cause an error and abort. 'replace' will overwrite the existing function. 'ignore' will ignore the push for this function and continue."
  });
  parser_push.set_defaults({ func: bundleCommand });
  const parser_pull = subparser.add_parser("pull", {
    help: "Pull prompts, tools, scorers, and other resources from Braintrust to save in your codebase."
  });
  parser_pull.add_argument("--output-dir", {
    help: "The directory to output the pulled resources to. If not specified, the current directory is used."
  });
  parser_pull.add_argument("--project-name", {
    help: "The name of the project to pull from. If not specified, all projects are pulled."
  });
  parser_pull.add_argument("--project-id", {
    help: "The id of the project to pull from. If not specified, all projects are pulled."
  });
  parser_pull.add_argument("--id", {
    help: "The id of a specific function to pull."
  });
  parser_pull.add_argument("--slug", {
    help: "The slug of a specific function to pull."
  });
  parser_pull.add_argument("--version", {
    help: "The version to pull. Will pull the latest version of each prompt that is at or before this version."
  });
  parser_pull.add_argument("--force", {
    action: "store_true",
    help: "Overwrite local files if they have uncommitted changes."
  });
  parser_pull.set_defaults({ func: pullCommand });
  const parsed = parser.parse_args();
  try {
    await parsed.func(parsed);
  } catch (e) {
    logError2(e, parsed.verbose);
    process.exit(1);
  }
}
main();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildEvaluators,
  handleBuildFailure,
  initializeHandles
});
/*! Bundled license information:

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
