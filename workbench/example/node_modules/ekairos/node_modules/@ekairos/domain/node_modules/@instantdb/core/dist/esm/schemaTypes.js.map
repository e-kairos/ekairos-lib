{"version":3,"file":"schemaTypes.js","sourceRoot":"","sources":["../../src/schemaTypes.ts"],"names":[],"mappings":"AAGA,MAAM,OAAO,WAAW;IAOtB,YACS,SAAqB,EACrB,QAAoB,EACpB,SAAoB,EAEpB,SAIH,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;QAR9B,cAAS,GAAT,SAAS,CAAY;QACrB,aAAQ,GAAR,QAAQ,CAAY;QACpB,cAAS,GAAT,SAAS,CAAW;QAEpB,WAAM,GAAN,MAAM,CAIwB;QAXhC,aAAQ,GAA4B,EAAE,CAAC;IAY3C,CAAC;IAEJ;;;;OAIG;IACH,cAAc;QACZ,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,KAAwB,EACxB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,MAAM,CACZ,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,KAAK,EACL,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,MAAM,CACZ,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,kCAET,IAAI,CAAC,MAAM,KACd,MAAM,EAAE,IAAI,IAEf,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,IAAI,kCAEC,IAAI,CAAC,MAAM,KACd,OAAO,EAAE,IAAI,IAEhB,CAAC;IACJ,CAAC;CAQF;AAED,MAAM,OAAO,WAAW;IAItB,YACS,WAAwB,EACxB,UAAsB;QADtB,gBAAW,GAAX,WAAW,CAAa;QACxB,eAAU,GAAV,UAAU,CAAY;IAC5B,CAAC;CACL;AAuBD,MAAM,OAAO,SAAS;IAKpB,YACS,KAAY,EACZ,KAAY;QADZ,UAAK,GAAL,KAAK,CAAO;QACZ,UAAK,GAAL,KAAK,CAAO;IAClB,CAAC;IAEJ,MAAM;QACJ,OAAO,IAAI,SAAS,CAAwB,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;CACF;AAmQD,MAAM,OAAO,gBAAgB;IAM3B,YACS,QAAkB,EAClB,KAAY,EACZ,KAAY;QAFZ,aAAQ,GAAR,QAAQ,CAAU;QAClB,UAAK,GAAL,KAAK,CAAO;QACZ,UAAK,GAAL,KAAK,CAAO;IAClB,CAAC;IAEJ;;;;;;;;;;;;;;;;;;OAkBG;IACH,cAAc;QAEZ,OAAO,IAAI,gBAAgB,CACzB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAK,EACV,EAAU,CACX,CAAC;IACJ,CAAC;CACF;AAED;;;;;GAKG;AACH,MAAM,OAAO,YAAY;IAMvB,YACS,QAAkB,EAClB,KAAY;QADZ,aAAQ,GAAR,QAAQ,CAAU;QAClB,UAAK,GAAL,KAAK,CAAO;IAClB,CAAC;IAEJ,cAAc;QACZ,OAAO,IAAI,YAAY,CACrB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAK,CACX,CAAC;IACJ,CAAC;CACF;AAmGD,MAAM,OAAO,uBAAwB,SAAQ,gBAI5C;CAAG","sourcesContent":["import type { RoomSchemaShape } from './presence.ts';\nimport { Expand } from './queryTypes.ts';\n\nexport class DataAttrDef<\n  ValueType,\n  IsRequired extends RequirementKind,\n  IsIndexed extends boolean,\n> {\n  public metadata: Record<string, unknown> = {};\n\n  constructor(\n    public valueType: ValueTypes,\n    public required: IsRequired,\n    public isIndexed: IsIndexed,\n\n    public config: {\n      indexed: boolean;\n      unique: boolean;\n      // clientValidator?: (value: ValueType) => boolean;\n    } = { indexed: false, unique: false },\n  ) {}\n\n  /**\n   * @deprecated Only use this temporarily for attributes that you want\n   * to treat as required in frontend code but canâ€™t yet mark as required\n   * and enforced for backend\n   */\n  clientRequired() {\n    return new DataAttrDef<ValueType, true, IsIndexed>(\n      this.valueType,\n      false as unknown as true,\n      this.isIndexed,\n      this.config,\n    );\n  }\n\n  optional() {\n    return new DataAttrDef<ValueType, false, IsIndexed>(\n      this.valueType,\n      false,\n      this.isIndexed,\n      this.config,\n    );\n  }\n\n  unique() {\n    return new DataAttrDef<ValueType, IsRequired, IsIndexed>(\n      this.valueType,\n      this.required,\n      this.isIndexed,\n      {\n        ...this.config,\n        unique: true,\n      },\n    );\n  }\n\n  indexed() {\n    return new DataAttrDef<ValueType, IsRequired, true>(\n      this.valueType,\n      this.required,\n      true,\n      {\n        ...this.config,\n        indexed: true,\n      },\n    );\n  }\n\n  // clientValidate(clientValidator: (value: ValueType) => boolean) {\n  //   return new DataAttrDef(this.valueType, this.required, {\n  //     ...this.config,\n  //     clientValidator,\n  //   });\n  // }\n}\n\nexport class LinkAttrDef<\n  Cardinality extends CardinalityKind,\n  EntityName extends string,\n> {\n  constructor(\n    public cardinality: Cardinality,\n    public entityName: EntityName,\n  ) {}\n}\n\nexport interface IContainEntitiesAndLinks<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n> {\n  entities: Entities;\n  links: Links;\n}\n\n// ==========\n// base types\n\nexport type ValueTypes = 'string' | 'number' | 'boolean' | 'date' | 'json';\n\nexport type CardinalityKind = 'one' | 'many';\n\n// true  - force required\n// false - optional, not required\nexport type RequirementKind = true | false;\n\nexport type AttrsDefs = Record<string, DataAttrDef<any, any, any>>;\n\nexport class EntityDef<\n  Attrs extends AttrsDefs,\n  Links extends Record<string, LinkAttrDef<any, any>>,\n  AsType,\n> {\n  constructor(\n    public attrs: Attrs,\n    public links: Links,\n  ) {}\n\n  asType<_AsType extends Partial<MappedAttrs<Attrs, boolean>>>() {\n    return new EntityDef<Attrs, Links, _AsType>(this.attrs, this.links);\n  }\n}\n\nexport type EntityDefFromSchema<\n  S extends IContainEntitiesAndLinks<any, any>,\n  K extends keyof S['entities'],\n> = {\n  [k in keyof S['entities'][K]['attrs']]: S['entities'][K] extends EntityDef<\n    any,\n    any,\n    any\n  >\n    ? S['entities'][K]['attrs'][k]\n    : never;\n};\n\nexport type EntitiesDef = Record<string, EntityDef<any, any, any>>;\n\nexport type LinksDef<Entities extends EntitiesDef> = Record<\n  string,\n  LinkDef<\n    Entities,\n    keyof Entities,\n    string,\n    CardinalityKind,\n    keyof Entities,\n    string,\n    CardinalityKind\n  >\n>;\n\nexport type LinkDef<\n  Entities extends EntitiesDef,\n  FwdEntity extends keyof Entities,\n  FwdAttr extends string,\n  FwdCardinality extends CardinalityKind,\n  RevEntity extends keyof Entities,\n  RevAttr extends string,\n  RevCardinality extends CardinalityKind,\n> = {\n  forward: {\n    on: FwdEntity;\n    label: FwdAttr;\n    has: FwdCardinality;\n    required?: RequirementKind;\n    onDelete?: 'cascade';\n  };\n  reverse: {\n    on: RevEntity;\n    label: RevAttr;\n    has: RevCardinality;\n    onDelete?: 'cascade';\n  };\n};\n\n// ==========\n// derived types\ntype IsEmptyOrIndexSignature<T> = keyof T extends never\n  ? true\n  : string extends keyof T\n    ? true\n    : false;\n\nexport type EntitiesWithLinks<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n> = {\n  [EntityName in keyof Entities]: EntityDef<\n    Entities[EntityName]['attrs'],\n    EntityForwardLinksMap<EntityName, Entities, Links> &\n      EntityReverseLinksMap<EntityName, Entities, Links>,\n    Entities[EntityName] extends EntityDef<any, any, infer O>\n      ? O extends void\n        ? void\n        : O\n      : void\n  >;\n};\n\ntype EntityForwardLinksMap<\n  EntityName extends keyof Entities,\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  LinkIndexFwd = LinksIndexedByEntity<Entities, Links, 'reverse'>,\n> =\n  IsEmptyOrIndexSignature<Links> extends true\n    ? {}\n    : EntityName extends keyof LinkIndexFwd\n      ? {\n          [LinkName in keyof LinkIndexFwd[EntityName]]: LinkIndexFwd[EntityName][LinkName] extends LinkDef<\n            Entities,\n            infer RelatedEntityName,\n            any,\n            any,\n            any,\n            any,\n            infer Cardinality\n          >\n            ? {\n                entityName: RelatedEntityName;\n                cardinality: Cardinality;\n              }\n            : never;\n        }\n      : {};\n\ntype EntityReverseLinksMap<\n  EntityName extends keyof Entities,\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  RevLinkIndex = LinksIndexedByEntity<Entities, Links, 'forward'>,\n> =\n  IsEmptyOrIndexSignature<Links> extends true\n    ? {}\n    : EntityName extends keyof RevLinkIndex\n      ? {\n          [LinkName in keyof RevLinkIndex[EntityName]]: RevLinkIndex[EntityName][LinkName] extends LinkDef<\n            Entities,\n            any,\n            any,\n            infer Cardinality,\n            infer RelatedEntityName,\n            any,\n            any\n          >\n            ? {\n                entityName: RelatedEntityName;\n                cardinality: Cardinality;\n              }\n            : never;\n        }\n      : {};\n\ntype LinksIndexedByEntity<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  Direction extends 'forward' | 'reverse',\n> = {\n  [FwdEntity in keyof Entities]: {\n    [LinkName in keyof Links as Links[LinkName][Direction]['on'] extends FwdEntity\n      ? Links[LinkName][Direction]['label']\n      : never]: Links[LinkName] extends LinkDef<\n      Entities,\n      infer FwdEntity,\n      infer FwdAttr,\n      infer FwdCardinality,\n      infer RevEntity,\n      infer RevAttr,\n      infer RevCardinality\n    >\n      ? LinkDef<\n          Entities,\n          FwdEntity,\n          FwdAttr,\n          FwdCardinality,\n          RevEntity,\n          RevAttr,\n          RevCardinality\n        >\n      : never;\n  };\n};\n\ntype RequiredKeys<Attrs extends AttrsDefs> = {\n  [K in keyof Attrs]: Attrs[K] extends DataAttrDef<any, infer R, any>\n    ? R extends true\n      ? K\n      : never\n    : never;\n}[keyof Attrs];\n\ntype OptionalKeys<Attrs extends AttrsDefs> = {\n  [K in keyof Attrs]: Attrs[K] extends DataAttrDef<any, infer R, any>\n    ? R extends false\n      ? K\n      : never\n    : never;\n}[keyof Attrs];\n\n/**\n * MappedAttrs:\n *   - Required keys => `key: ValueType`\n *   - Optional keys => `key?: ValueType`\n */\ntype MappedAttrs<Attrs extends AttrsDefs, UseDates extends boolean> = {\n  [K in RequiredKeys<Attrs>]: Attrs[K] extends DataAttrDef<infer V, any, any>\n    ? V extends Date\n      ? UseDates extends true\n        ? V\n        : string | number\n      : V\n    : never;\n} & {\n  [K in OptionalKeys<Attrs>]?: Attrs[K] extends DataAttrDef<infer V, any, any>\n    ? V extends Date\n      ? UseDates extends true\n        ? V\n        : string | number\n      : V\n    : never;\n};\n\nexport type ResolveEntityAttrs<\n  EDef extends EntityDef<any, any, any>,\n  UseDates extends boolean = false,\n  ResolvedAttrs = MappedAttrs<EDef['attrs'], UseDates>,\n> =\n  EDef extends EntityDef<any, any, infer AsType>\n    ? AsType extends void\n      ? ResolvedAttrs\n      : Omit<ResolvedAttrs, keyof AsType> & AsType\n    : ResolvedAttrs;\n\nexport type ResolveAttrs<\n  Entities extends EntitiesDef,\n  EntityName extends keyof Entities,\n  UseDates extends boolean,\n> = ResolveEntityAttrs<Entities[EntityName], UseDates>;\n\nexport type RoomsFromDef<RDef extends RoomsDef> = {\n  [RoomName in keyof RDef]: {\n    presence: Expand<ResolveEntityAttrs<RDef[RoomName]['presence']>>;\n    topics: {\n      [TopicName in keyof RDef[RoomName]['topics']]: Expand<\n        ResolveEntityAttrs<RDef[RoomName]['topics'][TopicName]>\n      >;\n    };\n  };\n};\n\nexport type RoomsOf<S> =\n  S extends InstantSchemaDef<any, any, infer RDef> ? RoomsFromDef<RDef> : never;\n\nexport type PresenceOf<\n  S,\n  RoomType extends keyof RoomsOf<S>,\n> = RoomsOf<S>[RoomType] extends { presence: infer P } ? P : {};\n\nexport type TopicsOf<\n  S,\n  RoomType extends keyof RoomsOf<S>,\n> = RoomsOf<S>[RoomType] extends { topics: infer T } ? T : {};\n\nexport type TopicOf<\n  S,\n  RoomType extends keyof RoomsOf<S>,\n  TopicType extends keyof TopicsOf<S, RoomType>,\n> = TopicsOf<S, RoomType>[TopicType];\n\ninterface RoomDef {\n  presence: EntityDef<any, any, any>;\n  topics?: {\n    [TopicName: string]: EntityDef<any, any, any>;\n  };\n}\n\nexport interface RoomsDef {\n  [RoomType: string]: RoomDef;\n}\n\nexport class InstantSchemaDef<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  Rooms extends RoomsDef,\n> implements IContainEntitiesAndLinks<Entities, Links>\n{\n  constructor(\n    public entities: Entities,\n    public links: Links,\n    public rooms: Rooms,\n  ) {}\n\n  /**\n   * @deprecated\n   * `withRoomSchema` is deprecated. Define your schema in `rooms` directly:\n   *\n   * @example\n   * // Before:\n   * const schema = i.schema({\n   *   // ...\n   * }).withRoomSchema<RoomSchema>()\n   *\n   * // After\n   * const schema = i.schema({\n   *  rooms: {\n   *    // ...\n   *  }\n   * })\n   *\n   * @see https://instantdb.com/docs/presence-and-topics#typesafety\n   */\n  withRoomSchema<_RoomSchema extends RoomSchemaShape>() {\n    type RDef = RoomDefFromShape<_RoomSchema>;\n    return new InstantSchemaDef<Entities, Links, RDef>(\n      this.entities,\n      this.links,\n      {} as RDef,\n    );\n  }\n}\n\n/**\n * @deprecated\n * `i.graph` is deprecated. Use `i.schema` instead.\n *\n * @see https://instantdb.com/docs/modeling-data\n */\nexport class InstantGraph<\n  Entities extends EntitiesDef,\n  Links extends LinksDef<Entities>,\n  RoomSchema extends RoomSchemaShape = {},\n> implements IContainEntitiesAndLinks<Entities, Links>\n{\n  constructor(\n    public entities: Entities,\n    public links: Links,\n  ) {}\n\n  withRoomSchema<_RoomSchema extends RoomSchemaShape>() {\n    return new InstantGraph<Entities, Links, _RoomSchema>(\n      this.entities,\n      this.links,\n    );\n  }\n}\n\ntype EntityDefFromRoomSlice<Shape extends { [k: string]: any }> = EntityDef<\n  {\n    [AttrName in keyof Shape]: DataAttrDef<\n      Shape[AttrName],\n      Shape[AttrName] extends undefined ? false : true,\n      any\n    >;\n  },\n  any,\n  void\n>;\n\ntype RoomDefFromShape<RoomSchema extends RoomSchemaShape> = {\n  [RoomName in keyof RoomSchema]: {\n    presence: EntityDefFromRoomSlice<RoomSchema[RoomName]['presence']>;\n    topics: {\n      [TopicName in keyof RoomSchema[RoomName]['topics']]: EntityDefFromRoomSlice<\n        RoomSchema[RoomName]['topics'][TopicName]\n      >;\n    };\n  };\n};\n\ntype EntityDefFromShape<Shape, K extends keyof Shape> = EntityDef<\n  {\n    [AttrName in keyof Shape[K]]: DataAttrDef<\n      Shape[K][AttrName],\n      Shape[K][AttrName] extends undefined ? false : true,\n      any\n    >;\n  },\n  {\n    [LinkName in keyof Shape]: LinkAttrDef<\n      'many',\n      LinkName extends string ? LinkName : string\n    >;\n  },\n  void\n>;\n\n/**\n * If you were using the old `schema` types, you can use this to help you\n * migrate.\n *\n * @example\n * // Before\n * const db = init<Schema, Rooms>({...})\n *\n * // After\n * const db = init<BackwardsCompatibleSchema<Schema, Rooms>>({...})\n */\nexport type BackwardsCompatibleSchema<\n  Shape extends { [k: string]: any },\n  RoomSchema extends RoomSchemaShape = {},\n> = InstantSchemaDef<\n  { [K in keyof Shape]: EntityDefFromShape<Shape, K> },\n  UnknownLinks<EntitiesDef>,\n  RoomDefFromShape<RoomSchema>\n>;\n\n// ----------\n// InstantUnknownSchema\n\nexport type UnknownEntity = EntityDef<\n  {\n    id: DataAttrDef<string, true, true>;\n    [AttrName: string]: DataAttrDef<any, boolean, boolean>;\n  },\n  { [LinkName: string]: LinkAttrDef<'many', string> },\n  void\n>;\n\nexport type UnknownEntities = {\n  [EntityName: string]: UnknownEntity;\n};\n\nexport interface UnknownLinks<Entities extends EntitiesDef> {\n  [LinkName: string]: LinkDef<\n    Entities,\n    string,\n    string,\n    'many',\n    string,\n    string,\n    'many'\n  >;\n}\n\nexport interface UnknownRooms {\n  [RoomName: string]: {\n    presence: EntityDef<any, any, any>;\n    topics: {\n      [TopicName: string]: EntityDef<any, any, any>;\n    };\n  };\n}\n\nexport class InstantUnknownSchemaDef extends InstantSchemaDef<\n  UnknownEntities,\n  UnknownLinks<UnknownEntities>,\n  UnknownRooms\n> {}\n\nexport type InstantUnknownSchema = InstantUnknownSchemaDef;\n\nexport type CreateParams<\n  Schema extends IContainEntitiesAndLinks<any, any>,\n  EntityName extends keyof Schema['entities'],\n> = {\n  [AttrName in RequiredKeys<\n    Schema['entities'][EntityName]['attrs']\n  >]: Schema['entities'][EntityName]['attrs'][AttrName] extends DataAttrDef<\n    infer ValueType,\n    any,\n    any\n  >\n    ? ValueType extends Date\n      ? string | number | Date\n      : ValueType\n    : never;\n} & {\n  [AttrName in OptionalKeys<\n    Schema['entities'][EntityName]['attrs']\n  >]?: Schema['entities'][EntityName]['attrs'][AttrName] extends DataAttrDef<\n    infer ValueType,\n    false,\n    any\n  >\n    ? (ValueType extends Date ? string | number | Date : ValueType) | null\n    : never;\n};\n\nexport type UpdateParams<\n  Schema extends IContainEntitiesAndLinks<any, any>,\n  EntityName extends keyof Schema['entities'],\n> = {\n  [AttrName in keyof Schema['entities'][EntityName]['attrs']]?: Schema['entities'][EntityName]['attrs'][AttrName] extends DataAttrDef<\n    infer ValueType,\n    infer IsRequired,\n    any\n  >\n    ? IsRequired extends true\n      ? ValueType extends Date\n        ? string | number | Date\n        : ValueType\n      : (ValueType extends Date ? string | number | Date : ValueType) | null\n    : never;\n};\n\nexport type UpdateOpts = {\n  upsert?: boolean | undefined;\n};\n\nexport type LinkParams<\n  Schema extends IContainEntitiesAndLinks<any, any>,\n  EntityName extends keyof Schema['entities'],\n> = {\n  [LinkName in keyof Schema['entities'][EntityName]['links']]?: Schema['entities'][EntityName]['links'][LinkName] extends LinkAttrDef<\n    infer Cardinality,\n    any\n  >\n    ? Cardinality extends 'one'\n      ? string\n      : string | string[]\n    : never;\n};\n\nexport type RuleParams = {\n  [key: string]: any;\n};\n"]}