"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMagicCode = sendMagicCode;
exports.verifyMagicCode = verifyMagicCode;
exports.verifyRefreshToken = verifyRefreshToken;
exports.signInAsGuest = signInAsGuest;
exports.exchangeCodeForToken = exchangeCodeForToken;
exports.signInWithIdToken = signInWithIdToken;
exports.signOut = signOut;
const fetch_js_1 = require("./utils/fetch.js");
function sendMagicCode({ apiURI, appId, email, }) {
    return (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/auth/send_magic_code`, {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ 'app-id': appId, email }),
    });
}
function verifyMagicCode(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, email, code, refreshToken, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/auth/verify_magic_code`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(Object.assign({ 'app-id': appId, email,
                code }, (refreshToken ? { 'refresh-token': refreshToken } : {}))),
        });
        return res;
    });
}
function verifyRefreshToken(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, refreshToken, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/auth/verify_refresh_token`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({
                'app-id': appId,
                'refresh-token': refreshToken,
            }),
        });
        return res;
    });
}
function signInAsGuest(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/auth/sign_in_guest`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({
                'app-id': appId,
            }),
        });
        return res;
    });
}
function exchangeCodeForToken(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, code, codeVerifier, refreshToken, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/oauth/token`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({
                app_id: appId,
                code: code,
                code_verifier: codeVerifier,
                refresh_token: refreshToken,
            }),
        });
        return res;
    });
}
function signInWithIdToken(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, nonce, idToken, clientName, refreshToken, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/oauth/id_token`, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({
                app_id: appId,
                nonce,
                id_token: idToken,
                client_name: clientName,
                refresh_token: refreshToken,
            }),
        });
        return res;
    });
}
function signOut(_a) {
    return __awaiter(this, arguments, void 0, function* ({ apiURI, appId, refreshToken, }) {
        const res = yield (0, fetch_js_1.jsonFetch)(`${apiURI}/runtime/signout`, {
            method: 'POST',
            headers: {
                'content-type': 'application/json',
            },
            body: JSON.stringify({
                app_id: appId,
                refresh_token: refreshToken,
            }),
        });
        return res;
    });
}
//# sourceMappingURL=authAPI.js.map