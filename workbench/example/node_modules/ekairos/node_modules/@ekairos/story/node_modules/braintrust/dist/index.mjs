import {
  INVALID_SPAN_CONTEXT,
  SamplingDecision,
  SpanKind,
  SpanStatusCode,
  TraceFlags,
  __esm,
  __export,
  __toCommonJS,
  baggageEntryMetadataFromString,
  context,
  createContextKey,
  diag,
  esm_exports,
  init_esm,
  isSpanContextValid,
  isValidTraceId,
  trace
} from "./chunk-WKBXJQ57.mjs";

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js
function suppressTracing(context2) {
  return context2.setValue(SUPPRESS_TRACING_KEY, true);
}
function isTracingSuppressed(context2) {
  return context2.getValue(SUPPRESS_TRACING_KEY) === true;
}
var SUPPRESS_TRACING_KEY;
var init_suppress_tracing = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js"() {
    "use strict";
    init_esm();
    SUPPRESS_TRACING_KEY = createContextKey("OpenTelemetry SDK Context Key SUPPRESS_TRACING");
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js
function sanitizeAttributes(attributes) {
  const out = {};
  if (typeof attributes !== "object" || attributes == null) {
    return out;
  }
  for (const [key, val] of Object.entries(attributes)) {
    if (!isAttributeKey(key)) {
      diag.warn(`Invalid attribute key: ${key}`);
      continue;
    }
    if (!isAttributeValue(val)) {
      diag.warn(`Invalid attribute value set for key: ${key}`);
      continue;
    }
    if (Array.isArray(val)) {
      out[key] = val.slice();
    } else {
      out[key] = val;
    }
  }
  return out;
}
function isAttributeKey(key) {
  return typeof key === "string" && key.length > 0;
}
function isAttributeValue(val) {
  if (val == null) {
    return true;
  }
  if (Array.isArray(val)) {
    return isHomogeneousAttributeValueArray(val);
  }
  return isValidPrimitiveAttributeValue(val);
}
function isHomogeneousAttributeValueArray(arr) {
  let type;
  for (const element of arr) {
    if (element == null)
      continue;
    if (!type) {
      if (isValidPrimitiveAttributeValue(element)) {
        type = typeof element;
        continue;
      }
      return false;
    }
    if (typeof element === type) {
      continue;
    }
    return false;
  }
  return true;
}
function isValidPrimitiveAttributeValue(val) {
  switch (typeof val) {
    case "number":
    case "boolean":
    case "string":
      return true;
  }
  return false;
}
var init_attributes = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js
function loggingErrorHandler() {
  return (ex) => {
    diag.error(stringifyException(ex));
  };
}
function stringifyException(ex) {
  if (typeof ex === "string") {
    return ex;
  } else {
    return JSON.stringify(flattenException(ex));
  }
}
function flattenException(ex) {
  const result = {};
  let current = ex;
  while (current !== null) {
    Object.getOwnPropertyNames(current).forEach((propertyName) => {
      if (result[propertyName])
        return;
      const value = current[propertyName];
      if (value) {
        result[propertyName] = String(value);
      }
    });
    current = Object.getPrototypeOf(current);
  }
  return result;
}
var init_logging_error_handler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js
function globalErrorHandler(ex) {
  try {
    delegateHandler(ex);
  } catch {
  }
}
var delegateHandler;
var init_global_error_handler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js"() {
    "use strict";
    init_logging_error_handler();
    delegateHandler = loggingErrorHandler();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js
import { inspect } from "util";
function getNumberFromEnv(key) {
  const raw = process.env[key];
  if (raw == null || raw.trim() === "") {
    return void 0;
  }
  const value = Number(raw);
  if (isNaN(value)) {
    diag.warn(`Unknown value ${inspect(raw)} for ${key}, expected a number, using defaults`);
    return void 0;
  }
  return value;
}
function getStringFromEnv(key) {
  const raw = process.env[key];
  if (raw == null || raw.trim() === "") {
    return void 0;
  }
  return raw;
}
var init_environment = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js
import { performance } from "perf_hooks";
var otperformance;
var init_performance = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js"() {
    "use strict";
    otperformance = performance;
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/version.js
var VERSION;
var init_version = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/version.js"() {
    "use strict";
    VERSION = "2.0.1";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js
var init_SemanticAttributes = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js
var init_trace = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js"() {
    "use strict";
    init_SemanticAttributes();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js
var init_SemanticResourceAttributes = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js
var init_resource = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js"() {
    "use strict";
    init_SemanticResourceAttributes();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js
var ATTR_EXCEPTION_MESSAGE, ATTR_EXCEPTION_STACKTRACE, ATTR_EXCEPTION_TYPE, ATTR_SERVICE_NAME, ATTR_TELEMETRY_SDK_LANGUAGE, TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS, ATTR_TELEMETRY_SDK_NAME, ATTR_TELEMETRY_SDK_VERSION;
var init_stable_attributes = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js"() {
    "use strict";
    ATTR_EXCEPTION_MESSAGE = "exception.message";
    ATTR_EXCEPTION_STACKTRACE = "exception.stacktrace";
    ATTR_EXCEPTION_TYPE = "exception.type";
    ATTR_SERVICE_NAME = "service.name";
    ATTR_TELEMETRY_SDK_LANGUAGE = "telemetry.sdk.language";
    TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = "nodejs";
    ATTR_TELEMETRY_SDK_NAME = "telemetry.sdk.name";
    ATTR_TELEMETRY_SDK_VERSION = "telemetry.sdk.version";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js
var init_stable_metrics = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_metrics.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js
var init_esm2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.32.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js"() {
    "use strict";
    init_trace();
    init_resource();
    init_stable_attributes();
    init_stable_metrics();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/semconv.js
var ATTR_PROCESS_RUNTIME_NAME;
var init_semconv = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/semconv.js"() {
    "use strict";
    ATTR_PROCESS_RUNTIME_NAME = "process.runtime.name";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js
var SDK_INFO;
var init_sdk_info = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js"() {
    "use strict";
    init_version();
    init_esm2();
    init_semconv();
    SDK_INFO = {
      [ATTR_TELEMETRY_SDK_NAME]: "opentelemetry",
      [ATTR_PROCESS_RUNTIME_NAME]: "node",
      [ATTR_TELEMETRY_SDK_LANGUAGE]: TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,
      [ATTR_TELEMETRY_SDK_VERSION]: VERSION
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js
function unrefTimer(timer) {
  timer.unref();
}
var init_timer_util = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/index.js
var init_node = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/index.js"() {
    "use strict";
    init_environment();
    init_performance();
    init_sdk_info();
    init_timer_util();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/index.js
var init_platform = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/index.js"() {
    "use strict";
    init_node();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js
function millisToHrTime(epochMillis) {
  const epochSeconds = epochMillis / 1e3;
  const seconds = Math.trunc(epochSeconds);
  const nanos = Math.round(epochMillis % 1e3 * MILLISECONDS_TO_NANOSECONDS);
  return [seconds, nanos];
}
function getTimeOrigin() {
  let timeOrigin = otperformance.timeOrigin;
  if (typeof timeOrigin !== "number") {
    const perf = otperformance;
    timeOrigin = perf.timing && perf.timing.fetchStart;
  }
  return timeOrigin;
}
function hrTime(performanceNow) {
  const timeOrigin = millisToHrTime(getTimeOrigin());
  const now2 = millisToHrTime(typeof performanceNow === "number" ? performanceNow : otperformance.now());
  return addHrTimes(timeOrigin, now2);
}
function hrTimeDuration(startTime, endTime) {
  let seconds = endTime[0] - startTime[0];
  let nanos = endTime[1] - startTime[1];
  if (nanos < 0) {
    seconds -= 1;
    nanos += SECOND_TO_NANOSECONDS;
  }
  return [seconds, nanos];
}
function hrTimeToMicroseconds(time) {
  return time[0] * 1e6 + time[1] / 1e3;
}
function isTimeInputHrTime(value) {
  return Array.isArray(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number";
}
function isTimeInput(value) {
  return isTimeInputHrTime(value) || typeof value === "number" || value instanceof Date;
}
function addHrTimes(time1, time2) {
  const out = [time1[0] + time2[0], time1[1] + time2[1]];
  if (out[1] >= SECOND_TO_NANOSECONDS) {
    out[1] -= SECOND_TO_NANOSECONDS;
    out[0] += 1;
  }
  return out;
}
var NANOSECOND_DIGITS, NANOSECOND_DIGITS_IN_MILLIS, MILLISECONDS_TO_NANOSECONDS, SECOND_TO_NANOSECONDS;
var init_time = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js"() {
    "use strict";
    init_platform();
    NANOSECOND_DIGITS = 9;
    NANOSECOND_DIGITS_IN_MILLIS = 6;
    MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);
    SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js
var ExportResultCode;
var init_ExportResult = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js"() {
    "use strict";
    (function(ExportResultCode3) {
      ExportResultCode3[ExportResultCode3["SUCCESS"] = 0] = "SUCCESS";
      ExportResultCode3[ExportResultCode3["FAILED"] = 1] = "FAILED";
    })(ExportResultCode || (ExportResultCode = {}));
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {
    return false;
  }
  const proto = getPrototypeOf(value);
  if (proto === null) {
    return true;
  }
  const Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;
}
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
function getRawTag(value) {
  const isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  let unmasked = false;
  try {
    value[symToStringTag] = void 0;
    unmasked = true;
  } catch (e) {
  }
  const result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
function objectToString(value) {
  return nativeObjectToString.call(value);
}
var objectTag, nullTag, undefinedTag, funcProto, funcToString, objectCtorString, getPrototypeOf, objectProto, hasOwnProperty, symToStringTag, nativeObjectToString;
var init_lodash_merge = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js"() {
    "use strict";
    objectTag = "[object Object]";
    nullTag = "[object Null]";
    undefinedTag = "[object Undefined]";
    funcProto = Function.prototype;
    funcToString = funcProto.toString;
    objectCtorString = funcToString.call(Object);
    getPrototypeOf = Object.getPrototypeOf;
    objectProto = Object.prototype;
    hasOwnProperty = objectProto.hasOwnProperty;
    symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    nativeObjectToString = objectProto.toString;
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/merge.js
function merge(...args) {
  let result = args.shift();
  const objects = /* @__PURE__ */ new WeakMap();
  while (args.length > 0) {
    result = mergeTwoObjects(result, args.shift(), 0, objects);
  }
  return result;
}
function takeValue(value) {
  if (isArray2(value)) {
    return value.slice();
  }
  return value;
}
function mergeTwoObjects(one, two, level = 0, objects) {
  let result;
  if (level > MAX_LEVEL) {
    return void 0;
  }
  level++;
  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {
    result = takeValue(two);
  } else if (isArray2(one)) {
    result = one.slice();
    if (isArray2(two)) {
      for (let i = 0, j = two.length; i < j; i++) {
        result.push(takeValue(two[i]));
      }
    } else if (isObject2(two)) {
      const keys = Object.keys(two);
      for (let i = 0, j = keys.length; i < j; i++) {
        const key = keys[i];
        result[key] = takeValue(two[key]);
      }
    }
  } else if (isObject2(one)) {
    if (isObject2(two)) {
      if (!shouldMerge(one, two)) {
        return two;
      }
      result = Object.assign({}, one);
      const keys = Object.keys(two);
      for (let i = 0, j = keys.length; i < j; i++) {
        const key = keys[i];
        const twoValue = two[key];
        if (isPrimitive(twoValue)) {
          if (typeof twoValue === "undefined") {
            delete result[key];
          } else {
            result[key] = twoValue;
          }
        } else {
          const obj1 = result[key];
          const obj2 = twoValue;
          if (wasObjectReferenced(one, key, objects) || wasObjectReferenced(two, key, objects)) {
            delete result[key];
          } else {
            if (isObject2(obj1) && isObject2(obj2)) {
              const arr1 = objects.get(obj1) || [];
              const arr2 = objects.get(obj2) || [];
              arr1.push({ obj: one, key });
              arr2.push({ obj: two, key });
              objects.set(obj1, arr1);
              objects.set(obj2, arr2);
            }
            result[key] = mergeTwoObjects(result[key], twoValue, level, objects);
          }
        }
      }
    } else {
      result = two;
    }
  }
  return result;
}
function wasObjectReferenced(obj, key, objects) {
  const arr = objects.get(obj[key]) || [];
  for (let i = 0, j = arr.length; i < j; i++) {
    const info = arr[i];
    if (info.key === key && info.obj === obj) {
      return true;
    }
  }
  return false;
}
function isArray2(value) {
  return Array.isArray(value);
}
function isFunction(value) {
  return typeof value === "function";
}
function isObject2(value) {
  return !isPrimitive(value) && !isArray2(value) && !isFunction(value) && typeof value === "object";
}
function isPrimitive(value) {
  return typeof value === "string" || typeof value === "number" || typeof value === "boolean" || typeof value === "undefined" || value instanceof Date || value instanceof RegExp || value === null;
}
function shouldMerge(one, two) {
  if (!isPlainObject(one) || !isPlainObject(two)) {
    return false;
  }
  return true;
}
var MAX_LEVEL;
var init_merge = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/merge.js"() {
    "use strict";
    init_lodash_merge();
    MAX_LEVEL = 20;
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/promise.js
var Deferred;
var init_promise = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/promise.js"() {
    "use strict";
    Deferred = class {
      _promise;
      _resolve;
      _reject;
      constructor() {
        this._promise = new Promise((resolve, reject2) => {
          this._resolve = resolve;
          this._reject = reject2;
        });
      }
      get promise() {
        return this._promise;
      }
      resolve(val) {
        this._resolve(val);
      }
      reject(err) {
        this._reject(err);
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js
var BindOnceFuture;
var init_callback = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js"() {
    "use strict";
    init_promise();
    BindOnceFuture = class {
      _callback;
      _that;
      _isCalled = false;
      _deferred = new Deferred();
      constructor(_callback, _that) {
        this._callback = _callback;
        this._that = _that;
      }
      get isCalled() {
        return this._isCalled;
      }
      get promise() {
        return this._deferred.promise;
      }
      call(...args) {
        if (!this._isCalled) {
          this._isCalled = true;
          try {
            Promise.resolve(this._callback.call(this._that, ...args)).then((val) => this._deferred.resolve(val), (err) => this._deferred.reject(err));
          } catch (err) {
            this._deferred.reject(err);
          }
        }
        return this._deferred.promise;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/exporter.js
function _export(exporter, arg) {
  return new Promise((resolve) => {
    context.with(suppressTracing(context.active()), () => {
      exporter.export(arg, (result) => {
        resolve(result);
      });
    });
  });
}
var init_exporter = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/exporter.js"() {
    "use strict";
    init_esm();
    init_suppress_tracing();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js
var internal;
var init_esm3 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js"() {
    "use strict";
    init_attributes();
    init_global_error_handler();
    init_time();
    init_ExportResult();
    init_platform();
    init_suppress_tracing();
    init_merge();
    init_callback();
    init_exporter();
    internal = {
      _export
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js
function defaultServiceName() {
  return `unknown_service:${process.argv0}`;
}
var init_default_service_name = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/node/index.js
var init_node2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/node/index.js"() {
    "use strict";
    init_default_service_name();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/index.js
var init_platform2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/index.js"() {
    "use strict";
    init_node2();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/utils.js
var isPromiseLike;
var init_utils = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/utils.js"() {
    "use strict";
    isPromiseLike = (val) => {
      return val !== null && typeof val === "object" && typeof val.then === "function";
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js
function resourceFromAttributes(attributes) {
  return ResourceImpl.FromAttributeList(Object.entries(attributes));
}
function defaultResource() {
  return resourceFromAttributes({
    [ATTR_SERVICE_NAME]: defaultServiceName(),
    [ATTR_TELEMETRY_SDK_LANGUAGE]: SDK_INFO[ATTR_TELEMETRY_SDK_LANGUAGE],
    [ATTR_TELEMETRY_SDK_NAME]: SDK_INFO[ATTR_TELEMETRY_SDK_NAME],
    [ATTR_TELEMETRY_SDK_VERSION]: SDK_INFO[ATTR_TELEMETRY_SDK_VERSION]
  });
}
function guardedRawAttributes(attributes) {
  return attributes.map(([k, v]) => {
    if (isPromiseLike(v)) {
      return [
        k,
        v.catch((err) => {
          diag.debug("promise rejection for resource attribute: %s - %s", k, err);
          return void 0;
        })
      ];
    }
    return [k, v];
  });
}
var ResourceImpl;
var init_ResourceImpl = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js"() {
    "use strict";
    init_esm();
    init_esm3();
    init_esm2();
    init_platform2();
    init_utils();
    ResourceImpl = class _ResourceImpl {
      _rawAttributes;
      _asyncAttributesPending = false;
      _memoizedAttributes;
      static FromAttributeList(attributes) {
        const res = new _ResourceImpl({});
        res._rawAttributes = guardedRawAttributes(attributes);
        res._asyncAttributesPending = attributes.filter(([_, val]) => isPromiseLike(val)).length > 0;
        return res;
      }
      constructor(resource) {
        const attributes = resource.attributes ?? {};
        this._rawAttributes = Object.entries(attributes).map(([k, v]) => {
          if (isPromiseLike(v)) {
            this._asyncAttributesPending = true;
          }
          return [k, v];
        });
        this._rawAttributes = guardedRawAttributes(this._rawAttributes);
      }
      get asyncAttributesPending() {
        return this._asyncAttributesPending;
      }
      async waitForAsyncAttributes() {
        if (!this.asyncAttributesPending) {
          return;
        }
        for (let i = 0; i < this._rawAttributes.length; i++) {
          const [k, v] = this._rawAttributes[i];
          this._rawAttributes[i] = [k, isPromiseLike(v) ? await v : v];
        }
        this._asyncAttributesPending = false;
      }
      get attributes() {
        if (this.asyncAttributesPending) {
          diag.error("Accessing resource attributes before async attributes settled");
        }
        if (this._memoizedAttributes) {
          return this._memoizedAttributes;
        }
        const attrs = {};
        for (const [k, v] of this._rawAttributes) {
          if (isPromiseLike(v)) {
            diag.debug(`Unsettled resource attribute ${k} skipped`);
            continue;
          }
          if (v != null) {
            attrs[k] ??= v;
          }
        }
        if (!this._asyncAttributesPending) {
          this._memoizedAttributes = attrs;
        }
        return attrs;
      }
      getRawAttributes() {
        return this._rawAttributes;
      }
      merge(resource) {
        if (resource == null)
          return this;
        return _ResourceImpl.FromAttributeList([
          ...resource.getRawAttributes(),
          ...this.getRawAttributes()
        ]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js
var init_esm4 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/index.js"() {
    "use strict";
    init_ResourceImpl();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js
var ExceptionEventName;
var init_enums = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js"() {
    "use strict";
    ExceptionEventName = "exception";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js
var SpanImpl2;
var init_Span = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js"() {
    "use strict";
    init_esm();
    init_esm3();
    init_esm2();
    init_enums();
    SpanImpl2 = class {
      // Below properties are included to implement ReadableSpan for export
      // purposes but are not intended to be written-to directly.
      _spanContext;
      kind;
      parentSpanContext;
      attributes = {};
      links = [];
      events = [];
      startTime;
      resource;
      instrumentationScope;
      _droppedAttributesCount = 0;
      _droppedEventsCount = 0;
      _droppedLinksCount = 0;
      name;
      status = {
        code: SpanStatusCode.UNSET
      };
      endTime = [0, 0];
      _ended = false;
      _duration = [-1, -1];
      _spanProcessor;
      _spanLimits;
      _attributeValueLengthLimit;
      _performanceStartTime;
      _performanceOffset;
      _startTimeProvided;
      /**
       * Constructs a new SpanImpl instance.
       */
      constructor(opts) {
        const now2 = Date.now();
        this._spanContext = opts.spanContext;
        this._performanceStartTime = otperformance.now();
        this._performanceOffset = now2 - (this._performanceStartTime + getTimeOrigin());
        this._startTimeProvided = opts.startTime != null;
        this._spanLimits = opts.spanLimits;
        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;
        this._spanProcessor = opts.spanProcessor;
        this.name = opts.name;
        this.parentSpanContext = opts.parentSpanContext;
        this.kind = opts.kind;
        this.links = opts.links || [];
        this.startTime = this._getTime(opts.startTime ?? now2);
        this.resource = opts.resource;
        this.instrumentationScope = opts.scope;
        if (opts.attributes != null) {
          this.setAttributes(opts.attributes);
        }
        this._spanProcessor.onStart(this, opts.context);
      }
      spanContext() {
        return this._spanContext;
      }
      setAttribute(key, value) {
        if (value == null || this._isSpanEnded())
          return this;
        if (key.length === 0) {
          diag.warn(`Invalid attribute key: ${key}`);
          return this;
        }
        if (!isAttributeValue(value)) {
          diag.warn(`Invalid attribute value set for key: ${key}`);
          return this;
        }
        const { attributeCountLimit } = this._spanLimits;
        if (attributeCountLimit !== void 0 && Object.keys(this.attributes).length >= attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {
          this._droppedAttributesCount++;
          return this;
        }
        this.attributes[key] = this._truncateToSize(value);
        return this;
      }
      setAttributes(attributes) {
        for (const [k, v] of Object.entries(attributes)) {
          this.setAttribute(k, v);
        }
        return this;
      }
      /**
       *
       * @param name Span Name
       * @param [attributesOrStartTime] Span attributes or start time
       *     if type is {@type TimeInput} and 3rd param is undefined
       * @param [timeStamp] Specified time stamp for the event
       */
      addEvent(name, attributesOrStartTime, timeStamp) {
        if (this._isSpanEnded())
          return this;
        const { eventCountLimit } = this._spanLimits;
        if (eventCountLimit === 0) {
          diag.warn("No events allowed.");
          this._droppedEventsCount++;
          return this;
        }
        if (eventCountLimit !== void 0 && this.events.length >= eventCountLimit) {
          if (this._droppedEventsCount === 0) {
            diag.debug("Dropping extra events.");
          }
          this.events.shift();
          this._droppedEventsCount++;
        }
        if (isTimeInput(attributesOrStartTime)) {
          if (!isTimeInput(timeStamp)) {
            timeStamp = attributesOrStartTime;
          }
          attributesOrStartTime = void 0;
        }
        const attributes = sanitizeAttributes(attributesOrStartTime);
        this.events.push({
          name,
          attributes,
          time: this._getTime(timeStamp),
          droppedAttributesCount: 0
        });
        return this;
      }
      addLink(link) {
        this.links.push(link);
        return this;
      }
      addLinks(links) {
        this.links.push(...links);
        return this;
      }
      setStatus(status) {
        if (this._isSpanEnded())
          return this;
        this.status = { ...status };
        if (this.status.message != null && typeof status.message !== "string") {
          diag.warn(`Dropping invalid status.message of type '${typeof status.message}', expected 'string'`);
          delete this.status.message;
        }
        return this;
      }
      updateName(name) {
        if (this._isSpanEnded())
          return this;
        this.name = name;
        return this;
      }
      end(endTime) {
        if (this._isSpanEnded()) {
          diag.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);
          return;
        }
        this._ended = true;
        this.endTime = this._getTime(endTime);
        this._duration = hrTimeDuration(this.startTime, this.endTime);
        if (this._duration[0] < 0) {
          diag.warn("Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.", this.startTime, this.endTime);
          this.endTime = this.startTime.slice();
          this._duration = [0, 0];
        }
        if (this._droppedEventsCount > 0) {
          diag.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`);
        }
        this._spanProcessor.onEnd(this);
      }
      _getTime(inp) {
        if (typeof inp === "number" && inp <= otperformance.now()) {
          return hrTime(inp + this._performanceOffset);
        }
        if (typeof inp === "number") {
          return millisToHrTime(inp);
        }
        if (inp instanceof Date) {
          return millisToHrTime(inp.getTime());
        }
        if (isTimeInputHrTime(inp)) {
          return inp;
        }
        if (this._startTimeProvided) {
          return millisToHrTime(Date.now());
        }
        const msDuration = otperformance.now() - this._performanceStartTime;
        return addHrTimes(this.startTime, millisToHrTime(msDuration));
      }
      isRecording() {
        return this._ended === false;
      }
      recordException(exception, time) {
        const attributes = {};
        if (typeof exception === "string") {
          attributes[ATTR_EXCEPTION_MESSAGE] = exception;
        } else if (exception) {
          if (exception.code) {
            attributes[ATTR_EXCEPTION_TYPE] = exception.code.toString();
          } else if (exception.name) {
            attributes[ATTR_EXCEPTION_TYPE] = exception.name;
          }
          if (exception.message) {
            attributes[ATTR_EXCEPTION_MESSAGE] = exception.message;
          }
          if (exception.stack) {
            attributes[ATTR_EXCEPTION_STACKTRACE] = exception.stack;
          }
        }
        if (attributes[ATTR_EXCEPTION_TYPE] || attributes[ATTR_EXCEPTION_MESSAGE]) {
          this.addEvent(ExceptionEventName, attributes, time);
        } else {
          diag.warn(`Failed to record an exception ${exception}`);
        }
      }
      get duration() {
        return this._duration;
      }
      get ended() {
        return this._ended;
      }
      get droppedAttributesCount() {
        return this._droppedAttributesCount;
      }
      get droppedEventsCount() {
        return this._droppedEventsCount;
      }
      get droppedLinksCount() {
        return this._droppedLinksCount;
      }
      _isSpanEnded() {
        if (this._ended) {
          const error2 = new Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);
          diag.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`, error2);
        }
        return this._ended;
      }
      // Utility function to truncate given value within size
      // for value type of string, will truncate to given limit
      // for type of non-string, will return same value
      _truncateToLimitUtil(value, limit) {
        if (value.length <= limit) {
          return value;
        }
        return value.substring(0, limit);
      }
      /**
       * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then
       * return string with truncated to {@code attributeValueLengthLimit} characters
       *
       * If the given attribute value is array of strings then
       * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters
       *
       * Otherwise return same Attribute {@code value}
       *
       * @param value Attribute value
       * @returns truncated attribute value if required, otherwise same value
       */
      _truncateToSize(value) {
        const limit = this._attributeValueLengthLimit;
        if (limit <= 0) {
          diag.warn(`Attribute value limit must be positive, got ${limit}`);
          return value;
        }
        if (typeof value === "string") {
          return this._truncateToLimitUtil(value, limit);
        }
        if (Array.isArray(value)) {
          return value.map((val) => typeof val === "string" ? this._truncateToLimitUtil(val, limit) : val);
        }
        return value;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js
var SamplingDecision2;
var init_Sampler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js"() {
    "use strict";
    (function(SamplingDecision3) {
      SamplingDecision3[SamplingDecision3["NOT_RECORD"] = 0] = "NOT_RECORD";
      SamplingDecision3[SamplingDecision3["RECORD"] = 1] = "RECORD";
      SamplingDecision3[SamplingDecision3["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
    })(SamplingDecision2 || (SamplingDecision2 = {}));
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js
var AlwaysOffSampler;
var init_AlwaysOffSampler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js"() {
    "use strict";
    init_Sampler();
    AlwaysOffSampler = class {
      shouldSample() {
        return {
          decision: SamplingDecision2.NOT_RECORD
        };
      }
      toString() {
        return "AlwaysOffSampler";
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js
var AlwaysOnSampler;
var init_AlwaysOnSampler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js"() {
    "use strict";
    init_Sampler();
    AlwaysOnSampler = class {
      shouldSample() {
        return {
          decision: SamplingDecision2.RECORD_AND_SAMPLED
        };
      }
      toString() {
        return "AlwaysOnSampler";
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js
var ParentBasedSampler;
var init_ParentBasedSampler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js"() {
    "use strict";
    init_esm();
    init_esm3();
    init_AlwaysOffSampler();
    init_AlwaysOnSampler();
    ParentBasedSampler = class {
      _root;
      _remoteParentSampled;
      _remoteParentNotSampled;
      _localParentSampled;
      _localParentNotSampled;
      constructor(config) {
        this._root = config.root;
        if (!this._root) {
          globalErrorHandler(new Error("ParentBasedSampler must have a root sampler configured"));
          this._root = new AlwaysOnSampler();
        }
        this._remoteParentSampled = config.remoteParentSampled ?? new AlwaysOnSampler();
        this._remoteParentNotSampled = config.remoteParentNotSampled ?? new AlwaysOffSampler();
        this._localParentSampled = config.localParentSampled ?? new AlwaysOnSampler();
        this._localParentNotSampled = config.localParentNotSampled ?? new AlwaysOffSampler();
      }
      shouldSample(context2, traceId, spanName, spanKind, attributes, links) {
        const parentContext = trace.getSpanContext(context2);
        if (!parentContext || !isSpanContextValid(parentContext)) {
          return this._root.shouldSample(context2, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.isRemote) {
          if (parentContext.traceFlags & TraceFlags.SAMPLED) {
            return this._remoteParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);
          }
          return this._remoteParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.traceFlags & TraceFlags.SAMPLED) {
          return this._localParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);
        }
        return this._localParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);
      }
      toString() {
        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js
var TraceIdRatioBasedSampler;
var init_TraceIdRatioBasedSampler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js"() {
    "use strict";
    init_esm();
    init_Sampler();
    TraceIdRatioBasedSampler = class {
      _ratio;
      _upperBound;
      constructor(_ratio = 0) {
        this._ratio = _ratio;
        this._ratio = this._normalize(_ratio);
        this._upperBound = Math.floor(this._ratio * 4294967295);
      }
      shouldSample(context2, traceId) {
        return {
          decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision2.RECORD_AND_SAMPLED : SamplingDecision2.NOT_RECORD
        };
      }
      toString() {
        return `TraceIdRatioBased{${this._ratio}}`;
      }
      _normalize(ratio) {
        if (typeof ratio !== "number" || isNaN(ratio))
          return 0;
        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;
      }
      _accumulate(traceId) {
        let accumulation = 0;
        for (let i = 0; i < traceId.length / 8; i++) {
          const pos = i * 8;
          const part = parseInt(traceId.slice(pos, pos + 8), 16);
          accumulation = (accumulation ^ part) >>> 0;
        }
        return accumulation;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js
function loadDefaultConfig() {
  return {
    sampler: buildSamplerFromEnv(),
    forceFlushTimeoutMillis: 3e4,
    generalLimits: {
      attributeValueLengthLimit: getNumberFromEnv("OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT") ?? Infinity,
      attributeCountLimit: getNumberFromEnv("OTEL_ATTRIBUTE_COUNT_LIMIT") ?? 128
    },
    spanLimits: {
      attributeValueLengthLimit: getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT") ?? Infinity,
      attributeCountLimit: getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT") ?? 128,
      linkCountLimit: getNumberFromEnv("OTEL_SPAN_LINK_COUNT_LIMIT") ?? 128,
      eventCountLimit: getNumberFromEnv("OTEL_SPAN_EVENT_COUNT_LIMIT") ?? 128,
      attributePerEventCountLimit: getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT") ?? 128,
      attributePerLinkCountLimit: getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT") ?? 128
    }
  };
}
function buildSamplerFromEnv() {
  const sampler = getStringFromEnv("OTEL_TRACES_SAMPLER") ?? "parentbased_always_on";
  switch (sampler) {
    case "always_on":
      return new AlwaysOnSampler();
    case "always_off":
      return new AlwaysOffSampler();
    case "parentbased_always_on":
      return new ParentBasedSampler({
        root: new AlwaysOnSampler()
      });
    case "parentbased_always_off":
      return new ParentBasedSampler({
        root: new AlwaysOffSampler()
      });
    case "traceidratio":
      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());
    case "parentbased_traceidratio":
      return new ParentBasedSampler({
        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv())
      });
    default:
      diag.error(`OTEL_TRACES_SAMPLER value "${sampler}" invalid, defaulting to "${"parentbased_always_on"}".`);
      return new ParentBasedSampler({
        root: new AlwaysOnSampler()
      });
  }
}
function getSamplerProbabilityFromEnv() {
  const probability = getNumberFromEnv("OTEL_TRACES_SAMPLER_ARG");
  if (probability == null) {
    diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);
    return DEFAULT_RATIO;
  }
  if (probability < 0 || probability > 1) {
    diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);
    return DEFAULT_RATIO;
  }
  return probability;
}
var DEFAULT_RATIO;
var init_config = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js"() {
    "use strict";
    init_esm();
    init_esm3();
    init_AlwaysOffSampler();
    init_AlwaysOnSampler();
    init_ParentBasedSampler();
    init_TraceIdRatioBasedSampler();
    DEFAULT_RATIO = 1;
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js
function mergeConfig(userConfig) {
  const perInstanceDefaults = {
    sampler: buildSamplerFromEnv()
  };
  const DEFAULT_CONFIG = loadDefaultConfig();
  const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);
  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});
  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});
  return target;
}
function reconfigureLimits(userConfig) {
  const spanLimits = Object.assign({}, userConfig.spanLimits);
  spanLimits.attributeCountLimit = userConfig.spanLimits?.attributeCountLimit ?? userConfig.generalLimits?.attributeCountLimit ?? getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT") ?? getNumberFromEnv("OTEL_ATTRIBUTE_COUNT_LIMIT") ?? DEFAULT_ATTRIBUTE_COUNT_LIMIT;
  spanLimits.attributeValueLengthLimit = userConfig.spanLimits?.attributeValueLengthLimit ?? userConfig.generalLimits?.attributeValueLengthLimit ?? getNumberFromEnv("OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT") ?? getNumberFromEnv("OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT") ?? DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;
  return Object.assign({}, userConfig, { spanLimits });
}
var DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;
var init_utility = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js"() {
    "use strict";
    init_config();
    init_esm3();
    DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;
    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js
var BatchSpanProcessorBase;
var init_BatchSpanProcessorBase = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js"() {
    "use strict";
    init_esm();
    init_esm3();
    BatchSpanProcessorBase = class {
      _exporter;
      _maxExportBatchSize;
      _maxQueueSize;
      _scheduledDelayMillis;
      _exportTimeoutMillis;
      _isExporting = false;
      _finishedSpans = [];
      _timer;
      _shutdownOnce;
      _droppedSpansCount = 0;
      constructor(_exporter, config) {
        this._exporter = _exporter;
        this._maxExportBatchSize = typeof config?.maxExportBatchSize === "number" ? config.maxExportBatchSize : getNumberFromEnv("OTEL_BSP_MAX_EXPORT_BATCH_SIZE") ?? 512;
        this._maxQueueSize = typeof config?.maxQueueSize === "number" ? config.maxQueueSize : getNumberFromEnv("OTEL_BSP_MAX_QUEUE_SIZE") ?? 2048;
        this._scheduledDelayMillis = typeof config?.scheduledDelayMillis === "number" ? config.scheduledDelayMillis : getNumberFromEnv("OTEL_BSP_SCHEDULE_DELAY") ?? 5e3;
        this._exportTimeoutMillis = typeof config?.exportTimeoutMillis === "number" ? config.exportTimeoutMillis : getNumberFromEnv("OTEL_BSP_EXPORT_TIMEOUT") ?? 3e4;
        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);
        if (this._maxExportBatchSize > this._maxQueueSize) {
          diag.warn("BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize");
          this._maxExportBatchSize = this._maxQueueSize;
        }
      }
      forceFlush() {
        if (this._shutdownOnce.isCalled) {
          return this._shutdownOnce.promise;
        }
        return this._flushAll();
      }
      // does nothing.
      onStart(_span, _parentContext) {
      }
      onEnd(span) {
        if (this._shutdownOnce.isCalled) {
          return;
        }
        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {
          return;
        }
        this._addToBuffer(span);
      }
      shutdown() {
        return this._shutdownOnce.call();
      }
      _shutdown() {
        return Promise.resolve().then(() => {
          return this.onShutdown();
        }).then(() => {
          return this._flushAll();
        }).then(() => {
          return this._exporter.shutdown();
        });
      }
      /** Add a span in the buffer. */
      _addToBuffer(span) {
        if (this._finishedSpans.length >= this._maxQueueSize) {
          if (this._droppedSpansCount === 0) {
            diag.debug("maxQueueSize reached, dropping spans");
          }
          this._droppedSpansCount++;
          return;
        }
        if (this._droppedSpansCount > 0) {
          diag.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`);
          this._droppedSpansCount = 0;
        }
        this._finishedSpans.push(span);
        this._maybeStartTimer();
      }
      /**
       * Send all spans to the exporter respecting the batch size limit
       * This function is used only on forceFlush or shutdown,
       * for all other cases _flush should be used
       * */
      _flushAll() {
        return new Promise((resolve, reject2) => {
          const promises = [];
          const count = Math.ceil(this._finishedSpans.length / this._maxExportBatchSize);
          for (let i = 0, j = count; i < j; i++) {
            promises.push(this._flushOneBatch());
          }
          Promise.all(promises).then(() => {
            resolve();
          }).catch(reject2);
        });
      }
      _flushOneBatch() {
        this._clearTimer();
        if (this._finishedSpans.length === 0) {
          return Promise.resolve();
        }
        return new Promise((resolve, reject2) => {
          const timer = setTimeout(() => {
            reject2(new Error("Timeout"));
          }, this._exportTimeoutMillis);
          context.with(suppressTracing(context.active()), () => {
            let spans;
            if (this._finishedSpans.length <= this._maxExportBatchSize) {
              spans = this._finishedSpans;
              this._finishedSpans = [];
            } else {
              spans = this._finishedSpans.splice(0, this._maxExportBatchSize);
            }
            const doExport = () => this._exporter.export(spans, (result) => {
              clearTimeout(timer);
              if (result.code === ExportResultCode.SUCCESS) {
                resolve();
              } else {
                reject2(result.error ?? new Error("BatchSpanProcessor: span export failed"));
              }
            });
            let pendingResources = null;
            for (let i = 0, len = spans.length; i < len; i++) {
              const span = spans[i];
              if (span.resource.asyncAttributesPending && span.resource.waitForAsyncAttributes) {
                pendingResources ??= [];
                pendingResources.push(span.resource.waitForAsyncAttributes());
              }
            }
            if (pendingResources === null) {
              doExport();
            } else {
              Promise.all(pendingResources).then(doExport, (err) => {
                globalErrorHandler(err);
                reject2(err);
              });
            }
          });
        });
      }
      _maybeStartTimer() {
        if (this._isExporting)
          return;
        const flush2 = () => {
          this._isExporting = true;
          this._flushOneBatch().finally(() => {
            this._isExporting = false;
            if (this._finishedSpans.length > 0) {
              this._clearTimer();
              this._maybeStartTimer();
            }
          }).catch((e) => {
            this._isExporting = false;
            globalErrorHandler(e);
          });
        };
        if (this._finishedSpans.length >= this._maxExportBatchSize) {
          return flush2();
        }
        if (this._timer !== void 0)
          return;
        this._timer = setTimeout(() => flush2(), this._scheduledDelayMillis);
        unrefTimer(this._timer);
      }
      _clearTimer() {
        if (this._timer !== void 0) {
          clearTimeout(this._timer);
          this._timer = void 0;
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js
var BatchSpanProcessor;
var init_BatchSpanProcessor = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js"() {
    "use strict";
    init_BatchSpanProcessorBase();
    BatchSpanProcessor = class extends BatchSpanProcessorBase {
      onShutdown() {
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js
function getIdGenerator(bytes) {
  return function generateId() {
    for (let i = 0; i < bytes / 4; i++) {
      SHARED_BUFFER.writeUInt32BE(Math.random() * 2 ** 32 >>> 0, i * 4);
    }
    for (let i = 0; i < bytes; i++) {
      if (SHARED_BUFFER[i] > 0) {
        break;
      } else if (i === bytes - 1) {
        SHARED_BUFFER[bytes - 1] = 1;
      }
    }
    return SHARED_BUFFER.toString("hex", 0, bytes);
  };
}
var SPAN_ID_BYTES, TRACE_ID_BYTES, RandomIdGenerator, SHARED_BUFFER;
var init_RandomIdGenerator = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js"() {
    "use strict";
    SPAN_ID_BYTES = 8;
    TRACE_ID_BYTES = 16;
    RandomIdGenerator = class {
      /**
       * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex
       * characters corresponding to 128 bits.
       */
      generateTraceId = getIdGenerator(TRACE_ID_BYTES);
      /**
       * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex
       * characters corresponding to 64 bits.
       */
      generateSpanId = getIdGenerator(SPAN_ID_BYTES);
    };
    SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/index.js
var init_node3 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/index.js"() {
    "use strict";
    init_BatchSpanProcessor();
    init_RandomIdGenerator();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/index.js
var init_platform3 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/index.js"() {
    "use strict";
    init_node3();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js
var Tracer;
var init_Tracer = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js"() {
    "use strict";
    init_esm();
    init_esm3();
    init_Span();
    init_utility();
    init_platform3();
    Tracer = class {
      _sampler;
      _generalLimits;
      _spanLimits;
      _idGenerator;
      instrumentationScope;
      _resource;
      _spanProcessor;
      /**
       * Constructs a new Tracer instance.
       */
      constructor(instrumentationScope, config, resource, spanProcessor) {
        const localConfig = mergeConfig(config);
        this._sampler = localConfig.sampler;
        this._generalLimits = localConfig.generalLimits;
        this._spanLimits = localConfig.spanLimits;
        this._idGenerator = config.idGenerator || new RandomIdGenerator();
        this._resource = resource;
        this._spanProcessor = spanProcessor;
        this.instrumentationScope = instrumentationScope;
      }
      /**
       * Starts a new Span or returns the default NoopSpan based on the sampling
       * decision.
       */
      startSpan(name, options = {}, context2 = context.active()) {
        if (options.root) {
          context2 = trace.deleteSpan(context2);
        }
        const parentSpan = trace.getSpan(context2);
        if (isTracingSuppressed(context2)) {
          diag.debug("Instrumentation suppressed, returning Noop Span");
          const nonRecordingSpan = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);
          return nonRecordingSpan;
        }
        const parentSpanContext = parentSpan?.spanContext();
        const spanId = this._idGenerator.generateSpanId();
        let validParentSpanContext;
        let traceId;
        let traceState;
        if (!parentSpanContext || !trace.isSpanContextValid(parentSpanContext)) {
          traceId = this._idGenerator.generateTraceId();
        } else {
          traceId = parentSpanContext.traceId;
          traceState = parentSpanContext.traceState;
          validParentSpanContext = parentSpanContext;
        }
        const spanKind = options.kind ?? SpanKind.INTERNAL;
        const links = (options.links ?? []).map((link) => {
          return {
            context: link.context,
            attributes: sanitizeAttributes(link.attributes)
          };
        });
        const attributes = sanitizeAttributes(options.attributes);
        const samplingResult = this._sampler.shouldSample(context2, traceId, name, spanKind, attributes, links);
        traceState = samplingResult.traceState ?? traceState;
        const traceFlags = samplingResult.decision === SamplingDecision.RECORD_AND_SAMPLED ? TraceFlags.SAMPLED : TraceFlags.NONE;
        const spanContext = { traceId, spanId, traceFlags, traceState };
        if (samplingResult.decision === SamplingDecision.NOT_RECORD) {
          diag.debug("Recording is off, propagating context in a non-recording span");
          const nonRecordingSpan = trace.wrapSpanContext(spanContext);
          return nonRecordingSpan;
        }
        const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));
        const span = new SpanImpl2({
          resource: this._resource,
          scope: this.instrumentationScope,
          context: context2,
          spanContext,
          name,
          kind: spanKind,
          links,
          parentSpanContext: validParentSpanContext,
          attributes: initAttributes,
          startTime: options.startTime,
          spanProcessor: this._spanProcessor,
          spanLimits: this._spanLimits
        });
        return span;
      }
      startActiveSpan(name, arg2, arg3, arg4) {
        let opts;
        let ctx;
        let fn;
        if (arguments.length < 2) {
          return;
        } else if (arguments.length === 2) {
          fn = arg2;
        } else if (arguments.length === 3) {
          opts = arg2;
          fn = arg3;
        } else {
          opts = arg2;
          ctx = arg3;
          fn = arg4;
        }
        const parentContext = ctx ?? context.active();
        const span = this.startSpan(name, opts, parentContext);
        const contextWithSpanSet = trace.setSpan(parentContext, span);
        return context.with(contextWithSpanSet, fn, void 0, span);
      }
      /** Returns the active {@link GeneralLimits}. */
      getGeneralLimits() {
        return this._generalLimits;
      }
      /** Returns the active {@link SpanLimits}. */
      getSpanLimits() {
        return this._spanLimits;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js
var MultiSpanProcessor;
var init_MultiSpanProcessor = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js"() {
    "use strict";
    init_esm3();
    MultiSpanProcessor = class {
      _spanProcessors;
      constructor(_spanProcessors) {
        this._spanProcessors = _spanProcessors;
      }
      forceFlush() {
        const promises = [];
        for (const spanProcessor of this._spanProcessors) {
          promises.push(spanProcessor.forceFlush());
        }
        return new Promise((resolve) => {
          Promise.all(promises).then(() => {
            resolve();
          }).catch((error2) => {
            globalErrorHandler(error2 || new Error("MultiSpanProcessor: forceFlush failed"));
            resolve();
          });
        });
      }
      onStart(span, context2) {
        for (const spanProcessor of this._spanProcessors) {
          spanProcessor.onStart(span, context2);
        }
      }
      onEnd(span) {
        for (const spanProcessor of this._spanProcessors) {
          spanProcessor.onEnd(span);
        }
      }
      shutdown() {
        const promises = [];
        for (const spanProcessor of this._spanProcessors) {
          promises.push(spanProcessor.shutdown());
        }
        return new Promise((resolve, reject2) => {
          Promise.all(promises).then(() => {
            resolve();
          }, reject2);
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js
var ForceFlushState, BasicTracerProvider;
var init_BasicTracerProvider = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js"() {
    "use strict";
    init_esm3();
    init_esm4();
    init_Tracer();
    init_config();
    init_MultiSpanProcessor();
    init_utility();
    (function(ForceFlushState2) {
      ForceFlushState2[ForceFlushState2["resolved"] = 0] = "resolved";
      ForceFlushState2[ForceFlushState2["timeout"] = 1] = "timeout";
      ForceFlushState2[ForceFlushState2["error"] = 2] = "error";
      ForceFlushState2[ForceFlushState2["unresolved"] = 3] = "unresolved";
    })(ForceFlushState || (ForceFlushState = {}));
    BasicTracerProvider = class {
      _config;
      _tracers = /* @__PURE__ */ new Map();
      _resource;
      _activeSpanProcessor;
      constructor(config = {}) {
        const mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));
        this._resource = mergedConfig.resource ?? defaultResource();
        this._config = Object.assign({}, mergedConfig, {
          resource: this._resource
        });
        const spanProcessors = [];
        if (config.spanProcessors?.length) {
          spanProcessors.push(...config.spanProcessors);
        }
        this._activeSpanProcessor = new MultiSpanProcessor(spanProcessors);
      }
      getTracer(name, version, options) {
        const key = `${name}@${version || ""}:${options?.schemaUrl || ""}`;
        if (!this._tracers.has(key)) {
          this._tracers.set(key, new Tracer({ name, version, schemaUrl: options?.schemaUrl }, this._config, this._resource, this._activeSpanProcessor));
        }
        return this._tracers.get(key);
      }
      forceFlush() {
        const timeout = this._config.forceFlushTimeoutMillis;
        const promises = this._activeSpanProcessor["_spanProcessors"].map((spanProcessor) => {
          return new Promise((resolve) => {
            let state;
            const timeoutInterval = setTimeout(() => {
              resolve(new Error(`Span processor did not completed within timeout period of ${timeout} ms`));
              state = ForceFlushState.timeout;
            }, timeout);
            spanProcessor.forceFlush().then(() => {
              clearTimeout(timeoutInterval);
              if (state !== ForceFlushState.timeout) {
                state = ForceFlushState.resolved;
                resolve(state);
              }
            }).catch((error2) => {
              clearTimeout(timeoutInterval);
              state = ForceFlushState.error;
              resolve(error2);
            });
          });
        });
        return new Promise((resolve, reject2) => {
          Promise.all(promises).then((results) => {
            const errors = results.filter((result) => result !== ForceFlushState.resolved);
            if (errors.length > 0) {
              reject2(errors);
            } else {
              resolve();
            }
          }).catch((error2) => reject2([error2]));
        });
      }
      shutdown() {
        return this._activeSpanProcessor.shutdown();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js
var ConsoleSpanExporter;
var init_ConsoleSpanExporter = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js"() {
    "use strict";
    init_esm3();
    ConsoleSpanExporter = class {
      /**
       * Export spans.
       * @param spans
       * @param resultCallback
       */
      export(spans, resultCallback) {
        return this._sendSpans(spans, resultCallback);
      }
      /**
       * Shutdown the exporter.
       */
      shutdown() {
        this._sendSpans([]);
        return this.forceFlush();
      }
      /**
       * Exports any pending spans in exporter
       */
      forceFlush() {
        return Promise.resolve();
      }
      /**
       * converts span info into more readable format
       * @param span
       */
      _exportInfo(span) {
        return {
          resource: {
            attributes: span.resource.attributes
          },
          instrumentationScope: span.instrumentationScope,
          traceId: span.spanContext().traceId,
          parentSpanContext: span.parentSpanContext,
          traceState: span.spanContext().traceState?.serialize(),
          name: span.name,
          id: span.spanContext().spanId,
          kind: span.kind,
          timestamp: hrTimeToMicroseconds(span.startTime),
          duration: hrTimeToMicroseconds(span.duration),
          attributes: span.attributes,
          status: span.status,
          events: span.events,
          links: span.links
        };
      }
      /**
       * Showing spans in console
       * @param spans
       * @param done
       */
      _sendSpans(spans, done) {
        for (const span of spans) {
          console.dir(this._exportInfo(span), { depth: 3 });
        }
        if (done) {
          return done({ code: ExportResultCode.SUCCESS });
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js
var InMemorySpanExporter;
var init_InMemorySpanExporter = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js"() {
    "use strict";
    init_esm3();
    InMemorySpanExporter = class {
      _finishedSpans = [];
      /**
       * Indicates if the exporter has been "shutdown."
       * When false, exported spans will not be stored in-memory.
       */
      _stopped = false;
      export(spans, resultCallback) {
        if (this._stopped)
          return resultCallback({
            code: ExportResultCode.FAILED,
            error: new Error("Exporter has been stopped")
          });
        this._finishedSpans.push(...spans);
        setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);
      }
      shutdown() {
        this._stopped = true;
        this._finishedSpans = [];
        return this.forceFlush();
      }
      /**
       * Exports any pending spans in the exporter
       */
      forceFlush() {
        return Promise.resolve();
      }
      reset() {
        this._finishedSpans = [];
      }
      getFinishedSpans() {
        return this._finishedSpans;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js
var SimpleSpanProcessor;
var init_SimpleSpanProcessor = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js"() {
    "use strict";
    init_esm();
    init_esm3();
    SimpleSpanProcessor = class {
      _exporter;
      _shutdownOnce;
      _pendingExports;
      constructor(_exporter) {
        this._exporter = _exporter;
        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);
        this._pendingExports = /* @__PURE__ */ new Set();
      }
      async forceFlush() {
        await Promise.all(Array.from(this._pendingExports));
        if (this._exporter.forceFlush) {
          await this._exporter.forceFlush();
        }
      }
      onStart(_span, _parentContext) {
      }
      onEnd(span) {
        if (this._shutdownOnce.isCalled) {
          return;
        }
        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {
          return;
        }
        const pendingExport = this._doExport(span).catch((err) => globalErrorHandler(err));
        this._pendingExports.add(pendingExport);
        pendingExport.finally(() => this._pendingExports.delete(pendingExport));
      }
      async _doExport(span) {
        if (span.resource.asyncAttributesPending) {
          await span.resource.waitForAsyncAttributes?.();
        }
        const result = await internal._export(this._exporter, [span]);
        if (result.code !== ExportResultCode.SUCCESS) {
          throw result.error ?? new Error(`SimpleSpanProcessor: span export failed (status ${result})`);
        }
      }
      shutdown() {
        return this._shutdownOnce.call();
      }
      _shutdown() {
        return this._exporter.shutdown();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js
var NoopSpanProcessor;
var init_NoopSpanProcessor = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js"() {
    "use strict";
    NoopSpanProcessor = class {
      onStart(_span, _context) {
      }
      onEnd(_span) {
      }
      shutdown() {
        return Promise.resolve();
      }
      forceFlush() {
        return Promise.resolve();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  AlwaysOffSampler: () => AlwaysOffSampler,
  AlwaysOnSampler: () => AlwaysOnSampler,
  BasicTracerProvider: () => BasicTracerProvider,
  BatchSpanProcessor: () => BatchSpanProcessor,
  ConsoleSpanExporter: () => ConsoleSpanExporter,
  InMemorySpanExporter: () => InMemorySpanExporter,
  NoopSpanProcessor: () => NoopSpanProcessor,
  ParentBasedSampler: () => ParentBasedSampler,
  RandomIdGenerator: () => RandomIdGenerator,
  SamplingDecision: () => SamplingDecision2,
  SimpleSpanProcessor: () => SimpleSpanProcessor,
  TraceIdRatioBasedSampler: () => TraceIdRatioBasedSampler
});
var init_esm5 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js"() {
    "use strict";
    init_BasicTracerProvider();
    init_platform3();
    init_ConsoleSpanExporter();
    init_InMemorySpanExporter();
    init_SimpleSpanProcessor();
    init_NoopSpanProcessor();
    init_AlwaysOffSampler();
    init_AlwaysOnSampler();
    init_ParentBasedSampler();
    init_TraceIdRatioBasedSampler();
    init_Sampler();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js
var OTLPExporterBase;
var init_OTLPExporterBase = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js"() {
    "use strict";
    OTLPExporterBase = class {
      _delegate;
      constructor(_delegate) {
        this._delegate = _delegate;
      }
      /**
       * Export items.
       * @param items
       * @param resultCallback
       */
      export(items, resultCallback) {
        this._delegate.export(items, resultCallback);
      }
      forceFlush() {
        return this._delegate.forceFlush();
      }
      shutdown() {
        return this._delegate.shutdown();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js
var OTLPExporterError;
var init_types = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js"() {
    "use strict";
    OTLPExporterError = class extends Error {
      code;
      name = "OTLPExporterError";
      data;
      constructor(message, code, data) {
        super(message);
        this.data = data;
        this.code = code;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js
function validateTimeoutMillis(timeoutMillis) {
  if (Number.isFinite(timeoutMillis) && timeoutMillis > 0) {
    return timeoutMillis;
  }
  throw new Error(`Configuration: timeoutMillis is invalid, expected number greater than 0 (actual: '${timeoutMillis}')`);
}
function wrapStaticHeadersInFunction(headers) {
  if (headers == null) {
    return void 0;
  }
  return () => headers;
}
function mergeOtlpSharedConfigurationWithDefaults(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
  return {
    timeoutMillis: validateTimeoutMillis(userProvidedConfiguration.timeoutMillis ?? fallbackConfiguration.timeoutMillis ?? defaultConfiguration.timeoutMillis),
    concurrencyLimit: userProvidedConfiguration.concurrencyLimit ?? fallbackConfiguration.concurrencyLimit ?? defaultConfiguration.concurrencyLimit,
    compression: userProvidedConfiguration.compression ?? fallbackConfiguration.compression ?? defaultConfiguration.compression
  };
}
function getSharedConfigurationDefaults() {
  return {
    timeoutMillis: 1e4,
    concurrencyLimit: 30,
    compression: "none"
  };
}
var init_shared_configuration = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-configuration.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/bounded-queue-export-promise-handler.js
function createBoundedQueueExportPromiseHandler(options) {
  return new BoundedQueueExportPromiseHandler(options.concurrencyLimit);
}
var BoundedQueueExportPromiseHandler;
var init_bounded_queue_export_promise_handler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/bounded-queue-export-promise-handler.js"() {
    "use strict";
    BoundedQueueExportPromiseHandler = class {
      _concurrencyLimit;
      _sendingPromises = [];
      /**
       * @param concurrencyLimit maximum promises allowed in a queue at the same time.
       */
      constructor(concurrencyLimit) {
        this._concurrencyLimit = concurrencyLimit;
      }
      pushPromise(promise) {
        if (this.hasReachedLimit()) {
          throw new Error("Concurrency Limit reached");
        }
        this._sendingPromises.push(promise);
        const popPromise = () => {
          const index = this._sendingPromises.indexOf(promise);
          this._sendingPromises.splice(index, 1);
        };
        promise.then(popPromise, popPromise);
      }
      hasReachedLimit() {
        return this._sendingPromises.length >= this._concurrencyLimit;
      }
      async awaitAll() {
        await Promise.all(this._sendingPromises);
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/constants.js
var BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_ITEMS_SEPARATOR;
var init_constants = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/constants.js"() {
    "use strict";
    BAGGAGE_KEY_PAIR_SEPARATOR = "=";
    BAGGAGE_PROPERTIES_SEPARATOR = ";";
    BAGGAGE_ITEMS_SEPARATOR = ",";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/utils.js
function parsePairKeyValue(entry) {
  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);
  if (valueProps.length <= 0)
    return;
  const keyPairPart = valueProps.shift();
  if (!keyPairPart)
    return;
  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);
  if (separatorIndex <= 0)
    return;
  const key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());
  const value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());
  let metadata;
  if (valueProps.length > 0) {
    metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));
  }
  return { key, value, metadata };
}
function parseKeyPairsIntoRecord(value) {
  if (typeof value !== "string" || value.length === 0)
    return {};
  return value.split(BAGGAGE_ITEMS_SEPARATOR).map((entry) => {
    return parsePairKeyValue(entry);
  }).filter((keyPair) => keyPair !== void 0 && keyPair.value.length > 0).reduce((headers, keyPair) => {
    headers[keyPair.key] = keyPair.value;
    return headers;
  }, {});
}
var init_utils2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/utils.js"() {
    "use strict";
    init_esm();
    init_constants();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js
function hrTimeToNanoseconds2(time) {
  return time[0] * SECOND_TO_NANOSECONDS2 + time[1];
}
var NANOSECOND_DIGITS2, NANOSECOND_DIGITS_IN_MILLIS2, MILLISECONDS_TO_NANOSECONDS2, SECOND_TO_NANOSECONDS2;
var init_time2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js"() {
    "use strict";
    NANOSECOND_DIGITS2 = 9;
    NANOSECOND_DIGITS_IN_MILLIS2 = 6;
    MILLISECONDS_TO_NANOSECONDS2 = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS2);
    SECOND_TO_NANOSECONDS2 = Math.pow(10, NANOSECOND_DIGITS2);
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js
var ExportResultCode2;
var init_ExportResult2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js"() {
    "use strict";
    (function(ExportResultCode3) {
      ExportResultCode3[ExportResultCode3["SUCCESS"] = 0] = "SUCCESS";
      ExportResultCode3[ExportResultCode3["FAILED"] = 1] = "FAILED";
    })(ExportResultCode2 || (ExportResultCode2 = {}));
  }
});

// ../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js
var init_esm6 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+core@2.0.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js"() {
    "use strict";
    init_time2();
    init_ExportResult2();
    init_utils2();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/logging-response-handler.js
function isPartialSuccessResponse(response) {
  return Object.prototype.hasOwnProperty.call(response, "partialSuccess");
}
function createLoggingPartialSuccessResponseHandler() {
  return {
    handleResponse(response) {
      if (response == null || !isPartialSuccessResponse(response) || response.partialSuccess == null || Object.keys(response.partialSuccess).length === 0) {
        return;
      }
      diag.warn("Received Partial Success response:", JSON.stringify(response.partialSuccess));
    }
  };
}
var init_logging_response_handler = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/logging-response-handler.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-export-delegate.js
function createOtlpExportDelegate(components, settings) {
  return new OTLPExportDelegate(components.transport, components.serializer, createLoggingPartialSuccessResponseHandler(), components.promiseHandler, settings.timeout);
}
var OTLPExportDelegate;
var init_otlp_export_delegate = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-export-delegate.js"() {
    "use strict";
    init_esm6();
    init_types();
    init_logging_response_handler();
    init_esm();
    OTLPExportDelegate = class {
      _transport;
      _serializer;
      _responseHandler;
      _promiseQueue;
      _timeout;
      _diagLogger;
      constructor(_transport, _serializer, _responseHandler, _promiseQueue, _timeout) {
        this._transport = _transport;
        this._serializer = _serializer;
        this._responseHandler = _responseHandler;
        this._promiseQueue = _promiseQueue;
        this._timeout = _timeout;
        this._diagLogger = diag.createComponentLogger({
          namespace: "OTLPExportDelegate"
        });
      }
      export(internalRepresentation, resultCallback) {
        this._diagLogger.debug("items to be sent", internalRepresentation);
        if (this._promiseQueue.hasReachedLimit()) {
          resultCallback({
            code: ExportResultCode2.FAILED,
            error: new Error("Concurrent export limit reached")
          });
          return;
        }
        const serializedRequest = this._serializer.serializeRequest(internalRepresentation);
        if (serializedRequest == null) {
          resultCallback({
            code: ExportResultCode2.FAILED,
            error: new Error("Nothing to send")
          });
          return;
        }
        this._promiseQueue.pushPromise(this._transport.send(serializedRequest, this._timeout).then((response) => {
          if (response.status === "success") {
            if (response.data != null) {
              try {
                this._responseHandler.handleResponse(this._serializer.deserializeResponse(response.data));
              } catch (e) {
                this._diagLogger.warn("Export succeeded but could not deserialize response - is the response specification compliant?", e, response.data);
              }
            }
            resultCallback({
              code: ExportResultCode2.SUCCESS
            });
            return;
          } else if (response.status === "failure" && response.error) {
            resultCallback({
              code: ExportResultCode2.FAILED,
              error: response.error
            });
            return;
          } else if (response.status === "retryable") {
            resultCallback({
              code: ExportResultCode2.FAILED,
              error: new OTLPExporterError("Export failed with retryable status")
            });
          } else {
            resultCallback({
              code: ExportResultCode2.FAILED,
              error: new OTLPExporterError("Export failed with unknown error")
            });
          }
        }, (reason) => resultCallback({
          code: ExportResultCode2.FAILED,
          error: reason
        })));
      }
      forceFlush() {
        return this._promiseQueue.awaitAll();
      }
      async shutdown() {
        this._diagLogger.debug("shutdown started");
        await this.forceFlush();
        this._transport.shutdown();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/index.js
var init_esm7 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/index.js"() {
    "use strict";
    init_OTLPExporterBase();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/version.js
var VERSION2;
var init_version2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/version.js"() {
    "use strict";
    VERSION2 = "0.200.0";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/hex-to-binary.js
function intValue(charCode) {
  if (charCode >= 48 && charCode <= 57) {
    return charCode - 48;
  }
  if (charCode >= 97 && charCode <= 102) {
    return charCode - 87;
  }
  return charCode - 55;
}
function hexToBinary(hexStr) {
  const buf = new Uint8Array(hexStr.length / 2);
  let offset = 0;
  for (let i = 0; i < hexStr.length; i += 2) {
    const hi = intValue(hexStr.charCodeAt(i));
    const lo = intValue(hexStr.charCodeAt(i + 1));
    buf[offset++] = hi << 4 | lo;
  }
  return buf;
}
var init_hex_to_binary = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/hex-to-binary.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/utils.js
function hrTimeToNanos(hrTime3) {
  const NANOSECONDS = BigInt(1e9);
  return BigInt(hrTime3[0]) * NANOSECONDS + BigInt(hrTime3[1]);
}
function toLongBits(value) {
  const low = Number(BigInt.asUintN(32, value));
  const high = Number(BigInt.asUintN(32, value >> BigInt(32)));
  return { low, high };
}
function encodeAsLongBits(hrTime3) {
  const nanos = hrTimeToNanos(hrTime3);
  return toLongBits(nanos);
}
function encodeAsString(hrTime3) {
  const nanos = hrTimeToNanos(hrTime3);
  return nanos.toString();
}
function identity(value) {
  return value;
}
function optionalHexToBinary(str) {
  if (str === void 0)
    return void 0;
  return hexToBinary(str);
}
function getOtlpEncoder(options) {
  if (options === void 0) {
    return DEFAULT_ENCODER;
  }
  const useLongBits = options.useLongBits ?? true;
  const useHex = options.useHex ?? false;
  return {
    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,
    encodeSpanContext: useHex ? identity : hexToBinary,
    encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary
  };
}
var encodeTimestamp, DEFAULT_ENCODER;
var init_utils3 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/utils.js"() {
    "use strict";
    init_esm6();
    init_hex_to_binary();
    encodeTimestamp = typeof BigInt !== "undefined" ? encodeAsString : hrTimeToNanoseconds2;
    DEFAULT_ENCODER = {
      encodeHrTime: encodeAsLongBits,
      encodeSpanContext: hexToBinary,
      encodeOptionalSpanContext: optionalHexToBinary
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js
function createResource(resource) {
  return {
    attributes: toAttributes(resource.attributes),
    droppedAttributesCount: 0
  };
}
function createInstrumentationScope(scope) {
  return {
    name: scope.name,
    version: scope.version
  };
}
function toAttributes(attributes) {
  return Object.keys(attributes).map((key) => toKeyValue(key, attributes[key]));
}
function toKeyValue(key, value) {
  return {
    key,
    value: toAnyValue(value)
  };
}
function toAnyValue(value) {
  const t = typeof value;
  if (t === "string")
    return { stringValue: value };
  if (t === "number") {
    if (!Number.isInteger(value))
      return { doubleValue: value };
    return { intValue: value };
  }
  if (t === "boolean")
    return { boolValue: value };
  if (value instanceof Uint8Array)
    return { bytesValue: value };
  if (Array.isArray(value))
    return { arrayValue: { values: value.map(toAnyValue) } };
  if (t === "object" && value != null)
    return {
      kvlistValue: {
        values: Object.entries(value).map(([k, v]) => toKeyValue(k, v))
      }
    };
  return {};
}
var init_internal = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js
function sdkSpanToOtlpSpan(span, encoder) {
  const ctx = span.spanContext();
  const status = span.status;
  const parentSpanId = span.parentSpanContext?.spanId ? encoder.encodeSpanContext(span.parentSpanContext?.spanId) : void 0;
  return {
    traceId: encoder.encodeSpanContext(ctx.traceId),
    spanId: encoder.encodeSpanContext(ctx.spanId),
    parentSpanId,
    traceState: ctx.traceState?.serialize(),
    name: span.name,
    // Span kind is offset by 1 because the API does not define a value for unset
    kind: span.kind == null ? 0 : span.kind + 1,
    startTimeUnixNano: encoder.encodeHrTime(span.startTime),
    endTimeUnixNano: encoder.encodeHrTime(span.endTime),
    attributes: toAttributes(span.attributes),
    droppedAttributesCount: span.droppedAttributesCount,
    events: span.events.map((event) => toOtlpSpanEvent(event, encoder)),
    droppedEventsCount: span.droppedEventsCount,
    status: {
      // API and proto enums share the same values
      code: status.code,
      message: status.message
    },
    links: span.links.map((link) => toOtlpLink(link, encoder)),
    droppedLinksCount: span.droppedLinksCount
  };
}
function toOtlpLink(link, encoder) {
  return {
    attributes: link.attributes ? toAttributes(link.attributes) : [],
    spanId: encoder.encodeSpanContext(link.context.spanId),
    traceId: encoder.encodeSpanContext(link.context.traceId),
    traceState: link.context.traceState?.serialize(),
    droppedAttributesCount: link.droppedAttributesCount || 0
  };
}
function toOtlpSpanEvent(timedEvent, encoder) {
  return {
    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],
    name: timedEvent.name,
    timeUnixNano: encoder.encodeHrTime(timedEvent.time),
    droppedAttributesCount: timedEvent.droppedAttributesCount || 0
  };
}
function createExportTraceServiceRequest(spans, options) {
  const encoder = getOtlpEncoder(options);
  return {
    resourceSpans: spanRecordsToResourceSpans(spans, encoder)
  };
}
function createResourceMap(readableSpans) {
  const resourceMap = /* @__PURE__ */ new Map();
  for (const record of readableSpans) {
    let ilsMap = resourceMap.get(record.resource);
    if (!ilsMap) {
      ilsMap = /* @__PURE__ */ new Map();
      resourceMap.set(record.resource, ilsMap);
    }
    const instrumentationScopeKey = `${record.instrumentationScope.name}@${record.instrumentationScope.version || ""}:${record.instrumentationScope.schemaUrl || ""}`;
    let records = ilsMap.get(instrumentationScopeKey);
    if (!records) {
      records = [];
      ilsMap.set(instrumentationScopeKey, records);
    }
    records.push(record);
  }
  return resourceMap;
}
function spanRecordsToResourceSpans(readableSpans, encoder) {
  const resourceMap = createResourceMap(readableSpans);
  const out = [];
  const entryIterator = resourceMap.entries();
  let entry = entryIterator.next();
  while (!entry.done) {
    const [resource, ilmMap] = entry.value;
    const scopeResourceSpans = [];
    const ilmIterator = ilmMap.values();
    let ilmEntry = ilmIterator.next();
    while (!ilmEntry.done) {
      const scopeSpans = ilmEntry.value;
      if (scopeSpans.length > 0) {
        const spans = scopeSpans.map((readableSpan) => sdkSpanToOtlpSpan(readableSpan, encoder));
        scopeResourceSpans.push({
          scope: createInstrumentationScope(scopeSpans[0].instrumentationScope),
          spans,
          schemaUrl: scopeSpans[0].instrumentationScope.schemaUrl
        });
      }
      ilmEntry = ilmIterator.next();
    }
    const transformedSpans = {
      resource: createResource(resource),
      scopeSpans: scopeResourceSpans,
      schemaUrl: void 0
    };
    out.push(transformedSpans);
    entry = entryIterator.next();
  }
  return out;
}
var init_internal2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js"() {
    "use strict";
    init_internal();
    init_utils3();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/trace.js
var JsonTraceSerializer;
var init_trace2 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/trace.js"() {
    "use strict";
    init_internal2();
    JsonTraceSerializer = {
      serializeRequest: (arg) => {
        const request3 = createExportTraceServiceRequest(arg, {
          useHex: true,
          useLongBits: false
        });
        const encoder = new TextEncoder();
        return encoder.encode(JSON.stringify(request3));
      },
      deserializeResponse: (arg) => {
        const decoder = new TextDecoder();
        return JSON.parse(decoder.decode(arg));
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/index.js
var init_json = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/trace/json/index.js"() {
    "use strict";
    init_trace2();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/index.js
var init_esm8 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/build/esm/index.js"() {
    "use strict";
    init_json();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/is-export-retryable.js
function isExportRetryable(statusCode) {
  const retryCodes = [429, 502, 503, 504];
  return retryCodes.includes(statusCode);
}
function parseRetryAfterToMills(retryAfter) {
  if (retryAfter == null) {
    return void 0;
  }
  const seconds = Number.parseInt(retryAfter, 10);
  if (Number.isInteger(seconds)) {
    return seconds > 0 ? seconds * 1e3 : -1;
  }
  const delay = new Date(retryAfter).getTime() - Date.now();
  if (delay >= 0) {
    return delay;
  }
  return 0;
}
var init_is_export_retryable = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/is-export-retryable.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/http-transport-utils.js
var http_transport_utils_exports = {};
__export(http_transport_utils_exports, {
  compressAndSend: () => compressAndSend,
  createHttpAgent: () => createHttpAgent,
  sendWithHttp: () => sendWithHttp
});
import * as http from "http";
import * as https from "https";
import * as zlib2 from "zlib";
import { Readable } from "stream";
function sendWithHttp(params, agent, data, onDone, timeoutMillis) {
  const parsedUrl = new URL(params.url);
  const nodeVersion = Number(process.versions.node.split(".")[0]);
  const options = {
    hostname: parsedUrl.hostname,
    port: parsedUrl.port,
    path: parsedUrl.pathname,
    method: "POST",
    headers: {
      ...params.headers()
    },
    agent
  };
  const request3 = parsedUrl.protocol === "http:" ? http.request : https.request;
  const req = request3(options, (res) => {
    const responseData = [];
    res.on("data", (chunk) => responseData.push(chunk));
    res.on("end", () => {
      if (res.statusCode && res.statusCode < 299) {
        onDone({
          status: "success",
          data: Buffer.concat(responseData)
        });
      } else if (res.statusCode && isExportRetryable(res.statusCode)) {
        onDone({
          status: "retryable",
          retryInMillis: parseRetryAfterToMills(res.headers["retry-after"])
        });
      } else {
        const error2 = new OTLPExporterError(res.statusMessage, res.statusCode, Buffer.concat(responseData).toString());
        onDone({
          status: "failure",
          error: error2
        });
      }
    });
  });
  req.setTimeout(timeoutMillis, () => {
    req.destroy();
    onDone({
      status: "failure",
      error: new Error("Request Timeout")
    });
  });
  req.on("error", (error2) => {
    onDone({
      status: "failure",
      error: error2
    });
  });
  const reportTimeoutErrorEvent = nodeVersion >= 14 ? "close" : "abort";
  req.on(reportTimeoutErrorEvent, () => {
    onDone({
      status: "failure",
      error: new Error("Request timed out")
    });
  });
  compressAndSend(req, params.compression, data, (error2) => {
    onDone({
      status: "failure",
      error: error2
    });
  });
}
function compressAndSend(req, compression, data, onError) {
  let dataStream = readableFromUint8Array(data);
  if (compression === "gzip") {
    req.setHeader("Content-Encoding", "gzip");
    dataStream = dataStream.on("error", onError).pipe(zlib2.createGzip()).on("error", onError);
  }
  dataStream.pipe(req).on("error", onError);
}
function readableFromUint8Array(buff) {
  const readable = new Readable();
  readable.push(buff);
  readable.push(null);
  return readable;
}
function createHttpAgent(rawUrl, agentOptions) {
  const parsedUrl = new URL(rawUrl);
  const Agent3 = parsedUrl.protocol === "http:" ? http.Agent : https.Agent;
  return new Agent3(agentOptions);
}
var init_http_transport_utils = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/http-transport-utils.js"() {
    "use strict";
    init_is_export_retryable();
    init_types();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/http-exporter-transport.js
function createHttpExporterTransport(parameters) {
  return new HttpExporterTransport(parameters);
}
var HttpExporterTransport;
var init_http_exporter_transport = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/transport/http-exporter-transport.js"() {
    "use strict";
    HttpExporterTransport = class {
      _parameters;
      _utils = null;
      constructor(_parameters) {
        this._parameters = _parameters;
      }
      async send(data, timeoutMillis) {
        const { agent, send } = this._loadUtils();
        return new Promise((resolve) => {
          send(this._parameters, agent, data, (result) => {
            resolve(result);
          }, timeoutMillis);
        });
      }
      shutdown() {
      }
      _loadUtils() {
        let utils = this._utils;
        if (utils === null) {
          const {
            sendWithHttp: sendWithHttp2,
            createHttpAgent: createHttpAgent2
            // eslint-disable-next-line @typescript-eslint/no-var-requires
          } = (init_http_transport_utils(), __toCommonJS(http_transport_utils_exports));
          utils = this._utils = {
            agent: createHttpAgent2(this._parameters.url, this._parameters.agentOptions),
            send: sendWithHttp2
          };
        }
        return utils;
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/retrying-transport.js
function getJitter() {
  return Math.random() * (2 * JITTER) - JITTER;
}
function createRetryingTransport(options) {
  return new RetryingTransport(options.transport);
}
var MAX_ATTEMPTS, INITIAL_BACKOFF, MAX_BACKOFF, BACKOFF_MULTIPLIER, JITTER, RetryingTransport;
var init_retrying_transport = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/retrying-transport.js"() {
    "use strict";
    MAX_ATTEMPTS = 5;
    INITIAL_BACKOFF = 1e3;
    MAX_BACKOFF = 5e3;
    BACKOFF_MULTIPLIER = 1.5;
    JITTER = 0.2;
    RetryingTransport = class {
      _transport;
      constructor(_transport) {
        this._transport = _transport;
      }
      retry(data, timeoutMillis, inMillis) {
        return new Promise((resolve, reject2) => {
          setTimeout(() => {
            this._transport.send(data, timeoutMillis).then(resolve, reject2);
          }, inMillis);
        });
      }
      async send(data, timeoutMillis) {
        const deadline = Date.now() + timeoutMillis;
        let result = await this._transport.send(data, timeoutMillis);
        let attempts = MAX_ATTEMPTS;
        let nextBackoff = INITIAL_BACKOFF;
        while (result.status === "retryable" && attempts > 0) {
          attempts--;
          const backoff = Math.max(Math.min(nextBackoff, MAX_BACKOFF) + getJitter(), 0);
          nextBackoff = nextBackoff * BACKOFF_MULTIPLIER;
          const retryInMillis = result.retryInMillis ?? backoff;
          const remainingTimeoutMillis = deadline - Date.now();
          if (retryInMillis > remainingTimeoutMillis) {
            return result;
          }
          result = await this.retry(data, remainingTimeoutMillis, retryInMillis);
        }
        return result;
      }
      shutdown() {
        return this._transport.shutdown();
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-http-export-delegate.js
function createOtlpHttpExportDelegate(options, serializer) {
  return createOtlpExportDelegate({
    transport: createRetryingTransport({
      transport: createHttpExporterTransport(options)
    }),
    serializer,
    promiseHandler: createBoundedQueueExportPromiseHandler(options)
  }, { timeout: options.timeoutMillis });
}
var init_otlp_http_export_delegate = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/otlp-http-export-delegate.js"() {
    "use strict";
    init_otlp_export_delegate();
    init_http_exporter_transport();
    init_bounded_queue_export_promise_handler();
    init_retrying_transport();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-env-configuration.js
function parseAndValidateTimeoutFromEnv(timeoutEnvVar) {
  const envTimeout = process.env[timeoutEnvVar]?.trim();
  if (envTimeout != null && envTimeout !== "") {
    const definedTimeout = Number(envTimeout);
    if (Number.isFinite(definedTimeout) && definedTimeout > 0) {
      return definedTimeout;
    }
    diag.warn(`Configuration: ${timeoutEnvVar} is invalid, expected number greater than 0 (actual: ${envTimeout})`);
  }
  return void 0;
}
function getTimeoutFromEnv(signalIdentifier) {
  const specificTimeout = parseAndValidateTimeoutFromEnv(`OTEL_EXPORTER_OTLP_${signalIdentifier}_TIMEOUT`);
  const nonSpecificTimeout = parseAndValidateTimeoutFromEnv("OTEL_EXPORTER_OTLP_TIMEOUT");
  return specificTimeout ?? nonSpecificTimeout;
}
function parseAndValidateCompressionFromEnv(compressionEnvVar) {
  const compression = process.env[compressionEnvVar]?.trim();
  if (compression === "") {
    return void 0;
  }
  if (compression == null || compression === "none" || compression === "gzip") {
    return compression;
  }
  diag.warn(`Configuration: ${compressionEnvVar} is invalid, expected 'none' or 'gzip' (actual: '${compression}')`);
  return void 0;
}
function getCompressionFromEnv(signalIdentifier) {
  const specificCompression = parseAndValidateCompressionFromEnv(`OTEL_EXPORTER_OTLP_${signalIdentifier}_COMPRESSION`);
  const nonSpecificCompression = parseAndValidateCompressionFromEnv("OTEL_EXPORTER_OTLP_COMPRESSION");
  return specificCompression ?? nonSpecificCompression;
}
function getSharedConfigurationFromEnvironment(signalIdentifier) {
  return {
    timeoutMillis: getTimeoutFromEnv(signalIdentifier),
    compression: getCompressionFromEnv(signalIdentifier)
  };
}
var init_shared_env_configuration = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/shared-env-configuration.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js
function validateAndNormalizeHeaders(partialHeaders) {
  return () => {
    const headers = {};
    Object.entries(partialHeaders?.() ?? {}).forEach(([key, value]) => {
      if (typeof value !== "undefined") {
        headers[key] = String(value);
      } else {
        diag.warn(`Header "${key}" has invalid value (${value}) and will be ignored`);
      }
    });
    return headers;
  };
}
var init_util = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js"() {
    "use strict";
    init_esm();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-configuration.js
function mergeHeaders(userProvidedHeaders, fallbackHeaders, defaultHeaders) {
  const requiredHeaders = {
    ...defaultHeaders()
  };
  const headers = {};
  return () => {
    if (fallbackHeaders != null) {
      Object.assign(headers, fallbackHeaders());
    }
    if (userProvidedHeaders != null) {
      Object.assign(headers, userProvidedHeaders());
    }
    return Object.assign(headers, requiredHeaders);
  };
}
function validateUserProvidedUrl(url) {
  if (url == null) {
    return void 0;
  }
  try {
    new URL(url);
    return url;
  } catch (e) {
    throw new Error(`Configuration: Could not parse user-provided export URL: '${url}'`);
  }
}
function mergeOtlpHttpConfigurationWithDefaults(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration) {
  return {
    ...mergeOtlpSharedConfigurationWithDefaults(userProvidedConfiguration, fallbackConfiguration, defaultConfiguration),
    headers: mergeHeaders(validateAndNormalizeHeaders(userProvidedConfiguration.headers), fallbackConfiguration.headers, defaultConfiguration.headers),
    url: validateUserProvidedUrl(userProvidedConfiguration.url) ?? fallbackConfiguration.url ?? defaultConfiguration.url,
    agentOptions: userProvidedConfiguration.agentOptions ?? fallbackConfiguration.agentOptions ?? defaultConfiguration.agentOptions
  };
}
function getHttpConfigurationDefaults(requiredHeaders, signalResourcePath) {
  return {
    ...getSharedConfigurationDefaults(),
    headers: () => requiredHeaders,
    url: "http://localhost:4318/" + signalResourcePath,
    agentOptions: { keepAlive: true }
  };
}
var init_otlp_http_configuration = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-configuration.js"() {
    "use strict";
    init_shared_configuration();
    init_util();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-env-configuration.js
function getStaticHeadersFromEnv(signalIdentifier) {
  const signalSpecificRawHeaders = process.env[`OTEL_EXPORTER_OTLP_${signalIdentifier}_HEADERS`]?.trim();
  const nonSignalSpecificRawHeaders = process.env["OTEL_EXPORTER_OTLP_HEADERS"]?.trim();
  const signalSpecificHeaders = parseKeyPairsIntoRecord(signalSpecificRawHeaders);
  const nonSignalSpecificHeaders = parseKeyPairsIntoRecord(nonSignalSpecificRawHeaders);
  if (Object.keys(signalSpecificHeaders).length === 0 && Object.keys(nonSignalSpecificHeaders).length === 0) {
    return void 0;
  }
  return Object.assign({}, parseKeyPairsIntoRecord(nonSignalSpecificRawHeaders), parseKeyPairsIntoRecord(signalSpecificRawHeaders));
}
function appendRootPathToUrlIfNeeded(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.toString();
  } catch {
    diag.warn(`Configuration: Could not parse environment-provided export URL: '${url}', falling back to undefined`);
    return void 0;
  }
}
function appendResourcePathToUrl(url, path3) {
  try {
    new URL(url);
  } catch {
    diag.warn(`Configuration: Could not parse environment-provided export URL: '${url}', falling back to undefined`);
    return void 0;
  }
  if (!url.endsWith("/")) {
    url = url + "/";
  }
  url += path3;
  try {
    new URL(url);
  } catch {
    diag.warn(`Configuration: Provided URL appended with '${path3}' is not a valid URL, using 'undefined' instead of '${url}'`);
    return void 0;
  }
  return url;
}
function getNonSpecificUrlFromEnv(signalResourcePath) {
  const envUrl = process.env.OTEL_EXPORTER_OTLP_ENDPOINT?.trim();
  if (envUrl == null || envUrl === "") {
    return void 0;
  }
  return appendResourcePathToUrl(envUrl, signalResourcePath);
}
function getSpecificUrlFromEnv(signalIdentifier) {
  const envUrl = process.env[`OTEL_EXPORTER_OTLP_${signalIdentifier}_ENDPOINT`]?.trim();
  if (envUrl == null || envUrl === "") {
    return void 0;
  }
  return appendRootPathToUrlIfNeeded(envUrl);
}
function getHttpConfigurationFromEnvironment(signalIdentifier, signalResourcePath) {
  return {
    ...getSharedConfigurationFromEnvironment(signalIdentifier),
    url: getSpecificUrlFromEnv(signalIdentifier) ?? getNonSpecificUrlFromEnv(signalResourcePath),
    headers: wrapStaticHeadersInFunction(getStaticHeadersFromEnv(signalIdentifier))
  };
}
var init_otlp_http_env_configuration = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/otlp-http-env-configuration.js"() {
    "use strict";
    init_esm6();
    init_esm();
    init_shared_env_configuration();
    init_shared_configuration();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/convert-legacy-node-http-options.js
function convertLegacyAgentOptions(config) {
  if (config?.keepAlive != null) {
    if (config.httpAgentOptions != null) {
      if (config.httpAgentOptions.keepAlive == null) {
        config.httpAgentOptions.keepAlive = config.keepAlive;
      }
    } else {
      config.httpAgentOptions = {
        keepAlive: config.keepAlive
      };
    }
  }
  return config.httpAgentOptions;
}
function convertLegacyHttpOptions(config, signalIdentifier, signalResourcePath, requiredHeaders) {
  if (config.metadata) {
    diag.warn("Metadata cannot be set when using http");
  }
  return mergeOtlpHttpConfigurationWithDefaults({
    url: config.url,
    headers: wrapStaticHeadersInFunction(config.headers),
    concurrencyLimit: config.concurrencyLimit,
    timeoutMillis: config.timeoutMillis,
    compression: config.compression,
    agentOptions: convertLegacyAgentOptions(config)
  }, getHttpConfigurationFromEnvironment(signalIdentifier, signalResourcePath), getHttpConfigurationDefaults(requiredHeaders, signalResourcePath));
}
var init_convert_legacy_node_http_options = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/configuration/convert-legacy-node-http-options.js"() {
    "use strict";
    init_otlp_http_configuration();
    init_otlp_http_env_configuration();
    init_esm();
    init_shared_configuration();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/index-node-http.js
var init_index_node_http = __esm({
  "../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/build/esm/index-node-http.js"() {
    "use strict";
    init_otlp_http_export_delegate();
    init_convert_legacy_node_http_options();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/OTLPTraceExporter.js
var OTLPTraceExporter;
var init_OTLPTraceExporter = __esm({
  "../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/OTLPTraceExporter.js"() {
    "use strict";
    init_esm7();
    init_version2();
    init_esm8();
    init_index_node_http();
    OTLPTraceExporter = class extends OTLPExporterBase {
      constructor(config = {}) {
        super(createOtlpHttpExportDelegate(convertLegacyHttpOptions(config, "TRACES", "v1/traces", {
          "User-Agent": `OTel-OTLP-Exporter-JavaScript/${VERSION2}`,
          "Content-Type": "application/json"
        }), JsonTraceSerializer));
      }
    };
  }
});

// ../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/index.js
var init_node4 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/index.js"() {
    "use strict";
    init_OTLPTraceExporter();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/index.js
var init_platform4 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/index.js"() {
    "use strict";
    init_node4();
  }
});

// ../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js
var esm_exports3 = {};
__export(esm_exports3, {
  OTLPTraceExporter: () => OTLPTraceExporter
});
var init_esm9 = __esm({
  "../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-http@0.200.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/index.js"() {
    "use strict";
    init_platform4();
  }
});

// src/node.ts
import { AsyncLocalStorage } from "node:async_hooks";
import * as path from "node:path";
import * as fs from "node:fs/promises";
import * as os from "node:os";
import * as fsSync from "node:fs";
import * as crypto from "node:crypto";

// src/isomorph.ts
var DefaultAsyncLocalStorage = class {
  constructor() {
  }
  enterWith(_) {
  }
  run(_, callback) {
    return callback();
  }
  getStore() {
    return void 0;
  }
};
var iso = {
  getRepoInfo: async (_settings) => void 0,
  getPastNAncestors: async () => [],
  getEnv: (_name) => void 0,
  getCallerLocation: () => void 0,
  newAsyncLocalStorage: () => new DefaultAsyncLocalStorage(),
  processOn: (_0, _1) => {
  }
};
var isomorph_default = iso;

// src/gitutil.ts
import { simpleGit } from "simple-git";
var COMMON_BASE_BRANCHES = ["main", "master", "develop"];
async function currentRepo() {
  try {
    const git = simpleGit();
    if (await git.checkIsRepo()) {
      return git;
    } else {
      return null;
    }
  } catch (e) {
    return null;
  }
}
var _baseBranch = null;
async function getBaseBranch(remote = void 0) {
  if (_baseBranch === null) {
    const git = await currentRepo();
    if (git === null) {
      throw new Error("Not in a git repo");
    }
    const remoteName = remote ?? (await git.getRemotes())[0]?.name;
    if (!remoteName) {
      throw new Error("No remote found");
    }
    let branch = null;
    const repoBranches = new Set((await git.branchLocal()).all);
    const matchingBaseBranches = COMMON_BASE_BRANCHES.filter(
      (b) => repoBranches.has(b)
    );
    if (matchingBaseBranches.length === 1) {
      branch = matchingBaseBranches[0];
    } else {
      try {
        const remoteInfo = await git.remote(["show", remoteName]);
        if (!remoteInfo) {
          throw new Error(`Could not find remote ${remoteName}`);
        }
        const match = remoteInfo.match(/\s*HEAD branch:\s*(.*)$/m);
        if (!match) {
          throw new Error(`Could not find HEAD branch in remote ${remoteName}`);
        }
        branch = match[1];
      } catch {
        branch = "main";
      }
    }
    _baseBranch = { remote: remoteName, branch };
  }
  return _baseBranch;
}
async function getBaseBranchAncestor(remote = void 0) {
  const git = await currentRepo();
  if (git === null) {
    throw new Error("Not in a git repo");
  }
  const { remote: remoteName, branch: baseBranch } = await getBaseBranch(remote);
  const isDirty = (await git.diffSummary()).files.length > 0;
  const head = isDirty ? "HEAD" : "HEAD^";
  try {
    const ancestor = await git.raw([
      "merge-base",
      head,
      `${remoteName}/${baseBranch}`
    ]);
    return ancestor.trim();
  } catch (e) {
    return void 0;
  }
}
async function getPastNAncestors(n = 1e3, remote = void 0) {
  const git = await currentRepo();
  if (git === null) {
    return [];
  }
  let ancestor = void 0;
  try {
    ancestor = await getBaseBranchAncestor(remote);
  } catch (e) {
    console.warn(
      "Skipping git metadata. This is likely because the repository has not been published to a remote yet.",
      `${e}`
    );
  }
  if (!ancestor) {
    return [];
  }
  const commits = await git.log({ from: ancestor, to: "HEAD", maxCount: n });
  return commits.all.map((c) => c.hash);
}
async function attempt(fn) {
  try {
    return await fn();
  } catch (e) {
    return void 0;
  }
}
function truncateToByteLimit(s, byteLimit = 65536) {
  const encoded = new TextEncoder().encode(s);
  if (encoded.length <= byteLimit) {
    return s;
  }
  const truncated = encoded.subarray(0, byteLimit);
  return new TextDecoder().decode(truncated);
}
async function getRepoInfo(settings) {
  if (settings && settings.collect === "none") {
    return void 0;
  }
  const repo = await repoInfo();
  if (!repo || !settings || settings.collect === "all") {
    return repo;
  }
  let sanitized = {};
  settings.fields?.forEach((field) => {
    sanitized = { ...sanitized, [field]: repo[field] };
  });
  return sanitized;
}
async function repoInfo() {
  const git = await currentRepo();
  if (git === null) {
    return void 0;
  }
  let commit = void 0;
  let commit_message = void 0;
  let commit_time = void 0;
  let author_name = void 0;
  let author_email = void 0;
  let tag = void 0;
  let branch = void 0;
  let git_diff = void 0;
  const dirty = (await git.diffSummary()).files.length > 0;
  commit = await attempt(async () => await git.revparse(["HEAD"]));
  commit_message = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%B"])).trim()
  );
  commit_time = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%cI"])).trim()
  );
  author_name = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%aN"])).trim()
  );
  author_email = await attempt(
    async () => (await git.raw(["log", "-1", "--pretty=%aE"])).trim()
  );
  tag = await attempt(
    async () => (await git.raw(["describe", "--tags", "--exact-match", "--always"])).trim()
  );
  branch = await attempt(
    async () => (await git.raw(["rev-parse", "--abbrev-ref", "HEAD"])).trim()
  );
  if (dirty) {
    git_diff = await attempt(
      async () => truncateToByteLimit(await git.raw(["--no-ext-diff", "diff", "HEAD"]))
    );
  }
  return {
    commit,
    branch,
    tag,
    dirty,
    author_name,
    author_email,
    commit_message,
    commit_time,
    git_diff
  };
}

// src/stackutil.ts
function getStackTrace() {
  const trace2 = new Error().stack;
  if (typeof trace2 !== "string") {
    return [];
  }
  const traceLines = trace2.split("\n");
  const out = [];
  const stackFrameRegex = /at(.*)\((.*):(\d+):(\d+)\)/;
  for (const traceLine of traceLines.slice(1)) {
    const matches = traceLine.match(stackFrameRegex);
    if (matches === null || matches.length !== 5) {
      continue;
    }
    const entry = {
      functionName: matches[1].trim(),
      fileName: matches[2],
      lineNo: parseInt(matches[3])
    };
    if (!isNaN(entry.lineNo)) {
      out.push(entry);
    }
  }
  return out;
}
function getCallerLocation() {
  let thisDir = void 0;
  const entries = getStackTrace();
  for (const frame of entries) {
    if (thisDir === void 0) {
      thisDir = isomorph_default.pathDirname?.(frame.fileName);
    }
    if (isomorph_default.pathDirname?.(frame.fileName) !== thisDir) {
      return {
        caller_functionname: frame.functionName,
        caller_filename: frame.fileName,
        caller_lineno: frame.lineNo
      };
    }
  }
  return void 0;
}

// src/logger.ts
import { v4 as uuidv4 } from "uuid";

// src/queue.ts
var DEFAULT_QUEUE_SIZE = 15e3;
var Queue = class {
  items = [];
  maxSize;
  enforceSizeLimit = false;
  constructor(maxSize) {
    if (maxSize < 1) {
      console.warn(
        `maxSize ${maxSize} is <1, using default ${DEFAULT_QUEUE_SIZE}`
      );
      maxSize = DEFAULT_QUEUE_SIZE;
    }
    this.maxSize = maxSize;
  }
  /**
   * Set queue size limit enforcement. When enabled, the queue will drop new items
   * when it reaches maxSize. When disabled (default), the queue can grow unlimited.
   */
  enforceQueueSizeLimit(enforce) {
    this.enforceSizeLimit = enforce;
  }
  push(...items) {
    const dropped = [];
    for (const item of items) {
      if (!this.enforceSizeLimit) {
        this.items.push(item);
      } else {
        if (this.items.length >= this.maxSize) {
          dropped.push(item);
        } else {
          this.items.push(item);
        }
      }
    }
    return dropped;
  }
  peek() {
    return this.items[0];
  }
  drain() {
    const items = [...this.items];
    this.items = [];
    return items;
  }
  clear() {
    this.items = [];
  }
  length() {
    return this.items.length;
  }
  get capacity() {
    return this.maxSize;
  }
};

// util/db_fields.ts
var TRANSACTION_ID_FIELD = "_xact_id";
var IS_MERGE_FIELD = "_is_merge";
var AUDIT_SOURCE_FIELD = "_audit_source";
var AUDIT_METADATA_FIELD = "_audit_metadata";
var VALID_SOURCES = ["app", "api", "external"];
var PARENT_ID_FIELD = "_parent_id";

// util/span_identifier_v3.ts
import * as uuid3 from "uuid";

// util/span_identifier_v2.ts
import * as uuid2 from "uuid";

// util/span_identifier_v1.ts
import * as uuid from "uuid";
import { z } from "zod/v3";
function tryMakeUuid(s) {
  try {
    const ret = uuid.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER = 1;
var INVALID_ENCODING_ERRMSG = "SpanComponents string is not properly encoded. This may be due to a version mismatch between the SDK library used to export the span and the library used to decode it. Please make sure you are using the same SDK version across the board";
var SpanObjectTypeV1 = /* @__PURE__ */ ((SpanObjectTypeV12) => {
  SpanObjectTypeV12[SpanObjectTypeV12["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV12[SpanObjectTypeV12["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV12;
})(SpanObjectTypeV1 || {});
var SpanObjectTypeV1EnumSchema = z.nativeEnum(SpanObjectTypeV1);
var SpanRowIdsV1 = class {
  rowId;
  spanId;
  rootSpanId;
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV1 = class _SpanComponentsV1 {
  objectType;
  objectId;
  rowIds;
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.rowIds = args.rowIds;
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER,
        this.objectType,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid(
      this.objectId
    );
    if (!objectIdIsUUID) {
      throw new Error("object_id component must be a valid UUID");
    }
    allBuffers.push(objectIdBytes);
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV1EnumSchema.parse(rawBytes[1]);
      if (![0, 1].includes(rawBytes[2])) {
        throw new Error();
      }
      if (![0, 1].includes(rawBytes[3])) {
        throw new Error();
      }
      const hasRowId = rawBytes[2] == 1;
      const rowIdIsUUID = rawBytes[3] == 1;
      const objectId = uuid.stringify(rawBytes.subarray(4, 20));
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        const spanId = uuid.stringify(rawBytes.subarray(20, 36));
        const rootSpanId = uuid.stringify(rawBytes.subarray(36, 52));
        const rowId = rowIdIsUUID ? uuid.stringify(rawBytes.subarray(52)) : rawBytes.subarray(52).toString("utf-8");
        return new SpanRowIdsV1({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV1({ objectType, objectId, rowIds });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG);
    }
  }
  objectIdFields() {
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      rowIds: this.rowIds?.toObject()
    };
  }
};

// util/span_identifier_v2.ts
import { z as z2 } from "zod/v3";
function tryMakeUuid2(s) {
  try {
    const ret = uuid2.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER2 = 2;
var INVALID_ENCODING_ERRMSG2 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER2}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var INTEGER_ENCODING_NUM_BYTES = 4;
var SpanObjectTypeV2 = /* @__PURE__ */ ((SpanObjectTypeV22) => {
  SpanObjectTypeV22[SpanObjectTypeV22["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV22[SpanObjectTypeV22["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV22;
})(SpanObjectTypeV2 || {});
var SpanObjectTypeV2EnumSchema = z2.nativeEnum(SpanObjectTypeV2);
var SpanRowIdsV2 = class {
  rowId;
  spanId;
  rootSpanId;
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV2 = class _SpanComponentsV2 {
  objectType;
  objectId;
  computeObjectMetadataArgs;
  rowIds;
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.computeObjectMetadataArgs = args.computeObjectMetadataArgs;
    this.rowIds = args.rowIds;
    if (!(this.objectId || this.computeObjectMetadataArgs)) {
      throw new Error(
        "Must provide either objectId or computeObjectMetadataArgs"
      );
    }
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid2(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER2,
        this.objectType,
        this.objectId ? 1 : 0,
        this.computeObjectMetadataArgs ? 1 : 0,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    if (this.objectId) {
      const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid2(
        this.objectId
      );
      if (!objectIdIsUUID) {
        throw new Error("object_id component must be a valid UUID");
      }
      allBuffers.push(objectIdBytes);
    }
    if (this.computeObjectMetadataArgs) {
      const computeObjectMetadataBytes = Buffer.from(
        JSON.stringify(this.computeObjectMetadataArgs),
        "utf-8"
      );
      const serializedLenBytes = Buffer.alloc(INTEGER_ENCODING_NUM_BYTES);
      serializedLenBytes.writeInt32BE(computeObjectMetadataBytes.length);
      allBuffers.push(serializedLenBytes, computeObjectMetadataBytes);
    }
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid2(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid2(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] < ENCODING_VERSION_NUMBER2) {
        const spanComponentsOld = SpanComponentsV1.fromStr(s);
        return new _SpanComponentsV2({
          objectType: SpanObjectTypeV2EnumSchema.parse(
            spanComponentsOld.objectType
          ),
          objectId: spanComponentsOld.objectId,
          rowIds: spanComponentsOld.rowIds ? new SpanRowIdsV2({
            rowId: spanComponentsOld.rowIds.rowId,
            spanId: spanComponentsOld.rowIds.spanId,
            rootSpanId: spanComponentsOld.rowIds.rootSpanId
          }) : void 0
        });
      }
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER2) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV2EnumSchema.parse(rawBytes[1]);
      for (let i = 2; i < 6; ++i) {
        if (![0, 1].includes(rawBytes[i])) {
          throw new Error();
        }
      }
      const hasObjectId = rawBytes[2] == 1;
      const hasComputeObjectMetadataArgs = rawBytes[3] == 1;
      const hasRowId = rawBytes[4] == 1;
      const rowIdIsUUID = rawBytes[5] == 1;
      let byteCursor = 6;
      let objectId = void 0;
      if (hasObjectId) {
        const nextByteCursor = byteCursor + 16;
        objectId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
      }
      let computeObjectMetadataArgs;
      if (hasComputeObjectMetadataArgs) {
        let nextByteCursor = byteCursor + INTEGER_ENCODING_NUM_BYTES;
        const serializedLenBytes = rawBytes.readInt32BE(byteCursor);
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + serializedLenBytes;
        computeObjectMetadataArgs = JSON.parse(
          rawBytes.subarray(byteCursor, nextByteCursor).toString("utf-8")
        );
        byteCursor = nextByteCursor;
      }
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        let nextByteCursor = byteCursor + 16;
        const spanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + 16;
        const rootSpanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        const rowId = rowIdIsUUID ? uuid2.stringify(rawBytes.subarray(byteCursor)) : rawBytes.subarray(byteCursor).toString("utf-8");
        return new SpanRowIdsV2({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV2({
        objectType,
        objectId,
        computeObjectMetadataArgs,
        rowIds
      });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG2);
    }
  }
  objectIdFields() {
    if (!this.objectId) {
      throw new Error(
        "Impossible: cannot invoke `object_id_fields` unless SpanComponentsV2 is initialized with an `object_id`"
      );
    }
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      computeObjectMetadataArgs: this.computeObjectMetadataArgs,
      rowIds: this.rowIds?.toObject()
    };
  }
};

// util/span_identifier_v3.ts
import { z as z3 } from "zod/v3";

// util/bytes.ts
function concatUint8Arrays(...arrays) {
  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  for (const arr of arrays) {
    result.set(arr, offset);
    offset += arr.length;
  }
  return result;
}
function uint8ArrayToBase64(uint8Array) {
  let binary = "";
  for (let i = 0; i < uint8Array.length; i++) {
    binary += String.fromCharCode(uint8Array[i]);
  }
  return btoa(binary);
}
function base64ToUint8Array(base64) {
  const binary = atob(base64);
  const uint8Array = new Uint8Array(binary.length);
  for (let i = 0; i < binary.length; i++) {
    uint8Array[i] = binary.charCodeAt(i);
  }
  return uint8Array;
}
function uint8ArrayToString(uint8Array) {
  const decoder = new TextDecoder("utf-8");
  return decoder.decode(uint8Array);
}
function stringToUint8Array(str) {
  const encoder = new TextEncoder();
  return encoder.encode(str);
}

// util/span_identifier_v3.ts
function tryMakeUuid3(s) {
  try {
    const ret = uuid3.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: new Uint8Array(ret), isUUID: true };
  } catch {
    return { bytes: void 0, isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER3 = 3;
var INVALID_ENCODING_ERRMSG3 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER3}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var SpanObjectTypeV3 = /* @__PURE__ */ ((SpanObjectTypeV32) => {
  SpanObjectTypeV32[SpanObjectTypeV32["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV32[SpanObjectTypeV32["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  SpanObjectTypeV32[SpanObjectTypeV32["PLAYGROUND_LOGS"] = 3] = "PLAYGROUND_LOGS";
  return SpanObjectTypeV32;
})(SpanObjectTypeV3 || {});
var spanObjectTypeV3EnumSchema = z3.nativeEnum(SpanObjectTypeV3);
function spanObjectTypeV3ToString(objectType) {
  switch (objectType) {
    case 1 /* EXPERIMENT */:
      return "experiment";
    case 2 /* PROJECT_LOGS */:
      return "project_logs";
    case 3 /* PLAYGROUND_LOGS */:
      return "playground_logs";
    default:
      const x = objectType;
      throw new Error(`Unknown SpanObjectTypeV3: ${x}`);
  }
}
var InternalSpanComponentUUIDFields = /* @__PURE__ */ ((InternalSpanComponentUUIDFields2) => {
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["OBJECT_ID"] = 1] = "OBJECT_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROW_ID"] = 2] = "ROW_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["SPAN_ID"] = 3] = "SPAN_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROOT_SPAN_ID"] = 4] = "ROOT_SPAN_ID";
  return InternalSpanComponentUUIDFields2;
})(InternalSpanComponentUUIDFields || {});
var internalSpanComponentUUIDFieldsEnumSchema = z3.nativeEnum(
  InternalSpanComponentUUIDFields
);
var _INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME = {
  [1 /* OBJECT_ID */]: "object_id",
  [2 /* ROW_ID */]: "row_id",
  [3 /* SPAN_ID */]: "span_id",
  [4 /* ROOT_SPAN_ID */]: "root_span_id"
};
var spanComponentsV3Schema = z3.object({
  object_type: spanObjectTypeV3EnumSchema,
  // TODO(manu): We should have a more elaborate zod schema for
  // `propagated_event`. This will required zod-ifying the contents of
  // sdk/js/util/object.ts.
  propagated_event: z3.record(z3.unknown()).nullish()
}).and(
  z3.union([
    // Must provide one or the other.
    z3.object({
      object_id: z3.string().nullish(),
      compute_object_metadata_args: z3.optional(z3.null())
    }),
    z3.object({
      object_id: z3.optional(z3.null()),
      compute_object_metadata_args: z3.record(z3.unknown())
    })
  ])
).and(
  z3.union([
    // Either all of these must be provided or none.
    z3.object({
      row_id: z3.string(),
      span_id: z3.string(),
      root_span_id: z3.string()
    }),
    z3.object({
      row_id: z3.optional(z3.null()),
      span_id: z3.optional(z3.null()),
      root_span_id: z3.optional(z3.null())
    })
  ])
);
var SpanComponentsV3 = class _SpanComponentsV3 {
  constructor(data) {
    this.data = data;
  }
  toStr() {
    const jsonObj = {
      compute_object_metadata_args: this.data.compute_object_metadata_args || void 0,
      propagated_event: this.data.propagated_event || void 0
    };
    const allBuffers = [];
    allBuffers.push(
      new Uint8Array([ENCODING_VERSION_NUMBER3, this.data.object_type])
    );
    const uuidEntries = [];
    function addUuidField(origVal, fieldId) {
      const ret = tryMakeUuid3(origVal);
      if (ret.isUUID) {
        uuidEntries.push(
          concatUint8Arrays(new Uint8Array([fieldId]), ret.bytes)
        );
      } else {
        jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = origVal;
      }
    }
    if (this.data.object_id) {
      addUuidField(
        this.data.object_id,
        1 /* OBJECT_ID */
      );
    }
    if (this.data.row_id) {
      addUuidField(this.data.row_id, 2 /* ROW_ID */);
    }
    if (this.data.span_id) {
      addUuidField(this.data.span_id, 3 /* SPAN_ID */);
    }
    if (this.data.root_span_id) {
      addUuidField(
        this.data.root_span_id,
        4 /* ROOT_SPAN_ID */
      );
    }
    if (uuidEntries.length > 255) {
      throw new Error("Impossible: too many UUID entries to encode");
    }
    allBuffers.push(new Uint8Array([uuidEntries.length]));
    allBuffers.push(...uuidEntries);
    if (Object.keys(jsonObj).length > 0) {
      allBuffers.push(stringToUint8Array(JSON.stringify(jsonObj)));
    }
    return uint8ArrayToBase64(concatUint8Arrays(...allBuffers));
  }
  static fromStr(s) {
    try {
      const rawBytes = base64ToUint8Array(s);
      const jsonObj = {};
      if (rawBytes[0] < ENCODING_VERSION_NUMBER3) {
        const spanComponentsOld = SpanComponentsV2.fromStr(s);
        jsonObj["object_type"] = spanComponentsOld.objectType;
        jsonObj["object_id"] = spanComponentsOld.objectId;
        jsonObj["compute_object_metadata_args"] = spanComponentsOld.computeObjectMetadataArgs;
        if (spanComponentsOld.rowIds) {
          jsonObj["row_id"] = spanComponentsOld.rowIds.rowId;
          jsonObj["span_id"] = spanComponentsOld.rowIds.spanId;
          jsonObj["root_span_id"] = spanComponentsOld.rowIds.rootSpanId;
        }
      } else {
        jsonObj["object_type"] = rawBytes[1];
        const numUuidEntries = rawBytes[2];
        let byteOffset = 3;
        for (let i = 0; i < numUuidEntries; ++i) {
          const fieldId = internalSpanComponentUUIDFieldsEnumSchema.parse(
            rawBytes[byteOffset]
          );
          const fieldBytes = rawBytes.subarray(byteOffset + 1, byteOffset + 17);
          byteOffset += 17;
          jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = uuid3.stringify(fieldBytes);
        }
        if (byteOffset < rawBytes.length) {
          const remainingJsonObj = JSON.parse(
            uint8ArrayToString(rawBytes.subarray(byteOffset))
          );
          Object.assign(jsonObj, remainingJsonObj);
        }
      }
      return _SpanComponentsV3.fromJsonObj(jsonObj);
    } catch {
      throw new Error(INVALID_ENCODING_ERRMSG3);
    }
  }
  objectIdFields() {
    if (!this.data.object_id) {
      throw new Error(
        "Impossible: cannot invoke `objectIdFields` unless SpanComponentsV3 is initialized with an `object_id`"
      );
    }
    switch (this.data.object_type) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.data.object_id };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.data.object_id, log_id: "g" };
      case 3 /* PLAYGROUND_LOGS */:
        return { prompt_session_id: this.data.object_id, log_id: "x" };
      default:
        const _ = this.data.object_type;
        throw new Error("Impossible");
    }
  }
  async export() {
    return this.toStr();
  }
  static fromJsonObj(jsonObj) {
    return new _SpanComponentsV3(spanComponentsV3Schema.parse(jsonObj));
  }
};

// util/type_util.ts
function isObject(value) {
  return value instanceof Object && !(value instanceof Array);
}
function isArray(value) {
  return value instanceof Array;
}
function isObjectOrArray(value) {
  return value instanceof Object;
}

// util/object_util.ts
function mergeDictsWithPaths({
  mergeInto,
  mergeFrom,
  mergePaths
}) {
  const mergePathsSerialized = new Set(
    mergePaths.map((p) => JSON.stringify(p))
  );
  return mergeDictsWithPathsHelper({
    mergeInto,
    mergeFrom,
    path: [],
    mergePaths: mergePathsSerialized
  });
}
function mergeDictsWithPathsHelper({
  mergeInto,
  mergeFrom,
  path: path3,
  mergePaths
}) {
  Object.entries(mergeFrom).forEach(([k, mergeFromV]) => {
    const fullPath = path3.concat([k]);
    const fullPathSerialized = JSON.stringify(fullPath);
    const mergeIntoV = recordFind(mergeInto, k);
    if (isObject(mergeIntoV) && isObject(mergeFromV) && !mergePaths.has(fullPathSerialized)) {
      mergeDictsWithPathsHelper({
        mergeInto: mergeIntoV,
        mergeFrom: mergeFromV,
        path: fullPath,
        mergePaths
      });
    } else {
      mergeInto[k] = mergeFromV;
    }
  });
  return mergeInto;
}
function mergeDicts(mergeInto, mergeFrom) {
  return mergeDictsWithPaths({ mergeInto, mergeFrom, mergePaths: [] });
}
function mapAt(m, k) {
  const ret = m.get(k);
  if (ret === void 0) {
    throw new Error(`Map does not contain key ${k}`);
  }
  return ret;
}
function recordFind(m, k) {
  return m[k];
}
function getObjValueByPath(row, path3) {
  let curr = row;
  for (const p of path3) {
    if (!isObjectOrArray(curr)) {
      return null;
    }
    curr = curr[p];
  }
  return curr;
}

// util/graph_util.ts
function depthFirstSearch(args) {
  const { graph, firstVisitF, lastVisitF } = args;
  for (const vs of graph.values()) {
    for (const v of vs.values()) {
      if (!graph.has(v)) {
        throw new Error(`Outgoing vertex ${v} must be a key in the graph`);
      }
    }
  }
  const firstVisitedVertices = /* @__PURE__ */ new Set();
  const visitationOrder = args.visitationOrder ?? [...graph.keys()];
  const events = visitationOrder.map((vertex) => ({ eventType: "first", vertex, extras: {} })).reverse();
  while (events.length) {
    const { eventType, vertex, extras } = events.pop();
    if (eventType === "last") {
      lastVisitF?.(vertex);
      continue;
    }
    if (firstVisitedVertices.has(vertex)) {
      continue;
    }
    firstVisitedVertices.add(vertex);
    firstVisitF?.(vertex, { parentVertex: extras.parentVertex });
    events.push({ eventType: "last", vertex, extras: {} });
    mapAt(graph, vertex).forEach((child) => {
      events.push({
        eventType: "first",
        vertex: child,
        extras: { parentVertex: vertex }
      });
    });
  }
}
function undirectedConnectedComponents(graph) {
  const directedGraph = new Map(
    [...graph.vertices].map((v) => [v, /* @__PURE__ */ new Set()])
  );
  for (const [i, j] of graph.edges) {
    mapAt(directedGraph, i).add(j);
    mapAt(directedGraph, j).add(i);
  }
  let labelCounter = 0;
  const vertexLabels = /* @__PURE__ */ new Map();
  const firstVisitF = (vertex, args) => {
    const label = args?.parentVertex !== void 0 ? mapAt(vertexLabels, args?.parentVertex) : labelCounter++;
    vertexLabels.set(vertex, label);
  };
  depthFirstSearch({ graph: directedGraph, firstVisitF });
  const output = Array.from({ length: labelCounter }).map(() => []);
  for (const [vertex, label] of vertexLabels.entries()) {
    output[label].push(vertex);
  }
  return output;
}
function topologicalSort(graph, visitationOrder) {
  const reverseOrdering = [];
  const lastVisitF = (vertex) => {
    reverseOrdering.push(vertex);
  };
  depthFirstSearch({ graph, lastVisitF, visitationOrder });
  return reverseOrdering.reverse();
}

// util/merge_row_batch.ts
function generateMergedRowKey(row, useParentIdForId) {
  return JSON.stringify(
    [
      "org_id",
      "project_id",
      "experiment_id",
      "dataset_id",
      "prompt_session_id",
      "log_id",
      useParentIdForId ?? false ? PARENT_ID_FIELD : "id"
    ].map((k) => row[k])
  );
}
var MERGE_ROW_SKIP_FIELDS = [
  "created",
  "span_id",
  "root_span_id",
  "span_parents",
  "_parent_id"
  // TODO: handle merge paths.
];
function popMergeRowSkipFields(row) {
  const popped = {};
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    if (field in row) {
      popped[field] = row[field];
      delete row[field];
    }
  }
  return popped;
}
function restoreMergeRowSkipFields(row, skipFields) {
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    delete row[field];
    if (field in skipFields) {
      row[field] = skipFields[field];
    }
  }
}
function mergeRowBatch(rows) {
  for (const row of rows) {
    if (row.id === void 0) {
      throw new Error(
        "Logged row is missing an id. This is an internal braintrust error. Please contact us at info@braintrust.dev for help"
      );
    }
  }
  const rowGroups = /* @__PURE__ */ new Map();
  for (const row of rows) {
    const key = generateMergedRowKey(row);
    const existingRow = rowGroups.get(key);
    if (existingRow !== void 0 && row[IS_MERGE_FIELD]) {
      const skipFields = popMergeRowSkipFields(existingRow);
      const preserveNoMerge = !existingRow[IS_MERGE_FIELD];
      mergeDicts(existingRow, row);
      restoreMergeRowSkipFields(existingRow, skipFields);
      if (preserveNoMerge) {
        delete existingRow[IS_MERGE_FIELD];
      }
    } else {
      rowGroups.set(key, row);
    }
  }
  const merged = [...rowGroups.values()];
  const rowToLabel = new Map(
    merged.map((r, i) => [generateMergedRowKey(r), i])
  );
  const graph = new Map(
    Array.from({ length: merged.length }).map((_, i) => [i, /* @__PURE__ */ new Set()])
  );
  merged.forEach((r, i) => {
    const parentId = r[PARENT_ID_FIELD];
    if (!parentId) {
      return;
    }
    const parentRowKey = generateMergedRowKey(
      r,
      true
      /* useParentIdForId */
    );
    const parentLabel = rowToLabel.get(parentRowKey);
    if (parentLabel !== void 0) {
      mapAt(graph, parentLabel).add(i);
    }
  });
  const connectedComponents = undirectedConnectedComponents({
    vertices: new Set(graph.keys()),
    edges: new Set(
      [...graph.entries()].flatMap(
        ([k, vs]) => [...vs].map((v) => {
          const ret = [k, v];
          return ret;
        })
      )
    )
  });
  const buckets = connectedComponents.map(
    (cc) => topologicalSort(
      graph,
      cc
      /* visitationOrder */
    )
  );
  return buckets.map((bucket) => bucket.map((i) => merged[i]));
}
function batchItems(args) {
  let { items } = args;
  const batchMaxNumItems = args.batchMaxNumItems ?? Number.POSITIVE_INFINITY;
  const batchMaxNumBytes = args.batchMaxNumBytes ?? Number.POSITIVE_INFINITY;
  const output = [];
  let nextItems = [];
  let batchSet = [];
  let batch = [];
  let batchLen = 0;
  function addToBatch(item) {
    batch.push(item);
    batchLen += item.length;
  }
  function flushBatch() {
    batchSet.push(batch);
    batch = [];
    batchLen = 0;
  }
  while (items.length) {
    for (const bucket of items) {
      let i = 0;
      for (const item of bucket) {
        if (batch.length === 0 || item.length + batchLen < batchMaxNumBytes && batch.length < batchMaxNumItems) {
          addToBatch(item);
        } else if (i === 0) {
          flushBatch();
          addToBatch(item);
        } else {
          break;
        }
        ++i;
      }
      if (i < bucket.length) {
        nextItems.push(bucket.slice(i));
      }
      if (batchLen >= batchMaxNumBytes || batch.length > batchMaxNumItems) {
        flushBatch();
      }
    }
    if (batch.length) {
      flushBatch();
    }
    if (batchSet.length) {
      output.push(batchSet);
      batchSet = [];
    }
    items = nextItems;
    nextItems = [];
  }
  return output;
}

// util/object.ts
var DEFAULT_IS_LEGACY_DATASET = false;
function ensureDatasetRecord(r, legacy) {
  if (legacy) {
    return ensureLegacyDatasetRecord(r);
  } else {
    return ensureNewDatasetRecord(r);
  }
}
function ensureLegacyDatasetRecord(r) {
  if ("output" in r) {
    return r;
  }
  const row = {
    ...r,
    output: r.expected
  };
  delete row.expected;
  return row;
}
function ensureNewDatasetRecord(r) {
  if ("expected" in r) {
    return r;
  }
  const row = {
    ...r,
    tags: null,
    expected: r.output
  };
  delete row.output;
  return row;
}

// util/json_util.ts
function constructJsonArray(items) {
  return `[${items.join(",")}]`;
}

// util/string_util.ts
function _urljoin(...parts) {
  return parts.map(
    (x, i) => x.replace(/^\//, "").replace(i < parts.length - 1 ? /\/$/ : "", "")
  ).filter((x) => x.trim() !== "").join("/");
}

// util/git_fields.ts
function mergeGitMetadataSettings(s1, s2) {
  if (s1.collect === "all") {
    return s2;
  } else if (s2.collect === "all") {
    return s1;
  } else if (s1.collect === "none") {
    return s1;
  } else if (s2.collect === "none") {
    return s2;
  }
  const fields = (s1.fields ?? []).filter((f) => (s2.fields ?? []).includes(f));
  const collect = fields.length > 0 ? "some" : "none";
  return { collect, fields };
}

// util/xact-ids.ts
var TOP_BITS = BigInt("0x0DE1") << BigInt(48);
var MOD = BigInt(1) << BigInt(64);
var COPRIME = BigInt("205891132094649");
var COPRIME_INVERSE = BigInt("1522336535492693385");
function modularMultiply(value, prime) {
  return value * prime % MOD;
}
function prettifyXact(valueString) {
  const value = BigInt(valueString);
  const encoded = modularMultiply(value, COPRIME);
  return encoded.toString(16).padStart(16, "0");
}
function loadPrettyXact(encodedHex) {
  if (encodedHex.length !== 16) {
    return encodedHex;
  }
  const value = BigInt(`0x${encodedHex}`);
  const multipliedInverse = modularMultiply(value, COPRIME_INVERSE);
  const withTopBits = TOP_BITS | multipliedInverse;
  return withTopBits.toString();
}

// util/zod_util.ts
import { z as z4 } from "zod/v3";

// src/generated_types.ts
import { z as z5 } from "zod/v3";
var AclObjectType = z5.union([
  z5.enum([
    "organization",
    "project",
    "experiment",
    "dataset",
    "prompt",
    "prompt_session",
    "group",
    "role",
    "org_member",
    "project_log",
    "org_project"
  ]),
  z5.null()
]);
var Permission = z5.enum([
  "create",
  "read",
  "update",
  "delete",
  "create_acls",
  "read_acls",
  "update_acls",
  "delete_acls"
]);
var Acl = z5.object({
  id: z5.string().uuid(),
  object_type: AclObjectType.and(z5.string()),
  object_id: z5.string().uuid(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  group_id: z5.union([z5.string(), z5.null()]).optional(),
  permission: Permission.and(z5.union([z5.string(), z5.null()])).optional(),
  restrict_object_type: AclObjectType.and(z5.unknown()).optional(),
  role_id: z5.union([z5.string(), z5.null()]).optional(),
  _object_org_id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional()
});
var AISecret = z5.object({
  id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  updated_at: z5.union([z5.string(), z5.null()]).optional(),
  org_id: z5.string().uuid(),
  name: z5.string(),
  type: z5.union([z5.string(), z5.null()]).optional(),
  metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional(),
  preview_secret: z5.union([z5.string(), z5.null()]).optional()
});
var ResponseFormatJsonSchema = z5.object({
  name: z5.string(),
  description: z5.string().optional(),
  schema: z5.union([z5.object({}).partial().passthrough(), z5.string()]).optional(),
  strict: z5.union([z5.boolean(), z5.null()]).optional()
});
var ResponseFormatNullish = z5.union([
  z5.object({ type: z5.literal("json_object") }),
  z5.object({
    type: z5.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  z5.object({ type: z5.literal("text") }),
  z5.null()
]);
var AnyModelParams = z5.object({
  temperature: z5.number().optional(),
  top_p: z5.number().optional(),
  max_tokens: z5.number(),
  max_completion_tokens: z5.number().optional(),
  frequency_penalty: z5.number().optional(),
  presence_penalty: z5.number().optional(),
  response_format: ResponseFormatNullish.optional(),
  tool_choice: z5.union([
    z5.literal("auto"),
    z5.literal("none"),
    z5.literal("required"),
    z5.object({
      type: z5.literal("function"),
      function: z5.object({ name: z5.string() })
    })
  ]).optional(),
  function_call: z5.union([
    z5.literal("auto"),
    z5.literal("none"),
    z5.object({ name: z5.string() })
  ]).optional(),
  n: z5.number().optional(),
  stop: z5.array(z5.string()).optional(),
  reasoning_effort: z5.enum(["minimal", "low", "medium", "high"]).optional(),
  verbosity: z5.enum(["low", "medium", "high"]).optional(),
  top_k: z5.number().optional(),
  stop_sequences: z5.array(z5.string()).optional(),
  max_tokens_to_sample: z5.number().optional(),
  maxOutputTokens: z5.number().optional(),
  topP: z5.number().optional(),
  topK: z5.number().optional(),
  use_cache: z5.boolean().optional()
});
var ApiKey = z5.object({
  id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  preview_name: z5.string(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  user_email: z5.union([z5.string(), z5.null()]).optional(),
  user_given_name: z5.union([z5.string(), z5.null()]).optional(),
  user_family_name: z5.union([z5.string(), z5.null()]).optional(),
  org_id: z5.union([z5.string(), z5.null()]).optional()
});
var AsyncScoringState = z5.union([
  z5.object({
    status: z5.literal("enabled"),
    token: z5.string(),
    function_ids: z5.array(z5.unknown()).min(1),
    skip_logging: z5.union([z5.boolean(), z5.null()]).optional()
  }),
  z5.object({ status: z5.literal("disabled") }),
  z5.null(),
  z5.null()
]);
var AsyncScoringControl = z5.union([
  z5.object({ kind: z5.literal("score_update"), token: z5.string() }),
  z5.object({ kind: z5.literal("state_override"), state: AsyncScoringState }),
  z5.object({ kind: z5.literal("state_force_reselect") }),
  z5.object({ kind: z5.literal("state_enabled_force_rescore") })
]);
var BraintrustAttachmentReference = z5.object({
  type: z5.literal("braintrust_attachment"),
  filename: z5.string().min(1),
  content_type: z5.string().min(1),
  key: z5.string().min(1)
});
var ExternalAttachmentReference = z5.object({
  type: z5.literal("external_attachment"),
  filename: z5.string().min(1),
  content_type: z5.string().min(1),
  url: z5.string().min(1)
});
var AttachmentReference = z5.discriminatedUnion("type", [
  BraintrustAttachmentReference,
  ExternalAttachmentReference
]);
var UploadStatus = z5.enum(["uploading", "done", "error"]);
var AttachmentStatus = z5.object({
  upload_status: UploadStatus,
  error_message: z5.string().optional()
});
var BraintrustModelParams = z5.object({ use_cache: z5.boolean() }).partial();
var CallEvent = z5.union([
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("text_delta")
  }),
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("reasoning_delta")
  }),
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("json_delta")
  }),
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("progress")
  }),
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("error")
  }),
  z5.object({
    id: z5.string().optional(),
    data: z5.string(),
    event: z5.literal("console")
  }),
  z5.object({
    id: z5.string().optional(),
    event: z5.literal("start"),
    data: z5.literal("")
  }),
  z5.object({
    id: z5.string().optional(),
    event: z5.literal("done"),
    data: z5.literal("")
  })
]);
var ChatCompletionContentPartTextWithTitle = z5.object({
  text: z5.string().default(""),
  type: z5.literal("text"),
  cache_control: z5.object({ type: z5.literal("ephemeral") }).optional()
});
var ChatCompletionContentPartImageWithTitle = z5.object({
  image_url: z5.object({
    url: z5.string(),
    detail: z5.union([z5.literal("auto"), z5.literal("low"), z5.literal("high")]).optional()
  }),
  type: z5.literal("image_url")
});
var ChatCompletionContentPart = z5.union([
  ChatCompletionContentPartTextWithTitle,
  ChatCompletionContentPartImageWithTitle
]);
var ChatCompletionContentPartText = z5.object({
  text: z5.string().default(""),
  type: z5.literal("text"),
  cache_control: z5.object({ type: z5.literal("ephemeral") }).optional()
});
var ChatCompletionMessageToolCall = z5.object({
  id: z5.string(),
  function: z5.object({ arguments: z5.string(), name: z5.string() }),
  type: z5.literal("function")
});
var ChatCompletionMessageReasoning = z5.object({ id: z5.string(), content: z5.string() }).partial();
var ChatCompletionMessageParam = z5.union([
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("system"),
    name: z5.string().optional()
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPart)]),
    role: z5.literal("user"),
    name: z5.string().optional()
  }),
  z5.object({
    role: z5.literal("assistant"),
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText), z5.null()]).optional(),
    function_call: z5.object({ arguments: z5.string(), name: z5.string() }).optional(),
    name: z5.string().optional(),
    tool_calls: z5.array(ChatCompletionMessageToolCall).optional(),
    reasoning: z5.array(ChatCompletionMessageReasoning).optional()
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("tool"),
    tool_call_id: z5.string().default("")
  }),
  z5.object({
    content: z5.union([z5.string(), z5.null()]),
    name: z5.string(),
    role: z5.literal("function")
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("developer"),
    name: z5.string().optional()
  }),
  z5.object({
    role: z5.literal("model"),
    content: z5.union([z5.string(), z5.null()]).optional()
  })
]);
var ChatCompletionOpenAIMessageParam = z5.union([
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("system"),
    name: z5.string().optional()
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPart)]),
    role: z5.literal("user"),
    name: z5.string().optional()
  }),
  z5.object({
    role: z5.literal("assistant"),
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText), z5.null()]).optional(),
    function_call: z5.object({ arguments: z5.string(), name: z5.string() }).optional(),
    name: z5.string().optional(),
    tool_calls: z5.array(ChatCompletionMessageToolCall).optional(),
    reasoning: z5.array(ChatCompletionMessageReasoning).optional()
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("tool"),
    tool_call_id: z5.string().default("")
  }),
  z5.object({
    content: z5.union([z5.string(), z5.null()]),
    name: z5.string(),
    role: z5.literal("function")
  }),
  z5.object({
    content: z5.union([z5.string(), z5.array(ChatCompletionContentPartText)]),
    role: z5.literal("developer"),
    name: z5.string().optional()
  })
]);
var ChatCompletionTool = z5.object({
  function: z5.object({
    name: z5.string(),
    description: z5.string().optional(),
    parameters: z5.object({}).partial().passthrough().optional()
  }),
  type: z5.literal("function")
});
var CodeBundle = z5.object({
  runtime_context: z5.object({
    runtime: z5.enum(["node", "python"]),
    version: z5.string()
  }),
  location: z5.union([
    z5.object({
      type: z5.literal("experiment"),
      eval_name: z5.string(),
      position: z5.union([
        z5.object({ type: z5.literal("task") }),
        z5.object({ type: z5.literal("scorer"), index: z5.number().int().gte(0) })
      ])
    }),
    z5.object({ type: z5.literal("function"), index: z5.number().int().gte(0) })
  ]),
  bundle_id: z5.string(),
  preview: z5.union([z5.string(), z5.null()]).optional()
});
var Dataset = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional()
});
var ObjectReferenceNullish = z5.union([
  z5.object({
    object_type: z5.enum([
      "project_logs",
      "experiment",
      "dataset",
      "prompt",
      "function",
      "prompt_session"
    ]),
    object_id: z5.string().uuid(),
    id: z5.string(),
    _xact_id: z5.union([z5.string(), z5.null()]).optional(),
    created: z5.union([z5.string(), z5.null()]).optional()
  }),
  z5.null()
]);
var DatasetEvent = z5.object({
  id: z5.string(),
  _xact_id: z5.string(),
  created: z5.string().datetime({ offset: true }),
  _pagination_key: z5.union([z5.string(), z5.null()]).optional(),
  project_id: z5.string().uuid(),
  dataset_id: z5.string().uuid(),
  input: z5.unknown().optional(),
  expected: z5.unknown().optional(),
  metadata: z5.union([
    z5.object({ model: z5.union([z5.string(), z5.null()]) }).partial().passthrough(),
    z5.null()
  ]).optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  span_id: z5.string(),
  root_span_id: z5.string(),
  is_root: z5.union([z5.boolean(), z5.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var EnvVar = z5.object({
  id: z5.string().uuid(),
  object_type: z5.enum(["organization", "project", "function"]),
  object_id: z5.string().uuid(),
  name: z5.string(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  used: z5.union([z5.string(), z5.null()]).optional()
});
var RepoInfo = z5.union([
  z5.object({
    commit: z5.union([z5.string(), z5.null()]),
    branch: z5.union([z5.string(), z5.null()]),
    tag: z5.union([z5.string(), z5.null()]),
    dirty: z5.union([z5.boolean(), z5.null()]),
    author_name: z5.union([z5.string(), z5.null()]),
    author_email: z5.union([z5.string(), z5.null()]),
    commit_message: z5.union([z5.string(), z5.null()]),
    commit_time: z5.union([z5.string(), z5.null()]),
    git_diff: z5.union([z5.string(), z5.null()])
  }).partial(),
  z5.null()
]);
var Experiment = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  repo_info: RepoInfo.optional(),
  commit: z5.union([z5.string(), z5.null()]).optional(),
  base_exp_id: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  dataset_id: z5.union([z5.string(), z5.null()]).optional(),
  dataset_version: z5.union([z5.string(), z5.null()]).optional(),
  public: z5.boolean(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional()
});
var SpanType = z5.union([
  z5.enum(["llm", "score", "function", "eval", "task", "tool"]),
  z5.null()
]);
var SpanAttributes = z5.union([
  z5.object({ name: z5.union([z5.string(), z5.null()]), type: SpanType }).partial().passthrough(),
  z5.null()
]);
var ExperimentEvent = z5.object({
  id: z5.string(),
  _xact_id: z5.string(),
  created: z5.string().datetime({ offset: true }),
  _pagination_key: z5.union([z5.string(), z5.null()]).optional(),
  project_id: z5.string().uuid(),
  experiment_id: z5.string().uuid(),
  input: z5.unknown().optional(),
  output: z5.unknown().optional(),
  expected: z5.unknown().optional(),
  error: z5.unknown().optional(),
  scores: z5.union([z5.record(z5.union([z5.number(), z5.null()])), z5.null()]).optional(),
  metadata: z5.union([
    z5.object({ model: z5.union([z5.string(), z5.null()]) }).partial().passthrough(),
    z5.null()
  ]).optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  metrics: z5.union([z5.record(z5.number()), z5.null()]).optional(),
  context: z5.union([
    z5.object({
      caller_functionname: z5.union([z5.string(), z5.null()]),
      caller_filename: z5.union([z5.string(), z5.null()]),
      caller_lineno: z5.union([z5.number(), z5.null()])
    }).partial().passthrough(),
    z5.null()
  ]).optional(),
  span_id: z5.string(),
  span_parents: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  root_span_id: z5.string(),
  span_attributes: SpanAttributes.optional(),
  is_root: z5.union([z5.boolean(), z5.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var ExtendedSavedFunctionId = z5.union([
  z5.object({ type: z5.literal("function"), id: z5.string() }),
  z5.object({ type: z5.literal("global"), name: z5.string() }),
  z5.object({
    type: z5.literal("slug"),
    project_id: z5.string(),
    slug: z5.string()
  })
]);
var PromptBlockDataNullish = z5.union([
  z5.object({ type: z5.literal("completion"), content: z5.string() }),
  z5.object({
    type: z5.literal("chat"),
    messages: z5.array(ChatCompletionMessageParam),
    tools: z5.string().optional()
  }),
  z5.null()
]);
var ModelParams = z5.union([
  z5.object({
    use_cache: z5.boolean(),
    temperature: z5.number(),
    top_p: z5.number(),
    max_tokens: z5.number(),
    max_completion_tokens: z5.number(),
    frequency_penalty: z5.number(),
    presence_penalty: z5.number(),
    response_format: ResponseFormatNullish,
    tool_choice: z5.union([
      z5.literal("auto"),
      z5.literal("none"),
      z5.literal("required"),
      z5.object({
        type: z5.literal("function"),
        function: z5.object({ name: z5.string() })
      })
    ]),
    function_call: z5.union([
      z5.literal("auto"),
      z5.literal("none"),
      z5.object({ name: z5.string() })
    ]),
    n: z5.number(),
    stop: z5.array(z5.string()),
    reasoning_effort: z5.enum(["minimal", "low", "medium", "high"]),
    verbosity: z5.enum(["low", "medium", "high"])
  }).partial().passthrough(),
  z5.object({
    use_cache: z5.boolean().optional(),
    max_tokens: z5.number(),
    temperature: z5.number(),
    top_p: z5.number().optional(),
    top_k: z5.number().optional(),
    stop_sequences: z5.array(z5.string()).optional(),
    max_tokens_to_sample: z5.number().optional()
  }).passthrough(),
  z5.object({
    use_cache: z5.boolean(),
    temperature: z5.number(),
    maxOutputTokens: z5.number(),
    topP: z5.number(),
    topK: z5.number()
  }).partial().passthrough(),
  z5.object({
    use_cache: z5.boolean(),
    temperature: z5.number(),
    topK: z5.number()
  }).partial().passthrough(),
  z5.object({ use_cache: z5.boolean() }).partial().passthrough()
]);
var PromptOptionsNullish = z5.union([
  z5.object({ model: z5.string(), params: ModelParams, position: z5.string() }).partial(),
  z5.null()
]);
var PromptParserNullish = z5.union([
  z5.object({
    type: z5.literal("llm_classifier"),
    use_cot: z5.boolean(),
    choice_scores: z5.record(z5.number().gte(0).lte(1))
  }),
  z5.null()
]);
var SavedFunctionId = z5.union([
  z5.object({ type: z5.literal("function"), id: z5.string() }),
  z5.object({ type: z5.literal("global"), name: z5.string() })
]);
var PromptDataNullish = z5.union([
  z5.object({
    prompt: PromptBlockDataNullish,
    options: PromptOptionsNullish,
    parser: PromptParserNullish,
    tool_functions: z5.union([z5.array(SavedFunctionId), z5.null()]),
    origin: z5.union([
      z5.object({
        prompt_id: z5.string(),
        project_id: z5.string(),
        prompt_version: z5.string()
      }).partial(),
      z5.null()
    ])
  }).partial(),
  z5.null()
]);
var FunctionTypeEnumNullish = z5.union([
  z5.enum(["llm", "scorer", "task", "tool"]),
  z5.null()
]);
var FunctionIdRef = z5.object({}).partial().passthrough();
var PromptBlockData = z5.union([
  z5.object({ type: z5.literal("completion"), content: z5.string() }),
  z5.object({
    type: z5.literal("chat"),
    messages: z5.array(ChatCompletionMessageParam),
    tools: z5.string().optional()
  })
]);
var GraphNode = z5.union([
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("function"),
    function: FunctionIdRef
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("input")
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("output")
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("literal"),
    value: z5.unknown().optional()
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("btql"),
    expr: z5.string()
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("gate"),
    condition: z5.union([z5.string(), z5.null()]).optional()
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("aggregator")
  }),
  z5.object({
    description: z5.union([z5.string(), z5.null()]).optional(),
    position: z5.union([z5.object({ x: z5.number(), y: z5.number() }), z5.null()]).optional(),
    type: z5.literal("prompt_template"),
    prompt: PromptBlockData
  })
]);
var GraphEdge = z5.object({
  source: z5.object({ node: z5.string().max(1024), variable: z5.string() }),
  target: z5.object({ node: z5.string().max(1024), variable: z5.string() }),
  purpose: z5.enum(["control", "data", "messages"])
});
var GraphData = z5.object({
  type: z5.literal("graph"),
  nodes: z5.record(GraphNode),
  edges: z5.record(GraphEdge)
});
var FunctionData = z5.union([
  z5.object({ type: z5.literal("prompt") }),
  z5.object({
    type: z5.literal("code"),
    data: z5.union([
      z5.object({ type: z5.literal("bundle") }).and(CodeBundle),
      z5.object({
        type: z5.literal("inline"),
        runtime_context: z5.object({
          runtime: z5.enum(["node", "python"]),
          version: z5.string()
        }),
        code: z5.string()
      })
    ])
  }),
  GraphData,
  z5.object({
    type: z5.literal("remote_eval"),
    endpoint: z5.string(),
    eval_name: z5.string(),
    parameters: z5.object({}).partial().passthrough()
  }),
  z5.object({ type: z5.literal("global"), name: z5.string() })
]);
var Function2 = z5.object({
  id: z5.string().uuid(),
  _xact_id: z5.string(),
  project_id: z5.string().uuid(),
  log_id: z5.literal("p"),
  org_id: z5.string().uuid(),
  name: z5.string(),
  slug: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  function_data: FunctionData,
  origin: z5.union([
    z5.object({
      object_type: AclObjectType.and(z5.string()),
      object_id: z5.string().uuid(),
      internal: z5.union([z5.boolean(), z5.null()]).optional()
    }),
    z5.null()
  ]).optional(),
  function_schema: z5.union([
    z5.object({ parameters: z5.unknown(), returns: z5.unknown() }).partial(),
    z5.null()
  ]).optional()
});
var FunctionFormat = z5.enum(["llm", "code", "global", "graph"]);
var PromptData = z5.object({
  prompt: PromptBlockDataNullish,
  options: PromptOptionsNullish,
  parser: PromptParserNullish,
  tool_functions: z5.union([z5.array(SavedFunctionId), z5.null()]),
  origin: z5.union([
    z5.object({
      prompt_id: z5.string(),
      project_id: z5.string(),
      prompt_version: z5.string()
    }).partial(),
    z5.null()
  ])
}).partial();
var FunctionTypeEnum = z5.enum(["llm", "scorer", "task", "tool"]);
var FunctionId = z5.union([
  z5.object({ function_id: z5.string(), version: z5.string().optional() }),
  z5.object({
    project_name: z5.string(),
    slug: z5.string(),
    version: z5.string().optional()
  }),
  z5.object({ global_function: z5.string() }),
  z5.object({
    prompt_session_id: z5.string(),
    prompt_session_function_id: z5.string(),
    version: z5.string().optional()
  }),
  z5.object({
    inline_context: z5.object({
      runtime: z5.enum(["node", "python"]),
      version: z5.string()
    }),
    code: z5.string(),
    name: z5.union([z5.string(), z5.null()]).optional()
  }),
  z5.object({
    inline_prompt: PromptData.optional(),
    inline_function: z5.object({}).partial().passthrough(),
    function_type: FunctionTypeEnum.optional(),
    name: z5.union([z5.string(), z5.null()]).optional()
  }),
  z5.object({
    inline_prompt: PromptData,
    function_type: FunctionTypeEnum.optional(),
    name: z5.union([z5.string(), z5.null()]).optional()
  })
]);
var FunctionObjectType = z5.enum([
  "prompt",
  "tool",
  "scorer",
  "task",
  "agent"
]);
var FunctionOutputType = z5.enum(["completion", "score", "any"]);
var GitMetadataSettings = z5.object({
  collect: z5.enum(["all", "none", "some"]),
  fields: z5.array(
    z5.enum([
      "commit",
      "branch",
      "tag",
      "dirty",
      "author_name",
      "author_email",
      "commit_message",
      "commit_time",
      "git_diff"
    ])
  ).optional()
});
var Group = z5.object({
  id: z5.string().uuid(),
  org_id: z5.string().uuid(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  member_users: z5.union([z5.array(z5.string().uuid()), z5.null()]).optional(),
  member_groups: z5.union([z5.array(z5.string().uuid()), z5.null()]).optional()
});
var IfExists = z5.enum(["error", "ignore", "replace"]);
var InvokeParent = z5.union([
  z5.object({
    object_type: z5.enum(["project_logs", "experiment", "playground_logs"]),
    object_id: z5.string(),
    row_ids: z5.union([
      z5.object({
        id: z5.string(),
        span_id: z5.string(),
        root_span_id: z5.string()
      }),
      z5.null()
    ]).optional(),
    propagated_event: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional()
  }),
  z5.string()
]);
var StreamingMode = z5.union([z5.enum(["auto", "parallel"]), z5.null()]);
var InvokeFunction = FunctionId.and(
  z5.object({
    input: z5.unknown(),
    expected: z5.unknown(),
    metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]),
    tags: z5.union([z5.array(z5.string()), z5.null()]),
    messages: z5.array(ChatCompletionMessageParam),
    parent: InvokeParent,
    stream: z5.union([z5.boolean(), z5.null()]),
    mode: StreamingMode,
    strict: z5.union([z5.boolean(), z5.null()])
  }).partial()
);
var MessageRole = z5.enum([
  "system",
  "user",
  "assistant",
  "function",
  "tool",
  "model",
  "developer"
]);
var ObjectReference = z5.object({
  object_type: z5.enum([
    "project_logs",
    "experiment",
    "dataset",
    "prompt",
    "function",
    "prompt_session"
  ]),
  object_id: z5.string().uuid(),
  id: z5.string(),
  _xact_id: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional()
});
var OnlineScoreConfig = z5.union([
  z5.object({
    sampling_rate: z5.number().gte(0).lte(1),
    scorers: z5.array(SavedFunctionId),
    btql_filter: z5.union([z5.string(), z5.null()]).optional(),
    apply_to_root_span: z5.union([z5.boolean(), z5.null()]).optional(),
    apply_to_span_names: z5.union([z5.array(z5.string()), z5.null()]).optional(),
    skip_logging: z5.union([z5.boolean(), z5.null()]).optional()
  }),
  z5.null()
]);
var Organization = z5.object({
  id: z5.string().uuid(),
  name: z5.string(),
  api_url: z5.union([z5.string(), z5.null()]).optional(),
  is_universal_api: z5.union([z5.boolean(), z5.null()]).optional(),
  proxy_url: z5.union([z5.string(), z5.null()]).optional(),
  realtime_url: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional()
});
var ProjectSettings = z5.union([
  z5.object({
    comparison_key: z5.union([z5.string(), z5.null()]),
    baseline_experiment_id: z5.union([z5.string(), z5.null()]),
    spanFieldOrder: z5.union([
      z5.array(
        z5.object({
          object_type: z5.string(),
          column_id: z5.string(),
          position: z5.string(),
          layout: z5.union([z5.literal("full"), z5.literal("two_column"), z5.null()]).optional()
        })
      ),
      z5.null()
    ]),
    remote_eval_sources: z5.union([
      z5.array(
        z5.object({
          url: z5.string(),
          name: z5.string(),
          description: z5.union([z5.string(), z5.null()]).optional()
        })
      ),
      z5.null()
    ])
  }).partial(),
  z5.null()
]);
var Project = z5.object({
  id: z5.string().uuid(),
  org_id: z5.string().uuid(),
  name: z5.string(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  settings: ProjectSettings.optional()
});
var RetentionObjectType = z5.enum([
  "project_logs",
  "experiment",
  "dataset"
]);
var ProjectAutomation = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  config: z5.union([
    z5.object({
      event_type: z5.literal("logs"),
      btql_filter: z5.string(),
      interval_seconds: z5.number().gte(1).lte(2592e3),
      action: z5.object({ type: z5.literal("webhook"), url: z5.string() })
    }),
    z5.object({
      event_type: z5.literal("btql_export"),
      export_definition: z5.union([
        z5.object({ type: z5.literal("log_traces") }),
        z5.object({ type: z5.literal("log_spans") }),
        z5.object({ type: z5.literal("btql_query"), btql_query: z5.string() })
      ]),
      export_path: z5.string(),
      format: z5.enum(["jsonl", "parquet"]),
      interval_seconds: z5.number().gte(1).lte(2592e3),
      credentials: z5.object({
        type: z5.literal("aws_iam"),
        role_arn: z5.string(),
        external_id: z5.string()
      }),
      batch_size: z5.union([z5.number(), z5.null()]).optional()
    }),
    z5.object({
      event_type: z5.literal("retention"),
      object_type: RetentionObjectType,
      retention_days: z5.number().gte(0)
    })
  ])
});
var ProjectLogsEvent = z5.object({
  id: z5.string(),
  _xact_id: z5.string(),
  _pagination_key: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.string().datetime({ offset: true }),
  org_id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  log_id: z5.literal("g"),
  input: z5.unknown().optional(),
  output: z5.unknown().optional(),
  expected: z5.unknown().optional(),
  error: z5.unknown().optional(),
  scores: z5.union([z5.record(z5.union([z5.number(), z5.null()])), z5.null()]).optional(),
  metadata: z5.union([
    z5.object({ model: z5.union([z5.string(), z5.null()]) }).partial().passthrough(),
    z5.null()
  ]).optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  metrics: z5.union([z5.record(z5.number()), z5.null()]).optional(),
  context: z5.union([
    z5.object({
      caller_functionname: z5.union([z5.string(), z5.null()]),
      caller_filename: z5.union([z5.string(), z5.null()]),
      caller_lineno: z5.union([z5.number(), z5.null()])
    }).partial().passthrough(),
    z5.null()
  ]).optional(),
  span_id: z5.string(),
  span_parents: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  root_span_id: z5.string(),
  is_root: z5.union([z5.boolean(), z5.null()]).optional(),
  span_attributes: SpanAttributes.optional(),
  origin: ObjectReferenceNullish.optional()
});
var ProjectScoreType = z5.enum([
  "slider",
  "categorical",
  "weighted",
  "minimum",
  "maximum",
  "online",
  "free-form"
]);
var ProjectScoreCategory = z5.object({
  name: z5.string(),
  value: z5.number()
});
var ProjectScoreCategories = z5.union([
  z5.array(ProjectScoreCategory),
  z5.record(z5.number()),
  z5.array(z5.string()),
  z5.null()
]);
var ProjectScoreConfig = z5.union([
  z5.object({
    multi_select: z5.union([z5.boolean(), z5.null()]),
    destination: z5.union([z5.string(), z5.null()]),
    online: OnlineScoreConfig
  }).partial(),
  z5.null()
]);
var ProjectScore = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  user_id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  score_type: ProjectScoreType,
  categories: ProjectScoreCategories.optional(),
  config: ProjectScoreConfig.optional(),
  position: z5.union([z5.string(), z5.null()]).optional()
});
var ProjectTag = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  user_id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  color: z5.union([z5.string(), z5.null()]).optional(),
  position: z5.union([z5.string(), z5.null()]).optional()
});
var Prompt = z5.object({
  id: z5.string().uuid(),
  _xact_id: z5.string(),
  project_id: z5.string().uuid(),
  log_id: z5.literal("p"),
  org_id: z5.string().uuid(),
  name: z5.string(),
  slug: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional(),
  metadata: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional()
});
var PromptOptions = z5.object({ model: z5.string(), params: ModelParams, position: z5.string() }).partial();
var PromptSessionEvent = z5.object({
  id: z5.string(),
  _xact_id: z5.string(),
  created: z5.string().datetime({ offset: true }),
  _pagination_key: z5.union([z5.string(), z5.null()]).optional(),
  project_id: z5.string().uuid(),
  prompt_session_id: z5.string().uuid(),
  prompt_session_data: z5.unknown().optional(),
  prompt_data: z5.unknown().optional(),
  function_data: z5.unknown().optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  object_data: z5.unknown().optional(),
  completion: z5.unknown().optional(),
  tags: z5.union([z5.array(z5.string()), z5.null()]).optional()
});
var ResponseFormat = z5.union([
  z5.object({ type: z5.literal("json_object") }),
  z5.object({
    type: z5.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  z5.object({ type: z5.literal("text") })
]);
var Role = z5.object({
  id: z5.string().uuid(),
  org_id: z5.union([z5.string(), z5.null()]).optional(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  member_permissions: z5.union([
    z5.array(
      z5.object({
        permission: Permission,
        restrict_object_type: AclObjectType.optional()
      })
    ),
    z5.null()
  ]).optional(),
  member_roles: z5.union([z5.array(z5.string().uuid()), z5.null()]).optional()
});
var RunEval = z5.object({
  project_id: z5.string(),
  data: z5.union([
    z5.object({
      dataset_id: z5.string(),
      _internal_btql: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional()
    }),
    z5.object({
      project_name: z5.string(),
      dataset_name: z5.string(),
      _internal_btql: z5.union([z5.object({}).partial().passthrough(), z5.null()]).optional()
    }),
    z5.object({ data: z5.array(z5.unknown()) })
  ]),
  task: FunctionId.and(z5.unknown()),
  scores: z5.array(FunctionId),
  experiment_name: z5.string().optional(),
  metadata: z5.object({}).partial().passthrough().optional(),
  parent: InvokeParent.and(z5.unknown()).optional(),
  stream: z5.boolean().optional(),
  trial_count: z5.union([z5.number(), z5.null()]).optional(),
  is_public: z5.union([z5.boolean(), z5.null()]).optional(),
  timeout: z5.union([z5.number(), z5.null()]).optional(),
  max_concurrency: z5.union([z5.number(), z5.null()]).optional().default(10),
  base_experiment_name: z5.union([z5.string(), z5.null()]).optional(),
  base_experiment_id: z5.union([z5.string(), z5.null()]).optional(),
  git_metadata_settings: GitMetadataSettings.and(
    z5.union([z5.object({}).partial(), z5.null()])
  ).optional(),
  repo_info: RepoInfo.and(z5.unknown()).optional(),
  strict: z5.union([z5.boolean(), z5.null()]).optional(),
  stop_token: z5.union([z5.string(), z5.null()]).optional(),
  extra_messages: z5.string().optional(),
  tags: z5.array(z5.string()).optional()
});
var ServiceToken = z5.object({
  id: z5.string().uuid(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  preview_name: z5.string(),
  service_account_id: z5.union([z5.string(), z5.null()]).optional(),
  service_account_email: z5.union([z5.string(), z5.null()]).optional(),
  service_account_name: z5.union([z5.string(), z5.null()]).optional(),
  org_id: z5.union([z5.string(), z5.null()]).optional()
});
var SpanIFrame = z5.object({
  id: z5.string().uuid(),
  project_id: z5.string().uuid(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional(),
  name: z5.string(),
  description: z5.union([z5.string(), z5.null()]).optional(),
  url: z5.string(),
  post_message: z5.union([z5.boolean(), z5.null()]).optional()
});
var SSEConsoleEventData = z5.object({
  stream: z5.enum(["stderr", "stdout"]),
  message: z5.string()
});
var SSEProgressEventData = z5.object({
  id: z5.string(),
  object_type: FunctionObjectType,
  origin: ObjectReferenceNullish.and(z5.unknown()).optional(),
  format: FunctionFormat,
  output_type: FunctionOutputType,
  name: z5.string(),
  event: z5.enum([
    "reasoning_delta",
    "text_delta",
    "json_delta",
    "error",
    "console",
    "start",
    "done",
    "progress"
  ]),
  data: z5.string()
});
var ToolFunctionDefinition = z5.object({
  type: z5.literal("function"),
  function: z5.object({
    name: z5.string(),
    description: z5.string().optional(),
    parameters: z5.object({}).partial().passthrough().optional(),
    strict: z5.union([z5.boolean(), z5.null()]).optional()
  })
});
var User = z5.object({
  id: z5.string().uuid(),
  given_name: z5.union([z5.string(), z5.null()]).optional(),
  family_name: z5.union([z5.string(), z5.null()]).optional(),
  email: z5.union([z5.string(), z5.null()]).optional(),
  avatar_url: z5.union([z5.string(), z5.null()]).optional(),
  created: z5.union([z5.string(), z5.null()]).optional()
});
var ViewDataSearch = z5.union([
  z5.object({
    filter: z5.union([z5.array(z5.unknown()), z5.null()]),
    tag: z5.union([z5.array(z5.unknown()), z5.null()]),
    match: z5.union([z5.array(z5.unknown()), z5.null()]),
    sort: z5.union([z5.array(z5.unknown()), z5.null()])
  }).partial(),
  z5.null()
]);
var ViewData = z5.union([
  z5.object({ search: ViewDataSearch }).partial(),
  z5.null()
]);
var ViewOptions = z5.union([
  z5.object({
    viewType: z5.literal("monitor"),
    options: z5.object({
      spanType: z5.union([z5.enum(["range", "frame"]), z5.null()]),
      rangeValue: z5.union([z5.string(), z5.null()]),
      frameStart: z5.union([z5.string(), z5.null()]),
      frameEnd: z5.union([z5.string(), z5.null()]),
      tzUTC: z5.union([z5.boolean(), z5.null()]),
      chartVisibility: z5.union([z5.record(z5.boolean()), z5.null()]),
      projectId: z5.union([z5.string(), z5.null()]),
      type: z5.union([z5.enum(["project", "experiment"]), z5.null()]),
      groupBy: z5.union([z5.string(), z5.null()])
    }).partial()
  }),
  z5.object({
    columnVisibility: z5.union([z5.record(z5.boolean()), z5.null()]),
    columnOrder: z5.union([z5.array(z5.string()), z5.null()]),
    columnSizing: z5.union([z5.record(z5.number()), z5.null()]),
    grouping: z5.union([z5.string(), z5.null()]),
    rowHeight: z5.union([z5.string(), z5.null()]),
    tallGroupRows: z5.union([z5.boolean(), z5.null()]),
    layout: z5.union([z5.string(), z5.null()]),
    chartHeight: z5.union([z5.number(), z5.null()]),
    excludedMeasures: z5.union([
      z5.array(
        z5.object({
          type: z5.enum(["none", "score", "metric", "metadata"]),
          value: z5.string()
        })
      ),
      z5.null()
    ]),
    yMetric: z5.union([
      z5.object({
        type: z5.enum(["none", "score", "metric", "metadata"]),
        value: z5.string()
      }),
      z5.null()
    ]),
    xAxis: z5.union([
      z5.object({
        type: z5.enum(["none", "score", "metric", "metadata"]),
        value: z5.string()
      }),
      z5.null()
    ]),
    symbolGrouping: z5.union([
      z5.object({
        type: z5.enum(["none", "score", "metric", "metadata"]),
        value: z5.string()
      }),
      z5.null()
    ]),
    xAxisAggregation: z5.union([z5.string(), z5.null()]),
    chartAnnotations: z5.union([
      z5.array(z5.object({ id: z5.string(), text: z5.string() })),
      z5.null()
    ]),
    timeRangeFilter: z5.union([
      z5.string(),
      z5.object({ from: z5.string(), to: z5.string() }),
      z5.null()
    ])
  }).partial(),
  z5.null()
]);
var View = z5.object({
  id: z5.string().uuid(),
  object_type: AclObjectType.and(z5.string()),
  object_id: z5.string().uuid(),
  view_type: z5.enum([
    "projects",
    "experiments",
    "experiment",
    "playgrounds",
    "playground",
    "datasets",
    "dataset",
    "prompts",
    "tools",
    "scorers",
    "logs",
    "agents",
    "monitor"
  ]),
  name: z5.string(),
  created: z5.union([z5.string(), z5.null()]).optional(),
  view_data: ViewData.optional(),
  options: ViewOptions.optional(),
  user_id: z5.union([z5.string(), z5.null()]).optional(),
  deleted_at: z5.union([z5.string(), z5.null()]).optional()
});

// src/logger.ts
import { waitUntil } from "@vercel/functions";
import Mustache2 from "mustache";
import { z as z7, ZodError } from "zod";

// src/functions/stream.ts
import {
  createParser
} from "eventsource-parser";
import { z as z6 } from "zod/v3";
var braintrustStreamChunkSchema = z6.union([
  z6.object({
    type: z6.literal("text_delta"),
    data: z6.string()
  }),
  z6.object({
    type: z6.literal("reasoning_delta"),
    data: z6.string()
  }),
  z6.object({
    type: z6.literal("json_delta"),
    data: z6.string()
  }),
  z6.object({
    type: z6.literal("error"),
    data: z6.string()
  }),
  z6.object({
    type: z6.literal("console"),
    data: SSEConsoleEventData
  }),
  z6.object({
    type: z6.literal("progress"),
    data: SSEProgressEventData
  }),
  z6.object({
    type: z6.literal("start"),
    data: z6.string()
  }),
  z6.object({
    type: z6.literal("done"),
    data: z6.string()
  })
]);
var BraintrustStream = class _BraintrustStream {
  stream;
  memoizedFinalValue;
  signal;
  constructor(baseStream, { signal } = {}) {
    this.signal = signal;
    this.stream = baseStream.pipeThrough(btStreamParser(), { signal });
  }
  /**
   * Copy the stream. This returns a new stream that shares the same underlying
   * stream (via `tee`). Since streams are consumed in Javascript, use `copy()` if you
   * need to use the stream multiple times.
   *
   * @returns A new stream that you can independently consume.
   */
  copy() {
    const [newStream, copyStream] = this.stream.tee();
    this.stream = copyStream;
    return new _BraintrustStream(newStream, { signal: this.signal });
  }
  /**
   * Get the underlying ReadableStream.
   *
   * @returns The underlying ReadableStream<BraintrustStreamChunk>.
   */
  toReadableStream() {
    return this.stream;
  }
  /**
   * Returns an async iterator for the BraintrustStream.
   * This allows for easy consumption of the stream using a for-await...of loop.
   *
   * @returns An async iterator that yields BraintrustStreamChunk objects.
   */
  [Symbol.asyncIterator]() {
    const reader = this.stream.getReader();
    return {
      async next() {
        const { done, value } = await reader.read();
        if (done) {
          reader.releaseLock();
          return { done: true, value: void 0 };
        }
        return { done: false, value };
      },
      async return() {
        reader.releaseLock();
        return { done: true, value: void 0 };
      },
      async throw(error2) {
        reader.releaseLock();
        throw error2;
      }
    };
  }
  /**
   * Get the final value of the stream. The final value is the concatenation of all
   * the chunks in the stream, deserialized into a string or JSON object, depending on
   * the value's type.
   *
   * This function returns a promise that resolves when the stream is closed, and
   * contains the final value. Multiple calls to `finalValue()` will return the same
   * promise, so it is safe to call this multiple times.
   *
   * This function consumes the stream, so if you need to use the stream multiple
   * times, you should call `copy()` first.
   *
   * @returns A promise that resolves with the final value of the stream or `undefined` if the stream is empty.
   */
  finalValue() {
    if (this.memoizedFinalValue) {
      return this.memoizedFinalValue;
    }
    this.memoizedFinalValue = new Promise((resolve, reject2) => {
      this.stream.pipeThrough(createFinalValuePassThroughStream(resolve, reject2), {
        signal: this.signal
      }).pipeTo(devNullWritableStream(), { signal: this.signal }).catch(reject2);
    });
    return this.memoizedFinalValue;
  }
  static parseRawEvent(event) {
    switch (event.event) {
      case "text_delta":
        return {
          type: "text_delta",
          data: JSON.parse(event.data)
        };
      case "reasoning_delta":
        return {
          type: "reasoning_delta",
          data: JSON.parse(event.data)
        };
      case "json_delta":
        return {
          type: "json_delta",
          data: event.data
        };
      case "error":
        return {
          type: "error",
          data: JSON.parse(event.data)
        };
      case "progress":
        return {
          type: "progress",
          data: SSEProgressEventData.parse(JSON.parse(event.data))
        };
      case "console":
        return {
          type: "console",
          data: SSEConsoleEventData.parse(JSON.parse(event.data))
        };
      case "start":
        return {
          type: "start",
          data: ""
        };
      case "done":
        return {
          type: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
  static serializeRawEvent(event) {
    switch (event.type) {
      case "text_delta":
        return {
          event: "text_delta",
          data: JSON.stringify(event.data)
        };
      case "reasoning_delta":
        return {
          event: "reasoning_delta",
          data: JSON.stringify(event.data)
        };
      case "json_delta":
        return {
          event: "json_delta",
          data: event.data
        };
      case "error":
        return {
          event: "error",
          data: JSON.stringify(event.data)
        };
      case "progress":
        return {
          event: "progress",
          data: JSON.stringify(event.data)
        };
      case "console":
        return {
          event: "console",
          data: JSON.stringify(event.data)
        };
      case "start":
        return {
          event: "start",
          data: ""
        };
      case "done":
        return {
          event: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
};
function btStreamParser() {
  const decoder = new TextDecoder();
  let parser;
  return new TransformStream({
    async start(controller) {
      parser = createParser((event) => {
        if (event.type === "reconnect-interval") {
          return;
        }
        const parsed = CallEvent.safeParse(event);
        if (!parsed.success) {
          throw new Error(`Failed to parse event: ${parsed.error}`);
        }
        controller.enqueue(BraintrustStream.parseRawEvent(parsed.data));
      });
    },
    async transform(chunk, controller) {
      if (chunk instanceof Uint8Array) {
        parser.feed(decoder.decode(chunk));
      } else if (typeof chunk === "string") {
        parser.feed(chunk);
      } else {
        controller.enqueue(chunk);
      }
    },
    async flush(controller) {
      controller.terminate();
    }
  });
}
function createFinalValuePassThroughStream(onFinal, onError) {
  const decoder = new TextDecoder();
  const textChunks = [];
  const jsonChunks = [];
  const reasoningChunks = [];
  const transformStream = new TransformStream({
    transform(chunk, controller) {
      if (typeof chunk === "string") {
        textChunks.push(chunk);
        controller.enqueue({
          type: "text_delta",
          data: chunk
        });
      } else if (chunk instanceof Uint8Array) {
        textChunks.push(decoder.decode(chunk));
        controller.enqueue({
          type: "text_delta",
          data: decoder.decode(chunk)
        });
      } else if (braintrustStreamChunkSchema.safeParse(chunk).success) {
        const chunkType = chunk.type;
        switch (chunkType) {
          case "text_delta":
            textChunks.push(chunk.data);
            break;
          case "json_delta":
            jsonChunks.push(chunk.data);
            break;
          case "reasoning_delta":
            reasoningChunks.push(chunk.data);
            break;
          case "error":
            onError(chunk.data);
            break;
          case "progress":
          case "start":
          case "done":
          case "console":
            break;
          default:
            const _type = chunkType;
            onError(`Unknown chunk type: ${_type}`);
        }
        controller.enqueue(chunk);
      } else {
        onError(`Unknown chunk type ${JSON.stringify(chunk)}`);
      }
    },
    flush(controller) {
      if (jsonChunks.length > 0) {
        onFinal(JSON.parse(jsonChunks.join("")));
      } else if (textChunks.length > 0) {
        onFinal(textChunks.join(""));
      } else if (reasoningChunks.length > 0) {
        onFinal(reasoningChunks.join(""));
      } else {
        onFinal(void 0);
      }
      controller.terminate();
    }
  });
  return transformStream;
}
function devNullWritableStream() {
  return new WritableStream({
    write(chunk) {
    },
    close() {
    },
    abort(reason) {
    },
    start(controller) {
    }
  });
}

// src/prompt-cache/disk-cache.ts
function canUseDiskCache() {
  return !!(isomorph_default.hash && isomorph_default.gunzip && isomorph_default.gzip && isomorph_default.stat && isomorph_default.readFile && isomorph_default.writeFile && isomorph_default.utimes && isomorph_default.readdir && isomorph_default.mkdir && isomorph_default.unlink && isomorph_default.homedir);
}
var DiskCache = class {
  dir;
  max;
  mkdir;
  logWarnings;
  /**
   * Creates a new DiskCache instance.
   * @param options - Configuration options for the cache.
   */
  constructor(options) {
    if (!canUseDiskCache()) {
      throw new Error("Disk cache is not supported on this platform");
    }
    this.dir = options.cacheDir;
    this.max = options.max;
    this.logWarnings = options.logWarnings ?? true;
    this.mkdir = options.mkdir ?? true;
  }
  getEntryPath(key) {
    const hashed = isomorph_default.hash(key);
    return isomorph_default.pathJoin(this.dir, hashed);
  }
  /**
   * Retrieves a value from the cache.
   * Updates the entry's access time when read.
   *
   * @param key - The key to look up in the cache.
   * @returns The cached value if found, undefined otherwise.
   */
  async get(key) {
    try {
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gunzip(await isomorph_default.readFile(filePath));
      await isomorph_default.utimes(filePath, /* @__PURE__ */ new Date(), /* @__PURE__ */ new Date());
      return JSON.parse(data.toString());
    } catch (e) {
      if (e.code === "ENOENT") {
        return void 0;
      }
      if (this.logWarnings) {
        console.warn("Failed to read from disk cache", e);
      }
      return void 0;
    }
  }
  /**
   * Stores a value in the cache.
   * If the cache is at its maximum size, the least recently used entries will be evicted.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   */
  async set(key, value) {
    try {
      if (this.mkdir) {
        await isomorph_default.mkdir(this.dir, { recursive: true });
      }
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gzip(JSON.stringify(value));
      await isomorph_default.writeFile(filePath, data);
      await this.evictOldestIfFull();
    } catch (e) {
      if (this.logWarnings) {
        console.warn("Failed to write to disk cache", e);
      }
      return;
    }
  }
  async evictOldestIfFull() {
    if (!this.max) {
      return;
    }
    const files = await isomorph_default.readdir(this.dir);
    const paths = files.map((file) => isomorph_default.pathJoin(this.dir, file));
    if (paths.length <= this.max) {
      return;
    }
    const stats = await Promise.all(
      paths.map(async (path3) => {
        const stat2 = await isomorph_default.stat(path3);
        return {
          path: path3,
          mtime: stat2.mtime.getTime()
        };
      })
    );
    stats.sort((a, b) => a.mtime - b.mtime);
    const toRemove = stats.slice(0, stats.length - this.max);
    await Promise.all(toRemove.map((stat2) => isomorph_default.unlink(stat2.path)));
  }
};

// src/prompt-cache/lru-cache.ts
var LRUCache = class {
  cache;
  maxSize;
  constructor(options = {}) {
    this.cache = /* @__PURE__ */ new Map();
    this.maxSize = options.max;
  }
  /**
   * Retrieves a value from the cache.
   * If the key exists, the item is marked as most recently used.
   *
   * @param key - The key to look up.
   * @returns The cached value if found, undefined otherwise.
   */
  get(key) {
    const value = this.cache.get(key);
    if (value === void 0) {
      return void 0;
    }
    this.cache.delete(key);
    this.cache.set(key, value);
    return value;
  }
  /**
   * Stores a value in the cache.
   * If the key already exists, the value is updated and marked as most recently used.
   * If the cache is at its maximum size, the least recently used item is evicted.
   *
   * @param key - The key to store.
   * @param value - The value to store.
   */
  set(key, value) {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.maxSize && this.cache.size >= this.maxSize) {
      const first = this.cache.keys().next().value;
      this.cache.delete(first);
    }
    this.cache.set(key, value);
  }
  /**
   * Removes all items from the cache.
   */
  clear() {
    this.cache.clear();
  }
};

// src/prompt-cache/prompt-cache.ts
function createCacheKey(key) {
  if (key.id) {
    return `id:${key.id}`;
  }
  const prefix = key.projectId ?? key.projectName;
  if (!prefix) {
    throw new Error("Either projectId or projectName must be provided");
  }
  if (!key.slug) {
    throw new Error("Slug must be provided when not using ID");
  }
  return `${prefix}:${key.slug}:${key.version ?? "latest"}`;
}
var PromptCache = class {
  memoryCache;
  diskCache;
  constructor(options) {
    this.memoryCache = options.memoryCache;
    this.diskCache = options.diskCache;
  }
  /**
   * Retrieves a prompt from the cache.
   * First checks the in-memory LRU cache, then falls back to checking the disk cache if available.
   */
  async get(key) {
    const cacheKey = createCacheKey(key);
    const memoryPrompt = this.memoryCache.get(cacheKey);
    if (memoryPrompt !== void 0) {
      return memoryPrompt;
    }
    if (this.diskCache) {
      const diskPrompt = await this.diskCache.get(cacheKey);
      if (!diskPrompt) {
        return void 0;
      }
      this.memoryCache.set(cacheKey, diskPrompt);
      return diskPrompt;
    }
    return void 0;
  }
  /**
   * Stores a prompt in the cache.
   * Writes to the in-memory cache and the disk cache if available.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   * @throws If there is an error writing to the disk cache.
   */
  async set(key, value) {
    const cacheKey = createCacheKey(key);
    this.memoryCache.set(cacheKey, value);
    if (this.diskCache) {
      await this.diskCache.set(cacheKey, value);
    }
  }
};

// src/util.ts
var GLOBAL_PROJECT = "Global";
function runCatchFinally(f, catchF, finallyF) {
  let runSyncCleanup = true;
  try {
    const ret = f();
    if (ret instanceof Promise) {
      runSyncCleanup = false;
      return ret.catch(catchF).finally(finallyF);
    } else {
      return ret;
    }
  } catch (e) {
    return catchF(e);
  } finally {
    if (runSyncCleanup) {
      finallyF();
    }
  }
}
function getCurrentUnixTimestamp() {
  return (/* @__PURE__ */ new Date()).getTime() / 1e3;
}
function isEmpty(a) {
  return a === void 0 || a === null;
}
var LazyValue = class {
  callable;
  resolvedValue = void 0;
  value = {
    computedState: "uninitialized"
  };
  constructor(callable) {
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    this.value = {
      computedState: "in_progress",
      val: this.callable().then((x) => {
        this.value.computedState = "succeeded";
        this.resolvedValue = x;
        return x;
      })
    };
    return this.value.val;
  }
  getSync() {
    return {
      resolved: this.value.computedState === "succeeded",
      value: this.resolvedValue
    };
  }
  // If this is true, the caller should be able to obtain the LazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
};
var SyncLazyValue = class {
  callable;
  value = {
    computedState: "uninitialized"
  };
  constructor(callable) {
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    const result = this.callable();
    this.value = { computedState: "succeeded", val: result };
    return result;
  }
  // If this is true, the caller should be able to obtain the SyncLazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
};
function addAzureBlobHeaders(headers, url) {
  if (url.includes("blob.core.windows.net")) {
    headers["x-ms-blob-type"] = "BlockBlob";
  }
}
var InternalAbortError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "InternalAbortError";
  }
};
function filterFrom(record, keys) {
  const out = {};
  for (const k of Object.keys(record)) {
    if (!keys.includes(k)) {
      out[k] = record[k];
    }
  }
  return out;
}
function objectIsEmpty(obj) {
  return !obj || Object.keys(obj).length === 0;
}

// src/mustache-utils.ts
import Mustache from "mustache";
function lintTemplate(template, context2) {
  const variables = getMustacheVars(template);
  for (const variable of variables) {
    const arrPathsReplaced = variable[1].replaceAll(/\.\d+/g, ".0");
    const fieldExists = getObjValueByPath(context2, arrPathsReplaced.split(".")) !== void 0;
    if (!fieldExists) {
      throw new Error(`Variable '${variable[1]}' does not exist.`);
    }
  }
}
function getMustacheVars(prompt) {
  try {
    return Mustache.parse(prompt).filter(
      (span) => span[0] === "name" || span[0] === "&"
    );
  } catch {
    return [];
  }
}

// src/logger.ts
var BRAINTRUST_ATTACHMENT = BraintrustAttachmentReference.shape.type.value;
var EXTERNAL_ATTACHMENT = ExternalAttachmentReference.shape.type.value;
var BRAINTRUST_PARAMS = Object.keys(BraintrustModelParams.shape);
var REDACTION_FIELDS = [
  "input",
  "output",
  "expected",
  "metadata",
  "context",
  "scores",
  "metrics"
];
var MaskingError = class {
  constructor(fieldName, errorType) {
    this.fieldName = fieldName;
    this.errorType = errorType;
  }
  get errorMsg() {
    return `ERROR: Failed to mask field '${this.fieldName}' - ${this.errorType}`;
  }
};
function applyMaskingToField(maskingFunction, data, fieldName) {
  try {
    return maskingFunction(data);
  } catch (error2) {
    const errorType = error2 instanceof Error ? error2.constructor.name : "Error";
    if (fieldName === "scores" || fieldName === "metrics") {
      return new MaskingError(fieldName, errorType);
    }
    if (fieldName === "metadata") {
      return {
        error: `ERROR: Failed to mask field '${fieldName}' - ${errorType}`
      };
    }
    return `ERROR: Failed to mask field '${fieldName}' - ${errorType}`;
  }
}
var NoopSpan = class {
  id;
  spanId;
  rootSpanId;
  spanParents;
  kind = "span";
  constructor() {
    this.id = "";
    this.spanId = "";
    this.rootSpanId = "";
    this.spanParents = [];
  }
  log(_) {
  }
  logFeedback(_event) {
  }
  traced(callback, _1) {
    return callback(this);
  }
  startSpan(_1) {
    return this;
  }
  end(args) {
    return args?.endTime ?? getCurrentUnixTimestamp();
  }
  async export() {
    return "";
  }
  async permalink() {
    return NOOP_SPAN_PERMALINK;
  }
  link() {
    return NOOP_SPAN_PERMALINK;
  }
  async flush() {
  }
  close(args) {
    return this.end(args);
  }
  setAttributes(_args) {
  }
  startSpanWithParents(_spanId, _spanParents, _args) {
    return this;
  }
  state() {
    return _internalGetGlobalState();
  }
};
var NOOP_SPAN = new NoopSpan();
var NOOP_SPAN_PERMALINK = "https://braintrust.dev/noop-span";
var loginSchema = z7.strictObject({
  appUrl: z7.string(),
  appPublicUrl: z7.string(),
  orgName: z7.string(),
  apiUrl: z7.string(),
  proxyUrl: z7.string(),
  loginToken: z7.string(),
  orgId: z7.string().nullish(),
  gitMetadataSettings: GitMetadataSettings.nullish()
});
var stateNonce = 0;
var BraintrustState = class _BraintrustState {
  constructor(loginParams) {
    this.loginParams = loginParams;
    this.id = `${(/* @__PURE__ */ new Date()).toLocaleString()}-${stateNonce++}`;
    this.currentExperiment = void 0;
    this.currentLogger = void 0;
    this.currentParent = isomorph_default.newAsyncLocalStorage();
    this.currentSpan = isomorph_default.newAsyncLocalStorage();
    if (loginParams.fetch) {
      this.fetch = loginParams.fetch;
    }
    const defaultGetLogConn = async () => {
      await this.login({});
      return this.apiConn();
    };
    this._bgLogger = new SyncLazyValue(
      () => new HTTPBackgroundLogger(new LazyValue(defaultGetLogConn), loginParams)
    );
    this.resetLoginInfo();
    const memoryCache = new LRUCache({
      max: Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_MEMORY_MAX")) ?? 1 << 10
    });
    const diskCache = canUseDiskCache() ? new DiskCache({
      cacheDir: isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DIR") ?? `${isomorph_default.getEnv("HOME") ?? isomorph_default.homedir()}/.braintrust/prompt_cache`,
      max: Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DISK_MAX")) ?? 1 << 20
    }) : void 0;
    this.promptCache = new PromptCache({ memoryCache, diskCache });
  }
  id;
  currentExperiment;
  // Note: the value of IsAsyncFlush doesn't really matter here, since we
  // (safely) dynamically cast it whenever retrieving the logger.
  currentLogger;
  currentParent;
  currentSpan;
  // Any time we re-log in, we directly update the apiConn inside the logger.
  // This is preferable to replacing the whole logger, which would create the
  // possibility of multiple loggers floating around, which may not log in a
  // deterministic order.
  _bgLogger;
  _overrideBgLogger = null;
  appUrl = null;
  appPublicUrl = null;
  loginToken = null;
  orgId = null;
  orgName = null;
  apiUrl = null;
  proxyUrl = null;
  loggedIn = false;
  gitMetadataSettings;
  fetch = globalThis.fetch;
  _appConn = null;
  _apiConn = null;
  _proxyConn = null;
  promptCache;
  resetLoginInfo() {
    this.appUrl = null;
    this.appPublicUrl = null;
    this.loginToken = null;
    this.orgId = null;
    this.orgName = null;
    this.apiUrl = null;
    this.proxyUrl = null;
    this.loggedIn = false;
    this.gitMetadataSettings = void 0;
    this._appConn = null;
    this._apiConn = null;
    this._proxyConn = null;
  }
  copyLoginInfo(other) {
    this.appUrl = other.appUrl;
    this.appPublicUrl = other.appPublicUrl;
    this.loginToken = other.loginToken;
    this.orgId = other.orgId;
    this.orgName = other.orgName;
    this.apiUrl = other.apiUrl;
    this.proxyUrl = other.proxyUrl;
    this.loggedIn = other.loggedIn;
    this.gitMetadataSettings = other.gitMetadataSettings;
    this._appConn = other._appConn;
    this._apiConn = other._apiConn;
    this.loginReplaceApiConn(this.apiConn());
    this._proxyConn = other._proxyConn;
  }
  serialize() {
    if (!this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without being logged in"
      );
    }
    if (!this.appUrl || !this.appPublicUrl || !this.apiUrl || !this.proxyUrl || !this.orgName || !this.loginToken || !this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without all login attributes"
      );
    }
    return {
      appUrl: this.appUrl,
      appPublicUrl: this.appPublicUrl,
      loginToken: this.loginToken,
      orgId: this.orgId,
      orgName: this.orgName,
      apiUrl: this.apiUrl,
      proxyUrl: this.proxyUrl,
      gitMetadataSettings: this.gitMetadataSettings
    };
  }
  static deserialize(serialized, opts) {
    const serializedParsed = loginSchema.safeParse(serialized);
    if (!serializedParsed.success) {
      throw new Error(
        `Cannot deserialize BraintrustState: ${serializedParsed.error.message}`
      );
    }
    const state = new _BraintrustState({ ...opts });
    for (const key of Object.keys(loginSchema.shape)) {
      state[key] = serializedParsed.data[key];
    }
    if (!state.loginToken) {
      throw new Error(
        "Cannot deserialize BraintrustState without a login token"
      );
    }
    state.apiConn().set_token(state.loginToken);
    state.apiConn().make_long_lived();
    state.appConn().set_token(state.loginToken);
    if (state.proxyUrl) {
      state.proxyConn().make_long_lived();
      state.proxyConn().set_token(state.loginToken);
    }
    state.loggedIn = true;
    state.loginReplaceApiConn(state.apiConn());
    return state;
  }
  setFetch(fetch2) {
    this.loginParams.fetch = fetch2;
    this.fetch = fetch2;
    this._apiConn?.setFetch(fetch2);
    this._appConn?.setFetch(fetch2);
  }
  setMaskingFunction(maskingFunction) {
    this.bgLogger().setMaskingFunction(maskingFunction);
  }
  async login(loginParams) {
    if (this.apiUrl && !loginParams.forceLogin) {
      return;
    }
    const newState = await loginToState({
      ...this.loginParams,
      ...Object.fromEntries(
        Object.entries(loginParams).filter(([k, v]) => !isEmpty(v))
      )
    });
    this.copyLoginInfo(newState);
  }
  appConn() {
    if (!this._appConn) {
      if (!this.appUrl) {
        throw new Error("Must initialize appUrl before requesting appConn");
      }
      this._appConn = new HTTPConnection(this.appUrl, this.fetch);
    }
    return this._appConn;
  }
  apiConn() {
    if (!this._apiConn) {
      if (!this.apiUrl) {
        throw new Error("Must initialize apiUrl before requesting apiConn");
      }
      this._apiConn = new HTTPConnection(this.apiUrl, this.fetch);
    }
    return this._apiConn;
  }
  proxyConn() {
    if (!this.proxyUrl) {
      return this.apiConn();
    }
    if (!this._proxyConn) {
      if (!this.proxyUrl) {
        throw new Error("Must initialize proxyUrl before requesting proxyConn");
      }
      this._proxyConn = new HTTPConnection(this.proxyUrl, this.fetch);
    }
    return this._proxyConn;
  }
  bgLogger() {
    if (this._overrideBgLogger) {
      return this._overrideBgLogger;
    }
    return this._bgLogger.get();
  }
  httpLogger() {
    return this._bgLogger.get();
  }
  setOverrideBgLogger(logger) {
    this._overrideBgLogger = logger;
  }
  // Should only be called by the login function.
  loginReplaceApiConn(apiConn) {
    this._bgLogger.get().internalReplaceApiConn(apiConn);
  }
  disable() {
    this._bgLogger.get().disable();
  }
  enforceQueueSizeLimit(enforce) {
    this._bgLogger.get().enforceQueueSizeLimit(enforce);
  }
};
var _globalState;
function useTestBackgroundLogger() {
  const state = _internalGetGlobalState();
  if (!state) {
    throw new Error("global state not set yet");
  }
  const logger = new TestBackgroundLogger();
  state.setOverrideBgLogger(logger);
  return logger;
}
function clearTestBackgroundLogger() {
  _internalGetGlobalState()?.setOverrideBgLogger(null);
}
function initTestExperiment(experimentName, projectName) {
  setInitialTestState();
  const state = _internalGetGlobalState();
  const project = projectName ?? experimentName;
  const lazyMetadata = new LazyValue(
    async () => ({
      project: { id: project, name: project, fullInfo: {} },
      experiment: { id: experimentName, name: experimentName, fullInfo: {} }
    })
  );
  return new Experiment2(state, lazyMetadata);
}
function _internalSetInitialState() {
  if (_globalState) {
    console.warn(
      "global state already set, should only call _internalSetInitialState once"
    );
    return;
  }
  _globalState = globalThis.__inherited_braintrust_state || new BraintrustState({
    /*empty login options*/
  });
}
var _internalGetGlobalState = () => _globalState;
var FailedHTTPResponse = class extends Error {
  status;
  text;
  data;
  constructor(status, text, data) {
    super(`${status}: ${text} (${data})`);
    this.status = status;
    this.text = text;
    this.data = data;
  }
};
async function checkResponse(resp) {
  if (resp.ok) {
    return resp;
  } else {
    throw new FailedHTTPResponse(
      resp.status,
      resp.statusText,
      await resp.text()
    );
  }
}
var HTTPConnection = class _HTTPConnection {
  base_url;
  token;
  headers;
  fetch;
  constructor(base_url, fetch2) {
    this.base_url = base_url;
    this.token = null;
    this.headers = {};
    this._reset();
    this.fetch = fetch2;
  }
  setFetch(fetch2) {
    this.fetch = fetch2;
  }
  async ping() {
    try {
      const resp = await this.get("ping");
      return resp.status === 200;
    } catch (e) {
      return false;
    }
  }
  make_long_lived() {
    this._reset();
  }
  static sanitize_token(token) {
    return token.trim();
  }
  set_token(token) {
    token = _HTTPConnection.sanitize_token(token);
    this.token = token;
    this._reset();
  }
  // As far as I can tell, you cannot set the retry/backoff factor here
  _reset() {
    this.headers = {};
    if (this.token) {
      this.headers["Authorization"] = `Bearer ${this.token}`;
    }
  }
  async get(path3, params = void 0, config) {
    const { headers, ...rest } = config || {};
    const url = new URL(_urljoin(this.base_url, path3));
    url.search = new URLSearchParams(
      params ? Object.entries(params).filter(([_, v]) => v !== void 0).flatMap(
        ([k, v]) => v !== void 0 ? typeof v === "string" ? [[k, v]] : v.map((x) => [k, x]) : []
      ) : []
    ).toString();
    const this_fetch = this.fetch;
    const this_headers = this.headers;
    return await checkResponse(
      // Using toString() here makes it work with isomorphic fetch
      await this_fetch(url.toString(), {
        headers: {
          Accept: "application/json",
          ...this_headers,
          ...headers
        },
        keepalive: true,
        ...rest
      })
    );
  }
  async post(path3, params, config) {
    const { headers, ...rest } = config || {};
    const this_fetch = this.fetch;
    const this_base_url = this.base_url;
    const this_headers = this.headers;
    return await checkResponse(
      await this_fetch(_urljoin(this_base_url, path3), {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          ...this_headers,
          ...headers
        },
        body: typeof params === "string" ? params : params ? JSON.stringify(params) : void 0,
        keepalive: true,
        ...rest
      })
    );
  }
  async get_json(object_type, args = void 0, retries = 0) {
    const tries = retries + 1;
    for (let i = 0; i < tries; i++) {
      try {
        const resp = await this.get(`${object_type}`, args);
        return await resp.json();
      } catch (e) {
        if (i < tries - 1) {
          console.log(
            `Retrying API request ${object_type} ${JSON.stringify(args)} ${e.status} ${e.text}`
          );
          continue;
        }
        throw e;
      }
    }
  }
  async post_json(object_type, args = void 0) {
    const resp = await this.post(`${object_type}`, args, {
      headers: { "Content-Type": "application/json" }
    });
    return await resp.json();
  }
};
var BaseAttachment = class {
  reference;
};
var Attachment = class extends BaseAttachment {
  /**
   * The object that replaces this `Attachment` at upload time.
   */
  reference;
  uploader;
  _data;
  state;
  // For debug logging only.
  dataDebugString;
  /**
   * Construct an attachment.
   *
   * @param param A parameter object with:
   *
   * `data`: A string representing the path of the file on disk, or a
   * `Blob`/`ArrayBuffer` with the file's contents. The caller is responsible
   * for ensuring the file/blob/buffer is not modified until upload is complete.
   *
   * `filename`: The desired name of the file in Braintrust after uploading.
   * This parameter is for visualization purposes only and has no effect on
   * attachment storage.
   *
   * `contentType`: The MIME type of the file.
   *
   * `state`: (Optional) For internal use.
   */
  constructor({ data, filename, contentType, state }) {
    super();
    this.reference = {
      type: BRAINTRUST_ATTACHMENT,
      filename,
      content_type: contentType,
      key: newId()
    };
    this.state = state;
    this.dataDebugString = typeof data === "string" ? data : "<in-memory data>";
    this._data = this.initData(data);
    this.uploader = this.initUploader();
  }
  /**
   * On first access, (1) reads the attachment from disk if needed, (2)
   * authenticates with the data plane to request a signed URL, (3) uploads to
   * object store, and (4) updates the attachment.
   *
   * @returns The attachment status.
   */
  async upload() {
    return await this.uploader.get();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment contents from disk or memory on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * A human-readable description for logging and debugging.
   *
   * @returns The debug object. The return type is not stable and may change in
   * a future release.
   */
  debugInfo() {
    return {
      inputData: this.dataDebugString,
      reference: this.reference,
      state: this.state
    };
  }
  initUploader() {
    const doUpload = async (conn, orgId) => {
      const requestParams = {
        key: this.reference.key,
        filename: this.reference.filename,
        content_type: this.reference.content_type,
        org_id: orgId
      };
      const [metadataPromiseResult, dataPromiseResult] = await Promise.allSettled([
        conn.post("/attachment", requestParams),
        this._data.get()
      ]);
      if (metadataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(metadataPromiseResult.reason);
        throw new Error(
          `Failed to request signed URL from API server: ${errorStr}`
        );
      }
      if (dataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(dataPromiseResult.reason);
        throw new Error(`Failed to read file: ${errorStr}`);
      }
      const metadataResponse = metadataPromiseResult.value;
      const data = dataPromiseResult.value;
      let signedUrl;
      let headers;
      try {
        ({ signedUrl, headers } = z7.object({
          signedUrl: z7.string().url(),
          headers: z7.record(z7.string())
        }).parse(await metadataResponse.json()));
      } catch (error2) {
        if (error2 instanceof ZodError) {
          const errorStr = JSON.stringify(error2.flatten());
          throw new Error(`Invalid response from API server: ${errorStr}`);
        }
        throw error2;
      }
      addAzureBlobHeaders(headers, signedUrl);
      let objectStoreResponse;
      try {
        objectStoreResponse = await checkResponse(
          await fetch(signedUrl, {
            method: "PUT",
            headers,
            body: data
          })
        );
      } catch (error2) {
        if (error2 instanceof FailedHTTPResponse) {
          throw new Error(
            `Failed to upload attachment to object store: ${error2.status} ${error2.text} ${error2.data}`
          );
        }
        throw error2;
      }
      return { signedUrl, metadataResponse, objectStoreResponse };
    };
    const errorWrapper = async () => {
      const status = { upload_status: "done" };
      const state = this.state ?? _globalState;
      await state.login({});
      const conn = state.apiConn();
      const orgId = state.orgId ?? "";
      try {
        await doUpload(conn, orgId);
      } catch (error2) {
        status.upload_status = "error";
        status.error_message = error2 instanceof Error ? error2.message : JSON.stringify(error2);
      }
      const requestParams = {
        key: this.reference.key,
        org_id: orgId,
        status
      };
      const statusResponse = await conn.post(
        "/attachment/status",
        requestParams
      );
      if (!statusResponse.ok) {
        const errorStr = JSON.stringify(statusResponse);
        throw new Error(`Couldn't log attachment status: ${errorStr}`);
      }
      return status;
    };
    return new LazyValue(errorWrapper);
  }
  initData(data) {
    if (typeof data === "string") {
      this.ensureFileReadable(data);
      const readFile2 = isomorph_default.readFile;
      if (!readFile2) {
        throw new Error(
          `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
        );
      }
      return new LazyValue(async () => new Blob([await readFile2(data)]));
    } else {
      return new LazyValue(async () => new Blob([data]));
    }
  }
  ensureFileReadable(data) {
    const statSync2 = isomorph_default.statSync;
    if (!statSync2) {
      throw new Error(
        `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
      );
    }
    try {
      statSync2(data);
    } catch (e) {
      console.warn(`Failed to read file: ${e}`);
    }
  }
};
var ExternalAttachment = class extends BaseAttachment {
  /**
   * The object that replaces this `ExternalAttachment` at upload time.
   */
  reference;
  _data;
  state;
  /**
   * Construct an external attachment.
   *
   * @param param A parameter object with:
   *
   * `url`: The fully qualified URL of the file in the external object store.
   *
   * `filename`: The desired name of the file in Braintrust after uploading.
   * This parameter is for visualization purposes only and has no effect on
   * attachment storage.
   *
   * `contentType`: The MIME type of the file.
   *
   * `state`: (Optional) For internal use.
   */
  constructor({ url, filename, contentType, state }) {
    super();
    this.reference = {
      type: EXTERNAL_ATTACHMENT,
      filename,
      content_type: contentType,
      url
    };
    this._data = this.initData();
  }
  /**
   * For ExternalAttachment, this is a no-op since the data already resides
   * in the external object store. It marks the attachment as already uploaded.
   *
   * @returns The attachment status, which will always indicate success.
   */
  async upload() {
    return { upload_status: "done" };
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment contents from the external object store on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * A human-readable description for logging and debugging.
   *
   * @returns The debug object. The return type is not stable and may change in
   * a future release.
   */
  debugInfo() {
    return {
      url: this.reference.url,
      reference: this.reference,
      state: this.state
    };
  }
  initData() {
    return new LazyValue(async () => {
      const readonly = new ReadonlyAttachment(this.reference, this.state);
      return await readonly.data();
    });
  }
};
var attachmentMetadataSchema = z7.object({
  downloadUrl: z7.string(),
  status: AttachmentStatus
});
var ReadonlyAttachment = class {
  /**
   * Attachment metadata.
   */
  reference;
  _data;
  state;
  /**
   * Construct a ReadonlyAttachment.
   *
   * @param reference The `AttachmentReference` that should be read by the
   * `ReadonlyAttachment` object.
   * @param state (Optional) For internal use.
   * @returns The new `ReadonlyAttachment` object.
   */
  constructor(reference, state) {
    this.reference = reference;
    this.state = state;
    this._data = this.initDownloader();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment
   * contents from the object store on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * Returns the attachment contents as a base64-encoded URL that is suitable
   * for use in a prompt.
   *
   * @returns The attachment contents as a base64-encoded URL.
   */
  async asBase64Url() {
    const buf = await (await this.data()).arrayBuffer();
    const base64 = Buffer.from(buf).toString("base64");
    return `data:${this.reference.content_type};base64,${base64}`;
  }
  /**
   * Fetch the attachment metadata, which includes a downloadUrl and a status.
   * This will re-fetch the status each time in case it changes over time.
   */
  async metadata() {
    const state = this.state ?? _globalState;
    await state.login({});
    const params = {
      filename: this.reference.filename,
      content_type: this.reference.content_type,
      org_id: state.orgId || ""
    };
    if (this.reference.type === "braintrust_attachment") {
      params.key = this.reference.key;
    } else if (this.reference.type === "external_attachment") {
      params.url = this.reference.url;
    }
    const resp = await state.apiConn().get("/attachment", params);
    if (!resp.ok) {
      const errorStr = JSON.stringify(resp);
      throw new Error(`Invalid response from API server: ${errorStr}`);
    }
    return attachmentMetadataSchema.parse(await resp.json());
  }
  /**
   * Fetch the attachment upload status. This will re-fetch the status each time
   * in case it changes over time.
   */
  async status() {
    return (await this.metadata()).status;
  }
  initDownloader() {
    const download = async () => {
      const { downloadUrl, status } = await this.metadata();
      if (status.upload_status !== "done") {
        throw new Error(
          `Expected attachment status "done", got "${status.upload_status}"`
        );
      }
      const objResponse = await fetch(downloadUrl);
      if (objResponse.status !== 200) {
        const error2 = await objResponse.text();
        throw new Error(`Couldn't download attachment: ${error2}`);
      }
      return await objResponse.blob();
    };
    return new LazyValue(download);
  }
};
function logFeedbackImpl(state, parentObjectType, parentObjectId, {
  id,
  expected,
  scores,
  metadata: inputMetadata,
  tags,
  comment,
  source: inputSource
}) {
  const source = inputSource ?? "external";
  if (!VALID_SOURCES.includes(source)) {
    throw new Error(`source must be one of ${VALID_SOURCES}`);
  }
  if (isEmpty(scores) && isEmpty(expected) && isEmpty(tags) && isEmpty(comment)) {
    throw new Error(
      "At least one of scores, expected, tags, or comment must be specified"
    );
  }
  const validatedEvent = validateAndSanitizeExperimentLogPartialArgs({
    scores,
    metadata: inputMetadata,
    expected,
    tags
  });
  let { metadata, ...updateEvent } = deepCopyEvent(validatedEvent);
  updateEvent = Object.fromEntries(
    Object.entries(updateEvent).filter(([_, v]) => !isEmpty(v))
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  if (Object.keys(updateEvent).length > 0) {
    const record = new LazyValue(async () => {
      return {
        id,
        ...updateEvent,
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata,
        [IS_MERGE_FIELD]: true
      };
    });
    state.bgLogger().log([record]);
  }
  if (!isEmpty(comment)) {
    const record = new LazyValue(async () => {
      return {
        id: uuidv4(),
        created: (/* @__PURE__ */ new Date()).toISOString(),
        origin: {
          // NOTE: We do not know (or care?) what the transaction id of the row that
          // we're commenting on is here, so we omit it.
          id
        },
        comment: {
          text: comment
        },
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata
      };
    });
    state.bgLogger().log([record]);
  }
}
function updateSpanImpl({
  state,
  parentObjectType,
  parentObjectId,
  id,
  event
}) {
  const updateEvent = deepCopyEvent(
    validateAndSanitizeExperimentLogPartialArgs({
      id,
      ...event
    })
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  const record = new LazyValue(async () => ({
    id,
    ...updateEvent,
    ...await parentIds(),
    [IS_MERGE_FIELD]: true
  }));
  state.bgLogger().log([record]);
}
function updateSpan({
  exported,
  state,
  ...event
}) {
  const resolvedState = state ?? _globalState;
  const components = SpanComponentsV3.fromStr(exported);
  if (!components.data.row_id) {
    throw new Error("Exported span must have a row id");
  }
  updateSpanImpl({
    state: resolvedState,
    parentObjectType: components.data.object_type,
    parentObjectId: new LazyValue(
      spanComponentsToObjectIdLambda(resolvedState, components)
    ),
    id: components.data.row_id,
    event
  });
}
function spanComponentsToObjectIdLambda(state, components) {
  if (components.data.object_id) {
    const ret = components.data.object_id;
    return async () => ret;
  }
  if (!components.data.compute_object_metadata_args) {
    throw new Error(
      "Impossible: must provide either objectId or computeObjectMetadataArgs"
    );
  }
  switch (components.data.object_type) {
    case 1 /* EXPERIMENT */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for experiments"
      );
    case 3 /* PLAYGROUND_LOGS */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for prompt sessions"
      );
    case 2 /* PROJECT_LOGS */:
      return async () => (await computeLoggerMetadata(state, {
        ...components.data.compute_object_metadata_args
      })).project.id;
    default:
      const x = components.data.object_type;
      throw new Error(`Unknown object type: ${x}`);
  }
}
async function spanComponentsToObjectId({
  components,
  state
}) {
  return await spanComponentsToObjectIdLambda(
    state ?? _globalState,
    components
  )();
}
var ERR_PERMALINK = "https://braintrust.dev/error-generating-link";
function getErrPermlink(msg) {
  if (msg == "") {
    return ERR_PERMALINK;
  }
  return `${ERR_PERMALINK}?msg=${encodeURIComponent(msg)}`;
}
async function permalink(slug, opts) {
  if (slug === "") {
    return NOOP_SPAN_PERMALINK;
  }
  const state = opts?.state ?? _globalState;
  const getOrgName = async () => {
    if (opts?.orgName) {
      return opts.orgName;
    }
    await state.login({});
    if (!state.orgName) {
      throw new Error("provide-org-or-login");
    }
    return state.orgName;
  };
  const getAppUrl = async () => {
    if (opts?.appUrl) {
      return opts.appUrl;
    }
    await state.login({});
    if (!state.appUrl) {
      throw new Error("provide-app-url-or-login");
    }
    return state.appUrl;
  };
  try {
    const components = SpanComponentsV3.fromStr(slug);
    const object_type = spanObjectTypeV3ToString(components.data.object_type);
    const [orgName, appUrl, object_id] = await Promise.all([
      getOrgName(),
      getAppUrl(),
      spanComponentsToObjectId({ components, state })
    ]);
    const id = components.data.row_id;
    if (!id) {
      throw new Error("Span slug does not refer to an individual row");
    }
    const urlParams = new URLSearchParams({ object_type, object_id, id });
    return `${appUrl}/app/${orgName}/object?${urlParams}`;
  } catch (e) {
    if (e instanceof FailedHTTPResponse) {
      return getErrPermlink(`http-error-${e.status}`);
    }
    return getErrPermlink(e instanceof Error ? e.message : String(e));
  }
}
function startSpanParentArgs(args) {
  let argParentObjectId = void 0;
  let argParentSpanIds = void 0;
  let argPropagatedEvent = void 0;
  if (args.parent) {
    if (args.parentSpanIds) {
      throw new Error("Cannot specify both parent and parentSpanIds");
    }
    const parentComponents = SpanComponentsV3.fromStr(args.parent);
    if (args.parentObjectType !== parentComponents.data.object_type) {
      throw new Error(
        `Mismatch between expected span parent object type ${args.parentObjectType} and provided type ${parentComponents.data.object_type}`
      );
    }
    const parentComponentsObjectIdLambda = spanComponentsToObjectIdLambda(
      args.state,
      parentComponents
    );
    const computeParentObjectId = async () => {
      const parentComponentsObjectId = await parentComponentsObjectIdLambda();
      if (await args.parentObjectId.get() !== parentComponentsObjectId) {
        throw new Error(
          `Mismatch between expected span parent object id ${await args.parentObjectId.get()} and provided id ${parentComponentsObjectId}`
        );
      }
      return await args.parentObjectId.get();
    };
    argParentObjectId = new LazyValue(computeParentObjectId);
    if (parentComponents.data.row_id) {
      argParentSpanIds = {
        spanId: parentComponents.data.span_id,
        rootSpanId: parentComponents.data.root_span_id
      };
    }
    argPropagatedEvent = args.propagatedEvent ?? (parentComponents.data.propagated_event ?? void 0);
  } else {
    argParentObjectId = args.parentObjectId;
    argParentSpanIds = args.parentSpanIds;
    argPropagatedEvent = args.propagatedEvent;
  }
  return {
    parentObjectType: args.parentObjectType,
    parentObjectId: argParentObjectId,
    parentComputeObjectMetadataArgs: args.parentComputeObjectMetadataArgs,
    parentSpanIds: argParentSpanIds,
    propagatedEvent: argPropagatedEvent
  };
}
var Logger = class {
  state;
  lazyMetadata;
  _asyncFlush;
  computeMetadataArgs;
  lastStartTime;
  lazyId;
  calledStartSpan;
  // For type identification.
  kind = "logger";
  constructor(state, lazyMetadata, logOptions = {}) {
    this.lazyMetadata = lazyMetadata;
    this._asyncFlush = logOptions.asyncFlush;
    this.computeMetadataArgs = logOptions.computeMetadataArgs;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get org_id() {
    return (async () => {
      return (await this.lazyMetadata.get()).org_id;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  get id() {
    return (async () => (await this.project).id)();
  }
  parentObjectType() {
    return 2 /* PROJECT_LOGS */;
  }
  /**
   * Log a single event. The event will be batched and uploaded behind the scenes if `logOptions.asyncFlush` is true.
   *
   * @param event The event to log.
   * @param event.input: (Optional) the arguments that uniquely define a user input (an arbitrary, JSON serializable object).
   * @param event.output: (Optional) the output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: (Optional) a dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the logger elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !options?.allowConcurrentWithSpans) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `logger.traced` and then log with `span.log`"
      );
    }
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    const ret = span.id;
    if (this.asyncFlush === true) {
      return ret;
    } else {
      return (async () => {
        await this.flush();
        return ret;
      })();
    }
  }
  /**
   * Create a new toplevel span underneath the logger. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    if (this.asyncFlush) {
      return ret;
    } else {
      return (async () => {
        const awaitedRet = await ret;
        await this.flush();
        return awaitedRet;
      })();
    }
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this logger's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: this.computeMetadataArgs,
        parentSpanIds: args?.parentSpanIds,
        propagatedEvent: args?.propagatedEvent
      }),
      defaultRootType: "task" /* TASK */
    });
  }
  /**
   * Log feedback to an event. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the logger that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      ...this.computeMetadataArgs && !this.lazyId.hasSucceeded ? { compute_object_metadata_args: this.computeMetadataArgs } : { object_id: await this.lazyId.get() }
    }).toStr();
  }
  /*
   * Flush any pending logs to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  get asyncFlush() {
    return this._asyncFlush;
  }
};
function castLogger(logger, asyncFlush) {
  if (logger === void 0) return void 0;
  if (asyncFlush !== void 0 && !!asyncFlush !== !!logger.asyncFlush) {
    throw new Error(
      `Asserted asyncFlush setting ${asyncFlush} does not match stored logger's setting ${logger.asyncFlush}`
    );
  }
  return logger;
}
function constructLogs3Data(items) {
  return `{"rows": ${constructJsonArray(items)}, "api_version": 2}`;
}
function now() {
  return (/* @__PURE__ */ new Date()).getTime();
}
var TestBackgroundLogger = class {
  items = [];
  maskingFunction = null;
  log(items) {
    this.items.push(items);
  }
  setMaskingFunction(maskingFunction) {
    this.maskingFunction = maskingFunction;
  }
  async flush() {
    return Promise.resolve();
  }
  async drain() {
    const items = this.items;
    this.items = [];
    const events = [];
    for (const item of items) {
      for (const event of item) {
        events.push(await event.get());
      }
    }
    const batch = mergeRowBatch(events);
    let flatBatch = batch.flat();
    if (this.maskingFunction) {
      flatBatch = flatBatch.map((item) => {
        const maskedItem = { ...item };
        for (const field of REDACTION_FIELDS) {
          if (item[field] !== void 0) {
            const maskedValue = applyMaskingToField(
              this.maskingFunction,
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              item[field],
              field
            );
            if (maskedValue instanceof MaskingError) {
              delete maskedItem[field];
              if (maskedItem.error) {
                maskedItem.error = `${maskedItem.error}; ${maskedValue.errorMsg}`;
              } else {
                maskedItem.error = maskedValue.errorMsg;
              }
            } else {
              maskedItem[field] = maskedValue;
            }
          }
        }
        return maskedItem;
      });
    }
    return flatBatch;
  }
};
var BACKGROUND_LOGGER_BASE_SLEEP_TIME_S = 1;
var HTTPBackgroundLogger = class _HTTPBackgroundLogger {
  apiConn;
  queue;
  activeFlush = Promise.resolve();
  activeFlushResolved = true;
  activeFlushError = void 0;
  onFlushError;
  maskingFunction = null;
  syncFlush = false;
  // 6 MB for the AWS lambda gateway (from our own testing).
  maxRequestSize = 6 * 1024 * 1024;
  defaultBatchSize = 100;
  numTries = 3;
  queueDropExceedingMaxsize = DEFAULT_QUEUE_SIZE;
  queueDropLoggingPeriod = 60;
  failedPublishPayloadsDir = void 0;
  allPublishPayloadsDir = void 0;
  _disabled = false;
  queueDropLoggingState = {
    numDropped: 0,
    lastLoggedTimestamp: 0
  };
  constructor(apiConn, opts) {
    opts = opts ?? {};
    this.apiConn = apiConn;
    const syncFlushEnv = Number(isomorph_default.getEnv("BRAINTRUST_SYNC_FLUSH"));
    if (!isNaN(syncFlushEnv)) {
      this.syncFlush = Boolean(syncFlushEnv);
    }
    const defaultBatchSizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_DEFAULT_BATCH_SIZE")
    );
    if (!isNaN(defaultBatchSizeEnv)) {
      this.defaultBatchSize = defaultBatchSizeEnv;
    }
    const maxRequestSizeEnv = Number(isomorph_default.getEnv("BRAINTRUST_MAX_REQUEST_SIZE"));
    if (!isNaN(maxRequestSizeEnv)) {
      this.maxRequestSize = maxRequestSizeEnv;
    }
    const numTriesEnv = Number(isomorph_default.getEnv("BRAINTRUST_NUM_RETRIES"));
    if (!isNaN(numTriesEnv)) {
      this.numTries = numTriesEnv + 1;
    }
    const queueDropExceedingMaxsizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_EXCEEDING_MAXSIZE")
    );
    if (!isNaN(queueDropExceedingMaxsizeEnv)) {
      this.queueDropExceedingMaxsize = queueDropExceedingMaxsizeEnv;
    }
    this.queue = new Queue(this.queueDropExceedingMaxsize);
    const queueDropLoggingPeriodEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_LOGGING_PERIOD")
    );
    if (!isNaN(queueDropLoggingPeriodEnv)) {
      this.queueDropLoggingPeriod = queueDropLoggingPeriodEnv;
    }
    const failedPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_FAILED_PUBLISH_PAYLOADS_DIR"
    );
    if (failedPublishPayloadsDirEnv) {
      this.failedPublishPayloadsDir = failedPublishPayloadsDirEnv;
    }
    const allPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_ALL_PUBLISH_PAYLOADS_DIR"
    );
    if (allPublishPayloadsDirEnv) {
      this.allPublishPayloadsDir = allPublishPayloadsDirEnv;
    }
    if (!opts.noExitFlush) {
      isomorph_default.processOn("beforeExit", async () => {
        await this.flush();
      });
    }
    this.onFlushError = opts.onFlushError;
  }
  setMaskingFunction(maskingFunction) {
    this.maskingFunction = maskingFunction;
  }
  log(items) {
    if (this._disabled) {
      return;
    }
    const droppedItems = this.queue.push(...items);
    if (!this.syncFlush) {
      this.triggerActiveFlush();
    }
    if (droppedItems.length) {
      this.registerDroppedItemCount(droppedItems.length);
      if (this.allPublishPayloadsDir || this.failedPublishPayloadsDir) {
        this.dumpDroppedEvents(droppedItems);
      }
    }
  }
  async flush() {
    if (this.syncFlush) {
      this.triggerActiveFlush();
    }
    await this.activeFlush;
    if (this.activeFlushError) {
      const err = this.activeFlushError;
      this.activeFlushError = void 0;
      if (this.syncFlush) {
        throw err;
      }
    }
  }
  async flushOnce(args) {
    if (this._disabled) {
      this.queue.clear();
      return;
    }
    const batchSize = args?.batchSize ?? this.defaultBatchSize;
    const wrappedItems = this.queue.drain();
    const [allItems, attachments] = await this.unwrapLazyValues(wrappedItems);
    if (allItems.length === 0) {
      return;
    }
    const allItemsStr = allItems.map(
      (bucket) => bucket.map((item) => JSON.stringify(item))
    );
    const batchSets = batchItems({
      items: allItemsStr,
      batchMaxNumItems: batchSize,
      batchMaxNumBytes: this.maxRequestSize / 2
    });
    for (const batchSet of batchSets) {
      const postPromises = batchSet.map(
        (batch) => (async () => {
          try {
            await this.submitLogsRequest(batch);
            return { type: "success" };
          } catch (e) {
            return { type: "error", value: e };
          }
        })()
      );
      const results = await Promise.all(postPromises);
      const failingResultErrors = results.map((r) => r.type === "success" ? void 0 : r.value).filter((r) => r !== void 0);
      if (failingResultErrors.length) {
        throw new AggregateError(
          failingResultErrors,
          `Encountered the following errors while logging:`
        );
      }
    }
    const attachmentErrors = [];
    for (const attachment of attachments) {
      try {
        const result = await attachment.upload();
        if (result.upload_status === "error") {
          throw new Error(result.error_message);
        }
      } catch (error2) {
        attachmentErrors.push(error2);
      }
    }
    if (attachmentErrors.length === 1) {
      throw attachmentErrors[0];
    } else if (attachmentErrors.length > 1) {
      throw new AggregateError(
        attachmentErrors,
        `Encountered the following errors while uploading attachments:`
      );
    }
    if (this.queue.length() > 0) {
      await this.flushOnce(args);
    }
  }
  async unwrapLazyValues(wrappedItems) {
    for (let i = 0; i < this.numTries; ++i) {
      try {
        const items = await Promise.all(wrappedItems.map((x) => x.get()));
        const attachments = [];
        items.forEach((item) => extractAttachments(item, attachments));
        let mergedItems = mergeRowBatch(items);
        if (this.maskingFunction) {
          mergedItems = mergedItems.map(
            (batch) => batch.map((item) => {
              const maskedItem = { ...item };
              for (const field of REDACTION_FIELDS) {
                if (item[field] !== void 0) {
                  const maskedValue = applyMaskingToField(
                    this.maskingFunction,
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    item[field],
                    field
                  );
                  if (maskedValue instanceof MaskingError) {
                    delete maskedItem[field];
                    if (maskedItem.error) {
                      maskedItem.error = `${maskedItem.error}; ${maskedValue.errorMsg}`;
                    } else {
                      maskedItem.error = maskedValue.errorMsg;
                    }
                  } else {
                    maskedItem[field] = maskedValue;
                  }
                }
              }
              return maskedItem;
            })
          );
        }
        return [mergedItems, attachments];
      } catch (e) {
        let errmsg = "Encountered error when constructing records to flush";
        const isRetrying = i + 1 < this.numTries;
        if (isRetrying) {
          errmsg += ". Retrying";
        }
        console.warn(errmsg);
        if (!isRetrying) {
          console.warn(
            `Failed to construct log records to flush after ${this.numTries} attempts. Dropping batch`
          );
          throw e;
        } else {
          console.warn(e);
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve) => setTimeout(resolve, sleepTimeS * 1e3)
          );
        }
      }
    }
    throw new Error("Impossible");
  }
  async submitLogsRequest(items) {
    const conn = await this.apiConn.get();
    const dataStr = constructLogs3Data(items);
    if (this.allPublishPayloadsDir) {
      await _HTTPBackgroundLogger.writePayloadToDir({
        payloadDir: this.allPublishPayloadsDir,
        payload: dataStr
      });
    }
    for (let i = 0; i < this.numTries; i++) {
      const startTime = now();
      let error2 = void 0;
      try {
        await conn.post_json("logs3", dataStr);
      } catch (e) {
        error2 = e;
      }
      if (error2 === void 0) {
        return;
      }
      const isRetrying = i + 1 < this.numTries;
      const retryingText = isRetrying ? "" : " Retrying";
      const errorText = (() => {
        if (error2 instanceof FailedHTTPResponse) {
          return `${error2.status} (${error2.text}): ${error2.data}`;
        } else {
          return `${error2}`;
        }
      })();
      const errMsg = `log request failed. Elapsed time: ${(now() - startTime) / 1e3} seconds. Payload size: ${dataStr.length}.${retryingText}
Error: ${errorText}`;
      if (!isRetrying && this.failedPublishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({
          payloadDir: this.failedPublishPayloadsDir,
          payload: dataStr
        });
        this.logFailedPayloadsDir();
      }
      if (!isRetrying) {
        console.warn(
          `log request failed after ${this.numTries} retries. Dropping batch`
        );
        throw new Error(errMsg);
      } else {
        console.warn(errMsg);
        if (isRetrying) {
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve) => setTimeout(resolve, sleepTimeS * 1e3)
          );
        }
      }
    }
  }
  registerDroppedItemCount(numItems) {
    if (numItems <= 0) {
      return;
    }
    this.queueDropLoggingState.numDropped += numItems;
    const timeNow = getCurrentUnixTimestamp();
    if (timeNow - this.queueDropLoggingState.lastLoggedTimestamp > this.queueDropLoggingPeriod) {
      console.warn(
        `Dropped ${this.queueDropLoggingState.numDropped} elements due to full queue`
      );
      if (this.failedPublishPayloadsDir) {
        this.logFailedPayloadsDir();
      }
      this.queueDropLoggingState.numDropped = 0;
      this.queueDropLoggingState.lastLoggedTimestamp = timeNow;
    }
  }
  async dumpDroppedEvents(wrappedItems) {
    const publishPayloadsDir = [
      this.allPublishPayloadsDir,
      this.failedPublishPayloadsDir
    ].reduce((acc, x) => x ? acc.concat([x]) : acc, new Array());
    if (!(wrappedItems.length && publishPayloadsDir.length)) {
      return;
    }
    try {
      const [allItems, allAttachments] = await this.unwrapLazyValues(wrappedItems);
      const dataStr = constructLogs3Data(
        allItems.map((x) => JSON.stringify(x))
      );
      const attachmentStr = JSON.stringify(
        allAttachments.map((a) => a.debugInfo())
      );
      const payload = `{"data": ${dataStr}, "attachments": ${attachmentStr}}
`;
      for (const payloadDir of publishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({ payloadDir, payload });
      }
    } catch (e) {
      console.error(e);
    }
  }
  static async writePayloadToDir({
    payloadDir,
    payload
  }) {
    if (!(isomorph_default.pathJoin && isomorph_default.mkdir && isomorph_default.writeFile)) {
      console.warn(
        "Cannot dump payloads: filesystem-operations not supported on this platform"
      );
      return;
    }
    const payloadFile = isomorph_default.pathJoin(
      payloadDir,
      `payload_${getCurrentUnixTimestamp()}_${uuidv4().slice(0, 8)}.json`
    );
    try {
      await isomorph_default.mkdir(payloadDir, { recursive: true });
      await isomorph_default.writeFile(payloadFile, payload);
    } catch (e) {
      console.error(
        `Failed to write failed payload to output file ${payloadFile}:
`,
        e
      );
    }
  }
  triggerActiveFlush() {
    if (this.activeFlushResolved) {
      this.activeFlushResolved = false;
      this.activeFlushError = void 0;
      this.activeFlush = (async () => {
        try {
          await this.flushOnce();
        } catch (err) {
          if (err instanceof AggregateError) {
            for (const e of err.errors) {
              this.onFlushError?.(e);
            }
          } else {
            this.onFlushError?.(err);
          }
          this.activeFlushError = err;
        } finally {
          this.activeFlushResolved = true;
        }
      })();
      waitUntil(this.activeFlush);
    }
  }
  logFailedPayloadsDir() {
    console.warn(`Logging failed payloads to ${this.failedPublishPayloadsDir}`);
  }
  // Should only be called by BraintrustState.
  internalReplaceApiConn(apiConn) {
    this.apiConn = new LazyValue(async () => apiConn);
  }
  disable() {
    this._disabled = true;
  }
  enforceQueueSizeLimit(enforce) {
    this.queue.enforceQueueSizeLimit(enforce);
  }
};
function init(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either init(project, options) or init(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    experiment,
    description,
    dataset,
    baseExperiment,
    isPublic,
    open,
    update,
    appUrl,
    apiKey,
    orgName,
    forceLogin,
    fetch: fetch2,
    metadata,
    gitMetadataSettings,
    projectId,
    baseExperimentId,
    repoInfo: repoInfo2,
    state: stateArg
  } = options;
  if (!project && !projectId) {
    throw new Error("Must specify at least one of project or projectId");
  }
  if (open && update) {
    throw new Error("Cannot open and update an experiment at the same time");
  }
  const state = stateArg ?? _globalState;
  state.enforceQueueSizeLimit(false);
  if (open) {
    if (isEmpty(experiment)) {
      throw new Error(`Cannot open an experiment without specifying its name`);
    }
    const lazyMetadata2 = new LazyValue(
      async () => {
        await state.login({ apiKey, appUrl, orgName, fetch: fetch2, forceLogin });
        const args = {
          project_name: project,
          project_id: projectId,
          org_name: state.orgName,
          experiment_name: experiment
        };
        const response = await state.appConn().post_json("api/experiment/get", args);
        if (response.length === 0) {
          throw new Error(
            `Experiment ${experiment} not found in project ${projectId ?? project}.`
          );
        }
        const info = response[0];
        return {
          project: {
            id: info.project_id,
            name: project ?? "UNKNOWN_PROJECT",
            fullInfo: {}
          },
          experiment: {
            id: info.id,
            name: info.name,
            fullInfo: info
          }
        };
      }
    );
    return new ReadonlyExperiment(
      stateArg ?? _globalState,
      lazyMetadata2
    );
  }
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({ apiKey, appUrl, orgName });
      const args = {
        project_name: project,
        project_id: projectId,
        org_id: state.orgId,
        update
      };
      if (experiment) {
        args["experiment_name"] = experiment;
      }
      if (description) {
        args["description"] = description;
      }
      const repoInfoArg = await (async () => {
        if (repoInfo2) {
          return repoInfo2;
        }
        let mergedGitMetadataSettings = {
          ...state.gitMetadataSettings || {
            collect: "all"
          }
        };
        if (gitMetadataSettings) {
          mergedGitMetadataSettings = mergeGitMetadataSettings(
            mergedGitMetadataSettings,
            gitMetadataSettings
          );
        }
        return await isomorph_default.getRepoInfo(mergedGitMetadataSettings);
      })();
      if (repoInfoArg) {
        args["repo_info"] = repoInfoArg;
      }
      if (baseExperimentId) {
        args["base_exp_id"] = baseExperimentId;
      } else if (baseExperiment) {
        args["base_experiment"] = baseExperiment;
      } else {
        args["ancestor_commits"] = await isomorph_default.getPastNAncestors();
      }
      if (dataset !== void 0) {
        args["dataset_id"] = await dataset.id;
        args["dataset_version"] = await dataset.version();
      }
      if (isPublic !== void 0) {
        args["public"] = isPublic;
      }
      if (metadata) {
        args["metadata"] = metadata;
      }
      let response = null;
      while (true) {
        try {
          response = await state.appConn().post_json("api/experiment/register", args);
          break;
        } catch (e) {
          if (args["base_experiment"] && `${"data" in e && e.data}`.includes("base experiment")) {
            console.warn(
              `Base experiment ${args["base_experiment"]} not found.`
            );
            delete args["base_experiment"];
          } else {
            throw e;
          }
        }
      }
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        experiment: {
          id: response.experiment.id,
          name: response.experiment.name,
          created: response.experiment.created,
          fullInfo: response.experiment
        }
      };
    }
  );
  const ret = new Experiment2(state, lazyMetadata, dataset);
  if (options.setCurrent ?? true) {
    state.currentExperiment = ret;
  }
  return ret;
}
function initExperiment(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either init(project, options) or init(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  return init(options);
}
function withExperiment(project, callback, options = {}) {
  console.warn(
    "withExperiment is deprecated and will be removed in a future version of braintrust. Simply create the experiment with `init`."
  );
  const experiment = init(project, options);
  return callback(experiment);
}
function withLogger(callback, options = {}) {
  console.warn(
    "withLogger is deprecated and will be removed in a future version of braintrust. Simply create the logger with `initLogger`."
  );
  const logger = initLogger(options);
  return callback(logger);
}
function initDataset(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either initDataset(project, options) or initDataset(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    dataset,
    description,
    version,
    appUrl,
    apiKey,
    orgName,
    fetch: fetch2,
    forceLogin,
    projectId,
    metadata,
    useOutput: legacy,
    state: stateArg,
    _internal_btql
  } = options;
  const state = stateArg ?? _globalState;
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({
        orgName,
        apiKey,
        appUrl,
        fetch: fetch2,
        forceLogin
      });
      const args = {
        org_id: state.orgId,
        project_name: project,
        project_id: projectId,
        dataset_name: dataset,
        description,
        metadata
      };
      const response = await state.appConn().post_json("api/dataset/register", args);
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        dataset: {
          id: response.dataset.id,
          name: response.dataset.name,
          fullInfo: response.dataset
        }
      };
    }
  );
  return new Dataset2(
    stateArg ?? _globalState,
    lazyMetadata,
    version,
    legacy,
    _internal_btql
  );
}
function withDataset(project, callback, options = {}) {
  console.warn(
    "withDataset is deprecated and will be removed in a future version of braintrust. Simply create the dataset with `initDataset`."
  );
  const dataset = initDataset(project, options);
  return callback(dataset);
}
async function computeLoggerMetadata(state, {
  project_name,
  project_id
}) {
  await state.login({});
  const org_id = state.orgId;
  if (isEmpty(project_id)) {
    const response = await state.appConn().post_json("api/project/register", {
      project_name: project_name || GLOBAL_PROJECT,
      org_id
    });
    return {
      org_id,
      project: {
        id: response.project.id,
        name: response.project.name,
        fullInfo: response.project
      }
    };
  } else if (isEmpty(project_name)) {
    const response = await state.appConn().get_json("api/project", {
      id: project_id
    });
    return {
      org_id,
      project: {
        id: project_id,
        name: response.name,
        fullInfo: response.project
      }
    };
  } else {
    return {
      org_id,
      project: { id: project_id, name: project_name, fullInfo: {} }
    };
  }
}
function initLogger(options = {}) {
  const {
    projectName,
    projectId,
    asyncFlush: asyncFlushArg,
    appUrl,
    apiKey,
    orgName,
    forceLogin,
    fetch: fetch2,
    state: stateArg
  } = options || {};
  const asyncFlush = asyncFlushArg === void 0 ? true : asyncFlushArg;
  const computeMetadataArgs = {
    project_name: projectName,
    project_id: projectId
  };
  const state = stateArg ?? _globalState;
  state.enforceQueueSizeLimit(true);
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({
        orgName,
        apiKey,
        appUrl,
        forceLogin,
        fetch: fetch2
      });
      return computeLoggerMetadata(state, computeMetadataArgs);
    }
  );
  const ret = new Logger(state, lazyMetadata, {
    asyncFlush,
    computeMetadataArgs
  });
  if (options.setCurrent ?? true) {
    state.currentLogger = ret;
  }
  return ret;
}
async function loadPrompt({
  projectName,
  projectId,
  slug,
  version,
  environment,
  id,
  defaults,
  noTrace = false,
  appUrl,
  apiKey,
  orgName,
  fetch: fetch2,
  forceLogin,
  state: stateArg
}) {
  if (version && environment) {
    throw new Error(
      "Cannot specify both 'version' and 'environment' parameters. Please use only one (remove the other)."
    );
  }
  if (id) {
  } else if (isEmpty(projectName) && isEmpty(projectId)) {
    throw new Error("Must specify either projectName or projectId");
  } else if (isEmpty(slug)) {
    throw new Error("Must specify slug");
  }
  const state = stateArg ?? _globalState;
  let response;
  try {
    await state.login({
      orgName,
      apiKey,
      appUrl,
      fetch: fetch2,
      forceLogin
    });
    if (id) {
      response = await state.apiConn().get_json(`v1/prompt/${id}`, {
        ...version && { version },
        ...environment && { environment }
      });
      if (response) {
        response = { objects: [response] };
      }
    } else {
      response = await state.apiConn().get_json("v1/prompt", {
        project_name: projectName,
        project_id: projectId,
        slug,
        version,
        ...environment && { environment }
      });
    }
  } catch (e) {
    if (environment || version) {
      throw new Error(`Prompt not found with specified parameters: ${e}`);
    }
    console.warn("Failed to load prompt, attempting to fall back to cache:", e);
    let prompt2;
    if (id) {
      prompt2 = await state.promptCache.get({ id });
      if (!prompt2) {
        throw new Error(
          `Prompt with id ${id} not found (not found on server or in local cache): ${e}`
        );
      }
    } else {
      prompt2 = await state.promptCache.get({
        slug,
        projectId,
        projectName,
        version: version ?? "latest"
      });
      if (!prompt2) {
        throw new Error(
          `Prompt ${slug} (version ${version ?? "latest"}) not found in ${[
            projectName ?? projectId
          ]} (not found on server or in local cache): ${e}`
        );
      }
    }
    return prompt2;
  }
  if (!("objects" in response) || response.objects.length === 0) {
    if (id) {
      throw new Error(`Prompt with id ${id} not found.`);
    } else {
      throw new Error(
        `Prompt ${slug} not found in ${[projectName ?? projectId]}`
      );
    }
  } else if (response.objects.length > 1) {
    if (id) {
      throw new Error(
        `Multiple prompts found with id ${id}. This should never happen.`
      );
    } else {
      throw new Error(
        `Multiple prompts found with slug ${slug} in project ${projectName ?? projectId}. This should never happen.`
      );
    }
  }
  const metadata = Prompt.parse(response["objects"][0]);
  const prompt = new Prompt2(metadata, defaults || {}, noTrace);
  try {
    if (id) {
      await state.promptCache.set({ id }, prompt);
    } else if (slug) {
      await state.promptCache.set(
        { slug, projectId, projectName, version: version ?? "latest" },
        prompt
      );
    }
  } catch (e) {
    console.warn("Failed to set prompt in cache:", e);
  }
  return prompt;
}
function setMaskingFunction(maskingFunction) {
  _globalState.setMaskingFunction(maskingFunction);
}
async function login(options = {}) {
  const { forceLogin = false } = options || {};
  if (_globalState.loggedIn && !forceLogin) {
    let checkUpdatedParam2 = function(varname, arg, orig) {
      if (!isEmpty(arg) && !isEmpty(orig) && arg !== orig) {
        throw new Error(
          `Re-logging in with different ${varname} (${arg}) than original (${orig}). To force re-login, pass \`forceLogin: true\``
        );
      }
    };
    var checkUpdatedParam = checkUpdatedParam2;
    checkUpdatedParam2("appUrl", options.appUrl, _globalState.appUrl);
    checkUpdatedParam2(
      "apiKey",
      options.apiKey ? HTTPConnection.sanitize_token(options.apiKey) : void 0,
      _globalState.loginToken
    );
    checkUpdatedParam2("orgName", options.orgName, _globalState.orgName);
    return _globalState;
  }
  await _globalState.login(options);
  globalThis.__inherited_braintrust_state = _globalState;
  return _globalState;
}
async function loginToState(options = {}) {
  const {
    appUrl = isomorph_default.getEnv("BRAINTRUST_APP_URL") || "https://www.braintrust.dev",
    apiKey = isomorph_default.getEnv("BRAINTRUST_API_KEY"),
    orgName = isomorph_default.getEnv("BRAINTRUST_ORG_NAME"),
    fetch: fetch2 = globalThis.fetch
  } = options || {};
  const appPublicUrl = isomorph_default.getEnv("BRAINTRUST_APP_PUBLIC_URL") || appUrl;
  const state = new BraintrustState(options);
  state.resetLoginInfo();
  state.appUrl = appUrl;
  state.appPublicUrl = appPublicUrl;
  let conn = null;
  if (!apiKey) {
    throw new Error(
      "Please specify an api key (e.g. by setting BRAINTRUST_API_KEY)."
    );
  } else if (apiKey === TEST_API_KEY) {
    const testOrgInfo = [
      {
        id: "test-org-id",
        name: "test-org-name",
        api_url: "https://braintrust.dev/fake-api-url"
      }
    ];
    state.loggedIn = true;
    state.loginToken = TEST_API_KEY;
    _saveOrgInfo(state, testOrgInfo, testOrgInfo[0].name);
    return state;
  } else {
    const resp = await checkResponse(
      await fetch2(_urljoin(state.appUrl, `/api/apikey/login`), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      })
    );
    const info = await resp.json();
    _saveOrgInfo(state, info.org_info, orgName);
    if (!state.apiUrl) {
      if (orgName) {
        throw new Error(
          `Unable to log into organization '${orgName}'. Are you sure this credential is scoped to the organization?`
        );
      } else {
        throw new Error(
          "Unable to log into any organization with the provided credential."
        );
      }
    }
    conn = state.apiConn();
    conn.set_token(apiKey);
    if (!conn) {
      throw new Error("Conn should be set at this point (a bug)");
    }
    conn.make_long_lived();
    state.appConn().set_token(apiKey);
    if (state.proxyUrl) {
      state.proxyConn().set_token(apiKey);
    }
    state.loginToken = conn.token;
    state.loggedIn = true;
    state.loginReplaceApiConn(conn);
  }
  return state;
}
function log(event) {
  console.warn(
    "braintrust.log is deprecated and will be removed in a future version of braintrust. Use `experiment.log` instead."
  );
  const e = currentExperiment();
  if (!e) {
    throw new Error("Not initialized. Please call init() first");
  }
  return e.log(event);
}
async function summarize(options = {}) {
  console.warn(
    "braintrust.summarize is deprecated and will be removed in a future version of braintrust. Use `experiment.summarize` instead."
  );
  const e = currentExperiment();
  if (!e) {
    throw new Error("Not initialized. Please call init() first");
  }
  return await e.summarize(options);
}
function currentExperiment(options) {
  const state = options?.state ?? _globalState;
  return state.currentExperiment;
}
function currentLogger(options) {
  const state = options?.state ?? _globalState;
  return castLogger(state.currentLogger, options?.asyncFlush);
}
function currentSpan(options) {
  const state = options?.state ?? _globalState;
  return state.currentSpan.getStore() ?? NOOP_SPAN;
}
function getSpanParentObject(options) {
  const state = options?.state ?? _globalState;
  const parentSpan = currentSpan({ state });
  if (!Object.is(parentSpan, NOOP_SPAN)) {
    return parentSpan;
  }
  const parentStr = options?.parent ?? state.currentParent.getStore();
  if (parentStr) return SpanComponentsV3.fromStr(parentStr);
  const experiment = currentExperiment();
  if (experiment) {
    return experiment;
  }
  const logger = currentLogger(options);
  if (logger) {
    return logger;
  }
  return NOOP_SPAN;
}
function logError(span, error2) {
  let errorMessage = "<error>";
  let stackTrace = "";
  if (error2 instanceof Error) {
    errorMessage = error2.message;
    stackTrace = error2.stack || "";
  } else {
    errorMessage = String(error2);
  }
  span.log({ error: `${errorMessage}

${stackTrace}` });
}
function traced(callback, args) {
  const { span, isSyncFlushLogger } = startSpanAndIsLogger(args);
  const ret = runCatchFinally(
    () => {
      if (args?.setCurrent ?? true) {
        return withCurrent(span, callback);
      } else {
        return callback(span);
      }
    },
    (e) => {
      logError(span, e);
      throw e;
    },
    () => span.end()
  );
  if (args?.asyncFlush === void 0 || args?.asyncFlush) {
    return ret;
  } else {
    return (async () => {
      const awaitedRet = await ret;
      if (isSyncFlushLogger) {
        await span.flush();
      }
      return awaitedRet;
    })();
  }
}
function isGeneratorFunction(fn) {
  return Object.prototype.toString.call(fn) === "[object GeneratorFunction]";
}
function isAsyncGeneratorFunction(fn) {
  return Object.prototype.toString.call(fn) === "[object AsyncGeneratorFunction]";
}
function wrapTracedSyncGenerator(fn, spanArgs, noTraceIO) {
  const wrapper = function* (...fnArgs) {
    const span = startSpan(spanArgs);
    try {
      if (!noTraceIO) {
        span.log({ input: fnArgs });
      }
      const envValue = isomorph_default.getEnv("BRAINTRUST_MAX_GENERATOR_ITEMS");
      const maxItems = envValue !== void 0 ? Number(envValue) : 1e3;
      if (!noTraceIO && maxItems !== 0) {
        let collected = [];
        let truncated = false;
        const gen = generatorWithCurrent(span, fn.apply(this, fnArgs));
        try {
          for (const value of gen) {
            if (maxItems === -1 || !truncated && collected.length < maxItems) {
              collected.push(value);
            } else {
              truncated = true;
              collected = [];
              console.warn(
                `Generator output exceeded limit of ${maxItems} items, output not logged. Increase BRAINTRUST_MAX_GENERATOR_ITEMS or set to -1 to disable limit.`
              );
            }
            yield value;
          }
          if (!truncated) {
            span.log({ output: collected });
          }
        } catch (error2) {
          logError(span, error2);
          if (!truncated && collected.length > 0) {
            span.log({ output: collected });
          }
          throw error2;
        }
      } else {
        const gen = generatorWithCurrent(span, fn.apply(this, fnArgs));
        for (const value of gen) {
          yield value;
        }
      }
    } finally {
      span.end();
    }
  };
  Object.defineProperty(wrapper, "name", { value: fn.name });
  return wrapper;
}
function wrapTracedAsyncGenerator(fn, spanArgs, noTraceIO) {
  const wrapper = async function* (...fnArgs) {
    const span = startSpan(spanArgs);
    try {
      if (!noTraceIO) {
        span.log({ input: fnArgs });
      }
      const envValue = isomorph_default.getEnv("BRAINTRUST_MAX_GENERATOR_ITEMS");
      const maxItems = envValue !== void 0 ? Number(envValue) : 1e3;
      if (!noTraceIO && maxItems !== 0) {
        let collected = [];
        let truncated = false;
        const gen = asyncGeneratorWithCurrent(span, fn.apply(this, fnArgs));
        try {
          for await (const value of gen) {
            if (maxItems === -1 || !truncated && collected.length < maxItems) {
              collected.push(value);
            } else {
              truncated = true;
              collected = [];
              console.warn(
                `Generator output exceeded limit of ${maxItems} items, output not logged. Increase BRAINTRUST_MAX_GENERATOR_ITEMS or set to -1 to disable limit.`
              );
            }
            yield value;
          }
          if (!truncated) {
            span.log({ output: collected });
          }
        } catch (error2) {
          logError(span, error2);
          if (!truncated && collected.length > 0) {
            span.log({ output: collected });
          }
          throw error2;
        }
      } else {
        const gen = asyncGeneratorWithCurrent(span, fn.apply(this, fnArgs));
        for await (const value of gen) {
          yield value;
        }
      }
    } finally {
      span.end();
    }
  };
  Object.defineProperty(wrapper, "name", { value: fn.name });
  return wrapper;
}
function wrapTraced(fn, args) {
  const spanArgs = {
    name: fn.name,
    type: "function",
    ...args
  };
  const hasExplicitInput = args && args.event && "input" in args.event && args.event.input !== void 0;
  const hasExplicitOutput = args && args.event && args.event.output !== void 0;
  const noTraceIO = args?.noTraceIO || hasExplicitInput || hasExplicitOutput;
  if (isGeneratorFunction(fn)) {
    return wrapTracedSyncGenerator(fn, spanArgs, !!noTraceIO);
  }
  if (isAsyncGeneratorFunction(fn)) {
    return wrapTracedAsyncGenerator(fn, spanArgs, !!noTraceIO);
  }
  if (args?.asyncFlush) {
    return (...fnArgs) => traced((span) => {
      if (!hasExplicitInput) {
        span.log({ input: fnArgs });
      }
      const output = fn(...fnArgs);
      if (!hasExplicitOutput) {
        if (output instanceof Promise) {
          return (async () => {
            const result = await output;
            span.log({ output: result });
            return result;
          })();
        } else {
          span.log({ output });
        }
      }
      return output;
    }, spanArgs);
  } else {
    return (...fnArgs) => traced(async (span) => {
      if (!hasExplicitInput) {
        span.log({ input: fnArgs });
      }
      const outputResult = fn(...fnArgs);
      const output = await outputResult;
      if (!hasExplicitOutput) {
        span.log({ output });
      }
      return output;
    }, spanArgs);
  }
}
var traceable = wrapTraced;
function startSpan(args) {
  return startSpanAndIsLogger(args).span;
}
async function flush(options) {
  const state = options?.state ?? _globalState;
  return await state.bgLogger().flush();
}
function setFetch(fetch2) {
  _globalState.setFetch(fetch2);
}
function startSpanAndIsLogger(args) {
  const state = args?.state ?? _globalState;
  const parentObject = getSpanParentObject({
    asyncFlush: args?.asyncFlush,
    parent: args?.parent,
    state
  });
  if (parentObject instanceof SpanComponentsV3) {
    const parentSpanIds = parentObject.data.row_id ? {
      spanId: parentObject.data.span_id,
      rootSpanId: parentObject.data.root_span_id
    } : void 0;
    const span = new SpanImpl({
      state,
      ...args,
      parentObjectType: parentObject.data.object_type,
      parentObjectId: new LazyValue(
        spanComponentsToObjectIdLambda(state, parentObject)
      ),
      parentComputeObjectMetadataArgs: parentObject.data.compute_object_metadata_args ?? void 0,
      parentSpanIds,
      propagatedEvent: args?.propagatedEvent ?? // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      (parentObject.data.propagated_event ?? void 0)
    });
    return {
      span,
      isSyncFlushLogger: parentObject.data.object_type === 2 /* PROJECT_LOGS */ && // Since there's no parent logger here, we're free to choose the async flush
      // behavior, and therefore propagate along whatever we get from the arguments
      args?.asyncFlush === false
    };
  } else {
    const span = parentObject.startSpan(args);
    return {
      span,
      isSyncFlushLogger: parentObject.kind === "logger" && parentObject.asyncFlush === false
    };
  }
}
function withCurrent(span, callback, state = void 0) {
  return (state ?? _globalState).currentSpan.run(span, () => callback(span));
}
function* generatorWithCurrent(span, gen, state = void 0) {
  let nextValue;
  while (true) {
    const result = withCurrent(
      span,
      () => {
        try {
          return gen.next(nextValue);
        } catch (e) {
          return { value: void 0, done: true, error: e };
        }
      },
      state
    );
    if ("error" in result) {
      throw result.error;
    }
    if (result.done) {
      return result.value;
    }
    nextValue = yield result.value;
  }
}
async function* asyncGeneratorWithCurrent(span, gen, state = void 0) {
  let nextValue;
  while (true) {
    const result = await withCurrent(
      span,
      async () => {
        try {
          return await gen.next(nextValue);
        } catch (e) {
          return { value: void 0, done: true, error: e };
        }
      },
      state
    );
    if ("error" in result) {
      throw result.error;
    }
    if (result.done) {
      return result.value;
    }
    nextValue = yield result.value;
  }
}
function withParent(parent, callback, state = void 0) {
  return (state ?? _globalState).currentParent.run(parent, () => callback());
}
function _saveOrgInfo(state, org_info, org_name) {
  if (org_info.length === 0) {
    throw new Error("This user is not part of any organizations.");
  }
  for (const org of org_info) {
    if (org_name === void 0 || org.name === org_name) {
      state.orgId = org.id;
      state.orgName = org.name;
      state.apiUrl = isomorph_default.getEnv("BRAINTRUST_API_URL") ?? org.api_url;
      state.proxyUrl = isomorph_default.getEnv("BRAINTRUST_PROXY_URL") ?? org.proxy_url;
      state.gitMetadataSettings = org.git_metadata || void 0;
      break;
    }
  }
  if (state.orgId === void 0) {
    throw new Error(
      `Organization ${org_name} not found. Must be one of ${org_info.map((x) => x.name).join(", ")}`
    );
  }
}
function validateTags(tags) {
  const seen = /* @__PURE__ */ new Set();
  for (const tag of tags) {
    if (typeof tag !== "string") {
      throw new Error("tags must be strings");
    }
    if (seen.has(tag)) {
      throw new Error(`duplicate tag: ${tag}`);
    }
  }
}
function validateAndSanitizeExperimentLogPartialArgs(event) {
  if (event.scores) {
    if (Array.isArray(event.scores)) {
      throw new Error("scores must be an object, not an array");
    }
    for (let [name, score] of Object.entries(event.scores)) {
      if (typeof name !== "string") {
        throw new Error("score names must be strings");
      }
      if (score === null || score === void 0) {
        continue;
      }
      if (typeof score === "boolean") {
        score = score ? 1 : 0;
        event.scores[name] = score;
      }
      if (typeof score !== "number") {
        throw new Error("score values must be numbers");
      }
      if (score < 0 || score > 1) {
        throw new Error("score values must be between 0 and 1");
      }
    }
  }
  if (event.metadata) {
    for (const key of Object.keys(event.metadata)) {
      if (typeof key !== "string") {
        throw new Error("metadata keys must be strings");
      }
    }
  }
  if (event.metrics) {
    for (const [key, value] of Object.entries(event.metrics)) {
      if (typeof key !== "string") {
        throw new Error("metric keys must be strings");
      }
      if (value !== void 0 && typeof value !== "number") {
        throw new Error("metric values must be numbers");
      }
    }
  }
  if ("input" in event && event.input && "inputs" in event && event.inputs) {
    throw new Error(
      "Only one of input or inputs (deprecated) can be specified. Prefer input."
    );
  }
  if ("tags" in event && event.tags) {
    validateTags(event.tags);
  }
  if ("inputs" in event) {
    const { inputs, ...rest } = event;
    return { input: inputs, ...rest };
  } else {
    return { ...event };
  }
}
function deepCopyEvent(event) {
  const attachments = [];
  const IDENTIFIER = "_bt_internal_saved_attachment";
  const savedAttachmentSchema = z7.strictObject({ [IDENTIFIER]: z7.number() });
  const serialized = JSON.stringify(event, (_k, v) => {
    if (v instanceof SpanImpl || v instanceof NoopSpan) {
      return `<span>`;
    } else if (v instanceof Experiment2) {
      return `<experiment>`;
    } else if (v instanceof Dataset2) {
      return `<dataset>`;
    } else if (v instanceof Logger) {
      return `<logger>`;
    } else if (v instanceof BaseAttachment) {
      const idx = attachments.push(v);
      return { [IDENTIFIER]: idx - 1 };
    } else if (v instanceof ReadonlyAttachment) {
      return v.reference;
    }
    return v;
  });
  const x = JSON.parse(serialized, (_k, v) => {
    const parsedAttachment = savedAttachmentSchema.safeParse(v);
    if (parsedAttachment.success) {
      return attachments[parsedAttachment.data[IDENTIFIER]];
    }
    return v;
  });
  return x;
}
function extractAttachments(event, attachments) {
  for (const [key, value] of Object.entries(event)) {
    if (!value) {
      continue;
    }
    if (value instanceof BaseAttachment) {
      attachments.push(value);
      event[key] = value.reference;
      continue;
    }
    if (value?.type === BRAINTRUST_ATTACHMENT && value.key && !value.uploader) {
      continue;
    }
    if (value?.reference?.type === BRAINTRUST_ATTACHMENT && value?.uploader) {
      const attachment = new Attachment({
        data: value.dataDebugString,
        filename: value.reference.filename,
        contentType: value.reference.content_type
      });
      attachments.push(attachment);
      event[key] = attachment.reference;
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    extractAttachments(value, attachments);
  }
}
function enrichAttachments(event, state) {
  for (const [key, value] of Object.entries(event)) {
    const parsedValue = AttachmentReference.safeParse(value);
    if (parsedValue.success) {
      event[key] = new ReadonlyAttachment(parsedValue.data, state);
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    enrichAttachments(value, state);
  }
  return event;
}
async function resolveAttachmentsToBase64(event, state) {
  for (const [key, value] of Object.entries(event)) {
    if (value instanceof ReadonlyAttachment) {
      event[key] = await value.asBase64Url();
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    await resolveAttachmentsToBase64(value, state);
  }
  return event;
}
function validateAndSanitizeExperimentLogFullArgs(event, hasDataset) {
  if ("input" in event && !isEmpty(event.input) && "inputs" in event && !isEmpty(event.inputs) || !("input" in event) && !("inputs" in event)) {
    throw new Error(
      "Exactly one of input or inputs (deprecated) must be specified. Prefer input."
    );
  }
  if (isEmpty(event.output)) {
    throw new Error("output must be specified");
  }
  if (isEmpty(event.scores)) {
    throw new Error("scores must be specified");
  }
  if (hasDataset && event.datasetRecordId === void 0) {
    throw new Error("datasetRecordId must be specified when using a dataset");
  } else if (!hasDataset && event.datasetRecordId !== void 0) {
    throw new Error(
      "datasetRecordId cannot be specified when not using a dataset"
    );
  }
  return event;
}
var INTERNAL_BTQL_LIMIT = 1e3;
var MAX_BTQL_ITERATIONS = 1e4;
var ObjectFetcher = class {
  constructor(objectType, pinnedVersion, mutateRecord, _internal_btql) {
    this.objectType = objectType;
    this.pinnedVersion = pinnedVersion;
    this.mutateRecord = mutateRecord;
    this._internal_btql = _internal_btql;
  }
  _fetchedData = void 0;
  get id() {
    throw new Error("ObjectFetcher subclasses must have an 'id' attribute");
  }
  async getState() {
    throw new Error("ObjectFetcher subclasses must have a 'getState' method");
  }
  async *fetch() {
    const records = await this.fetchedData();
    for (const record of records) {
      yield record;
    }
  }
  [Symbol.asyncIterator]() {
    return this.fetch();
  }
  async fetchedData() {
    if (this._fetchedData === void 0) {
      const state = await this.getState();
      let data = void 0;
      let cursor = void 0;
      let iterations = 0;
      while (true) {
        const resp = await state.apiConn().post(
          `btql`,
          {
            query: {
              ...this._internal_btql,
              select: [
                {
                  op: "star"
                }
              ],
              from: {
                op: "function",
                name: {
                  op: "ident",
                  name: [this.objectType]
                },
                args: [
                  {
                    op: "literal",
                    value: await this.id
                  }
                ]
              },
              cursor,
              limit: INTERNAL_BTQL_LIMIT
            },
            use_columnstore: false,
            brainstore_realtime: true
          },
          { headers: { "Accept-Encoding": "gzip" } }
        );
        const respJson = await resp.json();
        data = (data ?? []).concat(respJson.data);
        if (!respJson.cursor) {
          break;
        }
        cursor = respJson.cursor;
        iterations++;
        if (iterations > MAX_BTQL_ITERATIONS) {
          throw new Error("Too many BTQL iterations");
        }
      }
      this._fetchedData = this.mutateRecord ? data?.map(this.mutateRecord) : data;
    }
    return this._fetchedData || [];
  }
  clearCache() {
    this._fetchedData = void 0;
  }
  async version() {
    if (this.pinnedVersion !== void 0) {
      return this.pinnedVersion;
    } else {
      const fetchedData = await this.fetchedData();
      let maxVersion = void 0;
      for (const record of fetchedData) {
        const xactId = String(record[TRANSACTION_ID_FIELD] ?? "0");
        if (maxVersion === void 0 || xactId > maxVersion) {
          maxVersion = xactId;
        }
      }
      return maxVersion;
    }
  }
};
var Experiment2 = class extends ObjectFetcher {
  lazyMetadata;
  dataset;
  lastStartTime;
  lazyId;
  calledStartSpan;
  state;
  // For type identification.
  kind = "experiment";
  constructor(state, lazyMetadata, dataset) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));
    this.lazyMetadata = lazyMetadata;
    this.dataset = dataset;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  parentObjectType() {
    return 1 /* EXPERIMENT */;
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  /**
   * Log a single event to the experiment. The event will be batched and uploaded behind the scenes.
   *
   * @param event The event to log.
   * @param event.input: The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical.
   * @param event.output: The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param event.dataset_record_id: (Optional) the id of the dataset record that this event is associated with. This field is required if and only if the experiment is associated with a dataset. This field is unused and will be removed in a future version.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the experiment elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !options?.allowConcurrentWithSpans) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `experiment.traced` and then log with `span.log`"
      );
    }
    event = validateAndSanitizeExperimentLogFullArgs(event, !!this.dataset);
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    return span.id;
  }
  /**
   * Create a new toplevel span underneath the experiment. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    return ret;
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this experiment's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: void 0,
        parentSpanIds: void 0,
        propagatedEvent: args?.propagatedEvent
      }),
      defaultRootType: "eval" /* EVAL */
    });
  }
  async fetchBaseExperiment() {
    const state = await this.getState();
    const conn = state.appConn();
    try {
      const resp = await conn.post("/api/base_experiment/get_id", {
        id: await this.id
      });
      const base = await resp.json();
      return {
        id: base["base_exp_id"],
        name: base["base_exp_name"]
      };
    } catch (e) {
      if (e instanceof FailedHTTPResponse && e.status === 400) {
        return null;
      } else {
        throw e;
      }
    }
  }
  /**
   * Summarize the experiment, including the scores (compared to the closest reference experiment) and metadata.
   *
   * @param options Options for summarizing the experiment.
   * @param options.summarizeScores Whether to summarize the scores. If False, only the metadata will be returned.
   * @param options.comparisonExperimentId The experiment to compare against. If None, the most recent experiment on the origin's main branch will be used.
   * @returns A summary of the experiment, including the scores (compared to the closest reference experiment) and metadata.
   */
  async summarize(options = {}) {
    let { summarizeScores = true, comparisonExperimentId = void 0 } = options || {};
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const experimentUrl = `${projectUrl}/experiments/${encodeURIComponent(
      await this.name
    )}`;
    let scores = void 0;
    let metrics = void 0;
    let comparisonExperimentName = void 0;
    if (summarizeScores) {
      await this.flush();
      if (comparisonExperimentId === void 0) {
        const baseExperiment = await this.fetchBaseExperiment();
        if (baseExperiment !== null) {
          comparisonExperimentId = baseExperiment.id;
          comparisonExperimentName = baseExperiment.name;
        }
      }
      try {
        const results = await state.apiConn().get_json(
          "/experiment-comparison2",
          {
            experiment_id: await this.id,
            base_experiment_id: comparisonExperimentId
          },
          3
        );
        scores = results["scores"];
        metrics = results["metrics"];
      } catch (e) {
        console.warn(
          `Failed to fetch experiment scores and metrics: ${e}

View complete results in Braintrust or run experiment.summarize() again.`
        );
        scores = {};
        metrics = {};
      }
    }
    return {
      projectName: (await this.project).name,
      experimentName: await this.name,
      projectId: (await this.project).id,
      experimentId: await this.id,
      projectUrl,
      experimentUrl,
      comparisonExperimentName,
      scores: scores ?? {},
      metrics: metrics ?? {}
    };
  }
  /**
   * Log feedback to an event in the experiment. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the experiment that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      object_id: await this.id
    }).toStr();
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
};
var ReadonlyExperiment = class extends ObjectFetcher {
  constructor(state, lazyMetadata) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  async *asDataset() {
    const records = this.fetch();
    for await (const record of records) {
      if (record.root_span_id !== record.span_id) {
        continue;
      }
      const { output, expected: expectedRecord, metadata } = record;
      const expected = expectedRecord ?? output;
      yield {
        input: record.input,
        tags: record.tags,
        expected,
        metadata
      };
    }
  }
};
var executionCounter = 0;
function newId() {
  return uuidv4();
}
var SpanImpl = class _SpanImpl {
  _state;
  isMerge;
  loggedEndTime;
  propagatedEvent;
  // For internal use only.
  parentObjectType;
  parentObjectId;
  parentComputeObjectMetadataArgs;
  _id;
  _spanId;
  _rootSpanId;
  _spanParents;
  kind = "span";
  constructor(args) {
    this._state = args.state;
    const spanAttributes = args.spanAttributes ?? {};
    const rawEvent = args.event ?? {};
    const type = args.type ?? (args.parentSpanIds ? void 0 : args.defaultRootType);
    this.loggedEndTime = void 0;
    this.parentObjectType = args.parentObjectType;
    this.parentObjectId = args.parentObjectId;
    this.parentComputeObjectMetadataArgs = args.parentComputeObjectMetadataArgs;
    this.propagatedEvent = args.propagatedEvent;
    if (this.propagatedEvent) {
      mergeDicts(rawEvent, this.propagatedEvent);
    }
    const { id: eventId, ...event } = rawEvent;
    const callerLocation = isomorph_default.getCallerLocation();
    const name = (() => {
      if (args.name) return args.name;
      if (!args.parentSpanIds) return "root";
      if (callerLocation) {
        const pathComponents = callerLocation.caller_filename.split("/");
        const filename = pathComponents[pathComponents.length - 1];
        return [callerLocation.caller_functionname].concat(
          filename ? [`${filename}:${callerLocation.caller_lineno}`] : []
        ).join(":");
      }
      return "subspan";
    })();
    const internalData = {
      metrics: {
        start: args.startTime ?? getCurrentUnixTimestamp()
      },
      context: { ...callerLocation },
      span_attributes: {
        name,
        type,
        ...spanAttributes,
        exec_counter: executionCounter++
      },
      created: (/* @__PURE__ */ new Date()).toISOString()
    };
    this._id = eventId ?? uuidv4();
    this._spanId = args.spanId ?? uuidv4();
    if (args.parentSpanIds) {
      this._rootSpanId = args.parentSpanIds.rootSpanId;
      this._spanParents = "parentSpanIds" in args.parentSpanIds ? args.parentSpanIds.parentSpanIds : [args.parentSpanIds.spanId];
    } else {
      this._rootSpanId = this._spanId;
      this._spanParents = void 0;
    }
    this.isMerge = false;
    this.logInternal({ event, internalData });
    this.isMerge = true;
  }
  get id() {
    return this._id;
  }
  get spanId() {
    return this._spanId;
  }
  get rootSpanId() {
    return this._rootSpanId;
  }
  get spanParents() {
    return this._spanParents ?? [];
  }
  setAttributes(args) {
    this.logInternal({ internalData: { span_attributes: args } });
  }
  setSpanParents(parents) {
    this.logInternal({ internalData: { span_parents: parents } });
  }
  log(event) {
    this.logInternal({ event });
  }
  logInternal({
    event,
    internalData
  }) {
    const [serializableInternalData, lazyInternalData] = splitLoggingData({
      event,
      internalData
    });
    const partialRecord = deepCopyEvent({
      id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      span_parents: this._spanParents,
      ...serializableInternalData,
      [IS_MERGE_FIELD]: this.isMerge
    });
    if (partialRecord.metrics?.end) {
      this.loggedEndTime = partialRecord.metrics?.end;
    }
    if ((partialRecord.tags ?? []).length > 0 && this._spanParents?.length) {
      throw new Error("Tags can only be logged to the root span");
    }
    const computeRecord = async () => ({
      ...partialRecord,
      ...Object.fromEntries(
        await Promise.all(
          Object.entries(lazyInternalData).map(async ([key, value]) => [
            key,
            await value.get()
          ])
        )
      ),
      ...new SpanComponentsV3({
        object_type: this.parentObjectType,
        object_id: await this.parentObjectId.get()
      }).objectIdFields()
    });
    this._state.bgLogger().log([new LazyValue(computeRecord)]);
  }
  logFeedback(event) {
    logFeedbackImpl(this._state, this.parentObjectType, this.parentObjectId, {
      ...event,
      id: this.id
    });
  }
  traced(callback, args) {
    const { setCurrent, ...argsRest } = args ?? {};
    const span = this.startSpan(argsRest);
    return runCatchFinally(
      () => {
        if (setCurrent ?? true) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
  }
  startSpan(args) {
    const parentSpanIds = args?.parent ? void 0 : { spanId: this._spanId, rootSpanId: this._rootSpanId };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: args?.propagatedEvent ?? this.propagatedEvent
      })
    });
  }
  startSpanWithParents(spanId, spanParents, args) {
    const parentSpanIds = {
      parentSpanIds: spanParents,
      rootSpanId: this._rootSpanId
    };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: args?.parent,
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: args?.propagatedEvent ?? this.propagatedEvent
      }),
      spanId
    });
  }
  end(args) {
    let endTime;
    let internalData = {};
    if (!this.loggedEndTime) {
      endTime = args?.endTime ?? getCurrentUnixTimestamp();
      internalData = { metrics: { end: endTime } };
    } else {
      endTime = this.loggedEndTime;
    }
    this.logInternal({ internalData });
    return endTime;
  }
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType,
      ...this.parentComputeObjectMetadataArgs && !this.parentObjectId.hasSucceeded ? { compute_object_metadata_args: this.parentComputeObjectMetadataArgs } : { object_id: await this.parentObjectId.get() },
      row_id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      propagated_event: this.propagatedEvent
    }).toStr();
  }
  async permalink() {
    return await permalink(await this.export(), {
      state: this._state
    });
  }
  link() {
    if (!this.id) {
      return NOOP_SPAN_PERMALINK;
    }
    try {
      const orgName = this._state.orgName;
      if (!orgName) {
        throw new Error("log-in-or-provide-org-name");
      }
      return this._link(orgName);
    } catch (e) {
      return getErrPermlink(e instanceof Error ? e.message : String(e));
    }
  }
  _link(orgName) {
    const appUrl = this._state.appUrl || "https://www.braintrust.dev";
    const baseUrl = `${appUrl}/app/${orgName}`;
    const args = this.parentComputeObjectMetadataArgs;
    switch (this.parentObjectType) {
      case 2 /* PROJECT_LOGS */: {
        const projectID = args?.project_id || this.parentObjectId.getSync().value;
        const projectName = args?.project_name;
        if (projectID) {
          return `${baseUrl}/object?object_type=project_logs&object_id=${projectID}&id=${this._id}`;
        } else if (projectName) {
          return `${baseUrl}/p/${projectName}/logs?oid=${this._id}`;
        } else {
          return getErrPermlink("provide-project-name-or-id");
        }
      }
      case 1 /* EXPERIMENT */: {
        const expID = args?.experiment_id || this.parentObjectId?.getSync()?.value;
        if (!expID) {
          return getErrPermlink("provide-experiment-id");
        } else {
          return `${baseUrl}/object?object_type=experiment&object_id=${expID}&id=${this._id}`;
        }
      }
      case 3 /* PLAYGROUND_LOGS */: {
        return NOOP_SPAN_PERMALINK;
      }
      default: {
        const _exhaustive = this.parentObjectType;
        _exhaustive;
        return NOOP_SPAN_PERMALINK;
      }
    }
  }
  async flush() {
    return await this._state.bgLogger().flush();
  }
  close(args) {
    return this.end(args);
  }
  state() {
    return this._state;
  }
};
function splitLoggingData({
  event,
  internalData
}) {
  const sanitized = validateAndSanitizeExperimentLogPartialArgs(event ?? {});
  const sanitizedAndInternalData = {};
  mergeDicts(sanitizedAndInternalData, internalData || {});
  mergeDicts(sanitizedAndInternalData, sanitized);
  const serializableInternalData = {};
  const lazyInternalData = {};
  for (const [key, value] of Object.entries(sanitizedAndInternalData)) {
    if (value instanceof BraintrustStream) {
      const streamCopy = value.copy();
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve, reject2) => {
          streamCopy.toReadableStream().pipeThrough(createFinalValuePassThroughStream(resolve, reject2)).pipeTo(devNullWritableStream());
        });
      });
    } else if (value instanceof ReadableStream) {
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve, reject2) => {
          value.pipeThrough(createFinalValuePassThroughStream(resolve, reject2)).pipeTo(devNullWritableStream());
        });
      });
    } else {
      serializableInternalData[key] = value;
    }
  }
  return [serializableInternalData, lazyInternalData];
}
var Dataset2 = class extends ObjectFetcher {
  constructor(state, lazyMetadata, pinnedVersion, legacy, _internal_btql) {
    const isLegacyDataset = legacy ?? DEFAULT_IS_LEGACY_DATASET;
    if (isLegacyDataset) {
      console.warn(
        `Records will be fetched from this dataset in the legacy format, with the "expected" field renamed to "output". Please update your code to use "expected", and use \`braintrust.initDataset()\` with \`{ useOutput: false }\`, which will become the default in a future version of Braintrust.`
      );
    }
    super(
      "dataset",
      pinnedVersion,
      (r) => (
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        ensureDatasetRecord(
          enrichAttachments(r, this.state),
          isLegacyDataset
        )
      ),
      _internal_btql
    );
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  lazyMetadata;
  __braintrust_dataset_marker = true;
  newRecords = 0;
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  validateEvent({
    metadata,
    expected,
    output,
    tags
  }) {
    if (metadata !== void 0) {
      for (const key of Object.keys(metadata)) {
        if (typeof key !== "string") {
          throw new Error("metadata keys must be strings");
        }
      }
    }
    if (expected !== void 0 && output !== void 0) {
      throw new Error(
        "Only one of expected or output (deprecated) can be specified. Prefer expected."
      );
    }
    if (tags) {
      validateTags(tags);
    }
  }
  createArgs({
    id,
    input,
    expected,
    metadata,
    tags,
    output,
    isMerge
  }) {
    return new LazyValue(async () => {
      const dataset_id = await this.id;
      const expectedValue = expected === void 0 ? output : expected;
      const args = {
        id,
        input,
        expected: expectedValue,
        tags,
        dataset_id,
        created: !isMerge ? (/* @__PURE__ */ new Date()).toISOString() : void 0,
        //if we're merging/updating an event we will not add this ts
        metadata,
        ...!!isMerge ? {
          [IS_MERGE_FIELD]: true
        } : {}
      };
      return args;
    });
  }
  /**
   * Insert a single record to the dataset. The record will be batched and uploaded behind the scenes. If you pass in an `id`,
   * and a record with that `id` already exists, it will be overwritten (upsert).
   *
   * @param event The event to log.
   * @param event.input The argument that uniquely define an input case (an arbitrary, JSON serializable object).
   * @param event.expected The output of your application, including post-processing (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) a list of strings that you can use to filter and group records later.
   * @param event.metadata (Optional) a dictionary with additional data about the test example, model outputs, or just
   * about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the
   * `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @param event.id (Optional) a unique identifier for the event. If you don't provide one, Braintrust will generate one for you.
   * @param event.output: (Deprecated) The output of your application. Use `expected` instead.
   * @returns The `id` of the logged record.
   */
  insert({
    input,
    expected,
    metadata,
    tags,
    id,
    output
  }) {
    this.validateEvent({ metadata, expected, output, tags });
    const rowId = id || uuidv4();
    const args = this.createArgs(
      deepCopyEvent({
        id: rowId,
        input,
        expected,
        metadata,
        tags,
        output,
        isMerge: false
      })
    );
    this.state.bgLogger().log([args]);
    this.newRecords++;
    return rowId;
  }
  /**
   * Update fields of a single record in the dataset. The updated fields will be batched and uploaded behind the scenes.
   * You must pass in an `id` of the record to update. Only the fields provided will be updated; other fields will remain unchanged.
   *
   * @param event The fields to update in the record.
   * @param event.id The unique identifier of the record to update.
   * @param event.input (Optional) The new input value for the record (an arbitrary, JSON serializable object).
   * @param event.expected (Optional) The new expected output value for the record (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) A list of strings to update the tags of the record.
   * @param event.metadata (Optional) A dictionary to update the metadata of the record. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @returns The `id` of the updated record.
   */
  update({
    input,
    expected,
    metadata,
    tags,
    id
  }) {
    this.validateEvent({ metadata, expected, tags });
    const args = this.createArgs(
      deepCopyEvent({
        id,
        input,
        expected,
        metadata,
        tags,
        isMerge: true
      })
    );
    this.state.bgLogger().log([args]);
    return id;
  }
  delete(id) {
    const args = new LazyValue(async () => ({
      id,
      dataset_id: await this.id,
      created: (/* @__PURE__ */ new Date()).toISOString(),
      _object_delete: true
    }));
    this.state.bgLogger().log([args]);
    return id;
  }
  /**
   * Summarize the dataset, including high level metrics about its size and other metadata.
   * @param summarizeData Whether to summarize the data. If false, only the metadata will be returned.
   * @returns `DatasetSummary`
   * @returns A summary of the dataset.
   */
  async summarize(options = {}) {
    const { summarizeData = true } = options || {};
    await this.flush();
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const datasetUrl = `${projectUrl}/datasets/${encodeURIComponent(
      await this.name
    )}`;
    let dataSummary;
    if (summarizeData) {
      const rawDataSummary = z7.object({
        total_records: z7.number()
      }).parse(
        await state.apiConn().get_json(
          "dataset-summary",
          {
            dataset_id: await this.id
          },
          3
        )
      );
      dataSummary = {
        newRecords: this.newRecords,
        totalRecords: rawDataSummary.total_records
      };
    }
    return {
      projectName: (await this.project).name,
      datasetName: await this.name,
      projectUrl,
      datasetUrl,
      dataSummary
    };
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
  static isDataset(data) {
    return typeof data === "object" && data !== null && "__braintrust_dataset_marker" in data;
  }
};
function renderMessage(render, message) {
  return {
    ...message,
    ..."content" in message ? {
      content: isEmpty(message.content) ? void 0 : typeof message.content === "string" ? render(message.content) : message.content.map((c) => {
        switch (c.type) {
          case "text":
            return { ...c, text: render(c.text) };
          case "image_url":
            if (isObject(c.image_url.url)) {
              throw new Error(
                "Attachments must be replaced with URLs before calling `build()`"
              );
            }
            return {
              ...c,
              image_url: {
                ...c.image_url,
                url: render(c.image_url.url)
              }
            };
          default:
            const _exhaustiveCheck = c;
            return _exhaustiveCheck;
        }
      })
    } : {},
    ..."tool_calls" in message ? {
      tool_calls: isEmpty(message.tool_calls) ? void 0 : message.tool_calls.map((t) => {
        return {
          type: t.type,
          id: render(t.id),
          function: {
            name: render(t.function.name),
            arguments: render(t.function.arguments)
          }
        };
      })
    } : {},
    ..."tool_call_id" in message ? {
      tool_call_id: render(message.tool_call_id)
    } : {}
  };
}
function deserializePlainStringAsJSON(s) {
  if (s.trim() === "") {
    return { value: null, error: void 0 };
  }
  try {
    return { value: JSON.parse(s), error: void 0 };
  } catch (e) {
    return { value: s, error: e };
  }
}
function renderTemplatedObject(obj, args, options) {
  if (typeof obj === "string") {
    if (options.strict) {
      lintTemplate(obj, args);
    }
    return Mustache2.render(obj, args, void 0, {
      escape: (value) => {
        if (typeof value === "string") {
          return value;
        } else {
          return JSON.stringify(value);
        }
      }
    });
  } else if (isArray(obj)) {
    return obj.map((item) => renderTemplatedObject(item, args, options));
  } else if (isObject(obj)) {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        renderTemplatedObject(value, args, options)
      ])
    );
  }
  return obj;
}
function renderPromptParams(params, args, options) {
  const schemaParsed = z7.object({
    response_format: z7.object({
      type: z7.literal("json_schema"),
      json_schema: ResponseFormatJsonSchema.omit({ schema: true }).extend({
        schema: z7.unknown()
      })
    })
  }).safeParse(params);
  if (schemaParsed.success) {
    const rawSchema = schemaParsed.data.response_format.json_schema.schema;
    const templatedSchema = renderTemplatedObject(rawSchema, args, options);
    const parsedSchema = typeof templatedSchema === "string" ? deserializePlainStringAsJSON(templatedSchema).value : templatedSchema;
    return {
      ...params,
      response_format: {
        ...schemaParsed.data.response_format,
        json_schema: {
          ...schemaParsed.data.response_format.json_schema,
          schema: parsedSchema
        }
      }
    };
  }
  return params;
}
var Prompt2 = class _Prompt {
  constructor(metadata, defaults, noTrace) {
    this.metadata = metadata;
    this.defaults = defaults;
    this.noTrace = noTrace;
  }
  parsedPromptData;
  hasParsedPromptData = false;
  __braintrust_prompt_marker = true;
  get id() {
    return this.metadata.id;
  }
  get projectId() {
    return this.metadata.project_id;
  }
  get name() {
    return "name" in this.metadata ? this.metadata.name : `Playground function ${this.metadata.id}`;
  }
  get slug() {
    return "slug" in this.metadata ? this.metadata.slug : this.metadata.id;
  }
  get prompt() {
    return this.getParsedPromptData()?.prompt;
  }
  get version() {
    return this.metadata[TRANSACTION_ID_FIELD];
  }
  get options() {
    return this.getParsedPromptData()?.options || {};
  }
  get promptData() {
    return this.getParsedPromptData();
  }
  /**
   * Build the prompt with the given formatting options. The args you pass in will
   * be forwarded to the mustache template that defines the prompt and rendered with
   * the `mustache-js` library.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  build(buildArgs, options = {}) {
    return this.runBuild(buildArgs, {
      flavor: options.flavor ?? "chat",
      messages: options.messages,
      strict: options.strict
    });
  }
  /**
   * This is a special build method that first resolves attachment references, and then
   * calls the regular build method. You should use this if you are building prompts from
   * dataset rows that contain attachments.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  async buildWithAttachments(buildArgs, options = {}) {
    const hydrated = buildArgs instanceof Object ? await resolveAttachmentsToBase64(buildArgs, options.state) : buildArgs;
    return this.runBuild(hydrated, {
      flavor: options.flavor ?? "chat",
      messages: options.messages,
      strict: options.strict
    });
  }
  runBuild(buildArgs, options) {
    const { flavor } = options;
    const params = {
      ...this.defaults,
      ...Object.fromEntries(
        Object.entries(this.options.params || {}).filter(
          ([k, _v]) => !BRAINTRUST_PARAMS.includes(k)
        )
      ),
      ...!isEmpty(this.options.model) ? {
        model: this.options.model
      } : {}
    };
    if (!("model" in params) || isEmpty(params.model)) {
      throw new Error(
        "No model specified. Either specify it in the prompt or as a default"
      );
    }
    const spanInfo = this.noTrace ? {} : {
      span_info: {
        metadata: {
          prompt: this.id ? {
            variables: buildArgs,
            id: this.id,
            project_id: this.projectId,
            version: this.version,
            ..."prompt_session_id" in this.metadata ? { prompt_session_id: this.metadata.prompt_session_id } : {}
          } : void 0
        }
      }
    };
    const prompt = this.prompt;
    if (!prompt) {
      throw new Error("Empty prompt");
    }
    const dictArgParsed = z7.record(z7.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    const renderedPrompt = _Prompt.renderPrompt({
      prompt,
      buildArgs,
      options
    });
    if (flavor === "chat") {
      if (renderedPrompt.type !== "chat") {
        throw new Error(
          "Prompt is a completion prompt. Use buildCompletion() instead"
        );
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        messages: renderedPrompt.messages,
        ...renderedPrompt.tools ? {
          tools: ChatCompletionTool.array().parse(JSON.parse(renderedPrompt.tools))
        } : void 0
      };
    } else if (flavor === "completion") {
      if (renderedPrompt.type !== "completion") {
        throw new Error(`Prompt is a chat prompt. Use flavor: 'chat' instead`);
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        prompt: renderedPrompt.content
      };
    } else {
      throw new Error("never!");
    }
  }
  static renderPrompt({
    prompt,
    buildArgs,
    options
  }) {
    const escape = (v) => {
      if (v === void 0) {
        throw new Error("Missing!");
      } else if (typeof v === "string") {
        return v;
      } else if (v instanceof ReadonlyAttachment) {
        throw new Error(
          "Use buildWithAttachments() to build prompts with attachments"
        );
      } else {
        return JSON.stringify(v);
      }
    };
    const dictArgParsed = z7.record(z7.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    if (prompt.type === "chat") {
      const render = (template) => {
        if (options.strict) {
          lintTemplate(template, variables);
        }
        return Mustache2.render(template, variables, void 0, {
          escape
        });
      };
      const baseMessages = (prompt.messages || []).map(
        (m) => renderMessage(render, m)
      );
      const hasSystemPrompt = baseMessages.some((m) => m.role === "system");
      const messages = [
        ...baseMessages,
        ...(options.messages ?? []).filter(
          (m) => !(hasSystemPrompt && m.role === "system")
        )
      ];
      return {
        type: "chat",
        messages,
        ...prompt.tools?.trim() ? {
          tools: render(prompt.tools)
        } : void 0
      };
    } else if (prompt.type === "completion") {
      if (options.messages) {
        throw new Error(
          "extra messages are not supported for completion prompts"
        );
      }
      if (options.strict) {
        lintTemplate(prompt.content, variables);
      }
      return {
        type: "completion",
        content: Mustache2.render(prompt.content, variables, void 0, {
          escape
        })
      };
    } else {
      const _ = prompt;
      throw new Error(`Invalid prompt type: ${_}`);
    }
  }
  getParsedPromptData() {
    if (!this.hasParsedPromptData) {
      this.parsedPromptData = PromptData.parse(this.metadata.prompt_data);
      this.hasParsedPromptData = true;
    }
    return this.parsedPromptData;
  }
  static isPrompt(data) {
    return typeof data === "object" && data !== null && "__braintrust_prompt_marker" in data;
  }
  static fromPromptData(name, promptData) {
    return new _Prompt(
      {
        name,
        slug: name,
        prompt_data: promptData
      },
      {},
      false
    );
  }
};
var TEST_API_KEY = "___TEST_API_KEY__THIS_IS_NOT_REAL___";
function setInitialTestState() {
  if (!_internalGetGlobalState()) {
    _internalSetInitialState();
  }
}
async function simulateLoginForTests() {
  return await login({
    apiKey: TEST_API_KEY,
    appUrl: "https://braintrust.dev"
  });
}
function simulateLogoutForTests() {
  _globalState.resetLoginInfo();
  _globalState.appUrl = "https://www.braintrust.dev";
  return _globalState;
}
async function getPromptVersions(projectId, promptId) {
  const state = _internalGetGlobalState();
  if (!state) {
    throw new Error("Must log in first");
  }
  await state.login({});
  const query = {
    from: {
      op: "function",
      name: {
        op: "ident",
        name: ["project_prompts"]
      },
      args: [
        {
          op: "literal",
          value: projectId
        }
      ]
    },
    select: [
      {
        op: "star"
      }
    ],
    filter: {
      op: "eq",
      left: { op: "ident", name: ["id"] },
      right: { op: "literal", value: promptId }
    }
  };
  const response = await state.apiConn().post(
    "btql",
    {
      query,
      audit_log: true,
      use_columnstore: false,
      brainstore_realtime: true
    },
    { headers: { "Accept-Encoding": "gzip" } }
  );
  if (!response.ok) {
    throw new Error(
      `API request failed: ${response.status} ${response.statusText}`
    );
  }
  const result = await response.json();
  return result.data?.filter(
    (entry) => ["upsert", "merge"].includes(entry.audit_data?.action)
  ).map((entry) => prettifyXact(entry._xact_id)) || [];
}
var _exportsForTestingOnly = {
  extractAttachments,
  deepCopyEvent,
  useTestBackgroundLogger,
  clearTestBackgroundLogger,
  simulateLoginForTests,
  simulateLogoutForTests,
  setInitialTestState,
  initTestExperiment,
  isGeneratorFunction,
  isAsyncGeneratorFunction
};

// src/node.ts
import { promisify } from "util";
import * as zlib from "zlib";
function configureNode() {
  isomorph_default.getRepoInfo = getRepoInfo;
  isomorph_default.getPastNAncestors = getPastNAncestors;
  isomorph_default.getEnv = (name) => process.env[name];
  isomorph_default.getCallerLocation = getCallerLocation;
  isomorph_default.newAsyncLocalStorage = () => new AsyncLocalStorage();
  isomorph_default.processOn = (event, handler) => {
    process.on(event, handler);
  };
  isomorph_default.pathJoin = path.join;
  isomorph_default.pathDirname = path.dirname;
  isomorph_default.mkdir = fs.mkdir;
  isomorph_default.writeFile = fs.writeFile;
  isomorph_default.readFile = fs.readFile;
  isomorph_default.readdir = fs.readdir;
  isomorph_default.stat = fs.stat;
  isomorph_default.statSync = fsSync.statSync;
  isomorph_default.utimes = fs.utimes;
  isomorph_default.unlink = fs.unlink;
  isomorph_default.homedir = os.homedir;
  isomorph_default.gzip = promisify(zlib.gzip);
  isomorph_default.gunzip = promisify(zlib.gunzip);
  isomorph_default.hash = (data) => crypto.createHash("sha256").update(data).digest("hex");
  _internalSetInitialState();
}

// src/exports-node.ts
var exports_node_exports = {};
__export(exports_node_exports, {
  AISpanProcessor: () => AISpanProcessor,
  Attachment: () => Attachment,
  BaseAttachment: () => BaseAttachment,
  BaseExperiment: () => BaseExperiment,
  BraintrustExporter: () => BraintrustExporter,
  BraintrustMiddleware: () => BraintrustMiddleware,
  BraintrustSpanProcessor: () => BraintrustSpanProcessor,
  BraintrustState: () => BraintrustState,
  BraintrustStream: () => BraintrustStream,
  CodeFunction: () => CodeFunction,
  CodePrompt: () => CodePrompt,
  Dataset: () => Dataset2,
  ERR_PERMALINK: () => ERR_PERMALINK,
  Eval: () => Eval,
  EvalResultWithSummary: () => EvalResultWithSummary,
  Experiment: () => Experiment2,
  ExternalAttachment: () => ExternalAttachment,
  FailedHTTPResponse: () => FailedHTTPResponse,
  INTERNAL_BTQL_LIMIT: () => INTERNAL_BTQL_LIMIT,
  LEGACY_CACHED_HEADER: () => LEGACY_CACHED_HEADER,
  LazyValue: () => LazyValue,
  Logger: () => Logger,
  NOOP_SPAN: () => NOOP_SPAN,
  NOOP_SPAN_PERMALINK: () => NOOP_SPAN_PERMALINK,
  NoopSpan: () => NoopSpan,
  Project: () => Project2,
  ProjectNameIdMap: () => ProjectNameIdMap,
  Prompt: () => Prompt2,
  PromptBuilder: () => PromptBuilder,
  ReadonlyAttachment: () => ReadonlyAttachment,
  ReadonlyExperiment: () => ReadonlyExperiment,
  Reporter: () => Reporter,
  ScorerBuilder: () => ScorerBuilder,
  SpanImpl: () => SpanImpl,
  TestBackgroundLogger: () => TestBackgroundLogger,
  ToolBuilder: () => ToolBuilder,
  X_CACHED_HEADER: () => X_CACHED_HEADER,
  _exportsForTestingOnly: () => _exportsForTestingOnly,
  _internalGetGlobalState: () => _internalGetGlobalState,
  _internalSetInitialState: () => _internalSetInitialState,
  braintrustStreamChunkSchema: () => braintrustStreamChunkSchema,
  buildLocalSummary: () => buildLocalSummary,
  createFinalValuePassThroughStream: () => createFinalValuePassThroughStream,
  currentExperiment: () => currentExperiment,
  currentLogger: () => currentLogger,
  currentSpan: () => currentSpan,
  defaultErrorScoreHandler: () => defaultErrorScoreHandler,
  deserializePlainStringAsJSON: () => deserializePlainStringAsJSON,
  devNullWritableStream: () => devNullWritableStream,
  flush: () => flush,
  getPromptVersions: () => getPromptVersions,
  getSpanParentObject: () => getSpanParentObject,
  graph: () => graph_framework_exports,
  init: () => init,
  initDataset: () => initDataset,
  initExperiment: () => initExperiment,
  initFunction: () => initFunction,
  initLogger: () => initLogger,
  invoke: () => invoke,
  loadPrompt: () => loadPrompt,
  log: () => log,
  logError: () => logError,
  login: () => login,
  loginToState: () => loginToState,
  newId: () => newId,
  parseCachedHeader: () => parseCachedHeader,
  permalink: () => permalink,
  projects: () => projects,
  promptContentsSchema: () => promptContentsSchema,
  promptDefinitionSchema: () => promptDefinitionSchema,
  promptDefinitionToPromptData: () => promptDefinitionToPromptData,
  promptDefinitionWithToolsSchema: () => promptDefinitionWithToolsSchema,
  renderMessage: () => renderMessage,
  renderPromptParams: () => renderPromptParams,
  reportFailures: () => reportFailures,
  runEvaluator: () => runEvaluator,
  setFetch: () => setFetch,
  setMaskingFunction: () => setMaskingFunction,
  spanComponentsToObjectId: () => spanComponentsToObjectId,
  startSpan: () => startSpan,
  summarize: () => summarize,
  toolFunctionDefinitionSchema: () => ToolFunctionDefinition,
  traceable: () => traceable,
  traced: () => traced,
  updateSpan: () => updateSpan,
  withCurrent: () => withCurrent,
  withDataset: () => withDataset,
  withExperiment: () => withExperiment,
  withLogger: () => withLogger,
  withParent: () => withParent,
  wrapAISDK: () => wrapAISDK,
  wrapAISDKModel: () => wrapAISDKModel,
  wrapAnthropic: () => wrapAnthropic,
  wrapOpenAI: () => wrapOpenAI,
  wrapOpenAIv4: () => wrapOpenAIv4,
  wrapTraced: () => wrapTraced
});

// src/functions/invoke.ts
async function invoke(args) {
  const {
    orgName,
    apiKey,
    appUrl,
    forceLogin,
    fetch: fetch2,
    input,
    messages,
    parent: parentArg,
    metadata,
    tags,
    state: stateArg,
    stream,
    mode,
    schema,
    strict,
    ...functionIdArgs
  } = args;
  const state = stateArg ?? _internalGetGlobalState();
  await state.login({
    orgName,
    apiKey,
    appUrl,
    forceLogin,
    fetch: fetch2
  });
  const parent = parentArg ? typeof parentArg === "string" ? parentArg : await parentArg.export() : await getSpanParentObject().export();
  const functionId = FunctionId.safeParse({
    function_id: functionIdArgs.function_id,
    project_name: functionIdArgs.projectName,
    slug: functionIdArgs.slug,
    global_function: functionIdArgs.globalFunction,
    prompt_session_id: functionIdArgs.promptSessionId,
    prompt_session_function_id: functionIdArgs.promptSessionFunctionId,
    version: functionIdArgs.version
  });
  if (!functionId.success) {
    throw new Error(
      `Invalid function ID arguments: ${functionId.error.message}`
    );
  }
  const request3 = {
    ...functionId.data,
    input,
    messages,
    parent,
    metadata,
    tags,
    stream,
    mode,
    strict
  };
  const resp = await state.proxyConn().post(`function/invoke`, request3, {
    headers: {
      Accept: stream ? "text/event-stream" : "application/json"
    }
  });
  if (stream) {
    if (!resp.body) {
      throw new Error("Received empty stream body");
    }
    return new BraintrustStream(resp.body);
  } else {
    const data = await resp.json();
    return schema ? schema.parse(data) : data;
  }
}
function initFunction({
  projectName,
  slug,
  version
}) {
  const f = async (input) => {
    return await invoke({
      projectName,
      slug,
      version,
      input
    });
  };
  Object.defineProperty(f, "name", {
    value: `initFunction-${projectName}-${slug}-${version ?? "latest"}`
  });
  return f;
}

// ../../node_modules/.pnpm/async@3.2.5/node_modules/async/dist/async.mjs
function initialParams(fn) {
  return function(...args) {
    var callback = args.pop();
    return fn.call(this, args, callback);
  };
}
var hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
var hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
function fallback(fn) {
  setTimeout(fn, 0);
}
function wrap(defer) {
  return (fn, ...args) => defer(() => fn(...args));
}
var _defer$1;
if (hasQueueMicrotask) {
  _defer$1 = queueMicrotask;
} else if (hasSetImmediate) {
  _defer$1 = setImmediate;
} else if (hasNextTick) {
  _defer$1 = process.nextTick;
} else {
  _defer$1 = fallback;
}
var setImmediate$1 = wrap(_defer$1);
function asyncify(func) {
  if (isAsync(func)) {
    return function(...args) {
      const callback = args.pop();
      const promise = func.apply(this, args);
      return handlePromise(promise, callback);
    };
  }
  return initialParams(function(args, callback) {
    var result;
    try {
      result = func.apply(this, args);
    } catch (e) {
      return callback(e);
    }
    if (result && typeof result.then === "function") {
      return handlePromise(result, callback);
    } else {
      callback(null, result);
    }
  });
}
function handlePromise(promise, callback) {
  return promise.then((value) => {
    invokeCallback(callback, null, value);
  }, (err) => {
    invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));
  });
}
function invokeCallback(callback, error2, value) {
  try {
    callback(error2, value);
  } catch (err) {
    setImmediate$1((e) => {
      throw e;
    }, err);
  }
}
function isAsync(fn) {
  return fn[Symbol.toStringTag] === "AsyncFunction";
}
function isAsyncGenerator(fn) {
  return fn[Symbol.toStringTag] === "AsyncGenerator";
}
function isAsyncIterable(obj) {
  return typeof obj[Symbol.asyncIterator] === "function";
}
function wrapAsync(asyncFn) {
  if (typeof asyncFn !== "function") throw new Error("expected a function");
  return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}
function awaitify(asyncFn, arity) {
  if (!arity) arity = asyncFn.length;
  if (!arity) throw new Error("arity is undefined");
  function awaitable(...args) {
    if (typeof args[arity - 1] === "function") {
      return asyncFn.apply(this, args);
    }
    return new Promise((resolve, reject2) => {
      args[arity - 1] = (err, ...cbArgs) => {
        if (err) return reject2(err);
        resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
      };
      asyncFn.apply(this, args);
    });
  }
  return awaitable;
}
function applyEach$1(eachfn) {
  return function applyEach2(fns, ...callArgs) {
    const go = awaitify(function(callback) {
      var that = this;
      return eachfn(fns, (fn, cb) => {
        wrapAsync(fn).apply(that, callArgs.concat(cb));
      }, callback);
    });
    return go;
  };
}
function _asyncMap(eachfn, arr, iteratee, callback) {
  arr = arr || [];
  var results = [];
  var counter = 0;
  var _iteratee = wrapAsync(iteratee);
  return eachfn(arr, (value, _, iterCb) => {
    var index = counter++;
    _iteratee(value, (err, v) => {
      results[index] = v;
      iterCb(err);
    });
  }, (err) => {
    callback(err, results);
  });
}
function isArrayLike(value) {
  return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
}
var breakLoop = {};
var breakLoop$1 = breakLoop;
function once(fn) {
  function wrapper(...args) {
    if (fn === null) return;
    var callFn = fn;
    fn = null;
    callFn.apply(this, args);
  }
  Object.assign(wrapper, fn);
  return wrapper;
}
function getIterator(coll) {
  return coll[Symbol.iterator] && coll[Symbol.iterator]();
}
function createArrayIterator(coll) {
  var i = -1;
  var len = coll.length;
  return function next() {
    return ++i < len ? { value: coll[i], key: i } : null;
  };
}
function createES2015Iterator(iterator) {
  var i = -1;
  return function next() {
    var item = iterator.next();
    if (item.done)
      return null;
    i++;
    return { value: item.value, key: i };
  };
}
function createObjectIterator(obj) {
  var okeys = obj ? Object.keys(obj) : [];
  var i = -1;
  var len = okeys.length;
  return function next() {
    var key = okeys[++i];
    if (key === "__proto__") {
      return next();
    }
    return i < len ? { value: obj[key], key } : null;
  };
}
function createIterator(coll) {
  if (isArrayLike(coll)) {
    return createArrayIterator(coll);
  }
  var iterator = getIterator(coll);
  return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}
function onlyOnce(fn) {
  return function(...args) {
    if (fn === null) throw new Error("Callback was already called.");
    var callFn = fn;
    fn = null;
    callFn.apply(this, args);
  };
}
function asyncEachOfLimit(generator, limit, iteratee, callback) {
  let done = false;
  let canceled = false;
  let awaiting = false;
  let running = 0;
  let idx = 0;
  function replenish() {
    if (running >= limit || awaiting || done) return;
    awaiting = true;
    generator.next().then(({ value, done: iterDone }) => {
      if (canceled || done) return;
      awaiting = false;
      if (iterDone) {
        done = true;
        if (running <= 0) {
          callback(null);
        }
        return;
      }
      running++;
      iteratee(value, idx, iterateeCallback);
      idx++;
      replenish();
    }).catch(handleError);
  }
  function iterateeCallback(err, result) {
    running -= 1;
    if (canceled) return;
    if (err) return handleError(err);
    if (err === false) {
      done = true;
      canceled = true;
      return;
    }
    if (result === breakLoop$1 || done && running <= 0) {
      done = true;
      return callback(null);
    }
    replenish();
  }
  function handleError(err) {
    if (canceled) return;
    awaiting = false;
    done = true;
    callback(err);
  }
  replenish();
}
var eachOfLimit$2 = (limit) => {
  return (obj, iteratee, callback) => {
    callback = once(callback);
    if (limit <= 0) {
      throw new RangeError("concurrency limit cannot be less than 1");
    }
    if (!obj) {
      return callback(null);
    }
    if (isAsyncGenerator(obj)) {
      return asyncEachOfLimit(obj, limit, iteratee, callback);
    }
    if (isAsyncIterable(obj)) {
      return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);
    }
    var nextElem = createIterator(obj);
    var done = false;
    var canceled = false;
    var running = 0;
    var looping = false;
    function iterateeCallback(err, value) {
      if (canceled) return;
      running -= 1;
      if (err) {
        done = true;
        callback(err);
      } else if (err === false) {
        done = true;
        canceled = true;
      } else if (value === breakLoop$1 || done && running <= 0) {
        done = true;
        return callback(null);
      } else if (!looping) {
        replenish();
      }
    }
    function replenish() {
      looping = true;
      while (running < limit && !done) {
        var elem = nextElem();
        if (elem === null) {
          done = true;
          if (running <= 0) {
            callback(null);
          }
          return;
        }
        running += 1;
        iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
      }
      looping = false;
    }
    replenish();
  };
};
function eachOfLimit(coll, limit, iteratee, callback) {
  return eachOfLimit$2(limit)(coll, wrapAsync(iteratee), callback);
}
var eachOfLimit$1 = awaitify(eachOfLimit, 4);
function eachOfArrayLike(coll, iteratee, callback) {
  callback = once(callback);
  var index = 0, completed = 0, { length } = coll, canceled = false;
  if (length === 0) {
    callback(null);
  }
  function iteratorCallback(err, value) {
    if (err === false) {
      canceled = true;
    }
    if (canceled === true) return;
    if (err) {
      callback(err);
    } else if (++completed === length || value === breakLoop$1) {
      callback(null);
    }
  }
  for (; index < length; index++) {
    iteratee(coll[index], index, onlyOnce(iteratorCallback));
  }
}
function eachOfGeneric(coll, iteratee, callback) {
  return eachOfLimit$1(coll, Infinity, iteratee, callback);
}
function eachOf(coll, iteratee, callback) {
  var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
  return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}
var eachOf$1 = awaitify(eachOf, 3);
function map(coll, iteratee, callback) {
  return _asyncMap(eachOf$1, coll, iteratee, callback);
}
var map$1 = awaitify(map, 3);
var applyEach = applyEach$1(map$1);
function eachOfSeries(coll, iteratee, callback) {
  return eachOfLimit$1(coll, 1, iteratee, callback);
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);
function mapSeries(coll, iteratee, callback) {
  return _asyncMap(eachOfSeries$1, coll, iteratee, callback);
}
var mapSeries$1 = awaitify(mapSeries, 3);
var applyEachSeries = applyEach$1(mapSeries$1);
var PROMISE_SYMBOL = Symbol("promiseCallback");
var DLL = class {
  constructor() {
    this.head = this.tail = null;
    this.length = 0;
  }
  removeLink(node) {
    if (node.prev) node.prev.next = node.next;
    else this.head = node.next;
    if (node.next) node.next.prev = node.prev;
    else this.tail = node.prev;
    node.prev = node.next = null;
    this.length -= 1;
    return node;
  }
  empty() {
    while (this.head) this.shift();
    return this;
  }
  insertAfter(node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;
    else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
  }
  insertBefore(node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;
    else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
  }
  unshift(node) {
    if (this.head) this.insertBefore(this.head, node);
    else setInitial(this, node);
  }
  push(node) {
    if (this.tail) this.insertAfter(this.tail, node);
    else setInitial(this, node);
  }
  shift() {
    return this.head && this.removeLink(this.head);
  }
  pop() {
    return this.tail && this.removeLink(this.tail);
  }
  toArray() {
    return [...this];
  }
  *[Symbol.iterator]() {
    var cur = this.head;
    while (cur) {
      yield cur.data;
      cur = cur.next;
    }
  }
  remove(testFn) {
    var curr = this.head;
    while (curr) {
      var { next } = curr;
      if (testFn(curr)) {
        this.removeLink(curr);
      }
      curr = next;
    }
    return this;
  }
};
function setInitial(dll, node) {
  dll.length = 1;
  dll.head = dll.tail = node;
}
function queue$1(worker, concurrency, payload) {
  if (concurrency == null) {
    concurrency = 1;
  } else if (concurrency === 0) {
    throw new RangeError("Concurrency must not be zero");
  }
  var _worker = wrapAsync(worker);
  var numRunning = 0;
  var workersList = [];
  const events = {
    error: [],
    drain: [],
    saturated: [],
    unsaturated: [],
    empty: []
  };
  function on(event, handler) {
    events[event].push(handler);
  }
  function once2(event, handler) {
    const handleAndRemove = (...args) => {
      off(event, handleAndRemove);
      handler(...args);
    };
    events[event].push(handleAndRemove);
  }
  function off(event, handler) {
    if (!event) return Object.keys(events).forEach((ev) => events[ev] = []);
    if (!handler) return events[event] = [];
    events[event] = events[event].filter((ev) => ev !== handler);
  }
  function trigger(event, ...args) {
    events[event].forEach((handler) => handler(...args));
  }
  var processingScheduled = false;
  function _insert(data, insertAtFront, rejectOnError, callback) {
    if (callback != null && typeof callback !== "function") {
      throw new Error("task callback must be a function");
    }
    q.started = true;
    var res, rej;
    function promiseCallback(err, ...args) {
      if (err) return rejectOnError ? rej(err) : res();
      if (args.length <= 1) return res(args[0]);
      res(args);
    }
    var item = q._createTaskItem(
      data,
      rejectOnError ? promiseCallback : callback || promiseCallback
    );
    if (insertAtFront) {
      q._tasks.unshift(item);
    } else {
      q._tasks.push(item);
    }
    if (!processingScheduled) {
      processingScheduled = true;
      setImmediate$1(() => {
        processingScheduled = false;
        q.process();
      });
    }
    if (rejectOnError || !callback) {
      return new Promise((resolve, reject2) => {
        res = resolve;
        rej = reject2;
      });
    }
  }
  function _createCB(tasks) {
    return function(err, ...args) {
      numRunning -= 1;
      for (var i = 0, l = tasks.length; i < l; i++) {
        var task = tasks[i];
        var index = workersList.indexOf(task);
        if (index === 0) {
          workersList.shift();
        } else if (index > 0) {
          workersList.splice(index, 1);
        }
        task.callback(err, ...args);
        if (err != null) {
          trigger("error", err, task.data);
        }
      }
      if (numRunning <= q.concurrency - q.buffer) {
        trigger("unsaturated");
      }
      if (q.idle()) {
        trigger("drain");
      }
      q.process();
    };
  }
  function _maybeDrain(data) {
    if (data.length === 0 && q.idle()) {
      setImmediate$1(() => trigger("drain"));
      return true;
    }
    return false;
  }
  const eventMethod = (name) => (handler) => {
    if (!handler) {
      return new Promise((resolve, reject2) => {
        once2(name, (err, data) => {
          if (err) return reject2(err);
          resolve(data);
        });
      });
    }
    off(name);
    on(name, handler);
  };
  var isProcessing = false;
  var q = {
    _tasks: new DLL(),
    _createTaskItem(data, callback) {
      return {
        data,
        callback
      };
    },
    *[Symbol.iterator]() {
      yield* q._tasks[Symbol.iterator]();
    },
    concurrency,
    payload,
    buffer: concurrency / 4,
    started: false,
    paused: false,
    push(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, false, false, callback));
      }
      return _insert(data, false, false, callback);
    },
    pushAsync(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, false, true, callback));
      }
      return _insert(data, false, true, callback);
    },
    kill() {
      off();
      q._tasks.empty();
    },
    unshift(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, true, false, callback));
      }
      return _insert(data, true, false, callback);
    },
    unshiftAsync(data, callback) {
      if (Array.isArray(data)) {
        if (_maybeDrain(data)) return;
        return data.map((datum) => _insert(datum, true, true, callback));
      }
      return _insert(data, true, true, callback);
    },
    remove(testFn) {
      q._tasks.remove(testFn);
    },
    process() {
      if (isProcessing) {
        return;
      }
      isProcessing = true;
      while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
        var tasks = [], data = [];
        var l = q._tasks.length;
        if (q.payload) l = Math.min(l, q.payload);
        for (var i = 0; i < l; i++) {
          var node = q._tasks.shift();
          tasks.push(node);
          workersList.push(node);
          data.push(node.data);
        }
        numRunning += 1;
        if (q._tasks.length === 0) {
          trigger("empty");
        }
        if (numRunning === q.concurrency) {
          trigger("saturated");
        }
        var cb = onlyOnce(_createCB(tasks));
        _worker(data, cb);
      }
      isProcessing = false;
    },
    length() {
      return q._tasks.length;
    },
    running() {
      return numRunning;
    },
    workersList() {
      return workersList;
    },
    idle() {
      return q._tasks.length + numRunning === 0;
    },
    pause() {
      q.paused = true;
    },
    resume() {
      if (q.paused === false) {
        return;
      }
      q.paused = false;
      setImmediate$1(q.process);
    }
  };
  Object.defineProperties(q, {
    saturated: {
      writable: false,
      value: eventMethod("saturated")
    },
    unsaturated: {
      writable: false,
      value: eventMethod("unsaturated")
    },
    empty: {
      writable: false,
      value: eventMethod("empty")
    },
    drain: {
      writable: false,
      value: eventMethod("drain")
    },
    error: {
      writable: false,
      value: eventMethod("error")
    }
  });
  return q;
}
function reduce(coll, memo, iteratee, callback) {
  callback = once(callback);
  var _iteratee = wrapAsync(iteratee);
  return eachOfSeries$1(coll, (x, i, iterCb) => {
    _iteratee(memo, x, (err, v) => {
      memo = v;
      iterCb(err);
    });
  }, (err) => callback(err, memo));
}
var reduce$1 = awaitify(reduce, 4);
function mapLimit(coll, limit, iteratee, callback) {
  return _asyncMap(eachOfLimit$2(limit), coll, iteratee, callback);
}
var mapLimit$1 = awaitify(mapLimit, 4);
function concatLimit(coll, limit, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return mapLimit$1(coll, limit, (val, iterCb) => {
    _iteratee(val, (err, ...args) => {
      if (err) return iterCb(err);
      return iterCb(err, args);
    });
  }, (err, mapResults) => {
    var result = [];
    for (var i = 0; i < mapResults.length; i++) {
      if (mapResults[i]) {
        result = result.concat(...mapResults[i]);
      }
    }
    return callback(err, result);
  });
}
var concatLimit$1 = awaitify(concatLimit, 4);
function concat(coll, iteratee, callback) {
  return concatLimit$1(coll, Infinity, iteratee, callback);
}
var concat$1 = awaitify(concat, 3);
function concatSeries(coll, iteratee, callback) {
  return concatLimit$1(coll, 1, iteratee, callback);
}
var concatSeries$1 = awaitify(concatSeries, 3);
function _createTester(check, getResult) {
  return (eachfn, arr, _iteratee, cb) => {
    var testPassed = false;
    var testResult;
    const iteratee = wrapAsync(_iteratee);
    eachfn(arr, (value, _, callback) => {
      iteratee(value, (err, result) => {
        if (err || err === false) return callback(err);
        if (check(result) && !testResult) {
          testPassed = true;
          testResult = getResult(true, value);
          return callback(null, breakLoop$1);
        }
        callback();
      });
    }, (err) => {
      if (err) return cb(err);
      cb(null, testPassed ? testResult : getResult(false));
    });
  };
}
function detect(coll, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);
}
var detect$1 = awaitify(detect, 3);
function detectLimit(coll, limit, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var detectLimit$1 = awaitify(detectLimit, 4);
function detectSeries(coll, iteratee, callback) {
  return _createTester((bool) => bool, (res, item) => item)(eachOfLimit$2(1), coll, iteratee, callback);
}
var detectSeries$1 = awaitify(detectSeries, 3);
function consoleFunc(name) {
  return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
    if (typeof console === "object") {
      if (err) {
        if (console.error) {
          console.error(err);
        }
      } else if (console[name]) {
        resultArgs.forEach((x) => console[name](x));
      }
    }
  });
}
var dir = consoleFunc("dir");
function doWhilst(iteratee, test, callback) {
  callback = onlyOnce(callback);
  var _fn = wrapAsync(iteratee);
  var _test = wrapAsync(test);
  var results;
  function next(err, ...args) {
    if (err) return callback(err);
    if (err === false) return;
    results = args;
    _test(...args, check);
  }
  function check(err, truth) {
    if (err) return callback(err);
    if (err === false) return;
    if (!truth) return callback(null, ...results);
    _fn(next);
  }
  return check(null, true);
}
var doWhilst$1 = awaitify(doWhilst, 3);
function _withoutIndex(iteratee) {
  return (value, index, callback) => iteratee(value, callback);
}
function eachLimit$2(coll, iteratee, callback) {
  return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var each = awaitify(eachLimit$2, 3);
function eachLimit(coll, limit, iteratee, callback) {
  return eachOfLimit$2(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$1 = awaitify(eachLimit, 4);
function eachSeries(coll, iteratee, callback) {
  return eachLimit$1(coll, 1, iteratee, callback);
}
var eachSeries$1 = awaitify(eachSeries, 3);
function ensureAsync(fn) {
  if (isAsync(fn)) return fn;
  return function(...args) {
    var callback = args.pop();
    var sync = true;
    args.push((...innerArgs) => {
      if (sync) {
        setImmediate$1(() => callback(...innerArgs));
      } else {
        callback(...innerArgs);
      }
    });
    fn.apply(this, args);
    sync = false;
  };
}
function every(coll, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOf$1, coll, iteratee, callback);
}
var every$1 = awaitify(every, 3);
function everyLimit(coll, limit, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var everyLimit$1 = awaitify(everyLimit, 4);
function everySeries(coll, iteratee, callback) {
  return _createTester((bool) => !bool, (res) => !res)(eachOfSeries$1, coll, iteratee, callback);
}
var everySeries$1 = awaitify(everySeries, 3);
function filterArray(eachfn, arr, iteratee, callback) {
  var truthValues = new Array(arr.length);
  eachfn(arr, (x, index, iterCb) => {
    iteratee(x, (err, v) => {
      truthValues[index] = !!v;
      iterCb(err);
    });
  }, (err) => {
    if (err) return callback(err);
    var results = [];
    for (var i = 0; i < arr.length; i++) {
      if (truthValues[i]) results.push(arr[i]);
    }
    callback(null, results);
  });
}
function filterGeneric(eachfn, coll, iteratee, callback) {
  var results = [];
  eachfn(coll, (x, index, iterCb) => {
    iteratee(x, (err, v) => {
      if (err) return iterCb(err);
      if (v) {
        results.push({ index, value: x });
      }
      iterCb(err);
    });
  }, (err) => {
    if (err) return callback(err);
    callback(null, results.sort((a, b) => a.index - b.index).map((v) => v.value));
  });
}
function _filter(eachfn, coll, iteratee, callback) {
  var filter2 = isArrayLike(coll) ? filterArray : filterGeneric;
  return filter2(eachfn, coll, wrapAsync(iteratee), callback);
}
function filter(coll, iteratee, callback) {
  return _filter(eachOf$1, coll, iteratee, callback);
}
var filter$1 = awaitify(filter, 3);
function filterLimit(coll, limit, iteratee, callback) {
  return _filter(eachOfLimit$2(limit), coll, iteratee, callback);
}
var filterLimit$1 = awaitify(filterLimit, 4);
function filterSeries(coll, iteratee, callback) {
  return _filter(eachOfSeries$1, coll, iteratee, callback);
}
var filterSeries$1 = awaitify(filterSeries, 3);
function forever(fn, errback) {
  var done = onlyOnce(errback);
  var task = wrapAsync(ensureAsync(fn));
  function next(err) {
    if (err) return done(err);
    if (err === false) return;
    task(next);
  }
  return next();
}
var forever$1 = awaitify(forever, 2);
function groupByLimit(coll, limit, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return mapLimit$1(coll, limit, (val, iterCb) => {
    _iteratee(val, (err, key) => {
      if (err) return iterCb(err);
      return iterCb(err, { key, val });
    });
  }, (err, mapResults) => {
    var result = {};
    var { hasOwnProperty: hasOwnProperty2 } = Object.prototype;
    for (var i = 0; i < mapResults.length; i++) {
      if (mapResults[i]) {
        var { key } = mapResults[i];
        var { val } = mapResults[i];
        if (hasOwnProperty2.call(result, key)) {
          result[key].push(val);
        } else {
          result[key] = [val];
        }
      }
    }
    return callback(err, result);
  });
}
var groupByLimit$1 = awaitify(groupByLimit, 4);
var log2 = consoleFunc("log");
function mapValuesLimit(obj, limit, iteratee, callback) {
  callback = once(callback);
  var newObj = {};
  var _iteratee = wrapAsync(iteratee);
  return eachOfLimit$2(limit)(obj, (val, key, next) => {
    _iteratee(val, key, (err, result) => {
      if (err) return next(err);
      newObj[key] = result;
      next(err);
    });
  }, (err) => callback(err, newObj));
}
var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);
var _defer;
if (hasNextTick) {
  _defer = process.nextTick;
} else if (hasSetImmediate) {
  _defer = setImmediate;
} else {
  _defer = fallback;
}
var nextTick = wrap(_defer);
var _parallel = awaitify((eachfn, tasks, callback) => {
  var results = isArrayLike(tasks) ? [] : {};
  eachfn(tasks, (task, key, taskCb) => {
    wrapAsync(task)((err, ...result) => {
      if (result.length < 2) {
        [result] = result;
      }
      results[key] = result;
      taskCb(err);
    });
  }, (err) => callback(err, results));
}, 3);
function queue(worker, concurrency) {
  var _worker = wrapAsync(worker);
  return queue$1((items, cb) => {
    _worker(items[0], cb);
  }, concurrency, 1);
}
function race(tasks, callback) {
  callback = once(callback);
  if (!Array.isArray(tasks)) return callback(new TypeError("First argument to race must be an array of functions"));
  if (!tasks.length) return callback();
  for (var i = 0, l = tasks.length; i < l; i++) {
    wrapAsync(tasks[i])(callback);
  }
}
var race$1 = awaitify(race, 2);
function reject$2(eachfn, arr, _iteratee, callback) {
  const iteratee = wrapAsync(_iteratee);
  return _filter(eachfn, arr, (value, cb) => {
    iteratee(value, (err, v) => {
      cb(err, !v);
    });
  }, callback);
}
function reject(coll, iteratee, callback) {
  return reject$2(eachOf$1, coll, iteratee, callback);
}
var reject$1 = awaitify(reject, 3);
function rejectLimit(coll, limit, iteratee, callback) {
  return reject$2(eachOfLimit$2(limit), coll, iteratee, callback);
}
var rejectLimit$1 = awaitify(rejectLimit, 4);
function rejectSeries(coll, iteratee, callback) {
  return reject$2(eachOfSeries$1, coll, iteratee, callback);
}
var rejectSeries$1 = awaitify(rejectSeries, 3);
function some(coll, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOf$1, coll, iteratee, callback);
}
var some$1 = awaitify(some, 3);
function someLimit(coll, limit, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOfLimit$2(limit), coll, iteratee, callback);
}
var someLimit$1 = awaitify(someLimit, 4);
function someSeries(coll, iteratee, callback) {
  return _createTester(Boolean, (res) => res)(eachOfSeries$1, coll, iteratee, callback);
}
var someSeries$1 = awaitify(someSeries, 3);
function sortBy(coll, iteratee, callback) {
  var _iteratee = wrapAsync(iteratee);
  return map$1(coll, (x, iterCb) => {
    _iteratee(x, (err, criteria) => {
      if (err) return iterCb(err);
      iterCb(err, { value: x, criteria });
    });
  }, (err, results) => {
    if (err) return callback(err);
    callback(null, results.sort(comparator).map((v) => v.value));
  });
  function comparator(left, right) {
    var a = left.criteria, b = right.criteria;
    return a < b ? -1 : a > b ? 1 : 0;
  }
}
var sortBy$1 = awaitify(sortBy, 3);
function tryEach(tasks, callback) {
  var error2 = null;
  var result;
  return eachSeries$1(tasks, (task, taskCb) => {
    wrapAsync(task)((err, ...args) => {
      if (err === false) return taskCb(err);
      if (args.length < 2) {
        [result] = args;
      } else {
        result = args;
      }
      error2 = err;
      taskCb(err ? null : {});
    });
  }, () => callback(error2, result));
}
var tryEach$1 = awaitify(tryEach);
function whilst(test, iteratee, callback) {
  callback = onlyOnce(callback);
  var _fn = wrapAsync(iteratee);
  var _test = wrapAsync(test);
  var results = [];
  function next(err, ...rest) {
    if (err) return callback(err);
    results = rest;
    if (err === false) return;
    _test(check);
  }
  function check(err, truth) {
    if (err) return callback(err);
    if (err === false) return;
    if (!truth) return callback(null, ...results);
    _fn(next);
  }
  return _test(check);
}
var whilst$1 = awaitify(whilst, 3);
function waterfall(tasks, callback) {
  callback = once(callback);
  if (!Array.isArray(tasks)) return callback(new Error("First argument to waterfall must be an array of functions"));
  if (!tasks.length) return callback();
  var taskIndex = 0;
  function nextTask(args) {
    var task = wrapAsync(tasks[taskIndex++]);
    task(...args, onlyOnce(next));
  }
  function next(err, ...args) {
    if (err === false) return;
    if (err || taskIndex === tasks.length) {
      return callback(err, ...args);
    }
    nextTask(args);
  }
  nextTask([]);
}
var waterfall$1 = awaitify(waterfall);

// src/framework.ts
import chalk from "chalk";
import pluralize from "pluralize";

// src/progress.ts
import * as cliProgress from "cli-progress";
var MAX_NAME_LENGTH = 40;
function fitNameToSpaces(name, length) {
  const padded = name.padEnd(length);
  if (padded.length <= length) {
    return padded;
  }
  return padded.substring(0, length - 3) + "...";
}
var BarProgressReporter = class {
  multiBar;
  bars = {};
  constructor() {
    this.multiBar = new cliProgress.MultiBar(
      {
        clearOnComplete: false,
        format: " {bar} | {evaluator} | {percentage}% | {value}/{total} datapoints",
        autopadding: true
      },
      cliProgress.Presets.shades_grey
    );
  }
  start(name, total) {
    const bar = this.multiBar.create(total, 0);
    this.bars[name] = bar;
  }
  stop() {
    this.multiBar.stop();
  }
  increment(name) {
    this.bars[name].increment({
      evaluator: fitNameToSpaces(name, MAX_NAME_LENGTH)
    });
  }
};

// src/eval-parameters.ts
import { z as z9 } from "zod/v3";

// src/framework2.ts
import path2 from "path";
import slugifyLib from "slugify";
import { z as z8 } from "zod/v3";
var ProjectBuilder = class {
  create(opts) {
    return new Project2(opts);
  }
};
var projects = new ProjectBuilder();
var Project2 = class {
  name;
  id;
  tools;
  prompts;
  scorers;
  _publishableCodeFunctions = [];
  _publishablePrompts = [];
  constructor(args) {
    _initializeSpanContext();
    this.name = "name" in args ? args.name : void 0;
    this.id = "id" in args ? args.id : void 0;
    this.tools = new ToolBuilder(this);
    this.prompts = new PromptBuilder(this);
    this.scorers = new ScorerBuilder(this);
  }
  addPrompt(prompt) {
    this._publishablePrompts.push(prompt);
    if (globalThis._lazy_load) {
      globalThis._evals.prompts.push(prompt);
    }
  }
  addCodeFunction(fn) {
    this._publishableCodeFunctions.push(fn);
    if (globalThis._lazy_load) {
      globalThis._evals.functions.push(fn);
    }
  }
  async publish() {
    if (globalThis._lazy_load) {
      console.warn("publish() is a no-op when running `braintrust push`.");
      return;
    }
    await login();
    const projectMap = new ProjectNameIdMap();
    const functionDefinitions = [];
    if (this._publishableCodeFunctions.length > 0) {
      console.warn(
        "Code functions cannot be published directly. Use `braintrust push` instead."
      );
    }
    if (this._publishablePrompts.length > 0) {
      for (const prompt of this._publishablePrompts) {
        const functionDefinition = await prompt.toFunctionDefinition(projectMap);
        functionDefinitions.push(functionDefinition);
      }
    }
    await _internalGetGlobalState().apiConn().post_json("insert-functions", {
      functions: functionDefinitions
    });
  }
};
var ToolBuilder = class {
  constructor(project) {
    this.project = project;
  }
  taskCounter = 0;
  // This type definition is just a catch all so that the implementation can be
  // less specific than the two more specific declarations above.
  create(opts) {
    this.taskCounter++;
    opts = opts ?? {};
    const { handler, name, slug, parameters, returns, ...rest } = opts;
    let resolvedName = name ?? handler.name;
    if (resolvedName.trim().length === 0) {
      resolvedName = `Tool ${path2.basename(__filename)} ${this.taskCounter}`;
    }
    const tool = new CodeFunction(this.project, {
      handler,
      name: resolvedName,
      slug: slug ?? slugifyLib(resolvedName, { lower: true, strict: true }),
      type: "tool",
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions
      parameters,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions
      returns,
      ...rest
    });
    this.project.addCodeFunction(tool);
    return tool;
  }
};
var ScorerBuilder = class {
  constructor(project) {
    this.project = project;
  }
  taskCounter = 0;
  create(opts) {
    this.taskCounter++;
    let resolvedName = opts.name;
    if (!resolvedName && "handler" in opts) {
      resolvedName = opts.handler.name;
    }
    if (!resolvedName || resolvedName.trim().length === 0) {
      resolvedName = `Scorer ${path2.basename(__filename)} ${this.taskCounter}`;
    }
    const slug = opts.slug ?? slugifyLib(resolvedName, { lower: true, strict: true });
    if ("handler" in opts) {
      const scorer = new CodeFunction(this.project, {
        ...opts,
        name: resolvedName,
        slug,
        type: "scorer"
      });
      this.project.addCodeFunction(scorer);
    } else {
      const promptBlock = "messages" in opts ? {
        type: "chat",
        messages: opts.messages
      } : {
        type: "completion",
        content: opts.prompt
      };
      const promptData = {
        prompt: promptBlock,
        options: {
          model: opts.model,
          params: opts.params
        },
        parser: {
          type: "llm_classifier",
          use_cot: opts.useCot,
          choice_scores: opts.choiceScores
        }
      };
      const codePrompt = new CodePrompt(
        this.project,
        promptData,
        [],
        {
          ...opts,
          name: resolvedName,
          slug
        },
        "scorer"
      );
      this.project.addPrompt(codePrompt);
    }
  }
};
var CodeFunction = class {
  constructor(project, opts) {
    this.project = project;
    this.handler = opts.handler;
    this.name = opts.name;
    this.slug = opts.slug;
    this.description = opts.description;
    this.type = opts.type;
    this.ifExists = opts.ifExists;
    this.parameters = opts.parameters;
    this.returns = opts.returns;
    if (this.returns && !this.parameters) {
      throw new Error("parameters are required if return type is defined");
    }
  }
  handler;
  name;
  slug;
  type;
  description;
  parameters;
  returns;
  ifExists;
  key() {
    return JSON.stringify([
      this.project.id ?? "",
      this.project.name ?? "",
      this.slug
    ]);
  }
};
var CodePrompt = class {
  project;
  name;
  slug;
  prompt;
  ifExists;
  description;
  id;
  functionType;
  toolFunctions;
  constructor(project, prompt, toolFunctions, opts, functionType) {
    this.project = project;
    this.name = opts.name;
    this.slug = opts.slug;
    this.prompt = prompt;
    this.toolFunctions = toolFunctions;
    this.ifExists = opts.ifExists;
    this.description = opts.description;
    this.id = opts.id;
    this.functionType = functionType;
  }
  async toFunctionDefinition(projectNameToId) {
    const prompt_data = {
      ...this.prompt
    };
    if (this.toolFunctions.length > 0) {
      const resolvableToolFunctions = await Promise.all(
        this.toolFunctions.map(async (fn) => {
          if ("slug" in fn) {
            return {
              type: "slug",
              project_id: await projectNameToId.resolve(fn.project),
              slug: fn.slug
            };
          } else {
            return fn;
          }
        })
      );
      prompt_data.tool_functions = // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      resolvableToolFunctions;
    }
    return {
      project_id: await projectNameToId.resolve(this.project),
      name: this.name,
      slug: this.slug,
      description: this.description ?? "",
      function_data: {
        type: "prompt"
      },
      function_type: this.functionType,
      prompt_data,
      if_exists: this.ifExists
    };
  }
};
var promptContentsSchema = z8.union([
  z8.object({
    prompt: z8.string()
  }),
  z8.object({
    messages: z8.array(ChatCompletionMessageParam)
  })
]);
var promptDefinitionSchema = promptContentsSchema.and(
  z8.object({
    model: z8.string(),
    params: ModelParams.optional()
  })
);
var promptDefinitionWithToolsSchema = promptDefinitionSchema.and(
  z8.object({
    tools: z8.array(ToolFunctionDefinition).optional()
  })
);
var PromptBuilder = class {
  constructor(project) {
    this.project = project;
  }
  create(opts) {
    const toolFunctions = [];
    const rawTools = [];
    for (const tool of opts.tools ?? []) {
      if (tool instanceof CodeFunction) {
        toolFunctions.push(tool);
      } else if ("type" in tool && !("function" in tool)) {
        toolFunctions.push(tool);
      } else {
        rawTools.push(tool);
      }
    }
    const slug = opts.slug ?? slugifyLib(opts.name, { lower: true, strict: true });
    const promptData = promptDefinitionToPromptData(opts, rawTools);
    const promptRow = {
      id: opts.id,
      _xact_id: opts.version ? loadPrettyXact(opts.version) : void 0,
      name: opts.name,
      slug,
      prompt_data: promptData,
      ...this.project.id !== void 0 ? { project_id: this.project.id } : {}
    };
    const prompt = new Prompt2(
      promptRow,
      {},
      // It doesn't make sense to specify defaults here.
      opts.noTrace ?? false
    );
    const codePrompt = new CodePrompt(this.project, promptData, toolFunctions, {
      ...opts,
      slug
    });
    this.project.addPrompt(codePrompt);
    return prompt;
  }
};
function promptDefinitionToPromptData(promptDefinition, rawTools) {
  const promptBlock = "messages" in promptDefinition ? {
    type: "chat",
    messages: promptDefinition.messages,
    tools: rawTools && rawTools.length > 0 ? JSON.stringify(rawTools) : void 0
  } : {
    type: "completion",
    content: promptDefinition.prompt
  };
  return {
    prompt: promptBlock,
    options: {
      model: promptDefinition.model,
      params: promptDefinition.params
    }
  };
}
var ProjectNameIdMap = class {
  nameToId = {};
  idToName = {};
  async getId(projectName) {
    if (!(projectName in this.nameToId)) {
      const response = await _internalGetGlobalState().appConn().post_json("api/project/register", {
        project_name: projectName
      });
      const result = z8.object({
        project: Project
      }).parse(response);
      const projectId = result.project.id;
      this.nameToId[projectName] = projectId;
      this.idToName[projectId] = projectName;
    }
    return this.nameToId[projectName];
  }
  async getName(projectId) {
    if (!(projectId in this.idToName)) {
      const response = await _internalGetGlobalState().appConn().post_json("api/project/get", {
        id: projectId
      });
      const result = z8.array(Project).nonempty().parse(response);
      const projectName = result[0].name;
      this.idToName[projectId] = projectName;
      this.nameToId[projectName] = projectId;
    }
    return this.idToName[projectId];
  }
  async resolve(project) {
    if (project.id) {
      return project.id;
    }
    return this.getId(project.name);
  }
};

// src/eval-parameters.ts
var evalParametersSchema = z9.record(
  z9.string(),
  z9.union([
    z9.object({
      type: z9.literal("prompt"),
      default: promptDefinitionWithToolsSchema.optional(),
      description: z9.string().optional()
    }),
    z9.instanceof(z9.ZodType)
    // For Zod schemas
  ])
);
function validateParameters(parameters, parameterSchema) {
  return Object.fromEntries(
    Object.entries(parameterSchema).map(([name, schema]) => {
      const value = parameters[name];
      try {
        if ("type" in schema && schema.type === "prompt") {
          const promptData = value ? PromptData.parse(value) : schema.default ? promptDefinitionToPromptData(
            schema.default,
            schema.default.tools
          ) : void 0;
          if (!promptData) {
            throw new Error(`Parameter '${name}' is required`);
          }
          return [name, Prompt2.fromPromptData(name, promptData)];
        } else {
          const schemaCasted = schema;
          return [name, schemaCasted.parse(value)];
        }
      } catch (e) {
        console.error("Error validating parameter", name, e);
        throw Error(
          `Invalid parameter '${name}': ${e instanceof Error ? e.message : String(e)}`
        );
      }
    })
  );
}

// src/framework.ts
function BaseExperiment(options = {}) {
  return { _type: "BaseExperiment", ...options };
}
var EvalResultWithSummary = class {
  constructor(summary, results) {
    this.summary = summary;
    this.results = results;
  }
  toString() {
    return formatExperimentSummary(this.summary);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `EvalResultWithSummary(summary="...", results=[...])`;
  }
  toJSON() {
    return {
      summary: this.summary,
      results: this.results
    };
  }
};
function makeEvalName(projectName, experimentName) {
  let out = projectName;
  if (experimentName) {
    out += ` [experimentName=${experimentName}]`;
  }
  return out;
}
function initExperiment2(state, options = {}) {
  return init({
    state,
    ...options,
    setCurrent: false
  });
}
function callEvaluatorData(data) {
  const dataResult = typeof data === "function" ? data() : data;
  let baseExperiment = void 0;
  if ("_type" in dataResult && dataResult._type === "BaseExperiment") {
    baseExperiment = dataResult.name;
  }
  return {
    data: dataResult,
    baseExperiment
  };
}
globalThis._evals = {
  functions: [],
  prompts: [],
  evaluators: {},
  reporters: {}
};
function _initializeSpanContext() {
  globalThis._spanContext = { currentSpan, withCurrent, startSpan, NOOP_SPAN };
}
async function Eval(name, evaluator, reporterOrOpts) {
  const options = isEmpty(reporterOrOpts) ? {} : typeof reporterOrOpts === "string" ? { reporter: reporterOrOpts } : "name" in reporterOrOpts ? { reporter: reporterOrOpts } : reporterOrOpts;
  let evalName = makeEvalName(name, evaluator.experimentName);
  if (globalThis._evals.evaluators[evalName]) {
    evalName = `${evalName}_${Object.keys(_evals).length}`;
  }
  if (globalThis._lazy_load) {
    globalThis._evals.evaluators[evalName] = {
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      evaluator: {
        evalName,
        projectName: name,
        ...evaluator
      },
      reporter: options.reporter
    };
    _initializeSpanContext();
    return new EvalResultWithSummary(
      {
        scores: {},
        metrics: {},
        projectName: "",
        experimentName: ""
      },
      []
    );
  }
  const progressReporter = options.progress ?? new BarProgressReporter();
  if (typeof options.reporter === "string") {
    throw new Error(
      "Must specify a reporter object, not a name. Can only specify reporter names when running 'braintrust eval'"
    );
  }
  const resolvedReporter = options.reporter || defaultReporter;
  try {
    const { data, baseExperiment: defaultBaseExperiment } = callEvaluatorData(
      evaluator.data
    );
    const experiment = options.parent || options.noSendLogs ? null : initExperiment2(evaluator.state, {
      ...evaluator.projectId ? { projectId: evaluator.projectId } : { project: name },
      experiment: evaluator.experimentName,
      description: evaluator.description,
      metadata: evaluator.metadata,
      isPublic: evaluator.isPublic,
      update: evaluator.update,
      baseExperiment: evaluator.baseExperimentName ?? defaultBaseExperiment,
      baseExperimentId: evaluator.baseExperimentId,
      gitMetadataSettings: evaluator.gitMetadataSettings,
      repoInfo: evaluator.repoInfo,
      dataset: Dataset2.isDataset(data) ? data : void 0
    });
    if (experiment && options.onStart) {
      const summary = await experiment.summarize({ summarizeScores: false });
      options.onStart(summary);
    }
    try {
      const evalDef = {
        evalName,
        projectName: name,
        ...evaluator,
        data
      };
      let ret;
      if (options.parent) {
        ret = await withParent(
          options.parent,
          () => runEvaluator(
            null,
            evalDef,
            progressReporter,
            [],
            options.stream,
            options.parameters
          ),
          evaluator.state
        );
      } else {
        ret = await runEvaluator(
          experiment,
          evalDef,
          progressReporter,
          [],
          options.stream,
          options.parameters
        );
      }
      progressReporter.stop();
      resolvedReporter.reportEval(evalDef, ret, {
        verbose: true,
        jsonl: false
      });
      return ret;
    } finally {
      if (experiment) {
        experiment.flush().catch(console.error);
      } else if (options.parent) {
        flush().catch(console.error);
      }
    }
  } finally {
    progressReporter.stop();
  }
}
function Reporter(name, reporter) {
  const ret = { name, ...reporter };
  if (_evals.reporters[name]) {
    throw new Error(`Reporter ${name} already exists`);
  }
  if (globalThis._lazy_load) {
    _evals.reporters[name] = ret;
  }
  return ret;
}
function serializeJSONWithPlainString(v) {
  if (typeof v === "string") {
    return v;
  } else {
    return JSON.stringify(v);
  }
}
function evaluateFilter(object, filter2) {
  const { path: path3, pattern } = filter2;
  const key = path3.reduce(
    (acc, p) => typeof acc === "object" && acc !== null ? (
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      acc[p]
    ) : void 0,
    object
  );
  if (key === void 0) {
    return false;
  }
  return pattern.test(serializeJSONWithPlainString(key));
}
function scorerName(scorer, scorer_idx) {
  return scorer.name || `scorer_${scorer_idx}`;
}
async function runEvaluator(experiment, evaluator, progressReporter, filters, stream, parameters) {
  return await runEvaluatorInternal(
    experiment,
    evaluator,
    progressReporter,
    filters,
    stream,
    parameters
  );
}
var defaultErrorScoreHandler = ({
  rootSpan,
  data: _,
  unhandledScores
}) => {
  const scores = Object.fromEntries(unhandledScores.map((s) => [s, 0]));
  rootSpan.log({ scores });
  return scores;
};
async function runEvaluatorInternal(experiment, evaluator, progressReporter, filters, stream, parameters) {
  if (typeof evaluator.data === "string") {
    throw new Error("Unimplemented: string data paths");
  }
  let dataResult = typeof evaluator.data === "function" ? evaluator.data() : evaluator.data;
  parameters = validateParameters(parameters ?? {}, evaluator.parameters ?? {});
  if ("_type" in dataResult) {
    if (dataResult._type !== "BaseExperiment") {
      throw new Error("Invalid _type");
    }
    if (!experiment) {
      throw new Error(
        "Cannot use BaseExperiment() without connecting to Braintrust (you most likely set --no-send-logs)"
      );
    }
    let name = dataResult.name;
    if (isEmpty(name)) {
      const baseExperiment = await experiment.fetchBaseExperiment();
      if (!baseExperiment) {
        throw new Error("BaseExperiment() failed to fetch base experiment");
      }
      name = baseExperiment.name;
    }
    dataResult = initExperiment2(evaluator.state, {
      ...evaluator.projectId ? { projectId: evaluator.projectId } : { project: evaluator.projectName },
      experiment: name,
      open: true
    }).asDataset();
  }
  let data = [];
  if (dataResult instanceof Promise) {
    data = await dataResult;
  } else if (Symbol.asyncIterator in dataResult) {
    data = [];
    for await (const d of dataResult) {
      data.push(d);
    }
  } else {
    data = dataResult;
  }
  const dataWithTrials = data.filter((d) => filters.every((f) => evaluateFilter(d, f))).flatMap(
    (datum) => [...Array(evaluator.trialCount ?? 1).keys()].map((trialIndex) => ({
      datum,
      trialIndex
    }))
  );
  progressReporter.start(evaluator.evalName, dataWithTrials.length);
  const results = [];
  const q = queue(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async ({
      datum,
      trialIndex
    }) => {
      const eventDataset = experiment ? experiment.dataset : Dataset2.isDataset(evaluator.data) ? evaluator.data : void 0;
      const baseEvent = {
        name: "eval",
        spanAttributes: {
          type: "eval" /* EVAL */
        },
        event: {
          input: datum.input,
          expected: "expected" in datum ? datum.expected : void 0,
          tags: datum.tags,
          origin: eventDataset && datum.id && datum._xact_id ? {
            object_type: "dataset",
            object_id: await eventDataset.id,
            id: datum.id,
            created: datum.created,
            _xact_id: datum._xact_id
          } : void 0,
          ...datum.upsert_id ? { id: datum.upsert_id } : {}
        }
      };
      const callback = async (rootSpan) => {
        let metadata = {
          ..."metadata" in datum ? datum.metadata : {}
        };
        const expected = "expected" in datum ? datum.expected : void 0;
        let output = void 0;
        let error2 = void 0;
        let tags = [...datum.tags ?? []];
        const scores = {};
        const scorerNames = evaluator.scores.map(scorerName);
        let unhandledScores = scorerNames;
        try {
          const meta = (o) => metadata = { ...metadata, ...o };
          await rootSpan.traced(
            async (span) => {
              const hooksForTask = {
                meta,
                metadata,
                expected,
                span,
                parameters: parameters ?? {},
                reportProgress: (event) => {
                  stream?.({
                    ...event,
                    id: rootSpan.id,
                    origin: baseEvent.event?.origin,
                    name: evaluator.evalName,
                    object_type: "task"
                  });
                },
                trialIndex,
                tags
              };
              const outputResult = evaluator.task(datum.input, hooksForTask);
              if (outputResult instanceof Promise) {
                output = await outputResult;
              } else {
                output = outputResult;
              }
              tags = hooksForTask.tags ?? [];
              span.log({ output });
            },
            {
              name: "task",
              spanAttributes: { type: "task" /* TASK */ },
              event: { input: datum.input }
            }
          );
          if (tags.length) {
            rootSpan.log({ output, metadata, expected, tags });
          } else {
            rootSpan.log({ output, metadata, expected });
          }
          const scoringArgs = {
            input: datum.input,
            expected: "expected" in datum ? datum.expected : void 0,
            metadata,
            output
          };
          const scoreResults = await Promise.all(
            evaluator.scores.map(async (score, score_idx) => {
              try {
                const runScorer = async (span) => {
                  const scoreResult = score(scoringArgs);
                  const scoreValue = scoreResult instanceof Promise ? await scoreResult : scoreResult;
                  if (scoreValue === null) {
                    return null;
                  }
                  if (Array.isArray(scoreValue)) {
                    for (const s of scoreValue) {
                      if (!(typeof s === "object" && !isEmpty(s))) {
                        throw new Error(
                          `When returning an array of scores, each score must be a non-empty object. Got: ${JSON.stringify(
                            s
                          )}`
                        );
                      }
                    }
                  }
                  const results3 = Array.isArray(scoreValue) ? scoreValue : typeof scoreValue === "object" && !isEmpty(scoreValue) ? [scoreValue] : [
                    {
                      name: scorerNames[score_idx],
                      score: scoreValue
                    }
                  ];
                  const getOtherFields = (s) => {
                    const { metadata: _metadata, name: _name, ...rest } = s;
                    return rest;
                  };
                  const resultMetadata = results3.length === 1 ? results3[0].metadata : results3.reduce(
                    (prev, s) => mergeDicts(prev, {
                      [s.name]: s.metadata
                    }),
                    {}
                  );
                  const resultOutput = results3.length === 1 ? getOtherFields(results3[0]) : results3.reduce(
                    (prev, s) => mergeDicts(prev, { [s.name]: getOtherFields(s) }),
                    {}
                  );
                  const scores2 = results3.reduce(
                    (prev, s) => mergeDicts(prev, { [s.name]: s.score }),
                    {}
                  );
                  span.log({
                    output: resultOutput,
                    metadata: resultMetadata,
                    scores: scores2
                  });
                  return results3;
                };
                const results2 = await rootSpan.traced(runScorer, {
                  name: scorerNames[score_idx],
                  spanAttributes: {
                    type: "score" /* SCORE */
                  },
                  event: { input: scoringArgs }
                });
                return { kind: "score", value: results2 };
              } catch (e) {
                return { kind: "error", value: e };
              }
            })
          );
          const failingScorersAndResults = [];
          scoreResults.forEach((results2, i) => {
            const name = scorerNames[i];
            if (results2.kind === "score") {
              (results2.value || []).forEach((result) => {
                scores[result.name] = result.score;
              });
            } else {
              failingScorersAndResults.push({ name, error: results2.value });
            }
          });
          unhandledScores = null;
          if (failingScorersAndResults.length) {
            const scorerErrors = Object.fromEntries(
              failingScorersAndResults.map(({ name, error: error3 }) => [
                name,
                error3 instanceof Error ? error3.stack : `${error3}`
              ])
            );
            metadata["scorer_errors"] = scorerErrors;
            rootSpan.log({
              metadata: { scorer_errors: scorerErrors }
            });
            const names = Object.keys(scorerErrors).join(", ");
            const errors = failingScorersAndResults.map((item) => item.error);
            unhandledScores = Object.keys(scorerErrors);
            console.warn(
              `Found exceptions for the following scorers: ${names}`,
              errors
            );
          }
        } catch (e) {
          logError(rootSpan, e);
          error2 = e;
        } finally {
          progressReporter.increment(evaluator.evalName);
        }
        results.push({
          input: datum.input,
          ..."expected" in datum ? { expected: datum.expected } : {},
          output,
          tags: tags.length ? tags : void 0,
          metadata,
          scores: {
            ...evaluator.errorScoreHandler && unhandledScores ? evaluator.errorScoreHandler({
              rootSpan,
              data: datum,
              unhandledScores
            }) : void 0,
            ...scores
          },
          error: error2,
          origin: baseEvent.event?.origin
        });
      };
      if (!experiment) {
        return await traced(callback, {
          ...baseEvent,
          state: evaluator.state
        });
      } else {
        return await experiment.traced(callback, baseEvent);
      }
    },
    Math.max(evaluator.maxConcurrency ?? dataWithTrials.length, 1)
  );
  q.push(dataWithTrials);
  const cancel = async () => {
    await new Promise((_, reject2) => {
      if (evaluator.timeout) {
        setTimeout(() => {
          reject2(new InternalAbortError("Evaluator timed out"));
        }, evaluator.timeout);
      }
      if (evaluator.signal) {
        evaluator.signal.addEventListener("abort", () => {
          reject2(new InternalAbortError("Evaluator aborted"));
        });
      }
    });
  };
  try {
    await Promise.race([q.drain(), cancel()]);
  } catch (e) {
    if (e instanceof InternalAbortError) {
      q.kill();
    }
    throw e;
  }
  const summary = experiment ? await experiment.summarize({ summarizeScores: evaluator.summarizeScores }) : buildLocalSummary(evaluator, results);
  return new EvalResultWithSummary(summary, results);
}
var error = chalk.bold.red;
var warning = chalk.hex("#FFA500");
function logError2(e, verbose) {
  if (!verbose) {
    console.error(`${e}`);
  } else {
    console.error(e);
  }
}
function buildLocalSummary(evaluator, results) {
  const scoresByName = {};
  for (const result of results) {
    for (const [name, score] of Object.entries(result.scores)) {
      const { total, count } = scoresByName[name] || { total: 0, count: 0 };
      if (score === null) {
        continue;
      }
      scoresByName[name] = { total: total + score, count: count + 1 };
    }
  }
  return {
    projectName: evaluator.projectName,
    experimentName: evaluator.evalName,
    scores: Object.fromEntries(
      Object.entries(scoresByName).map(([name, { total, count }]) => [
        name,
        {
          name,
          score: total / count,
          improvements: 0,
          regressions: 0
        }
      ])
    )
  };
}
function reportFailures(evaluator, failingResults, { verbose, jsonl }) {
  if (failingResults.length > 0) {
    console.error(
      warning(
        `Evaluator ${evaluator.evalName} failed with ${pluralize(
          "error",
          failingResults.length,
          true
        )}. This evaluation ("${evaluator.evalName}") will not be fully logged.`
      )
    );
    if (jsonl) {
      console.log(
        JSON.stringify({
          evaluatorName: evaluator.evalName,
          errors: failingResults.map(
            (r) => `${r.error instanceof Error ? r.error.stack : r.error}`
          )
        })
      );
    } else {
      for (const result of failingResults) {
        logError2(result.error, verbose);
      }
    }
    if (!verbose && !jsonl) {
      console.error(warning("Add --verbose to see full stack traces."));
    }
  }
}
var defaultReporter = {
  name: "Braintrust default reporter",
  async reportEval(evaluator, result, { verbose, jsonl }) {
    const { results, summary } = result;
    const failingResults = results.filter(
      (r) => r.error !== void 0
    );
    if (failingResults.length > 0) {
      reportFailures(evaluator, failingResults, { verbose, jsonl });
    }
    process.stdout.write(
      jsonl ? JSON.stringify(summary) : formatExperimentSummary(summary)
    );
    process.stdout.write("\n");
    return failingResults.length === 0;
  },
  async reportRun(evalReports) {
    return evalReports.every((r) => r);
  }
};
function formatExperimentSummary(summary) {
  let comparisonLine = "";
  if (summary.comparisonExperimentName) {
    comparisonLine = `${summary.experimentName} compared to ${summary.comparisonExperimentName}:
`;
  }
  const longestScoreName = Math.max(
    ...Object.values(summary.scores).map((score) => score.name.length)
  );
  const longestMetricName = Math.max(
    ...Object.values(summary.metrics ?? {}).map((metric) => metric.name.length)
  );
  return `
=========================SUMMARY=========================
${comparisonLine}` + Object.values(summary.scores).map((score) => formatScoreSummary(score, longestScoreName)).join("\n") + (Object.keys(summary.scores).length ? "\n\n" : "") + Object.values(summary.metrics ?? {}).map((metric) => formatMetricSummary(metric, longestMetricName)).join("\n") + (Object.keys(summary.metrics ?? {}).length ? "\n\n" : "") + (summary.experimentUrl ? `See results for ${summary.experimentName} at ${summary.experimentUrl}` : "");
}
function formatScoreSummary(summary, longestScoreName) {
  const diffString = isEmpty(summary.diff) ? "" : ` (${summary.diff > 0 ? "+" : ""}${(summary.diff * 100).toFixed(2)}%)`;
  const scoreName = `'${summary.name}'`.padEnd(longestScoreName + 2);
  return `${(summary.score * 100).toFixed(
    2
  )}%${diffString} ${scoreName} score	(${summary.improvements} improvements, ${summary.regressions} regressions)`;
}
function formatMetricSummary(summary, longestMetricName) {
  const fractionDigits = Number.isInteger(summary.metric) ? 0 : 2;
  const metricName = `'${summary.name}'`.padEnd(longestMetricName + 2);
  return `${summary.metric.toFixed(fractionDigits)}${summary.unit} ${metricName}	(${summary.improvements} improvements, ${summary.regressions} regressions)`;
}

// src/graph-framework.ts
var graph_framework_exports = {};
__export(graph_framework_exports, {
  AggregatorNode: () => AggregatorNode,
  GateNode: () => GateNode,
  GraphBuilder: () => GraphBuilder,
  InputNode: () => InputNode,
  LiteralNode: () => LiteralNode,
  OutputNode: () => OutputNode,
  PromptNode: () => PromptNode,
  PromptTemplateNode: () => PromptTemplateNode,
  createGraph: () => createGraph,
  default: () => graph_framework_default,
  escapePath: () => escapePath,
  unescapePath: () => unescapePath
});
var GraphBuilder = class {
  nodes = /* @__PURE__ */ new Map();
  edges = {};
  nodeLikeNodes = /* @__PURE__ */ new Map();
  // Maps node-like objects, like prompts, to their nodes
  // Special nodes
  IN;
  OUT;
  constructor() {
    this.IN = this.createInputNode();
    this.OUT = this.createOutputNode();
  }
  // Create the final GraphData object
  async build(context2) {
    const nodes = await Promise.all(
      Array.from(this.nodes.values()).map(async (node) => [
        node.id,
        await node.build(context2)
      ])
    );
    return {
      type: "graph",
      nodes: Object.fromEntries(nodes),
      // XXX Need to resolve the lazy nodes
      edges: this.edges
    };
  }
  addEdge({
    source,
    sourceVar,
    target,
    targetVar,
    expr,
    purpose
  }) {
    const [sourceNode, sourcePath] = this.resolveNode(source);
    if (sourcePath.length > 0) {
      throw new Error("Source path must be empty");
    }
    const [targetNode, targetPath] = this.resolveNode(target);
    if (targetPath.length > 0) {
      throw new Error("Target path must be empty");
    }
    const id = this.generateId();
    sourceVar = sourceVar ?? "output";
    targetVar = targetVar ?? (purpose === "data" ? "input" : this.generateId("control"));
    for (const edge of Object.values(this.edges)) {
      if (edge.target.node === targetNode.id && edge.target.variable === targetVar) {
        throw new Error(
          `Variable name ${targetVar} already set on ${targetNode.id}`
        );
      }
    }
    this.edges[id] = {
      source: { node: sourceNode.id, variable: sourceVar },
      target: { node: targetNode.id, variable: targetVar },
      purpose
    };
  }
  resolveNode(node) {
    if (node instanceof Prompt2) {
      const cached = this.nodeLikeNodes.get(node);
      if (cached) {
        return [cached, []];
      }
      const promptNode = this.createPromptNode(node);
      this.nodeLikeNodes.set(node, promptNode);
      return [promptNode, []];
    } else if (isProxyVariable(node)) {
      return proxyVariableToNode(node);
    } else {
      return [node, []];
    }
  }
  // Create a literal node
  literal(value) {
    const preview = (typeof value === "string" ? value : JSON.stringify(value)).slice(0, 16);
    const id = this.generateId(`literal-${preview}`);
    const literalNode = new LiteralNode(this, id, value);
    this.nodes.set(id, literalNode);
    return literalNode;
  }
  gate(options) {
    const id = this.generateId("gate");
    const gateNode = new GateNode(this, id, options.condition);
    this.nodes.set(id, gateNode);
    return gateNode;
  }
  aggregator() {
    const id = this.generateId("aggregator");
    const aggregatorNode = new AggregatorNode(this, id);
    this.nodes.set(id, aggregatorNode);
    return aggregatorNode;
  }
  promptTemplate(options) {
    const id = this.generateId("prompt-template");
    const promptTemplateNode = new PromptTemplateNode(this, id, options.prompt);
    this.nodes.set(id, promptTemplateNode);
    return promptTemplateNode;
  }
  // public call(node: NodeLike, input: CallArgs): Node {
  //   const [resolvedNode, path] = this.resolveNode(node);
  //   if (resolvedNode instanceof SingleInputNode) {
  //     return resolvedNode.call(input, path);
  //   } else {
  //     throw new Error("Node must be a SingleInputNode");
  //   }
  // }
  // Helper to generate node IDs
  generateId(name) {
    const uuid4 = newId();
    if (name) {
      return `${name}-${uuid4.slice(0, 8)}`;
    } else {
      return uuid4;
    }
  }
  // Create an input node
  createInputNode() {
    const id = this.generateId("input");
    const inputNode = new InputNode(this, id);
    this.nodes.set(id, inputNode);
    return inputNode;
  }
  // Create an output node
  createOutputNode() {
    const id = this.generateId("output");
    const outputNode = new OutputNode(this, id);
    this.nodes.set(id, outputNode);
    return outputNode;
  }
  // Create a prompt node from a CodePrompt
  createPromptNode(prompt) {
    const id = this.generateId(`prompt-${prompt.slug}`);
    const promptNode = new PromptNode(this, id, prompt);
    this.nodes.set(id, promptNode);
    return promptNode;
  }
};
function isProxyVariable(node) {
  return typeof node === "object" && node !== null && "__type" in node && // @ts-ignore
  node.__type === "proxy-variable";
}
function proxyVariableToNode(proxy) {
  return [proxy.__node, proxy.__path];
}
var BaseNode = class {
  constructor(graph, id) {
    this.graph = graph;
    this.id = id;
  }
  __type = "node";
  dependencies = [];
  addDependency(dependency) {
    this.dependencies.push(dependency);
  }
};
var InputNode = class extends BaseNode {
  constructor(graph, id) {
    super(graph, id);
  }
  async build(context2) {
    return {
      type: "input",
      description: "Input to the graph"
    };
  }
};
var OutputNode = class extends BaseNode {
  constructor(graph, id) {
    super(graph, id);
  }
  async build(context2) {
    return {
      type: "output",
      description: "Output of the graph"
    };
  }
};
var PromptNode = class extends BaseNode {
  constructor(graph, id, prompt) {
    super(graph, id);
    this.prompt = prompt;
  }
  async build(context2) {
    return {
      type: "function",
      function: await context2.getFunctionId(this.prompt)
    };
  }
};
var GateNode = class extends BaseNode {
  constructor(graph, id, condition) {
    super(graph, id);
    this.condition = condition;
  }
  async build(context2) {
    return {
      type: "gate",
      description: "Conditional gate",
      condition: this.condition
    };
  }
};
var AggregatorNode = class extends BaseNode {
  constructor(graph, id) {
    super(graph, id);
  }
  async build(context2) {
    return {
      type: "aggregator",
      description: "Aggregator"
    };
  }
};
var PromptTemplateNode = class extends BaseNode {
  constructor(graph, id, prompt) {
    super(graph, id);
    this.prompt = prompt;
  }
  async build(context2) {
    return {
      type: "prompt_template",
      prompt: this.prompt
    };
  }
};
var LiteralNode = class extends BaseNode {
  constructor(graph, id, value) {
    super(graph, id);
    this.value = value;
  }
  async build(context2) {
    return {
      type: "literal",
      value: this.value
    };
  }
};
function createGraph() {
  const graphBuilder = new GraphBuilder();
  return graphBuilder;
}
function escapePath(parts) {
  if (parts.length === 0) {
    return void 0;
  }
  return parts.map((part) => {
    if (/[^\w-]/.test(part)) {
      const escaped = part.replace(/["\\]/g, "\\$&");
      return `"${escaped}"`;
    }
    return part;
  }).join(".");
}
function unescapePath(path3) {
  const regex = /"((?:\\["\\]|[^"\\])*)"|([^\.]+)/g;
  const matches = path3.match(regex);
  return matches ? matches.map((match) => {
    if (match.startsWith('"')) {
      return match.slice(1, -1).replace(/\\(["\\])/g, "$1");
    }
    return match;
  }) : [];
}
var graph_framework_default = { createGraph };

// src/wrappers/oai_responses.ts
function responsesProxy(openai) {
  if (!openai.responses) {
    return openai;
  }
  return new Proxy(openai.responses, {
    get(target, name, receiver) {
      if (name === "create") {
        return responsesCreateProxy(target.create.bind(target));
      } else if (name === "stream") {
        return responsesStreamProxy(target.stream.bind(target));
      } else if (name === "parse") {
        return responsesParseProxy(target.parse.bind(target));
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function responsesCreateProxy(target) {
  const hooks = {
    name: "openai.responses",
    toSpanFunc: parseSpanFromResponseCreateParams,
    resultToEventFunc: parseEventFromResponseCreateResult,
    traceStreamFunc: traceResponseCreateStream
  };
  return proxyCreate(target, hooks);
}
function parseSpanFromResponseCreateParams(params) {
  const spanArgs = {
    name: "openai.responses.create",
    spanAttributes: {
      type: "llm"
    },
    event: {
      input: params.input,
      metadata: {
        ...filterFrom(params, ["input"]),
        provider: "openai"
      }
    },
    startTime: getCurrentUnixTimestamp()
  };
  return {
    span: startSpan(spanArgs),
    start: spanArgs.startTime
  };
}
function parseEventFromResponseCreateResult(result) {
  const data = {};
  if (result?.output !== void 0) {
    data.output = result.output;
  }
  if (result) {
    const { output, usage, ...metadata } = result;
    if (Object.keys(metadata).length > 0) {
      data.metadata = metadata;
    }
  }
  data.metrics = parseMetricsFromUsage(result?.usage);
  return data;
}
function parseSpanFromResponseParseParams(params) {
  const spanArgs = {
    name: "openai.responses.parse",
    spanAttributes: {
      type: "llm"
    },
    event: {
      input: params.input,
      metadata: {
        ...filterFrom(params, ["input"]),
        provider: "openai"
      }
    },
    startTime: getCurrentUnixTimestamp()
  };
  return {
    span: startSpan(spanArgs),
    start: spanArgs.startTime
  };
}
function parseEventFromResponseParseResult(result) {
  const data = {};
  if (result?.output !== void 0) {
    data.output = result.output;
  }
  if (result) {
    const { output, usage, ...metadata } = result;
    if (Object.keys(metadata).length > 0) {
      data.metadata = metadata;
    }
  }
  data.metrics = parseMetricsFromUsage(result?.usage);
  return data;
}
function traceResponseCreateStream(stream, timedSpan) {
  const span = timedSpan.span;
  let ttft = -1;
  return async function(...args) {
    const result = await stream.next(...args);
    if (ttft === -1) {
      ttft = getCurrentUnixTimestamp() - timedSpan.start;
      span.log({ metrics: { time_to_first_token: ttft } });
    }
    if (result.done) {
      span.end();
      return result;
    }
    const item = result.value;
    if (!item || !item?.type || !item?.response) {
      return result;
    }
    const event = parseLogFromItem(item);
    if (!objectIsEmpty(event)) {
      span.log(event);
    }
    return result;
  };
}
function parseLogFromItem(item) {
  if (!item || !item?.type || !item?.response) {
    return {};
  }
  const response = item.response;
  switch (item.type) {
    case "response.completed":
      const data = {};
      if (response?.output !== void 0) {
        data.output = response.output;
      }
      if (response) {
        const { usage, output, ...metadata } = response;
        if (Object.keys(metadata).length > 0) {
          data.metadata = metadata;
        }
      }
      data.metrics = parseMetricsFromUsage(response?.usage);
      return data;
    default:
      return {};
  }
}
function responsesStreamProxy(target) {
  return new Proxy(target, {
    apply(target2, thisArg, argArray) {
      const responseStream = Reflect.apply(target2, thisArg, argArray);
      if (!argArray || argArray.length === 0) {
        return responseStream;
      }
      const timedSpan = parseSpanFromResponseCreateParams(argArray[0]);
      const span = timedSpan.span;
      let ttft = -1;
      responseStream.on("event", (event) => {
        if (ttft === -1) {
          ttft = getCurrentUnixTimestamp() - timedSpan.start;
          span.log({ metrics: { time_to_first_token: ttft } });
        }
        const logEvent = parseLogFromItem(event);
        if (!objectIsEmpty(logEvent)) {
          span.log(logEvent);
        }
      });
      responseStream.on("end", () => {
        span.end();
      });
      return responseStream;
    }
  });
}
function responsesParseProxy(target) {
  const hooks = {
    name: "openai.responses.parse",
    toSpanFunc: parseSpanFromResponseParseParams,
    resultToEventFunc: parseEventFromResponseParseResult,
    traceStreamFunc: traceResponseCreateStream
    // Reuse the same stream tracing
  };
  return proxyCreate(target, hooks);
}
var TOKEN_NAME_MAP = {
  input_tokens: "prompt_tokens",
  output_tokens: "completion_tokens",
  total_tokens: "tokens"
};
var TOKEN_PREFIX_MAP = {
  input: "prompt",
  output: "completion"
};
function parseMetricsFromUsage(usage) {
  if (!usage) {
    return {};
  }
  const metrics = {};
  for (const [oai_name, value] of Object.entries(usage)) {
    if (typeof value === "number") {
      const metricName = TOKEN_NAME_MAP[oai_name] || oai_name;
      metrics[metricName] = value;
    } else if (oai_name.endsWith("_tokens_details")) {
      if (!isObject(value)) {
        continue;
      }
      const rawPrefix = oai_name.slice(0, -"_tokens_details".length);
      const prefix = TOKEN_PREFIX_MAP[rawPrefix] || rawPrefix;
      for (const [key, n] of Object.entries(value)) {
        if (typeof n !== "number") {
          continue;
        }
        const metricName = `${prefix}_${key}`;
        metrics[metricName] = n;
      }
    }
  }
  return metrics;
}
function proxyCreate(target, hooks) {
  return new Proxy(target, {
    apply(target2, thisArg, argArray) {
      if (!argArray || argArray.length === 0) {
        return Reflect.apply(target2, thisArg, argArray);
      }
      const params = argArray[0];
      const timedSpan = hooks.toSpanFunc(params);
      const apiPromise = Reflect.apply(target2, thisArg, argArray);
      const onThen = function(result) {
        if (params.stream) {
          return proxyIterable(result, timedSpan, hooks.traceStreamFunc);
        } else {
          const event = hooks.resultToEventFunc(result);
          const span = timedSpan.span;
          span.log(event);
          span.end();
          return result;
        }
      };
      return apiPromiseProxy(
        apiPromise,
        timedSpan,
        onThen,
        hooks.traceStreamFunc
      );
    }
  });
}
function apiPromiseProxy(apiPromise, span, onThen, traceStreamFunc) {
  return new Proxy(apiPromise, {
    get(target, name, receiver) {
      if (name === "then") {
        const thenFunc = Reflect.get(target, name, receiver);
        return function(onF, onR) {
          return thenFunc.call(
            target,
            async (result) => {
              const processed = onThen(result);
              return onF ? onF(processed) : processed;
            },
            onR
            // FIXME[matt] error handling?
          );
        };
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function proxyIterable(stream, span, onNext) {
  return new Proxy(stream, {
    get(target, prop, receiver) {
      if (prop === Symbol.asyncIterator) {
        const original = Reflect.get(target, prop, receiver);
        return function() {
          const iterator = original.call(target);
          return new Proxy(iterator, {
            get(iterTarget, iterProp, iterReceiver) {
              if (iterProp === "next") {
                return onNext(iterator, span);
              }
              return Reflect.get(iterTarget, iterProp, iterReceiver);
            }
          });
        };
      }
      return Reflect.get(target, prop, receiver);
    }
  });
}

// src/wrappers/oai.ts
function wrapOpenAI(openai) {
  const oai = openai;
  if (oai && typeof oai === "object" && "chat" in oai && typeof oai.chat === "object" && oai.chat && "completions" in oai.chat && typeof oai.chat.completions === "object" && oai.chat.completions && "create" in oai.chat.completions) {
    return wrapOpenAIv4(oai);
  } else {
    console.warn("Unsupported OpenAI library (potentially v3). Not wrapping.");
    return openai;
  }
}
globalThis.__inherited_braintrust_wrap_openai = wrapOpenAI;
function wrapOpenAIv4(openai) {
  const completionProxy = new Proxy(openai.chat.completions, {
    get(target, name, receiver) {
      const baseVal = Reflect.get(target, name, receiver);
      if (name === "create") {
        return wrapChatCompletion(baseVal.bind(target));
      } else if (name === "parse") {
        return wrapBetaChatCompletionParse(baseVal.bind(target));
      }
      return baseVal;
    }
  });
  const chatProxy = new Proxy(openai.chat, {
    get(target, name, receiver) {
      if (name === "completions") {
        return completionProxy;
      }
      return Reflect.get(target, name, receiver);
    }
  });
  const embeddingProxy = createEndpointProxy(openai.embeddings, wrapEmbeddings);
  const moderationProxy = createEndpointProxy(openai.moderations, wrapModerations);
  let betaProxy2;
  if (openai.beta?.chat?.completions?.stream) {
    const betaChatCompletionProxy = new Proxy(openai?.beta?.chat.completions, {
      get(target, name, receiver) {
        const baseVal = Reflect.get(target, name, receiver);
        if (name === "parse") {
          return wrapBetaChatCompletionParse(baseVal.bind(target));
        } else if (name === "stream") {
          return wrapBetaChatCompletionStream(baseVal.bind(target));
        }
        return baseVal;
      }
    });
    const betaChatProxy = new Proxy(openai.beta.chat, {
      get(target, name, receiver) {
        if (name === "completions") {
          return betaChatCompletionProxy;
        }
        return Reflect.get(target, name, receiver);
      }
    });
    betaProxy2 = new Proxy(openai.beta, {
      get(target, name, receiver) {
        if (name === "chat") {
          return betaChatProxy;
        }
        return Reflect.get(target, name, receiver);
      }
    });
  }
  return new Proxy(openai, {
    get(target, name, receiver) {
      switch (name) {
        case "chat":
          return chatProxy;
        case "embeddings":
          return embeddingProxy;
        case "moderations":
          return moderationProxy;
        case "responses":
          return responsesProxy(openai);
      }
      if (name === "beta" && betaProxy2) {
        return betaProxy2;
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function logCompletionResponse(startTime, response, span) {
  const metrics = parseMetricsFromUsage(response?.usage);
  metrics.time_to_first_token = getCurrentUnixTimestamp() - startTime;
  span.log({
    output: response.choices,
    metrics
  });
}
function wrapBetaChatCompletionParse(completion) {
  return async (allParams) => {
    const { span_info: _, ...params } = allParams;
    const span = startSpan(
      mergeDicts(
        {
          name: "Chat Completion",
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseChatCompletionParams(allParams)
      )
    );
    const startTime = getCurrentUnixTimestamp();
    const ret = await completion(params);
    try {
      logCompletionResponse(startTime, ret, span);
      return ret;
    } finally {
      span.end();
    }
  };
}
function wrapBetaChatCompletionStream(completion) {
  return (allParams) => {
    const { span_info: _, ...params } = allParams;
    const span = startSpan(
      mergeDicts(
        {
          name: "Chat Completion",
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseChatCompletionParams(allParams)
      )
    );
    const startTime = getCurrentUnixTimestamp();
    const ret = completion(params);
    let first = true;
    ret.on("chunk", (_chunk) => {
      if (first) {
        const now2 = getCurrentUnixTimestamp();
        span.log({
          metrics: {
            time_to_first_token: now2 - startTime
          }
        });
        first = false;
      }
    });
    ret.on("chatCompletion", (completion2) => {
      span.log({
        output: completion2.choices
      });
    });
    ret.on("end", () => {
      span.end();
    });
    return ret;
  };
}
var LEGACY_CACHED_HEADER = "x-cached";
var X_CACHED_HEADER = "x-bt-cached";
function parseCachedHeader(value) {
  return isEmpty(value) ? void 0 : ["true", "hit"].includes(value.toLowerCase()) ? 1 : 0;
}
function logHeaders(response, span) {
  const cachedHeader = response.headers.get(X_CACHED_HEADER);
  if (isEmpty(cachedHeader)) {
    const legacyCacheHeader = response.headers.get(LEGACY_CACHED_HEADER);
    if (!isEmpty(legacyCacheHeader)) {
      span.log({
        metrics: {
          cached: parseCachedHeader(legacyCacheHeader)
        }
      });
    }
  } else {
    span.log({
      metrics: {
        cached: parseCachedHeader(cachedHeader)
      }
    });
  }
}
function wrapChatCompletion(completion) {
  return (allParams, options) => {
    const { span_info: _, ...params } = allParams;
    let executionPromise = null;
    let dataPromise = null;
    const ensureExecuted = () => {
      if (!executionPromise) {
        executionPromise = (async () => {
          const span = startSpan(
            mergeDicts(
              {
                name: "Chat Completion",
                spanAttributes: {
                  type: "llm" /* LLM */
                }
              },
              parseChatCompletionParams(allParams)
            )
          );
          const startTime = getCurrentUnixTimestamp();
          if (params.stream) {
            const { data: ret, response } = await completion(
              // We could get rid of this type coercion if we could somehow enforce
              // that `P extends ChatParams` BUT does not have the property
              // `span_info`.
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
              params,
              options
            ).withResponse();
            logHeaders(response, span);
            const wrapperStream = new WrapperStream(
              span,
              startTime,
              ret.iterator()
            );
            ret.iterator = () => wrapperStream[Symbol.asyncIterator]();
            return { data: ret, response };
          } else {
            try {
              const completionResponse = completion(
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                params,
                options
              );
              const { data: ret, response } = await completionResponse.withResponse();
              logHeaders(response, span);
              const { messages, ...rest } = params;
              span.log({
                input: messages,
                metadata: {
                  ...rest
                }
              });
              logCompletionResponse(startTime, ret, span);
              return { data: ret, response };
            } finally {
              span.end();
            }
          }
        })();
      }
      return executionPromise;
    };
    return new Proxy({}, {
      get(target, prop, receiver) {
        if (prop === "withResponse") {
          return () => ensureExecuted();
        }
        if (prop === "then" || prop === "catch" || prop === "finally" || prop in Promise.prototype) {
          if (!dataPromise) {
            dataPromise = ensureExecuted().then((result) => result.data);
          }
          const value = Reflect.get(dataPromise, prop, receiver);
          return typeof value === "function" ? value.bind(dataPromise) : value;
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  };
}
function parseBaseParams(allParams, inputField) {
  const { span_info, ...params } = allParams;
  const { metadata: spanInfoMetadata, ...spanInfoRest } = span_info ?? {};
  const ret = {
    ...spanInfoRest,
    event: {
      metadata: spanInfoMetadata
    }
  };
  const input = params[inputField];
  const paramsRest = { ...params, provider: "openai" };
  delete paramsRest[inputField];
  return mergeDicts(ret, { event: { input, metadata: paramsRest } });
}
function createApiWrapper(name, create, processResponse, parseParams) {
  return async (allParams, options) => {
    const { span_info: _, ...params } = allParams;
    return traced(
      async (span) => {
        const { data: result, response } = await create(
          params,
          options
        ).withResponse();
        logHeaders(response, span);
        processResponse(result, span);
        return result;
      },
      mergeDicts(
        {
          name,
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseParams(allParams)
      )
    );
  };
}
function createEndpointProxy(target, wrapperFn) {
  return new Proxy(target, {
    get(target2, name, receiver) {
      const baseVal = Reflect.get(target2, name, receiver);
      if (name === "create") {
        return wrapperFn(baseVal.bind(target2));
      }
      return baseVal;
    }
  });
}
function parseChatCompletionParams(params) {
  return parseBaseParams(params, "messages");
}
function processEmbeddingResponse(result, span) {
  span.log({
    output: { embedding_length: result.data[0].embedding.length },
    metrics: parseMetricsFromUsage(result?.usage)
  });
}
function processModerationResponse(result, span) {
  span.log({
    output: result.results
  });
}
var wrapEmbeddings = (create) => createApiWrapper(
  "Embedding",
  create,
  processEmbeddingResponse,
  (params) => parseBaseParams(params, "input")
);
var wrapModerations = (create) => createApiWrapper(
  "Moderation",
  create,
  processModerationResponse,
  (params) => parseBaseParams(params, "input")
);
function postprocessStreamingResults(allResults) {
  let role = void 0;
  let content = void 0;
  let tool_calls = void 0;
  let finish_reason = void 0;
  let metrics = {};
  for (const result of allResults) {
    if (result.usage) {
      metrics = {
        ...metrics,
        ...parseMetricsFromUsage(result?.usage)
      };
    }
    const delta = result.choices?.[0]?.delta;
    if (!delta) {
      continue;
    }
    if (!role && delta.role) {
      role = delta.role;
    }
    if (delta.finish_reason) {
      finish_reason = delta.finish_reason;
    }
    if (delta.content) {
      content = (content || "") + delta.content;
    }
    if (delta.tool_calls) {
      const toolDelta = delta.tool_calls[0];
      if (!tool_calls || toolDelta.id && tool_calls[tool_calls.length - 1].id !== toolDelta.id) {
        tool_calls = [
          ...tool_calls || [],
          {
            id: toolDelta.id,
            type: toolDelta.type,
            function: toolDelta.function
          }
        ];
      } else {
        tool_calls[tool_calls.length - 1].function.arguments += toolDelta.function.arguments;
      }
    }
  }
  return {
    metrics,
    output: [
      {
        index: 0,
        message: {
          role,
          content,
          tool_calls
        },
        logprobs: null,
        finish_reason
      }
    ]
  };
}
var WrapperStream = class {
  span;
  iter;
  startTime;
  constructor(span, startTime, iter) {
    this.span = span;
    this.iter = iter;
    this.startTime = startTime;
  }
  async *[Symbol.asyncIterator]() {
    let first = true;
    const allResults = [];
    try {
      for await (const item of this.iter) {
        if (first) {
          const now2 = getCurrentUnixTimestamp();
          this.span.log({
            metrics: {
              time_to_first_token: now2 - this.startTime
            }
          });
          first = false;
        }
        allResults.push(item);
        yield item;
      }
      this.span.log({
        ...postprocessStreamingResults(allResults)
      });
    } finally {
      this.span.end();
    }
  }
};

// src/wrappers/anthropic-tokens-util.ts
function finalizeAnthropicTokens(metrics) {
  const prompt_tokens = (metrics.prompt_tokens || 0) + (metrics.prompt_cached_tokens || 0) + (metrics.prompt_cache_creation_tokens || 0);
  return {
    ...metrics,
    prompt_tokens,
    tokens: prompt_tokens + (metrics.completion_tokens || 0)
  };
}
function extractAnthropicCacheTokens(cacheReadTokens = 0, cacheCreationTokens = 0) {
  const cacheTokens = {};
  if (cacheReadTokens > 0) {
    cacheTokens.prompt_cached_tokens = cacheReadTokens;
  }
  if (cacheCreationTokens > 0) {
    cacheTokens.prompt_cache_creation_tokens = cacheCreationTokens;
  }
  return cacheTokens;
}

// src/wrappers/ai-sdk-shared.ts
function detectProviderFromResult(result) {
  if (!result?.providerMetadata) {
    return void 0;
  }
  const keys = Object.keys(result.providerMetadata);
  return keys?.at(0);
}
function extractModelFromResult(result) {
  if (result?.response?.modelId) {
    return result.response.modelId;
  }
  if (result?.request?.body?.model) {
    return result.request.body.model;
  }
  return void 0;
}
function camelToSnake(str) {
  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
}
function extractModelParameters(params, excludeKeys) {
  const modelParams = {};
  for (const [key, value] of Object.entries(params)) {
    if (value !== void 0 && !excludeKeys.has(key)) {
      const snakeKey = camelToSnake(key);
      modelParams[snakeKey] = value;
    }
  }
  return modelParams;
}
function getNumberProperty(obj, key) {
  if (!obj || typeof obj !== "object" || !(key in obj)) {
    return void 0;
  }
  const value = Reflect.get(obj, key);
  return typeof value === "number" ? value : void 0;
}
function normalizeUsageMetrics(usage, provider, providerMetadata) {
  const metrics = {};
  const inputTokens = getNumberProperty(usage, "inputTokens");
  if (inputTokens !== void 0) {
    metrics.prompt_tokens = inputTokens;
  }
  const outputTokens = getNumberProperty(usage, "outputTokens");
  if (outputTokens !== void 0) {
    metrics.completion_tokens = outputTokens;
  }
  const totalTokens = getNumberProperty(usage, "totalTokens");
  if (totalTokens !== void 0) {
    metrics.tokens = totalTokens;
  }
  const reasoningTokens = getNumberProperty(usage, "reasoningTokens");
  if (reasoningTokens !== void 0) {
    metrics.completion_reasoning_tokens = reasoningTokens;
  }
  const cachedInputTokens = getNumberProperty(usage, "cachedInputTokens");
  if (cachedInputTokens !== void 0) {
    metrics.prompt_cached_tokens = cachedInputTokens;
  }
  if (provider === "anthropic") {
    const anthropicMetadata = providerMetadata?.anthropic;
    if (anthropicMetadata) {
      const cacheReadTokens = getNumberProperty(anthropicMetadata.usage, "cache_read_input_tokens") || 0;
      const cacheCreationTokens = getNumberProperty(
        anthropicMetadata.usage,
        "cache_creation_input_tokens"
      ) || 0;
      const cacheTokens = extractAnthropicCacheTokens(
        cacheReadTokens,
        cacheCreationTokens
      );
      Object.assign(metrics, cacheTokens);
      Object.assign(metrics, finalizeAnthropicTokens(metrics));
    }
  }
  return metrics;
}
function normalizeFinishReason(reason) {
  if (typeof reason !== "string") return void 0;
  return reason.replace(/-/g, "_");
}
function extractToolCallsFromSteps(steps) {
  const toolCalls = [];
  if (!Array.isArray(steps)) return toolCalls;
  let idx = 0;
  for (const step of steps) {
    const blocks = step?.content;
    if (!Array.isArray(blocks)) continue;
    for (const block of blocks) {
      if (block && typeof block === "object" && block.type === "tool-call") {
        toolCalls.push({
          id: block.toolCallId,
          type: "function",
          index: idx++,
          function: {
            name: block.toolName,
            arguments: typeof block.input === "string" ? block.input : JSON.stringify(block.input ?? {})
          }
        });
      }
    }
  }
  return toolCalls;
}
function buildAssistantOutputWithToolCalls(result, toolCalls) {
  return [
    {
      index: 0,
      logprobs: null,
      finish_reason: normalizeFinishReason(result?.finishReason) ?? (toolCalls.length ? "tool_calls" : void 0),
      message: {
        role: "assistant",
        tool_calls: toolCalls.length > 0 ? toolCalls : void 0
      }
    }
  ];
}
function extractToolCallsFromBlocks(blocks) {
  if (!Array.isArray(blocks)) return [];
  return extractToolCallsFromSteps([{ content: blocks }]);
}
function wrapTools(tools) {
  if (!tools) return tools;
  const inferName = (tool, fallback2) => tool && (tool.name || tool.toolName || tool.id) || fallback2;
  if (Array.isArray(tools)) {
    const arr = tools;
    const out = arr.map((tool, idx) => {
      if (tool != null && typeof tool === "object" && "execute" in tool && typeof tool.execute === "function") {
        const name = inferName(tool, `tool[${idx}]`);
        return {
          ...tool,
          execute: wrapTraced(tool.execute.bind(tool), {
            name,
            type: "tool"
          })
        };
      }
      return tool;
    });
    return out;
  }
  const wrappedTools = {};
  for (const [key, tool] of Object.entries(tools)) {
    if (tool != null && typeof tool === "object" && "execute" in tool && typeof tool.execute === "function") {
      wrappedTools[key] = {
        ...tool,
        execute: wrapTraced(tool.execute.bind(tool), {
          name: key,
          type: "tool"
        })
      };
    } else {
      wrappedTools[key] = tool;
    }
  }
  return wrappedTools;
}
function extractInput(params) {
  return params?.prompt ?? params?.messages ?? params?.system;
}
function wrapStreamObject(iterable, onFirst) {
  let sawFirst = false;
  async function* wrapStream() {
    for await (const chunk of iterable) {
      if (!sawFirst) {
        sawFirst = true;
        onFirst();
      }
      yield chunk;
    }
  }
  return wrapStream();
}

// src/wrappers/ai-sdk-v2.ts
var V2_EXCLUDE_KEYS = /* @__PURE__ */ new Set([
  "prompt",
  // Already captured as input
  "system",
  // Already captured as input
  "messages",
  // Already captured as input
  "model",
  // Already captured in metadata.model
  "providerOptions"
  // Internal AI SDK configuration
]);
function BraintrustMiddleware(config = {}) {
  return {
    wrapGenerate: async ({ doGenerate, params }) => {
      const spanArgs = {
        name: "ai-sdk.generateText",
        spanAttributes: {
          type: "llm" /* LLM */
        },
        event: {
          input: params.prompt,
          metadata: {
            ...extractModelParameters(params, V2_EXCLUDE_KEYS)
          }
        }
      };
      const span = startSpan(spanArgs);
      try {
        const result = await doGenerate();
        const metadata = {};
        const provider = detectProviderFromResult(result);
        if (provider !== void 0) {
          metadata.provider = provider;
        }
        if (result.finishReason !== void 0) {
          metadata.finish_reason = result.finishReason;
        }
        const model = extractModelFromResult(result);
        if (model !== void 0) {
          metadata.model = model;
        }
        let toolCalls = extractToolCallsFromSteps(result?.steps);
        if (!toolCalls || toolCalls.length === 0) {
          toolCalls = extractToolCallsFromBlocks(result?.content);
        }
        span.log({
          output: toolCalls.length > 0 ? buildAssistantOutputWithToolCalls(result, toolCalls) : result?.content,
          metadata,
          metrics: normalizeUsageMetrics(
            result.usage,
            provider,
            result.providerMetadata
          )
        });
        return result;
      } catch (error2) {
        span.log({
          error: error2 instanceof Error ? error2.message : String(error2)
        });
        throw error2;
      } finally {
        span.end();
      }
    },
    wrapStream: async ({ doStream, params }) => {
      const spanArgs = {
        name: "ai-sdk.streamText",
        spanAttributes: {
          type: "llm" /* LLM */
        },
        event: {
          input: params.prompt,
          metadata: {
            ...extractModelParameters(params, V2_EXCLUDE_KEYS)
          }
        }
      };
      const span = startSpan(spanArgs);
      try {
        const { stream, ...rest } = await doStream();
        const textChunks = [];
        const toolBlocks = [];
        let finalUsage = {};
        let finalFinishReason = void 0;
        let providerMetadata = {};
        const transformStream = new TransformStream({
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          transform(chunk, controller) {
            try {
              if (chunk.type === "text-delta" && chunk.delta) {
                textChunks.push(chunk.delta);
              }
              if (chunk.type === "tool-call" || chunk.type === "tool-result") {
                toolBlocks.push(chunk);
              }
              if (chunk.type === "finish") {
                finalFinishReason = chunk.finishReason;
                finalUsage = chunk.usage || {};
                providerMetadata = chunk.providerMetadata || {};
              }
              controller.enqueue(chunk);
            } catch (error2) {
              span.log({
                error: error2 instanceof Error ? error2.message : String(error2)
              });
              span.end();
              controller.error(error2);
            }
          },
          flush() {
            try {
              const generatedText = textChunks.join("");
              let output = generatedText ? [{ type: "text", text: generatedText }] : [];
              const resultForDetection = {
                providerMetadata,
                response: rest.response,
                ...rest,
                finishReason: finalFinishReason
              };
              const metadata = {};
              const provider = detectProviderFromResult(resultForDetection);
              if (provider !== void 0) {
                metadata.provider = provider;
              }
              if (finalFinishReason !== void 0) {
                metadata.finish_reason = finalFinishReason;
              }
              const model = extractModelFromResult(resultForDetection);
              if (model !== void 0) {
                metadata.model = model;
              }
              if (toolBlocks.length > 0) {
                const toolCalls = extractToolCallsFromSteps([
                  { content: toolBlocks }
                ]);
                if (toolCalls.length > 0) {
                  output = buildAssistantOutputWithToolCalls(
                    resultForDetection,
                    toolCalls
                  );
                }
              }
              span.log({
                output,
                metadata,
                metrics: normalizeUsageMetrics(
                  finalUsage,
                  provider,
                  providerMetadata
                )
              });
              span.end();
            } catch (error2) {
              span.log({
                error: error2 instanceof Error ? error2.message : String(error2)
              });
              span.end();
              throw error2;
            }
          }
        });
        return {
          stream: stream.pipeThrough(transformStream),
          ...rest
        };
      } catch (error2) {
        span.log({
          error: error2 instanceof Error ? error2.message : String(error2)
        });
        span.end();
        throw error2;
      }
    }
  };
}

// src/wrappers/ai-sdk-v1.ts
function wrapAISDKModel(model) {
  const m = model;
  if (m?.specificationVersion === "v1" && typeof m?.provider === "string" && typeof m?.modelId === "string") {
    return new BraintrustLanguageModelWrapper(m);
  } else {
    console.warn("Unsupported AI SDK model. Not wrapping.");
    return model;
  }
}
var BraintrustLanguageModelWrapper = class {
  constructor(model) {
    this.model = model;
  }
  get specificationVersion() {
    return this.model.specificationVersion;
  }
  get provider() {
    return this.model.provider;
  }
  get modelId() {
    return this.model.modelId;
  }
  get defaultObjectGenerationMode() {
    return this.model.defaultObjectGenerationMode;
  }
  get supportsImageUrls() {
    return this.model.supportsImageUrls;
  }
  get supportsStructuredOutputs() {
    return this.model.supportsStructuredOutputs;
  }
  get supportsUrl() {
    return this.model.supportsUrl;
  }
  // For the first cut, do not support custom span_info arguments. We can
  // propagate those via async local storage
  async doGenerate(options) {
    const span = startSpan({
      name: "Chat Completion",
      spanAttributes: {
        type: "llm"
      }
    });
    const { prompt, mode, ...rest } = options;
    const startTime = getCurrentUnixTimestamp();
    try {
      const ret = await this.model.doGenerate(options);
      span.log({
        input: postProcessPrompt(prompt),
        metadata: {
          model: this.modelId,
          ...rest,
          ..."tools" in mode && mode.tools ? { tools: convertTools(mode.tools) } : "tool" in mode && mode.tool ? { tools: convertTools([mode.tool]) } : {}
        },
        output: postProcessOutput(ret.text, ret.toolCalls, ret.finishReason),
        metrics: {
          time_to_first_token: getCurrentUnixTimestamp() - startTime,
          tokens: !isEmpty(ret.usage) ? ret.usage.promptTokens + ret.usage.completionTokens : void 0,
          prompt_tokens: ret.usage?.promptTokens,
          completion_tokens: ret.usage?.completionTokens,
          cached: parseCachedHeader(
            ret.rawResponse?.headers?.[X_CACHED_HEADER] ?? ret.rawResponse?.headers?.[LEGACY_CACHED_HEADER]
          )
        }
      });
      return ret;
    } finally {
      span.end();
    }
  }
  async doStream(options) {
    const { prompt, mode, ...rest } = options;
    const startTime = getCurrentUnixTimestamp();
    const span = startSpan({
      name: "Chat Completion",
      spanAttributes: {
        type: "llm"
      }
    });
    span.log({
      input: postProcessPrompt(prompt),
      metadata: {
        model: this.modelId,
        ...rest,
        ..."tools" in mode && mode.tools ? { tools: convertTools(mode.tools) } : "tool" in mode && mode.tool ? { tools: convertTools([mode.tool]) } : {}
      }
    });
    let ended = false;
    const end = () => {
      if (!ended) {
        span.end();
        ended = true;
      }
    };
    try {
      const ret = await this.model.doStream(options);
      let time_to_first_token = void 0;
      let usage = void 0;
      let fullText = void 0;
      const toolCalls = {};
      let finishReason = void 0;
      return {
        ...ret,
        stream: ret.stream.pipeThrough(
          new TransformStream({
            transform(chunk, controller) {
              if (time_to_first_token === void 0) {
                time_to_first_token = getCurrentUnixTimestamp() - startTime;
                span.log({ metrics: { time_to_first_token } });
              }
              switch (chunk.type) {
                case "text-delta":
                  if (fullText === void 0) {
                    fullText = "";
                  }
                  fullText += chunk.textDelta;
                  break;
                case "tool-call":
                  toolCalls[chunk.toolCallId] = {
                    toolCallType: chunk.toolCallType,
                    toolCallId: chunk.toolCallId,
                    toolName: chunk.toolName,
                    args: chunk.args
                  };
                  break;
                case "tool-call-delta":
                  if (toolCalls[chunk.toolCallId] === void 0) {
                    toolCalls[chunk.toolCallId] = {
                      toolCallType: chunk.toolCallType,
                      toolCallId: chunk.toolCallId,
                      toolName: chunk.toolName,
                      args: ""
                    };
                  }
                  toolCalls[chunk.toolCallId].args += chunk.argsTextDelta;
                  break;
                case "finish":
                  usage = chunk.usage;
                  finishReason = chunk.finishReason;
                  break;
              }
              controller.enqueue(chunk);
            },
            async flush(controller) {
              span.log({
                output: postProcessOutput(
                  fullText,
                  Object.keys(toolCalls).length > 0 ? Object.values(toolCalls) : void 0,
                  finishReason
                ),
                metrics: {
                  time_to_first_token,
                  tokens: !isEmpty(usage) ? usage.promptTokens + usage.completionTokens : void 0,
                  prompt_tokens: usage?.promptTokens,
                  completion_tokens: usage?.completionTokens,
                  cached: parseCachedHeader(
                    ret.rawResponse?.headers?.[X_CACHED_HEADER] ?? ret.rawResponse?.headers?.[LEGACY_CACHED_HEADER]
                  )
                }
              });
              end();
              controller.terminate();
            }
          })
        )
      };
    } finally {
      end();
    }
  }
};
function convertTools(tools) {
  return tools.map((tool) => {
    const { type: _, ...rest } = tool;
    return {
      type: tool.type,
      function: rest
    };
  });
}
function postProcessPrompt(prompt) {
  return prompt.flatMap((message) => {
    switch (message.role) {
      case "system":
        return [
          {
            role: "system",
            content: message.content
          }
        ];
      case "assistant":
        const textPart = message.content.find(
          (part) => part.type === "text"
        );
        const toolCallParts = (
          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
          message.content.filter(
            (part) => part.type === "tool-call"
          )
        );
        return [
          {
            role: "assistant",
            content: textPart?.text,
            ...toolCallParts.length > 0 ? {
              tool_calls: toolCallParts.map((part) => ({
                id: part.toolCallId,
                function: {
                  name: part.toolName,
                  arguments: JSON.stringify(part.args)
                },
                type: "function"
              }))
            } : {}
          }
        ];
      case "user":
        return [
          {
            role: "user",
            content: message.content.map((part) => {
              switch (part.type) {
                case "text":
                  return {
                    type: "text",
                    text: part.text,
                    ...part.providerMetadata ? { providerMetadata: part.providerMetadata } : {}
                  };
                case "image":
                  return {
                    type: "image_url",
                    image_url: {
                      url: part.image.toString(),
                      ...part.providerMetadata ? { providerMetadata: part.providerMetadata } : {}
                    }
                  };
                default:
                  return part;
              }
            })
          }
        ];
      case "tool":
        return message.content.map((part) => ({
          role: "tool",
          tool_call_id: part.toolCallId,
          content: JSON.stringify(part.result)
        }));
    }
  });
}
function postProcessOutput(text, toolCalls, finishReason) {
  return [
    {
      index: 0,
      message: {
        role: "assistant",
        content: text ?? "",
        ...toolCalls && toolCalls.length > 0 ? {
          tool_calls: toolCalls.map((toolCall) => ({
            id: toolCall.toolCallId,
            function: {
              name: toolCall.toolName,
              arguments: toolCall.args
            },
            type: "function"
          }))
        } : {}
      },
      finish_reason: finishReason
    }
  ];
}

// src/wrappers/ai-sdk-v3.ts
var V3_EXCLUDE_KEYS = /* @__PURE__ */ new Set([
  "prompt",
  // Already captured as input
  "system",
  // Already captured as input
  "messages",
  // Already captured as input
  "model",
  // Already captured in metadata.model
  "providerOptions",
  // Internal AI SDK configuration
  "tools"
  // Already captured in metadata.tools
]);
function wrapAISDK(ai) {
  const {
    wrapLanguageModel,
    generateText,
    streamText,
    generateObject,
    streamObject
  } = ai;
  const wrappedGenerateText = (params) => {
    return traced(
      async (span) => {
        const wrappedModel = wrapLanguageModel({
          model: params.model,
          middleware: BraintrustMiddleware()
        });
        const result = await generateText({
          ...params,
          tools: params.tools ? wrapTools(params.tools) : void 0,
          model: wrappedModel
        });
        const provider = detectProviderFromResult(result);
        const model = extractModelFromResult(result);
        const finishReason = normalizeFinishReason(result?.finishReason);
        span.log({
          input: extractInput(params),
          output: result.text,
          metadata: {
            ...extractModelParameters(params, V3_EXCLUDE_KEYS),
            ...provider ? { provider } : {},
            ...model ? { model } : {},
            ...finishReason ? { finish_reason: finishReason } : {}
          }
        });
        return result;
      },
      {
        name: "ai-sdk.generateText"
      }
    );
  };
  const wrappedGenerateObject = (params) => {
    return traced(
      async (span) => {
        const wrappedModel = wrapLanguageModel({
          model: params.model,
          middleware: BraintrustMiddleware()
        });
        const result = await generateObject({
          ...params,
          tools: params.tools ? wrapTools(params.tools) : void 0,
          model: wrappedModel
        });
        const provider = detectProviderFromResult(result);
        const model = extractModelFromResult(result);
        const finishReason = normalizeFinishReason(result.finishReason);
        span.log({
          input: extractInput(params),
          output: result.object,
          metadata: {
            ...extractModelParameters(params, V3_EXCLUDE_KEYS),
            ...provider ? { provider } : {},
            ...model ? { model } : {},
            ...finishReason ? { finish_reason: finishReason } : {}
          }
        });
        return result;
      },
      {
        name: "ai-sdk.generateObject"
      }
    );
  };
  const wrappedStreamText = (params) => {
    const span = startSpan({
      name: "ai-sdk.streamText",
      event: {
        input: extractInput(params),
        metadata: extractModelParameters(params, V3_EXCLUDE_KEYS)
      }
    });
    const userOnFinish = params.onFinish;
    const userOnError = params.onError;
    const userOnChunk = params.onChunk;
    try {
      const wrappedModel = wrapLanguageModel({
        model: params.model,
        middleware: BraintrustMiddleware()
      });
      const startTime = Date.now();
      let receivedFirst = false;
      const result = withCurrent(
        span,
        () => streamText({
          ...params,
          tools: params.tools ? wrapTools(params.tools) : void 0,
          model: wrappedModel,
          onChunk: (chunk) => {
            if (!receivedFirst) {
              receivedFirst = true;
              span.log({
                metrics: {
                  time_to_first_token: (Date.now() - startTime) / 1e3
                }
              });
            }
            if (typeof userOnChunk === "function") {
              userOnChunk(chunk);
            }
          },
          onFinish: async (event) => {
            if (typeof userOnFinish === "function") {
              await userOnFinish(event);
            }
            const provider = detectProviderFromResult(event);
            const model = extractModelFromResult(event);
            const finishReason = normalizeFinishReason(event?.finishReason);
            span.log({
              output: event?.text,
              metadata: {
                ...extractModelParameters(params, V3_EXCLUDE_KEYS),
                ...provider ? { provider } : {},
                ...model ? { model } : {},
                ...finishReason ? { finish_reason: finishReason } : {}
              }
            });
            span.end();
          },
          onError: async (err) => {
            if (typeof userOnError === "function") {
              await userOnError(err);
            }
            span.log({
              error: err instanceof Error ? err.message : String(err)
            });
            span.end();
          }
        })
      );
      return result;
    } catch (error2) {
      span.log({
        error: error2 instanceof Error ? error2.message : String(error2)
      });
      span.end();
      throw error2;
    }
  };
  const wrappedStreamObject = (params) => {
    const span = startSpan({
      name: "ai-sdk.streamObject",
      event: {
        input: extractInput(params),
        metadata: extractModelParameters(params, V3_EXCLUDE_KEYS)
      }
    });
    const userOnFinish = params.onFinish;
    const userOnError = params.onError;
    try {
      const wrappedModel = wrapLanguageModel({
        model: params.model,
        middleware: BraintrustMiddleware()
      });
      const startTime = Date.now();
      const result = withCurrent(
        span,
        () => streamObject({
          ...params,
          tools: params.tools ? wrapTools(params.tools) : void 0,
          model: wrappedModel,
          onFinish: async (event) => {
            if (typeof userOnFinish === "function") {
              await userOnFinish(event);
            }
            const provider = detectProviderFromResult(event);
            const model = extractModelFromResult(event);
            const finishReason = normalizeFinishReason(event?.finishReason);
            span.log({
              output: event?.object,
              metadata: {
                ...extractModelParameters(params, V3_EXCLUDE_KEYS),
                ...provider ? { provider } : {},
                ...model ? { model } : {},
                ...finishReason ? { finish_reason: finishReason } : {}
              }
            });
            span.end();
          },
          onError: async (err) => {
            if (typeof userOnError === "function") {
              await userOnError(err);
            }
            span.log({
              error: err instanceof Error ? err.message : String(err)
            });
            span.end();
          }
        })
      );
      const wrapStream = wrapStreamObject(result.partialObjectStream, () => {
        span.log({
          metrics: { time_to_first_token: (Date.now() - startTime) / 1e3 }
        });
      });
      return {
        ...result,
        partialObjectStream: wrapStream
      };
    } catch (error2) {
      span.log({
        error: error2 instanceof Error ? error2.message : String(error2)
      });
      span.end();
      throw error2;
    }
  };
  return {
    generateText: wrappedGenerateText,
    generateObject: wrappedGenerateObject,
    streamText: wrappedStreamText,
    streamObject: wrappedStreamObject
  };
}

// src/wrappers/anthropic.ts
function wrapAnthropic(anthropic) {
  const au = anthropic;
  if (au && typeof au === "object" && "messages" in au && typeof au.messages === "object" && au.messages && "create" in au.messages) {
    return anthropicProxy(au);
  } else {
    console.warn("Unsupported Anthropic library. Not wrapping.");
    return anthropic;
  }
}
function anthropicProxy(anthropic) {
  return new Proxy(anthropic, {
    get(target, prop, receiver) {
      switch (prop) {
        case "beta":
          return betaProxy(target.beta);
        case "messages":
          return messagesProxy(target.messages);
        default:
          return Reflect.get(target, prop, receiver);
      }
    }
  });
}
function betaProxy(beta) {
  return new Proxy(beta, {
    get(target, prop, receiver) {
      if (prop === "messages") {
        return messagesProxy(target.messages);
      }
      return Reflect.get(target, prop, receiver);
    }
  });
}
function messagesProxy(messages) {
  return new Proxy(messages, {
    get(target, prop, receiver) {
      switch (prop) {
        case "create":
          return createProxy(target.create);
        default:
          return Reflect.get(target, prop, receiver);
      }
    }
  });
}
function createProxy(create) {
  return new Proxy(create, {
    apply(target, thisArg, argArray) {
      if (argArray.length === 0) {
        return Reflect.apply(target, thisArg, argArray);
      }
      const args = argArray[0];
      const input = coalesceInput(args["messages"] || [], args["system"]);
      const metadata = filterFrom(args, ["messages", "system"]);
      const spanArgs = {
        name: "anthropic.messages.create",
        spanAttributes: {
          type: "llm" /* LLM */
        },
        event: {
          input,
          metadata: { ...metadata, provider: "anthropic" }
        },
        startTime: getCurrentUnixTimestamp()
      };
      const span = startSpan(spanArgs);
      const sspan = { span, startTime: spanArgs.startTime };
      const apiPromise = Reflect.apply(target, thisArg, argArray);
      const onThen = function(msgOrStream) {
        if (!args["stream"]) {
          const event = parseEventFromMessage(msgOrStream);
          span.log({
            ...event,
            metrics: event.metrics ? finalizeAnthropicTokens(event.metrics) : void 0
          });
          span.end();
          return msgOrStream;
        }
        return streamProxy(msgOrStream, sspan);
      };
      return apiPromiseProxy2(apiPromise, sspan, onThen);
    }
  });
}
function apiPromiseProxy2(apiPromise, span, onThen) {
  return new Proxy(apiPromise, {
    get(target, prop, receiver) {
      if (prop === "then") {
        const thenFunc = Reflect.get(target, prop, receiver);
        return function(onFulfilled, onRejected) {
          return thenFunc.call(
            target,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            async (result) => {
              try {
                const processed = onThen(result);
                return onFulfilled ? onFulfilled(processed) : processed;
              } catch (error2) {
                return onRejected ? onRejected(error2) : Promise.reject(error2);
              }
            },
            onRejected
          );
        };
      } else if (prop === "withResponse") {
        const withResponseFunc = Reflect.get(target, prop, receiver);
        return () => {
          return withResponseFunc.call(target).then((withResponse) => {
            if (withResponse["data"]) {
              const { data: stream } = withResponse;
              withResponse.data = streamProxy(stream, span);
            }
            return Promise.resolve(withResponse);
          });
        };
      }
      return Reflect.get(target, prop, receiver);
    }
  });
}
function streamProxy(stream, span) {
  return new Proxy(stream, {
    get(target, prop, receiver) {
      if (prop === Symbol.asyncIterator) {
        const original = Reflect.get(target, prop, receiver);
        return function() {
          const iterator = original.call(target);
          return new Proxy(iterator, {
            get(iterTarget, iterProp, iterReceiver) {
              if (iterProp === "next") {
                return streamNextProxy(iterator, span);
              }
              return Reflect.get(iterTarget, iterProp, iterReceiver);
            }
          });
        };
      }
      return Reflect.get(target, prop, receiver);
    }
  });
}
function streamNextProxy(stream, sspan) {
  let ttft = -1;
  const deltas = [];
  let metadata = {};
  let totals = {};
  const span = sspan.span;
  return async function(...args) {
    const result = await stream.next(...args);
    if (ttft < 0) {
      ttft = getCurrentUnixTimestamp() - sspan.startTime;
      totals.time_to_first_token = ttft;
    }
    if (result.done) {
      const output = deltas.join("");
      span.log({
        output,
        metrics: finalizeAnthropicTokens(totals),
        metadata
      });
      span.end();
      return result;
    }
    const item = result.value;
    switch (item?.type) {
      case "message_start":
        const msg = item?.message;
        if (msg) {
          const event = parseEventFromMessage(msg);
          totals = { ...totals, ...event.metrics };
          span.log(event);
        }
        break;
      case "content_block_delta":
        if (item.delta?.type === "text_delta") {
          const text = item?.delta?.text;
          if (text) {
            deltas.push(text);
          }
        }
        break;
      case "message_delta":
        const usage = item?.usage;
        if (usage) {
          const metrics = parseMetricsFromUsage2(usage);
          totals = { ...totals, ...metrics };
        }
        const delta = item?.delta;
        if (delta) {
          metadata = { ...metadata, ...delta };
        }
        break;
      case "message_stop":
        break;
    }
    return result;
  };
}
function parseEventFromMessage(message) {
  const output = message?.content || null;
  const metrics = parseMetricsFromUsage2(message?.usage);
  const metas = ["stop_reason", "stop_sequence"];
  const metadata = {};
  for (const m of metas) {
    if (message[m] !== void 0) {
      metadata[m] = message[m];
    }
  }
  return {
    output,
    metrics,
    metadata
  };
}
function parseMetricsFromUsage2(usage) {
  if (!usage) {
    return void 0;
  }
  const metrics = {};
  function saveIfExistsTo(source, target) {
    const value = usage[source];
    if (value !== void 0 && value !== null) {
      metrics[target] = value;
    }
  }
  saveIfExistsTo("input_tokens", "prompt_tokens");
  saveIfExistsTo("output_tokens", "completion_tokens");
  saveIfExistsTo("cache_read_input_tokens", "prompt_cached_tokens");
  saveIfExistsTo("cache_creation_input_tokens", "prompt_cache_creation_tokens");
  return metrics;
}
function coalesceInput(messages, system) {
  const input = (messages || []).slice();
  if (system) {
    input.push({ role: "system", content: system });
  }
  return input;
}

// src/otel.ts
var otelApi = null;
var otelSdk = null;
var OTEL_AVAILABLE = false;
try {
  otelApi = (init_esm(), __toCommonJS(esm_exports));
  otelSdk = (init_esm5(), __toCommonJS(esm_exports2));
  OTEL_AVAILABLE = true;
} catch (error2) {
  console.warn(
    "OpenTelemetry packages are not installed. Install them with: npm install @opentelemetry/api @opentelemetry/sdk-trace-base @opentelemetry/exporter-trace-otlp-http @opentelemetry/resources @opentelemetry/semantic-conventions"
  );
  OTEL_AVAILABLE = false;
}
var FILTER_PREFIXES = [
  "gen_ai.",
  "braintrust.",
  "llm.",
  "ai.",
  "traceloop."
];
var AISpanProcessor = class _AISpanProcessor {
  static checkOtelAvailable() {
    if (!OTEL_AVAILABLE) {
      throw new Error(
        "OpenTelemetry packages are not installed. Install them with: npm install @opentelemetry/api @opentelemetry/sdk-trace-base @opentelemetry/exporter-trace-otlp-http @opentelemetry/resources @opentelemetry/semantic-conventions"
      );
    }
  }
  processor;
  customFilter;
  /**
   * Initialize the filter span processor.
   *
   * @param processor - The wrapped span processor that will receive filtered spans
   * @param customFilter - Optional function that takes a span and returns:
   *                      true to keep, false to drop,
   *                      null/undefined to not influence the decision
   */
  constructor(processor, customFilter) {
    _AISpanProcessor.checkOtelAvailable();
    this.processor = processor;
    this.customFilter = customFilter;
  }
  /**
   * Forward span start events to the inner processor.
   */
  onStart(span, parentContext) {
    this.processor.onStart(span, parentContext);
  }
  /**
   * Apply filtering logic and conditionally forward span end events.
   */
  onEnd(span) {
    const shouldKeep = this.shouldKeepFilteredSpan(span);
    if (shouldKeep) {
      this.processor.onEnd(span);
    }
  }
  /**
   * Shutdown the inner processor.
   */
  shutdown() {
    return this.processor.shutdown();
  }
  /**
   * Force flush the inner processor.
   */
  forceFlush() {
    return this.processor.forceFlush();
  }
  /**
   * Determine if a span should be kept based on filtering criteria.
   *
   * Keep spans if:
   * 1. It's a root span (no parent)
   * 2. Custom filter returns true/false (if provided)
   * 3. Span name starts with 'gen_ai.', 'braintrust.', 'llm.', 'ai.', or 'traceloop.'
   * 4. Any attribute name starts with those prefixes
   */
  shouldKeepFilteredSpan(span) {
    if (!span) {
      return false;
    }
    if (!span.parentSpanContext && !span.parentSpanId) {
      return true;
    }
    if (this.customFilter) {
      const customResult = this.customFilter(span);
      if (customResult === true) {
        return true;
      } else if (customResult === false) {
        return false;
      }
    }
    if (FILTER_PREFIXES.some((prefix) => span.name.startsWith(prefix))) {
      return true;
    }
    const attributes = span.attributes;
    if (attributes) {
      const attributeNames = Object.keys(attributes);
      if (attributeNames.some(
        (name) => FILTER_PREFIXES.some((prefix) => name.startsWith(prefix))
      )) {
        return true;
      }
    }
    return false;
  }
};
var BraintrustSpanProcessor = class _BraintrustSpanProcessor {
  static checkOtelAvailable() {
    if (!OTEL_AVAILABLE) {
      throw new Error(
        "OpenTelemetry packages are not installed. Install them with: npm install @opentelemetry/api @opentelemetry/sdk-trace-base @opentelemetry/exporter-trace-otlp-http @opentelemetry/resources @opentelemetry/semantic-conventions"
      );
    }
  }
  processor;
  aiSpanProcessor;
  constructor(options = {}) {
    _BraintrustSpanProcessor.checkOtelAvailable();
    const apiKey = options.apiKey || process.env.BRAINTRUST_API_KEY;
    if (!apiKey) {
      throw new Error(
        "Braintrust API key is required. Set BRAINTRUST_API_KEY environment variable or pass apiKey option."
      );
    }
    let apiUrl = options.apiUrl || process.env.BRAINTRUST_API_URL || "https://api.braintrust.dev";
    if (!apiUrl.endsWith("/")) {
      apiUrl += "/";
    }
    let parent = options.parent || process.env.BRAINTRUST_PARENT;
    if (!parent) {
      parent = "project_name:default-otel-project";
      console.info(
        `No parent specified, using default: ${parent}. Configure with BRAINTRUST_PARENT environment variable or parent parameter.`
      );
    }
    let exporter;
    try {
      const {
        OTLPTraceExporter: OTLPTraceExporter2
      } = (init_esm9(), __toCommonJS(esm_exports3));
      const headers = {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
        "x-bt-parent": parent,
        ...options.headers
      };
      const baseExporter = new OTLPTraceExporter2({
        url: new URL("otel/v1/traces", apiUrl).href,
        headers
      });
      exporter = new Proxy(baseExporter, {
        get(target, prop, receiver) {
          if (prop === "export") {
            return function(spans, resultCallback) {
              const fixedSpans = spans.map((span) => {
                if (!span.instrumentationScope && span.instrumentationLibrary) {
                  span.instrumentationScope = span.instrumentationLibrary;
                }
                if (!span.parentSpanContext && span.parentSpanId) {
                  const spanContext = span.spanContext?.();
                  if (spanContext?.traceId) {
                    span.parentSpanContext = {
                      spanId: span.parentSpanId,
                      traceId: spanContext.traceId
                    };
                  }
                }
                return span;
              });
              return Reflect.apply(target.export, target, [
                fixedSpans,
                resultCallback
              ]);
            };
          }
          return Reflect.get(target, prop, receiver);
        }
      });
    } catch (error2) {
      console.error(error2);
      throw new Error(
        "Failed to create OTLP exporter. Make sure @opentelemetry/exporter-trace-otlp-http is installed."
      );
    }
    if (!otelSdk) {
      throw new Error("OpenTelemetry SDK not available");
    }
    this.processor = new otelSdk.BatchSpanProcessor(exporter);
    if (options.filterAISpans === true) {
      this.aiSpanProcessor = new AISpanProcessor(
        this.processor,
        options.customFilter
      );
    } else {
      this.aiSpanProcessor = this.processor;
    }
  }
  onStart(span, parentContext) {
    this.aiSpanProcessor.onStart(span, parentContext);
  }
  onEnd(span) {
    this.aiSpanProcessor.onEnd(span);
  }
  shutdown() {
    return this.aiSpanProcessor.shutdown();
  }
  forceFlush() {
    return this.aiSpanProcessor.forceFlush();
  }
};
var BraintrustExporter = class _BraintrustExporter {
  static checkOtelAvailable() {
    if (!OTEL_AVAILABLE) {
      throw new Error(
        "OpenTelemetry packages are not installed. Install them with: npm install @opentelemetry/api @opentelemetry/sdk-trace-base @opentelemetry/exporter-trace-otlp-http @opentelemetry/resources @opentelemetry/semantic-conventions"
      );
    }
  }
  processor;
  spans = [];
  callbacks = [];
  constructor(options = {}) {
    _BraintrustExporter.checkOtelAvailable();
    this.processor = new BraintrustSpanProcessor(options);
  }
  /**
   * Export spans to Braintrust by simulating span processor behavior.
   */
  export(spans, resultCallback) {
    try {
      spans.forEach((span) => {
        this.processor.onEnd(span);
      });
      this.processor.forceFlush().then(() => {
        resultCallback({ code: 0 });
      }).catch((error2) => {
        resultCallback({ code: 1, error: error2 });
      });
    } catch (error2) {
      resultCallback({ code: 1, error: error2 });
    }
  }
  /**
   * Shutdown the exporter.
   */
  shutdown() {
    return this.processor.shutdown();
  }
  /**
   * Force flush the exporter.
   */
  forceFlush() {
    return this.processor.forceFlush();
  }
};

// dev/types.ts
import { z as z10 } from "zod/v3";
var evalBodySchema = z10.object({
  name: z10.string(),
  parameters: z10.record(z10.string(), z10.unknown()).nullish(),
  data: RunEval.shape.data,
  scores: z10.array(
    z10.object({
      function_id: FunctionId,
      name: z10.string()
    })
  ).nullish(),
  experiment_name: z10.string().nullish(),
  project_id: z10.string().nullish(),
  parent: InvokeParent.optional(),
  stream: z10.boolean().optional()
});
var evalParametersSerializedSchema = z10.record(
  z10.string(),
  z10.union([
    z10.object({
      type: z10.literal("prompt"),
      default: PromptData.optional(),
      description: z10.string().optional()
    }),
    z10.object({
      type: z10.literal("data"),
      schema: z10.record(z10.unknown()),
      // JSON Schema
      default: z10.unknown().optional(),
      description: z10.string().optional()
    })
  ])
);
var evaluatorDefinitionSchema = z10.object({
  parameters: evalParametersSerializedSchema.optional()
});
var evaluatorDefinitionsSchema = z10.record(
  z10.string(),
  evaluatorDefinitionSchema
);

// src/index.ts
configureNode();
var index_default = exports_node_exports;
export {
  AISpanProcessor,
  Attachment,
  BaseAttachment,
  BaseExperiment,
  BraintrustExporter,
  BraintrustMiddleware,
  BraintrustSpanProcessor,
  BraintrustState,
  BraintrustStream,
  CodeFunction,
  CodePrompt,
  Dataset2 as Dataset,
  ERR_PERMALINK,
  Eval,
  EvalResultWithSummary,
  Experiment2 as Experiment,
  ExternalAttachment,
  FailedHTTPResponse,
  INTERNAL_BTQL_LIMIT,
  LEGACY_CACHED_HEADER,
  LazyValue,
  Logger,
  NOOP_SPAN,
  NOOP_SPAN_PERMALINK,
  NoopSpan,
  Project2 as Project,
  ProjectNameIdMap,
  Prompt2 as Prompt,
  PromptBuilder,
  ReadonlyAttachment,
  ReadonlyExperiment,
  Reporter,
  ScorerBuilder,
  SpanImpl,
  TestBackgroundLogger,
  ToolBuilder,
  X_CACHED_HEADER,
  _exportsForTestingOnly,
  _internalGetGlobalState,
  _internalSetInitialState,
  braintrustStreamChunkSchema,
  buildLocalSummary,
  createFinalValuePassThroughStream,
  currentExperiment,
  currentLogger,
  currentSpan,
  index_default as default,
  defaultErrorScoreHandler,
  deserializePlainStringAsJSON,
  devNullWritableStream,
  evaluatorDefinitionSchema,
  evaluatorDefinitionsSchema,
  flush,
  getPromptVersions,
  getSpanParentObject,
  graph_framework_exports as graph,
  init,
  initDataset,
  initExperiment,
  initFunction,
  initLogger,
  invoke,
  loadPrompt,
  log,
  logError,
  login,
  loginToState,
  newId,
  parseCachedHeader,
  permalink,
  projects,
  promptContentsSchema,
  promptDefinitionSchema,
  promptDefinitionToPromptData,
  promptDefinitionWithToolsSchema,
  renderMessage,
  renderPromptParams,
  reportFailures,
  runEvaluator,
  setFetch,
  setMaskingFunction,
  spanComponentsToObjectId,
  startSpan,
  summarize,
  ToolFunctionDefinition as toolFunctionDefinitionSchema,
  traceable,
  traced,
  updateSpan,
  withCurrent,
  withDataset,
  withExperiment,
  withLogger,
  withParent,
  wrapAISDK,
  wrapAISDKModel,
  wrapAnthropic,
  wrapOpenAI,
  wrapOpenAIv4,
  wrapTraced
};
