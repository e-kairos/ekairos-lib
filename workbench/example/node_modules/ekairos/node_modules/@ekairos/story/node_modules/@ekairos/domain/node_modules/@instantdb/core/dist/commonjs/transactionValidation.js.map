{"version":3,"file":"transactionValidation.js","sourceRoot":"","sources":["../../src/transactionValidation.ts"],"names":[],"mappings":";;;AAAA,6CAA8D;AAE9D,+BAAgD;AAEzC,MAAM,eAAe,GAAG,CAAC,KAAc,EAAW,EAAE;IACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,IAAA,qBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,IAAA,eAAY,EAAC,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC;AARW,QAAA,eAAe,mBAQ1B;AAEF,MAAa,0BAA2B,SAAQ,KAAK;IACnD,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,4BAA4B,CAAC;IAC3C,CAAC;CACF;AALD,gEAKC;AAED,MAAM,sBAAsB,GAAG,CAAC,KAAe,EAAE,EAAE,CACjD,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AAE/C,MAAM,yBAAyB,GAAG,CAChC,UAAkB,EAClB,iBAA2B,EAC3B,EAAE,CACF,IAAI,0BAA0B,CAC5B,WAAW,UAAU,mDAAmD,sBAAsB,CAAC,iBAAiB,CAAC,EAAE,CACpH,CAAC;AAEJ,MAAM,eAAe,GAAG;IACtB,MAAM,EAAE,CAAC,KAAc,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ;IACrD,MAAM,EAAE,CAAC,KAAc,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IACtE,OAAO,EAAE,CAAC,KAAc,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,SAAS;IACvD,IAAI,EAAE,CAAC,KAAc,EAAE,EAAE,CACvB,KAAK,YAAY,IAAI;QACrB,OAAO,KAAK,KAAK,QAAQ;QACzB,OAAO,KAAK,KAAK,QAAQ;IAC3B,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;CACR,CAAC;AAEX,MAAM,mBAAmB,GAAG,CAC1B,KAAc,EACd,OAAmC,EAC1B,EAAE;;IACX,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IACvD,OAAO,MAAA,MAAA,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,gEAAG,KAAK,CAAC,mCAAI,KAAK,CAAC;AAC9D,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAC3B,UAAkB,EAClB,MAA0C,EAC1C,EAAE;IACF,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC9C,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,MAAM,yBAAyB,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5E,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAC5B,UAAkB,EAClB,IAAS,EACT,MAA0C,EAC1C,EAAE;IACF,MAAM,SAAS,GAAG,oBAAoB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE3D,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;QAC9C,MAAM,IAAI,0BAA0B,CAClC,2CAA2C,UAAU,sCAAsC,OAAO,IAAI,EAAE,CACzG,CAAC;IACJ,CAAC;IAED,KAAK,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;QACrD,IAAI,QAAQ,KAAK,IAAI;YAAE,SAAS,CAAC,0BAA0B;QAE3D,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;gBACzC,MAAM,IAAI,0BAA0B,CAClC,gCAAgC,QAAQ,gBAAgB,UAAU,eAAe,OAAO,CAAC,SAAS,mBAAmB,OAAO,KAAK,EAAE,CACpI,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAC5B,UAAkB,EAClB,KAAU,EACV,MAA0C,EAC1C,EAAE;IACF,MAAM,SAAS,GAAG,oBAAoB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAE3D,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QAChD,MAAM,IAAI,0BAA0B,CAClC,2CAA2C,UAAU,sCAAsC,OAAO,KAAK,EAAE,CAC1G,CAAC;IACJ,CAAC;IAED,KAAK,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;QAC1D,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACpD,MAAM,IAAI,0BAA0B,CAClC,SAAS,QAAQ,+BAA+B,UAAU,uBAAuB,sBAAsB,CAAC,cAAc,CAAC,EAAE,CAC1H,CAAC;QACJ,CAAC;QAED,uCAAuC;QACvC,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAClD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC7B,wBAAwB;gBACxB,KAAK,MAAM,aAAa,IAAI,SAAS,EAAE,CAAC;oBACtC,IAAI,CAAC,IAAA,uBAAe,EAAC,aAAa,CAAC,EAAE,CAAC;wBACpC,MAAM,IAAI,0BAA0B,CAClC,8BAA8B,QAAQ,iBAAiB,UAAU,iDAAiD,aAAa,EAAE,CAClI,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,qBAAqB;gBACrB,IAAI,CAAC,IAAA,uBAAe,EAAC,SAAS,CAAC,EAAE,CAAC;oBAChC,MAAM,IAAI,0BAA0B,CAClC,yBAAyB,QAAQ,iBAAiB,UAAU,qCAAqC,SAAS,EAAE,CAC7G,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG;IAC5B,MAAM,EAAE,qBAAqB;IAC7B,MAAM,EAAE,qBAAqB;IAC7B,KAAK,EAAE,qBAAqB;IAC5B,IAAI,EAAE,qBAAqB;IAC3B,MAAM,EAAE,qBAAqB;IAC7B,MAAM,EAAE,GAAG,EAAE,GAAE,CAAC;CACR,CAAC;AAEX,MAAM,UAAU,GAAG,CACjB,EAAM,EACN,MAA2C,EACrC,EAAE;IACR,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,MAAM,CAAC,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;IAE3C,uBAAuB;IACvB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QACxB,MAAM,MAAM,GAAG,IAAA,eAAY,EAAC,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,0BAA0B,CAClC,0BAA0B,UAAU,qCAAqC,GAAG,EAAE,CAC/E,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE,CAAC;QACnC,MAAM,IAAI,0BAA0B,CAClC,+CAA+C,OAAO,UAAU,EAAE,CACnE,CAAC;IACJ,CAAC;IAED,MAAM,SAAS,GACb,qBAAqB,CAAC,MAA4C,CAAC,CAAC;IACtE,IAAI,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACpC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;AACH,CAAC,CAAC;AAEK,MAAM,oBAAoB,GAAG,CAClC,WAAsE,EACtE,MAA2C,EACrC,EAAE;IACR,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IAExE,KAAK,MAAM,MAAM,IAAI,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC1C,MAAM,IAAI,0BAA0B,CAClC,sDAAsD,OAAO,MAAM,EAAE,CACtE,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,0BAA0B,CAClC,0DAA0D,OAAO,MAAM,CAAC,KAAK,EAAE,CAChF,CAAC;QACJ,CAAC;QAED,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC;gBACvB,MAAM,IAAI,0BAA0B,CAClC,yDAAyD,OAAO,EAAE,EAAE,CACrE,CAAC;YACJ,CAAC;YAED,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;AACH,CAAC,CAAC;AA7BW,QAAA,oBAAoB,wBA6B/B","sourcesContent":["import { TransactionChunk, Op, isLookup } from './instatx.ts';\nimport { IContainEntitiesAndLinks, DataAttrDef } from './schemaTypes.ts';\nimport { validate as validateUUID } from 'uuid';\n\nexport const isValidEntityId = (value: unknown): boolean => {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (isLookup(value)) {\n    return true;\n  }\n  return validateUUID(value);\n};\n\nexport class TransactionValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'TransactionValidationError';\n  }\n}\n\nconst formatAvailableOptions = (items: string[]) =>\n  items.length > 0 ? items.join(', ') : 'none';\n\nconst createEntityNotFoundError = (\n  entityName: string,\n  availableEntities: string[],\n) =>\n  new TransactionValidationError(\n    `Entity '${entityName}' does not exist in schema. Available entities: ${formatAvailableOptions(availableEntities)}`,\n  );\n\nconst TYPE_VALIDATORS = {\n  string: (value: unknown) => typeof value === 'string',\n  number: (value: unknown) => typeof value === 'number' && !isNaN(value),\n  boolean: (value: unknown) => typeof value === 'boolean',\n  date: (value: unknown) =>\n    value instanceof Date ||\n    typeof value === 'string' ||\n    typeof value === 'number',\n  json: () => true,\n} as const;\n\nconst isValidValueForAttr = (\n  value: unknown,\n  attrDef: DataAttrDef<any, any, any>,\n): boolean => {\n  if (value === null || value === undefined) return true;\n  return TYPE_VALIDATORS[attrDef.valueType]?.(value) ?? false;\n};\n\nconst validateEntityExists = (\n  entityName: string,\n  schema: IContainEntitiesAndLinks<any, any>,\n) => {\n  const entityDef = schema.entities[entityName];\n  if (!entityDef) {\n    throw createEntityNotFoundError(entityName, Object.keys(schema.entities));\n  }\n  return entityDef;\n};\n\nconst validateDataOperation = (\n  entityName: string,\n  data: any,\n  schema: IContainEntitiesAndLinks<any, any>,\n) => {\n  const entityDef = validateEntityExists(entityName, schema);\n\n  if (typeof data !== 'object' || data === null) {\n    throw new TransactionValidationError(\n      `Arguments for data operation on entity '${entityName}' must be an object, but received: ${typeof data}`,\n    );\n  }\n\n  for (const [attrName, value] of Object.entries(data)) {\n    if (attrName === 'id') continue; // id is handled specially\n\n    const attrDef = entityDef.attrs[attrName];\n    if (attrDef) {\n      if (!isValidValueForAttr(value, attrDef)) {\n        throw new TransactionValidationError(\n          `Invalid value for attribute '${attrName}' in entity '${entityName}'. Expected ${attrDef.valueType}, but received: ${typeof value}`,\n        );\n      }\n    }\n  }\n};\n\nconst validateLinkOperation = (\n  entityName: string,\n  links: any,\n  schema: IContainEntitiesAndLinks<any, any>,\n) => {\n  const entityDef = validateEntityExists(entityName, schema);\n\n  if (typeof links !== 'object' || links === null) {\n    throw new TransactionValidationError(\n      `Arguments for link operation on entity '${entityName}' must be an object, but received: ${typeof links}`,\n    );\n  }\n\n  for (const [linkName, linkValue] of Object.entries(links)) {\n    const link = entityDef.links[linkName];\n    if (!link) {\n      const availableLinks = Object.keys(entityDef.links);\n      throw new TransactionValidationError(\n        `Link '${linkName}' does not exist on entity '${entityName}'. Available links: ${formatAvailableOptions(availableLinks)}`,\n      );\n    }\n\n    // Validate UUID format for link values\n    if (linkValue !== null && linkValue !== undefined) {\n      if (Array.isArray(linkValue)) {\n        // Handle array of UUIDs\n        for (const linkReference of linkValue) {\n          if (!isValidEntityId(linkReference)) {\n            throw new TransactionValidationError(\n              `Invalid entity ID in link '${linkName}' for entity '${entityName}'. Expected a UUID or a lookup, but received: ${linkReference}`,\n            );\n          }\n        }\n      } else {\n        // Handle single UUID\n        if (!isValidEntityId(linkValue)) {\n          throw new TransactionValidationError(\n            `Invalid UUID in link '${linkName}' for entity '${entityName}'. Expected a UUID, but received: ${linkValue}`,\n          );\n        }\n      }\n    }\n  }\n};\n\nconst VALIDATION_STRATEGIES = {\n  create: validateDataOperation,\n  update: validateDataOperation,\n  merge: validateDataOperation,\n  link: validateLinkOperation,\n  unlink: validateLinkOperation,\n  delete: () => {},\n} as const;\n\nconst validateOp = (\n  op: Op,\n  schema?: IContainEntitiesAndLinks<any, any>,\n): void => {\n  if (!schema) return;\n\n  const [action, entityName, _id, args] = op;\n\n  // _id should be a uuid\n  if (!Array.isArray(_id)) {\n    const isUuid = validateUUID(_id);\n    if (!isUuid) {\n      throw new TransactionValidationError(\n        `Invalid id for entity '${entityName}'. Expected a UUID, but received: ${_id}`,\n      );\n    }\n  }\n\n  if (typeof entityName !== 'string') {\n    throw new TransactionValidationError(\n      `Entity name must be a string, but received: ${typeof entityName}`,\n    );\n  }\n\n  const validator =\n    VALIDATION_STRATEGIES[action as keyof typeof VALIDATION_STRATEGIES];\n  if (validator && args !== undefined) {\n    validator(entityName, args, schema);\n  }\n};\n\nexport const validateTransactions = (\n  inputChunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n  schema?: IContainEntitiesAndLinks<any, any>,\n): void => {\n  const chunks = Array.isArray(inputChunks) ? inputChunks : [inputChunks];\n\n  for (const txStep of chunks) {\n    if (!txStep || typeof txStep !== 'object') {\n      throw new TransactionValidationError(\n        `Transaction chunk must be an object, but received: ${typeof txStep}`,\n      );\n    }\n\n    if (!Array.isArray(txStep.__ops)) {\n      throw new TransactionValidationError(\n        `Transaction chunk must have __ops array, but received: ${typeof txStep.__ops}`,\n      );\n    }\n\n    for (const op of txStep.__ops) {\n      if (!Array.isArray(op)) {\n        throw new TransactionValidationError(\n          `Transaction operation must be an array, but received: ${typeof op}`,\n        );\n      }\n\n      validateOp(op, schema);\n    }\n  }\n};\n"]}