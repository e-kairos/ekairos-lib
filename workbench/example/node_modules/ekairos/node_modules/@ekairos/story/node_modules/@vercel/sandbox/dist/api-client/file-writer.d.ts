import { Readable } from "stream";
interface FileBuffer {
    /**
     * The name (path) of the file to write.
     */
    name: string;
    /**
     * The content of the file as a Buffer.
     */
    content: Buffer;
}
interface FileStream {
    /**
     * The name (path) of the file to write.
     */
    name: string;
    /**
     * A Readable stream to consume the content of the file.
     */
    content: Readable;
    /**
     * The expected size of the file. This is required to write
     * the header of the compressed file.
     */
    size: number;
}
/**
 * Allows to create a Readable stream with methods to write files
 * to it and to finish it. Files written are compressed together
 * and gzipped in the stream.
 */
export declare class FileWriter {
    readable: Readable;
    private pack;
    constructor();
    /**
     * Allows to add a file to the stream. Size is required to write
     * the tarball header so when content is a stream it must be
     * provided.
     *
     * Returns a Promise resolved once the file is written in the
     * stream.
     */
    addFile(file: FileBuffer | FileStream): Promise<void>;
    /**
     * Allows to finish the stream returning a Promise that will
     * resolve once the readable is effectively closed or
     * errored.
     */
    end(): Promise<void>;
}
export {};
