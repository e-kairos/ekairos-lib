import { z } from 'zod/v3';
import { z as z$1 } from 'zod';

declare class LazyValue<T> {
    private callable;
    private resolvedValue;
    private value;
    constructor(callable: () => Promise<T>);
    get(): Promise<T>;
    getSync(): {
        resolved: boolean;
        value: T | undefined;
    };
    get hasSucceeded(): boolean;
}

declare const TRANSACTION_ID_FIELD = "_xact_id";
declare const IS_MERGE_FIELD = "_is_merge";
declare const MERGE_PATHS_FIELD = "_merge_paths";
declare const AUDIT_SOURCE_FIELD = "_audit_source";
declare const AUDIT_METADATA_FIELD = "_audit_metadata";
declare const VALID_SOURCES: readonly ["app", "api", "external"];
type Source = (typeof VALID_SOURCES)[number];
declare const ASYNC_SCORING_CONTROL_FIELD = "_async_scoring_control";
declare const SKIP_ASYNC_SCORING_FIELD = "_skip_async_scoring";
type TransactionId = string;

declare const AsyncScoringControl: z.ZodUnion<[z.ZodObject<{
    kind: z.ZodLiteral<"score_update">;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    token: string;
    kind: "score_update";
}, {
    token: string;
    kind: "score_update";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"state_override">;
    state: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"enabled">;
        token: z.ZodString;
        function_ids: z.ZodArray<z.ZodUnknown, "many">;
        skip_logging: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        status: "enabled";
        token: string;
        function_ids: unknown[];
        skip_logging?: boolean | null | undefined;
    }, {
        status: "enabled";
        token: string;
        function_ids: unknown[];
        skip_logging?: boolean | null | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"disabled">;
    }, "strip", z.ZodTypeAny, {
        status: "disabled";
    }, {
        status: "disabled";
    }>, z.ZodNull, z.ZodNull]>;
}, "strip", z.ZodTypeAny, {
    kind: "state_override";
    state: {
        status: "enabled";
        token: string;
        function_ids: unknown[];
        skip_logging?: boolean | null | undefined;
    } | {
        status: "disabled";
    } | null;
}, {
    kind: "state_override";
    state: {
        status: "enabled";
        token: string;
        function_ids: unknown[];
        skip_logging?: boolean | null | undefined;
    } | {
        status: "disabled";
    } | null;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"state_force_reselect">;
}, "strip", z.ZodTypeAny, {
    kind: "state_force_reselect";
}, {
    kind: "state_force_reselect";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"state_enabled_force_rescore">;
}, "strip", z.ZodTypeAny, {
    kind: "state_enabled_force_rescore";
}, {
    kind: "state_enabled_force_rescore";
}>]>;
type AsyncScoringControlType = z.infer<typeof AsyncScoringControl>;
declare const ObjectReference$1: z.ZodObject<{
    object_type: z.ZodEnum<["project_logs", "experiment", "dataset", "prompt", "function", "prompt_session"]>;
    object_id: z.ZodString;
    id: z.ZodString;
    _xact_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    created: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    created?: string | null | undefined;
    _xact_id?: string | null | undefined;
}, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    created?: string | null | undefined;
    _xact_id?: string | null | undefined;
}>;

type IdField = {
    id: string;
};
type InputField = {
    input: unknown;
};
type OtherExperimentLogFields = {
    output: unknown;
    expected: unknown;
    error: unknown;
    tags: string[];
    scores: Record<string, number | null>;
    metadata: Record<string, unknown>;
    metrics: Record<string, unknown>;
    datasetRecordId: string;
    origin: z.infer<typeof ObjectReference$1>;
    span_attributes: Record<string, unknown>;
    [ASYNC_SCORING_CONTROL_FIELD]: AsyncScoringControlType;
    [MERGE_PATHS_FIELD]: string[][];
    [SKIP_ASYNC_SCORING_FIELD]: boolean;
};
type ExperimentLogPartialArgs = Partial<OtherExperimentLogFields> & Partial<InputField>;
type ExperimentLogFullArgs = Partial<Omit<OtherExperimentLogFields, "output" | "scores">> & Required<Pick<OtherExperimentLogFields, "output" | "scores">> & Partial<InputField> & Partial<IdField>;
type LogFeedbackFullArgs = IdField & Partial<Omit<OtherExperimentLogFields, "output" | "metrics" | "datasetRecordId"> & {
    comment: string;
    source: Source;
}>;
interface ParentExperimentIds {
    experiment_id: string;
}
interface ParentProjectLogIds {
    project_id: string;
    log_id: "g";
}
interface ParentPlaygroundLogIds {
    prompt_session_id: string;
    log_id: "x";
}
type LogCommentFullArgs = IdField & {
    created: string;
    origin: {
        id: string;
    };
    comment: {
        text: string;
    };
    [AUDIT_SOURCE_FIELD]: Source;
    [AUDIT_METADATA_FIELD]?: Record<string, unknown>;
} & (ParentExperimentIds | ParentProjectLogIds);
type ExperimentEvent = Partial<InputField> & Partial<OtherExperimentLogFields> & {
    id: string;
    span_id?: string;
    root_span_id?: string;
    experiment_id: string;
    [IS_MERGE_FIELD]: boolean;
} & Partial<{
    created: string;
    span_parents: string[];
    span_attributes: Record<string, unknown>;
    context: Record<string, unknown>;
    [AUDIT_SOURCE_FIELD]: Source;
    [AUDIT_METADATA_FIELD]?: Record<string, unknown>;
}>;
type DatasetEvent = {
    input?: unknown;
    tags?: string[];
    metadata?: unknown;
    created?: string;
    id: string;
    dataset_id: string;
} & ({
    expected?: unknown;
} | {
    output?: unknown;
});
type LoggingEvent = Omit<ExperimentEvent, "experiment_id"> & {
    project_id: string;
    log_id: "g";
};
type PlaygroundLogEvent = Omit<ExperimentEvent, "experiment_id"> & {
    prompt_session_id: string;
    log_id: "x";
};
type CommentEvent = IdField & {
    created: string;
    origin: {
        id: string;
    };
    comment: {
        text: string;
    };
    [AUDIT_SOURCE_FIELD]: Source;
    [AUDIT_METADATA_FIELD]?: Record<string, unknown>;
} & (ParentExperimentIds | ParentProjectLogIds | ParentPlaygroundLogIds);
type BackgroundLogEvent = ExperimentEvent | DatasetEvent | LoggingEvent | PlaygroundLogEvent | CommentEvent;
declare const DEFAULT_IS_LEGACY_DATASET = false;
interface LegacyDatasetRecord {
    id: string;
    input: any;
    output: any;
    metadata: any;
}
interface NewDatasetRecord {
    id: string;
    input: any;
    expected: any;
    tags: any;
    metadata: any;
}
type DatasetRecord<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET> = IsLegacyDataset extends true ? LegacyDatasetRecord : NewDatasetRecord;

declare enum SpanObjectTypeV3 {
    EXPERIMENT = 1,
    PROJECT_LOGS = 2,
    PLAYGROUND_LOGS = 3
}
declare const spanComponentsV3Schema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    object_type: z.ZodNativeEnum<typeof SpanObjectTypeV3>;
    propagated_event: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, "strip", z.ZodTypeAny, {
    object_type: SpanObjectTypeV3;
    propagated_event?: Record<string, unknown> | null | undefined;
}, {
    object_type: SpanObjectTypeV3;
    propagated_event?: Record<string, unknown> | null | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    object_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    compute_object_metadata_args: z.ZodOptional<z.ZodNull>;
}, "strip", z.ZodTypeAny, {
    object_id?: string | null | undefined;
    compute_object_metadata_args?: null | undefined;
}, {
    object_id?: string | null | undefined;
    compute_object_metadata_args?: null | undefined;
}>, z.ZodObject<{
    object_id: z.ZodOptional<z.ZodNull>;
    compute_object_metadata_args: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    compute_object_metadata_args: Record<string, unknown>;
    object_id?: null | undefined;
}, {
    compute_object_metadata_args: Record<string, unknown>;
    object_id?: null | undefined;
}>]>>, z.ZodUnion<[z.ZodObject<{
    row_id: z.ZodString;
    span_id: z.ZodString;
    root_span_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    span_id: string;
    root_span_id: string;
    row_id: string;
}, {
    span_id: string;
    root_span_id: string;
    row_id: string;
}>, z.ZodObject<{
    row_id: z.ZodOptional<z.ZodNull>;
    span_id: z.ZodOptional<z.ZodNull>;
    root_span_id: z.ZodOptional<z.ZodNull>;
}, "strip", z.ZodTypeAny, {
    span_id?: null | undefined;
    root_span_id?: null | undefined;
    row_id?: null | undefined;
}, {
    span_id?: null | undefined;
    root_span_id?: null | undefined;
    row_id?: null | undefined;
}>]>>;
type SpanComponentsV3Data = z.infer<typeof spanComponentsV3Schema>;
declare class SpanComponentsV3 {
    data: SpanComponentsV3Data;
    constructor(data: SpanComponentsV3Data);
    toStr(): string;
    static fromStr(s: string): SpanComponentsV3;
    objectIdFields(): ParentExperimentIds | ParentProjectLogIds | ParentPlaygroundLogIds;
    export(): Promise<string>;
    private static fromJsonObj;
}

interface Score {
    name: string;
    score: number | null;
    metadata?: Record<string, unknown>;
    /**
     * @deprecated
     */
    error?: unknown;
}

declare const spanTypeAttributeValues: readonly ["llm", "score", "function", "eval", "task", "tool"];
type SpanType = (typeof spanTypeAttributeValues)[number];

declare const AnyModelParams: z.ZodObject<{
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodNumber;
    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>, z.ZodNull]>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    max_tokens: number;
    temperature?: number | undefined;
    top_p?: number | undefined;
    max_completion_tokens?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "auto" | "none" | "required" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
    reasoning_effort?: "minimal" | "low" | "medium" | "high" | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    top_k?: number | undefined;
    stop_sequences?: string[] | undefined;
    max_tokens_to_sample?: number | undefined;
    maxOutputTokens?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    use_cache?: boolean | undefined;
}, {
    max_tokens: number;
    temperature?: number | undefined;
    top_p?: number | undefined;
    max_completion_tokens?: number | undefined;
    frequency_penalty?: number | undefined;
    presence_penalty?: number | undefined;
    response_format?: {
        type: "json_object";
    } | {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    } | {
        type: "text";
    } | null | undefined;
    tool_choice?: "auto" | "none" | "required" | {
        function: {
            name: string;
        };
        type: "function";
    } | undefined;
    function_call?: "auto" | "none" | {
        name: string;
    } | undefined;
    n?: number | undefined;
    stop?: string[] | undefined;
    reasoning_effort?: "minimal" | "low" | "medium" | "high" | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    top_k?: number | undefined;
    stop_sequences?: string[] | undefined;
    max_tokens_to_sample?: number | undefined;
    maxOutputTokens?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    use_cache?: boolean | undefined;
}>;
type AnyModelParamsType = z.infer<typeof AnyModelParams>;
declare const BraintrustAttachmentReference: z.ZodObject<{
    type: z.ZodLiteral<"braintrust_attachment">;
    filename: z.ZodString;
    content_type: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "braintrust_attachment";
    filename: string;
    content_type: string;
    key: string;
}, {
    type: "braintrust_attachment";
    filename: string;
    content_type: string;
    key: string;
}>;
type BraintrustAttachmentReferenceType = z.infer<typeof BraintrustAttachmentReference>;
declare const ExternalAttachmentReference: z.ZodObject<{
    type: z.ZodLiteral<"external_attachment">;
    filename: z.ZodString;
    content_type: z.ZodString;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "external_attachment";
    filename: string;
    content_type: string;
    url: string;
}, {
    type: "external_attachment";
    filename: string;
    content_type: string;
    url: string;
}>;
type ExternalAttachmentReferenceType = z.infer<typeof ExternalAttachmentReference>;
declare const AttachmentReference: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"braintrust_attachment">;
    filename: z.ZodString;
    content_type: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "braintrust_attachment";
    filename: string;
    content_type: string;
    key: string;
}, {
    type: "braintrust_attachment";
    filename: string;
    content_type: string;
    key: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"external_attachment">;
    filename: z.ZodString;
    content_type: z.ZodString;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "external_attachment";
    filename: string;
    content_type: string;
    url: string;
}, {
    type: "external_attachment";
    filename: string;
    content_type: string;
    url: string;
}>]>;
type AttachmentReferenceType = z.infer<typeof AttachmentReference>;
declare const AttachmentStatus: z.ZodObject<{
    upload_status: z.ZodEnum<["uploading", "done", "error"]>;
    error_message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    upload_status: "uploading" | "done" | "error";
    error_message?: string | undefined;
}, {
    upload_status: "uploading" | "done" | "error";
    error_message?: string | undefined;
}>;
type AttachmentStatusType = z.infer<typeof AttachmentStatus>;
declare const CallEvent: z.ZodUnion<[z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"text_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "text_delta";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"reasoning_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "reasoning_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "reasoning_delta";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"json_delta">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}, {
    data: string;
    event: "json_delta";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"progress">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "progress";
    id?: string | undefined;
}, {
    data: string;
    event: "progress";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"error">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "error";
    id?: string | undefined;
}, {
    data: string;
    event: "error";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    data: z.ZodString;
    event: z.ZodLiteral<"console">;
}, "strip", z.ZodTypeAny, {
    data: string;
    event: "console";
    id?: string | undefined;
}, {
    data: string;
    event: "console";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"start">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "start";
    id?: string | undefined;
}, {
    data: "";
    event: "start";
    id?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    event: z.ZodLiteral<"done">;
    data: z.ZodLiteral<"">;
}, "strip", z.ZodTypeAny, {
    data: "";
    event: "done";
    id?: string | undefined;
}, {
    data: "";
    event: "done";
    id?: string | undefined;
}>]>;
type CallEventType = z.infer<typeof CallEvent>;
declare const ChatCompletionMessageParam: z.ZodUnion<[z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"system">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}, {
    role: "system";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, z.ZodObject<{
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
        type: z.ZodLiteral<"image_url">;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
    role: z.ZodLiteral<"user">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
    name?: string | undefined;
}, {
    role: "user";
    content: string | ({
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
    name?: string | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">, z.ZodNull]>>;
    function_call: z.ZodOptional<z.ZodObject<{
        arguments: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>>;
    name: z.ZodOptional<z.ZodString>;
    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        function: z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
        type: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>;
    reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        content: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        content?: string | undefined;
    }, {
        id?: string | undefined;
        content?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    name?: string | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    content?: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[] | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
    reasoning?: {
        id?: string | undefined;
        content?: string | undefined;
    }[] | undefined;
}, {
    role: "assistant";
    name?: string | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    content?: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[] | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
    reasoning?: {
        id?: string | undefined;
        content?: string | undefined;
    }[] | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "tool";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    tool_call_id: string;
}, {
    role: "tool";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    tool_call_id?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    name: z.ZodString;
    role: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    role: "function";
    name: string;
    content: string | null;
}, {
    role: "function";
    name: string;
    content: string | null;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"developer">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "developer";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}, {
    role: "developer";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"model">;
    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    role: "model";
    content?: string | null | undefined;
}, {
    role: "model";
    content?: string | null | undefined;
}>]>;
type ChatCompletionMessageParamType = z.infer<typeof ChatCompletionMessageParam>;
declare const ChatCompletionOpenAIMessageParam: z.ZodUnion<[z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"system">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "system";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}, {
    role: "system";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, z.ZodObject<{
        image_url: z.ZodObject<{
            url: z.ZodString;
            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }, {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        }>;
        type: z.ZodLiteral<"image_url">;
    }, "strip", z.ZodTypeAny, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }, {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    }>]>, "many">]>;
    role: z.ZodLiteral<"user">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "user";
    content: string | ({
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
    name?: string | undefined;
}, {
    role: "user";
    content: string | ({
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    } | {
        type: "image_url";
        image_url: {
            url: string;
            detail?: "auto" | "low" | "high" | undefined;
        };
    })[];
    name?: string | undefined;
}>, z.ZodObject<{
    role: z.ZodLiteral<"assistant">;
    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">, z.ZodNull]>>;
    function_call: z.ZodOptional<z.ZodObject<{
        arguments: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        arguments: string;
    }, {
        name: string;
        arguments: string;
    }>>;
    name: z.ZodOptional<z.ZodString>;
    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        function: z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>;
        type: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }, {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }>, "many">>;
    reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        content: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        content?: string | undefined;
    }, {
        id?: string | undefined;
        content?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    role: "assistant";
    name?: string | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    content?: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[] | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
    reasoning?: {
        id?: string | undefined;
        content?: string | undefined;
    }[] | undefined;
}, {
    role: "assistant";
    name?: string | undefined;
    function_call?: {
        name: string;
        arguments: string;
    } | undefined;
    content?: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[] | null | undefined;
    tool_calls?: {
        function: {
            name: string;
            arguments: string;
        };
        type: "function";
        id: string;
    }[] | undefined;
    reasoning?: {
        id?: string | undefined;
        content?: string | undefined;
    }[] | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"tool">;
    tool_call_id: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "tool";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    tool_call_id: string;
}, {
    role: "tool";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    tool_call_id?: string | undefined;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    name: z.ZodString;
    role: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    role: "function";
    name: string;
    content: string | null;
}, {
    role: "function";
    name: string;
    content: string | null;
}>, z.ZodObject<{
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        text: z.ZodDefault<z.ZodString>;
        type: z.ZodLiteral<"text">;
        cache_control: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"ephemeral">;
        }, "strip", z.ZodTypeAny, {
            type: "ephemeral";
        }, {
            type: "ephemeral";
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }, {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }>, "many">]>;
    role: z.ZodLiteral<"developer">;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    role: "developer";
    content: string | {
        type: "text";
        text: string;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}, {
    role: "developer";
    content: string | {
        type: "text";
        text?: string | undefined;
        cache_control?: {
            type: "ephemeral";
        } | undefined;
    }[];
    name?: string | undefined;
}>]>;
type ChatCompletionOpenAIMessageParamType = z.infer<typeof ChatCompletionOpenAIMessageParam>;
declare const ChatCompletionTool: z.ZodObject<{
    function: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        parameters: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        name: string;
        description?: string | undefined;
        parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }>;
    type: z.ZodLiteral<"function">;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        description?: string | undefined;
        parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    };
    type: "function";
}, {
    function: {
        name: string;
        description?: string | undefined;
        parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    };
    type: "function";
}>;
type ChatCompletionToolType = z.infer<typeof ChatCompletionTool>;
declare const RepoInfo: z.ZodUnion<[z.ZodObject<{
    commit: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    branch: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    tag: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    dirty: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
    author_name: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    author_email: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    commit_message: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    commit_time: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    git_diff: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    dirty?: boolean | null | undefined;
    commit?: string | null | undefined;
    branch?: string | null | undefined;
    tag?: string | null | undefined;
    author_name?: string | null | undefined;
    author_email?: string | null | undefined;
    commit_message?: string | null | undefined;
    commit_time?: string | null | undefined;
    git_diff?: string | null | undefined;
}, {
    dirty?: boolean | null | undefined;
    commit?: string | null | undefined;
    branch?: string | null | undefined;
    tag?: string | null | undefined;
    author_name?: string | null | undefined;
    author_email?: string | null | undefined;
    commit_message?: string | null | undefined;
    commit_time?: string | null | undefined;
    git_diff?: string | null | undefined;
}>, z.ZodNull]>;
type RepoInfoType = z.infer<typeof RepoInfo>;
declare const ModelParams: z.ZodUnion<[z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>, z.ZodNull]>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>, z.ZodNull]>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    top_p: z.ZodOptional<z.ZodNumber>;
    max_tokens: z.ZodOptional<z.ZodNumber>;
    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
    frequency_penalty: z.ZodOptional<z.ZodNumber>;
    presence_penalty: z.ZodOptional<z.ZodNumber>;
    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"json_object">;
    }, "strip", z.ZodTypeAny, {
        type: "json_object";
    }, {
        type: "json_object";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"json_schema">;
        json_schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }, {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }, {
        type: "json_schema";
        json_schema: {
            name: string;
            description?: string | undefined;
            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            strict?: boolean | null | undefined;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"text">;
    }, "strip", z.ZodTypeAny, {
        type: "text";
    }, {
        type: "text";
    }>, z.ZodNull]>>;
    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        function: {
            name: string;
        };
        type: "function";
    }, {
        function: {
            name: string;
        };
        type: "function";
    }>]>>;
    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>]>>;
    n: z.ZodOptional<z.ZodNumber>;
    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    max_tokens: z.ZodNumber;
    temperature: z.ZodNumber;
    top_p: z.ZodOptional<z.ZodNumber>;
    top_k: z.ZodOptional<z.ZodNumber>;
    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    use_cache: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">>]>;
type ModelParamsType = z.infer<typeof ModelParams>;
declare const SavedFunctionId: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"function">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "function";
    id: string;
}, {
    type: "function";
    id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"global">;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "global";
    name: string;
}, {
    type: "global";
    name: string;
}>]>;
type SavedFunctionIdType = z.infer<typeof SavedFunctionId>;
declare const PromptBlockData: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"completion">;
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "completion";
    content: string;
}, {
    type: "completion";
    content: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"chat">;
    messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "system";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }, {
        role: "system";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    }, {
        role: "user";
        content: string | ({
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">, z.ZodNull]>>;
        function_call: z.ZodOptional<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>;
        name: z.ZodOptional<z.ZodString>;
        tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>;
        reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            content: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            content?: string | undefined;
        }, {
            id?: string | undefined;
            content?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    }, {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "tool";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id: string;
    }, {
        role: "tool";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        role: "function";
        name: string;
        content: string | null;
    }, {
        role: "function";
        name: string;
        content: string | null;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"developer">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "developer";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }, {
        role: "developer";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"model">;
        content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">;
    tools: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "chat";
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    } | {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    } | {
        role: "tool";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id: string;
    } | {
        role: "function";
        name: string;
        content: string | null;
    } | {
        role: "developer";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
    tools?: string | undefined;
}, {
    type: "chat";
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    } | {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    } | {
        role: "tool";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id?: string | undefined;
    } | {
        role: "function";
        name: string;
        content: string | null;
    } | {
        role: "developer";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
    tools?: string | undefined;
}>]>;
type PromptBlockDataType = z.infer<typeof PromptBlockData>;
declare const FunctionData: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"prompt">;
}, "strip", z.ZodTypeAny, {
    type: "prompt";
}, {
    type: "prompt";
}>, z.ZodObject<{
    type: z.ZodLiteral<"code">;
    data: z.ZodUnion<[z.ZodIntersection<z.ZodObject<{
        type: z.ZodLiteral<"bundle">;
    }, "strip", z.ZodTypeAny, {
        type: "bundle";
    }, {
        type: "bundle";
    }>, z.ZodObject<{
        runtime_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        location: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"experiment">;
            eval_name: z.ZodString;
            position: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"task">;
            }, "strip", z.ZodTypeAny, {
                type: "task";
            }, {
                type: "task";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"scorer">;
                index: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "scorer";
                index: number;
            }, {
                type: "scorer";
                index: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        }, {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            index: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            index: number;
        }, {
            type: "function";
            index: number;
        }>]>;
        bundle_id: z.ZodString;
        preview: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }, {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<"inline">;
        runtime_context: z.ZodObject<{
            runtime: z.ZodEnum<["node", "python"]>;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "python";
            version: string;
        }, {
            runtime: "node" | "python";
            version: string;
        }>;
        code: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    }, {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "code";
    data: ({
        type: "bundle";
    } & {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }) | {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    };
}, {
    type: "code";
    data: ({
        type: "bundle";
    } & {
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
        location: {
            type: "experiment";
            eval_name: string;
            position: {
                type: "task";
            } | {
                type: "scorer";
                index: number;
            };
        } | {
            type: "function";
            index: number;
        };
        bundle_id: string;
        preview?: string | null | undefined;
    }) | {
        code: string;
        type: "inline";
        runtime_context: {
            runtime: "node" | "python";
            version: string;
        };
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"graph">;
    nodes: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"function">;
        function: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        function: {} & {
            [k: string]: unknown;
        };
        type: "function";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        function: {} & {
            [k: string]: unknown;
        };
        type: "function";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"input">;
    }, "strip", z.ZodTypeAny, {
        type: "input";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "input";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"output">;
    }, "strip", z.ZodTypeAny, {
        type: "output";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "output";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"literal">;
        value: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        type: "literal";
        value?: unknown;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "literal";
        value?: unknown;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"btql">;
        expr: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "btql";
        expr: string;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "btql";
        expr: string;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"gate">;
        condition: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        type: "gate";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
        condition?: string | null | undefined;
    }, {
        type: "gate";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
        condition?: string | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"aggregator">;
    }, "strip", z.ZodTypeAny, {
        type: "aggregator";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "aggregator";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>, z.ZodObject<{
        description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        position: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>, z.ZodNull]>>;
        type: z.ZodLiteral<"prompt_template">;
        prompt: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }, {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">, z.ZodNull]>>;
                function_call: z.ZodOptional<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>;
                name: z.ZodOptional<z.ZodString>;
                tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>;
                reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    content: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id?: string | undefined;
                    content?: string | undefined;
                }, {
                    id?: string | undefined;
                    content?: string | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            }, {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                role: "function";
                name: string;
                content: string | null;
            }, {
                role: "function";
                name: string;
                content: string | null;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"developer">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"model">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "prompt_template";
        prompt: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        };
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }, {
        type: "prompt_template";
        prompt: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        };
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>]>>;
    edges: z.ZodRecord<z.ZodString, z.ZodObject<{
        source: z.ZodObject<{
            node: z.ZodString;
            variable: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            node: string;
            variable: string;
        }, {
            node: string;
            variable: string;
        }>;
        target: z.ZodObject<{
            node: z.ZodString;
            variable: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            node: string;
            variable: string;
        }, {
            node: string;
            variable: string;
        }>;
        purpose: z.ZodEnum<["control", "data", "messages"]>;
    }, "strip", z.ZodTypeAny, {
        source: {
            node: string;
            variable: string;
        };
        target: {
            node: string;
            variable: string;
        };
        purpose: "data" | "messages" | "control";
    }, {
        source: {
            node: string;
            variable: string;
        };
        target: {
            node: string;
            variable: string;
        };
        purpose: "data" | "messages" | "control";
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "graph";
    nodes: Record<string, {
        function: {} & {
            [k: string]: unknown;
        };
        type: "function";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "input";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "output";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "literal";
        value?: unknown;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "btql";
        expr: string;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "gate";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
        condition?: string | null | undefined;
    } | {
        type: "aggregator";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "prompt_template";
        prompt: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        };
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>;
    edges: Record<string, {
        source: {
            node: string;
            variable: string;
        };
        target: {
            node: string;
            variable: string;
        };
        purpose: "data" | "messages" | "control";
    }>;
}, {
    type: "graph";
    nodes: Record<string, {
        function: {} & {
            [k: string]: unknown;
        };
        type: "function";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "input";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "output";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "literal";
        value?: unknown;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "btql";
        expr: string;
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "gate";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
        condition?: string | null | undefined;
    } | {
        type: "aggregator";
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    } | {
        type: "prompt_template";
        prompt: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        };
        description?: string | null | undefined;
        position?: {
            x: number;
            y: number;
        } | null | undefined;
    }>;
    edges: Record<string, {
        source: {
            node: string;
            variable: string;
        };
        target: {
            node: string;
            variable: string;
        };
        purpose: "data" | "messages" | "control";
    }>;
}>, z.ZodObject<{
    type: z.ZodLiteral<"remote_eval">;
    endpoint: z.ZodString;
    eval_name: z.ZodString;
    parameters: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    type: "remote_eval";
    parameters: {} & {
        [k: string]: unknown;
    };
    eval_name: string;
    endpoint: string;
}, {
    type: "remote_eval";
    parameters: {} & {
        [k: string]: unknown;
    };
    eval_name: string;
    endpoint: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"global">;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "global";
    name: string;
}, {
    type: "global";
    name: string;
}>]>;
declare const PromptData: z.ZodObject<{
    prompt: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"completion">;
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "completion";
        content: string;
    }, {
        type: "completion";
        content: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"chat">;
        messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"system">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }, {
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, z.ZodObject<{
                image_url: z.ZodObject<{
                    url: z.ZodString;
                    detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }>;
                type: z.ZodLiteral<"image_url">;
            }, "strip", z.ZodTypeAny, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }>]>, "many">]>;
            role: z.ZodLiteral<"user">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        }, {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"assistant">;
            content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">, z.ZodNull]>>;
            function_call: z.ZodOptional<z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>>;
            name: z.ZodOptional<z.ZodString>;
            tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>;
                type: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }>, "many">>;
            reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                content: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id?: string | undefined;
                content?: string | undefined;
            }, {
                id?: string | undefined;
                content?: string | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        }, {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"tool">;
            tool_call_id: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        }, {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            name: z.ZodString;
            role: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            role: "function";
            name: string;
            content: string | null;
        }, {
            role: "function";
            name: string;
            content: string | null;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"developer">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }, {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"model">;
            content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            role: "model";
            content?: string | null | undefined;
        }, {
            role: "model";
            content?: string | null | undefined;
        }>]>, "many">;
        tools: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "chat";
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }, {
        type: "chat";
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    }>, z.ZodNull]>>;
    options: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        model: z.ZodOptional<z.ZodString>;
        params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>]>>;
        position: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        model?: string | undefined;
        position?: string | undefined;
    }, {
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        model?: string | undefined;
        position?: string | undefined;
    }>, z.ZodNull]>>;
    parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"llm_classifier">;
        use_cot: z.ZodBoolean;
        choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }, {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    }>, z.ZodNull]>>;
    tool_functions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"function">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "function";
        id: string;
    }, {
        type: "function";
        id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"global">;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "global";
        name: string;
    }, {
        type: "global";
        name: string;
    }>]>, "many">, z.ZodNull]>>;
    origin: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        prompt_id: z.ZodOptional<z.ZodString>;
        project_id: z.ZodOptional<z.ZodString>;
        prompt_version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        project_id?: string | undefined;
        prompt_id?: string | undefined;
        prompt_version?: string | undefined;
    }, {
        project_id?: string | undefined;
        prompt_id?: string | undefined;
        prompt_version?: string | undefined;
    }>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    options?: {
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        model?: string | undefined;
        position?: string | undefined;
    } | null | undefined;
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    origin?: {
        project_id?: string | undefined;
        prompt_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
}, {
    options?: {
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        model?: string | undefined;
        position?: string | undefined;
    } | null | undefined;
    prompt?: {
        type: "completion";
        content: string;
    } | {
        type: "chat";
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
        tools?: string | undefined;
    } | null | undefined;
    origin?: {
        project_id?: string | undefined;
        prompt_id?: string | undefined;
        prompt_version?: string | undefined;
    } | null | undefined;
    parser?: {
        type: "llm_classifier";
        use_cot: boolean;
        choice_scores: Record<string, number>;
    } | null | undefined;
    tool_functions?: ({
        type: "function";
        id: string;
    } | {
        type: "global";
        name: string;
    })[] | null | undefined;
}>;
type PromptDataType = z.infer<typeof PromptData>;
declare const FunctionTypeEnum: z.ZodEnum<["llm", "scorer", "task", "tool"]>;
type FunctionTypeEnumType = z.infer<typeof FunctionTypeEnum>;
declare const GitMetadataSettings: z.ZodObject<{
    collect: z.ZodEnum<["all", "none", "some"]>;
    fields: z.ZodOptional<z.ZodArray<z.ZodEnum<["commit", "branch", "tag", "dirty", "author_name", "author_email", "commit_message", "commit_time", "git_diff"]>, "many">>;
}, "strip", z.ZodTypeAny, {
    collect: "some" | "none" | "all";
    fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
}, {
    collect: "some" | "none" | "all";
    fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
}>;
type GitMetadataSettingsType = z.infer<typeof GitMetadataSettings>;
declare const IfExists: z.ZodEnum<["error", "ignore", "replace"]>;
type IfExistsType = z.infer<typeof IfExists>;
declare const StreamingMode: z.ZodUnion<[z.ZodEnum<["auto", "parallel"]>, z.ZodNull]>;
type StreamingModeType = z.infer<typeof StreamingMode>;
declare const ObjectReference: z.ZodObject<{
    object_type: z.ZodEnum<["project_logs", "experiment", "dataset", "prompt", "function", "prompt_session"]>;
    object_id: z.ZodString;
    id: z.ZodString;
    _xact_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    created: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    created?: string | null | undefined;
    _xact_id?: string | null | undefined;
}, {
    id: string;
    object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
    object_id: string;
    created?: string | null | undefined;
    _xact_id?: string | null | undefined;
}>;
type ObjectReferenceType = z.infer<typeof ObjectReference>;
declare const Prompt$1: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    project_id: z.ZodString;
    log_id: z.ZodLiteral<"p">;
    org_id: z.ZodString;
    name: z.ZodString;
    slug: z.ZodString;
    description: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    created: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    prompt_data: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        prompt: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }, {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">, z.ZodNull]>>;
                function_call: z.ZodOptional<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>;
                name: z.ZodOptional<z.ZodString>;
                tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>;
                reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    content: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id?: string | undefined;
                    content?: string | undefined;
                }, {
                    id?: string | undefined;
                    content?: string | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            }, {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                role: "function";
                name: string;
                content: string | null;
            }, {
                role: "function";
                name: string;
                content: string | null;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"developer">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"model">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>, z.ZodNull]>>;
        options: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        }, {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        }>, z.ZodNull]>>;
        parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>, z.ZodNull]>>;
        tool_functions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">, z.ZodNull]>>;
        origin: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        options?: {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    }, {
        options?: {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    }>, z.ZodNull]>>;
    tags: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
    metadata: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodNull]>>;
    function_type: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["llm", "scorer", "task", "tool"]>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    org_id: string;
    name: string;
    project_id: string;
    _xact_id: string;
    slug: string;
    log_id: "p";
    created?: string | null | undefined;
    metadata?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | null | undefined;
    description?: string | null | undefined;
    tags?: string[] | null | undefined;
    prompt_data?: {
        options?: {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    } | null | undefined;
    function_type?: "tool" | "task" | "scorer" | "llm" | null | undefined;
}, {
    id: string;
    org_id: string;
    name: string;
    project_id: string;
    _xact_id: string;
    slug: string;
    log_id: "p";
    created?: string | null | undefined;
    metadata?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | null | undefined;
    description?: string | null | undefined;
    tags?: string[] | null | undefined;
    prompt_data?: {
        options?: {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    } | null | undefined;
    function_type?: "tool" | "task" | "scorer" | "llm" | null | undefined;
}>;
type PromptType = z.infer<typeof Prompt$1>;
declare const PromptSessionEvent: z.ZodObject<{
    id: z.ZodString;
    _xact_id: z.ZodString;
    created: z.ZodString;
    _pagination_key: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    project_id: z.ZodString;
    prompt_session_id: z.ZodString;
    prompt_session_data: z.ZodOptional<z.ZodUnknown>;
    prompt_data: z.ZodOptional<z.ZodUnknown>;
    function_data: z.ZodOptional<z.ZodUnknown>;
    function_type: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["llm", "scorer", "task", "tool"]>, z.ZodNull]>>;
    object_data: z.ZodOptional<z.ZodUnknown>;
    completion: z.ZodOptional<z.ZodUnknown>;
    tags: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    created: string;
    project_id: string;
    _xact_id: string;
    prompt_session_id: string;
    _pagination_key?: string | null | undefined;
    tags?: string[] | null | undefined;
    completion?: unknown;
    prompt_data?: unknown;
    function_type?: "tool" | "task" | "scorer" | "llm" | null | undefined;
    function_data?: unknown;
    prompt_session_data?: unknown;
    object_data?: unknown;
}, {
    id: string;
    created: string;
    project_id: string;
    _xact_id: string;
    prompt_session_id: string;
    _pagination_key?: string | null | undefined;
    tags?: string[] | null | undefined;
    completion?: unknown;
    prompt_data?: unknown;
    function_type?: "tool" | "task" | "scorer" | "llm" | null | undefined;
    function_data?: unknown;
    prompt_session_data?: unknown;
    object_data?: unknown;
}>;
type PromptSessionEventType = z.infer<typeof PromptSessionEvent>;
declare const SSEProgressEventData: z.ZodObject<{
    id: z.ZodString;
    object_type: z.ZodEnum<["prompt", "tool", "scorer", "task", "agent"]>;
    origin: z.ZodOptional<z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
        object_type: z.ZodEnum<["project_logs", "experiment", "dataset", "prompt", "function", "prompt_session"]>;
        object_id: z.ZodString;
        id: z.ZodString;
        _xact_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        created: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        created?: string | null | undefined;
        _xact_id?: string | null | undefined;
    }, {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        created?: string | null | undefined;
        _xact_id?: string | null | undefined;
    }>, z.ZodNull]>, z.ZodUnknown>>;
    format: z.ZodEnum<["llm", "code", "global", "graph"]>;
    output_type: z.ZodEnum<["completion", "score", "any"]>;
    name: z.ZodString;
    event: z.ZodEnum<["reasoning_delta", "text_delta", "json_delta", "error", "console", "start", "done", "progress"]>;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
    name: string;
    data: string;
    event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
    format: "code" | "llm" | "global" | "graph";
    output_type: "score" | "completion" | "any";
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        created?: string | null | undefined;
        _xact_id?: string | null | undefined;
    } | null | undefined;
}, {
    id: string;
    object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
    name: string;
    data: string;
    event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
    format: "code" | "llm" | "global" | "graph";
    output_type: "score" | "completion" | "any";
    origin?: {
        id: string;
        object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
        object_id: string;
        created?: string | null | undefined;
        _xact_id?: string | null | undefined;
    } | null | undefined;
}>;
type SSEProgressEventDataType = z.infer<typeof SSEProgressEventData>;
declare const ToolFunctionDefinition: z.ZodObject<{
    type: z.ZodLiteral<"function">;
    function: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        parameters: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | undefined;
        strict?: boolean | null | undefined;
        parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        name: string;
        description?: string | undefined;
        strict?: boolean | null | undefined;
        parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        description?: string | undefined;
        strict?: boolean | null | undefined;
        parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    };
    type: "function";
}, {
    function: {
        name: string;
        description?: string | undefined;
        strict?: boolean | null | undefined;
        parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    };
    type: "function";
}>;
type ToolFunctionDefinitionType = z.infer<typeof ToolFunctionDefinition>;

interface IsoAsyncLocalStorage<T> {
    enterWith(store: T): void;
    run<R>(store: T | undefined, callback: () => R): R;
    getStore(): T | undefined;
}

/**
 * Options for configuring an LRUCache instance.
 */
interface LRUCacheOptions {
    /**
     * Maximum number of items to store in the cache.
     * If not specified, the cache will grow unbounded.
     */
    max?: number;
}
/**
 * A Least Recently Used (LRU) cache implementation.
 *
 * This cache maintains items in order of use, evicting the least recently used item
 * when the cache reaches its maximum size (if specified). Items are considered "used"
 * when they are either added to the cache or retrieved from it.
 *
 * If no maximum size is specified, the cache will grow unbounded.
 *
 * @template K - The type of keys stored in the cache.
 * @template V - The type of values stored in the cache.
 */
declare class LRUCache<K, V> {
    private cache;
    private readonly maxSize?;
    constructor(options?: LRUCacheOptions);
    /**
     * Retrieves a value from the cache.
     * If the key exists, the item is marked as most recently used.
     *
     * @param key - The key to look up.
     * @returns The cached value if found, undefined otherwise.
     */
    get(key: K): V | undefined;
    /**
     * Stores a value in the cache.
     * If the key already exists, the value is updated and marked as most recently used.
     * If the cache is at its maximum size, the least recently used item is evicted.
     *
     * @param key - The key to store.
     * @param value - The value to store.
     */
    set(key: K, value: V): void;
    /**
     * Removes all items from the cache.
     */
    clear(): void;
}

/**
 * Configuration options for DiskCache.
 */
interface DiskCacheOptions {
    /**
     * Directory where cache files will be stored.
     */
    cacheDir: string;
    /**
     * Maximum number of entries to store in the cache.
     * If not specified, the cache will grow unbounded.
     */
    max?: number;
    logWarnings?: boolean;
    /**
     * Whether to create the cache directory if it doesn't exist.
     */
    mkdir?: boolean;
}
/**
 * A persistent filesystem-based cache implementation.
 *
 * This cache stores entries as compressed files on disk and implements an LRU eviction
 * policy based on file modification times (mtime). While access times (atime) would be more
 * semantically accurate for LRU, we use mtime because:
 *
 * 1. Many modern filesystems mount with noatime for performance reasons.
 * 2. Even when atime updates are enabled, they may be subject to update delays.
 * 3. mtime updates are more reliably supported across different filesystems.
 *
 * @template T - The type of values stored in the cache.
 */
declare class DiskCache<T> {
    private readonly dir;
    private readonly max?;
    private readonly mkdir;
    private readonly logWarnings;
    /**
     * Creates a new DiskCache instance.
     * @param options - Configuration options for the cache.
     */
    constructor(options: DiskCacheOptions);
    getEntryPath(key: string): string;
    /**
     * Retrieves a value from the cache.
     * Updates the entry's access time when read.
     *
     * @param key - The key to look up in the cache.
     * @returns The cached value if found, undefined otherwise.
     */
    get(key: string): Promise<T | undefined>;
    /**
     * Stores a value in the cache.
     * If the cache is at its maximum size, the least recently used entries will be evicted.
     *
     * @param key - The key to store the value under.
     * @param value - The value to store in the cache.
     */
    set(key: string, value: T): Promise<void>;
    private evictOldestIfFull;
}

/**
 * Identifies a prompt in the cache using either project ID or project name along with the slug.
 */
interface PromptKey {
    /**
     * The slug identifier for the prompt within its project.
     */
    slug?: string;
    /**
     * The version of the prompt.
     */
    version?: string;
    /**
     * The ID of the project containing the prompt.
     * Either projectId or projectName must be provided.
     */
    projectId?: string;
    /**
     * The name of the project containing the prompt.
     * Either projectId or projectName must be provided.
     */
    projectName?: string;
    /**
     * The ID of a specific prompt. If provided, slug and project parameters are ignored.
     */
    id?: string;
}
/**
 * A two-layer cache for Braintrust prompts with both in-memory and filesystem storage.
 *
 * This cache implements either a one or two-layer caching strategy:
 * 1. A fast in-memory LRU cache for frequently accessed prompts.
 * 2. An optional persistent filesystem-based cache that serves as a backing store.
 */
declare class PromptCache {
    private readonly memoryCache;
    private readonly diskCache?;
    constructor(options: {
        memoryCache: LRUCache<string, Prompt>;
        diskCache?: DiskCache<Prompt>;
    });
    /**
     * Retrieves a prompt from the cache.
     * First checks the in-memory LRU cache, then falls back to checking the disk cache if available.
     */
    get(key: PromptKey): Promise<Prompt | undefined>;
    /**
     * Stores a prompt in the cache.
     * Writes to the in-memory cache and the disk cache if available.
     *
     * @param key - The key to store the value under.
     * @param value - The value to store in the cache.
     * @throws If there is an error writing to the disk cache.
     */
    set(key: PromptKey, value: Prompt): Promise<void>;
}

type SetCurrentArg = {
    setCurrent?: boolean;
};
type StartSpanEventArgs = ExperimentLogPartialArgs & Partial<IdField>;
type StartSpanArgs = {
    name?: string;
    type?: SpanType;
    spanAttributes?: Record<any, any>;
    startTime?: number;
    parent?: string;
    event?: StartSpanEventArgs;
    propagatedEvent?: StartSpanEventArgs;
    spanId?: string;
    parentSpanIds?: ParentSpanIds | MultiParentSpanIds;
};
type EndSpanArgs = {
    endTime?: number;
};
interface Exportable {
    /**
     * Return a serialized representation of the object that can be used to start subspans in other places. See {@link Span.traced} for more details.
     */
    export(): Promise<string>;
}
/**
 * A Span encapsulates logged data and metrics for a unit of work. This interface is shared by all span implementations.
 *
 * We suggest using one of the various `traced` methods, instead of creating Spans directly. See {@link Span.traced} for full details.
 */
interface Span extends Exportable {
    /**
     * Row ID of the span.
     */
    id: string;
    /**
     * Span ID of the span.
     */
    spanId: string;
    /**
     * Root span ID of the span.
     */
    rootSpanId: string;
    /**
     * Parent span IDs of the span.
     */
    spanParents: string[];
    /**
     * Incrementally update the current span with new data. The event will be batched and uploaded behind the scenes.
     *
     * @param event: Data to be logged. See {@link Experiment.log} for full details.
     */
    log(event: ExperimentLogPartialArgs): void;
    /**
     * Add feedback to the current span. Unlike `Experiment.logFeedback` and `Logger.logFeedback`, this method does not accept an id parameter, because it logs feedback to the current span.
     *
     * @param event: Data to be logged. See {@link Experiment.logFeedback} for full details.
     */
    logFeedback(event: Omit<LogFeedbackFullArgs, "id">): void;
    /**
     * Create a new span and run the provided callback. This is useful if you want to log more detailed trace information beyond the scope of a single log event. Data logged over several calls to `Span.log` will be merged into one logical row.
     *
     * Spans created within `traced` are ended automatically. By default, the span is marked as current, so they can be accessed using `braintrust.currentSpan`.
     *
     * @param callback The function to be run under the span context.
     * @param args.name Optional name of the span. If not provided, a name will be inferred from the call stack.
     * @param args.type Optional type of the span. If not provided, the type will be unset.
     * @param args.span_attributes Optional additional attributes to attach to the span, such as a type name.
     * @param args.start_time Optional start time of the span, as a timestamp in seconds.
     * @param args.setCurrent If true (the default), the span will be marked as the currently-active span for the duration of the callback.
     * @param args.parent Optional parent info string for the span. The string can be generated from `[Span,Experiment,Logger].export`. If not provided, the current span will be used (depending on context). This is useful for adding spans to an existing trace.
     * @param args.event Data to be logged. See {@link Experiment.log} for full details.
     * @returns The result of running `callback`.
     */
    traced<R>(callback: (span: Span) => R, args?: StartSpanArgs & SetCurrentArg): R;
    /**
     * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
     * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
     * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
     *
     * See {@link Span.traced} for full details.
     *
     * @returns The newly-created `Span`
     */
    startSpan(args?: StartSpanArgs): Span;
    /**
     * Log an end time to the span (defaults to the current time). Returns the logged time.
     *
     * Will be invoked automatically if the span is constructed with `traced`.
     *
     * @param args.endTime Optional end time of the span, as a timestamp in seconds.
     * @returns The end time logged to the span metrics.
     */
    end(args?: EndSpanArgs): number;
    /**
     * Serialize the identifiers of this span. The return value can be used to
     * identify this span when starting a subspan elsewhere, such as another
     * process or service, without needing to access this `Span` object. See the
     * parameters of {@link Span.startSpan} for usage details.
     *
     * Callers should treat the return value as opaque. The serialization format
     * may change from time to time. If parsing is needed, use
     * `SpanComponentsV3.fromStr`.
     *
     * @returns Serialized representation of this span's identifiers.
     */
    export(): Promise<string>;
    /**
     * Format a permalink to the Braintrust application for viewing this span.
     *
     * Links can be generated at any time, but they will only become viewable
     * after the span and its root have been flushed to the server and ingested.
     *
     * This function can block resolving data with the server. For production
     * applications it's preferable to call {@link Span.link} instead.
     *
     * @returns A promise which resolves to a permalink to the span.
     */
    permalink(): Promise<string>;
    /**
     * Format a link to the Braintrust application for viewing this span.
     *
     * Links can be generated at any time, but they will only become viewable
     * after the span and its root have been flushed to the server and ingested.
     *
     * There are some conditions when a Span doesn't have enough information
     * to return a stable link (e.g. during an unresolved experiment). In this case
     * or if there's an error generating link, we'll return a placeholder link.
     *
     * @returns A link to the span.
     */
    link(): string;
    /**
     * Flush any pending rows to the server.
     */
    flush(): Promise<void>;
    /**
     * Alias for `end`.
     */
    close(args?: EndSpanArgs): number;
    /**
     * Set the span's name, type, or other attributes after it's created.
     */
    setAttributes(args: Omit<StartSpanArgs, "event">): void;
    /**
     * Start a span with a specific id and parent span ids.
     */
    startSpanWithParents(spanId: string, spanParents: string[], args?: StartSpanArgs): Span;
    state(): BraintrustState;
    kind: "span";
}
/**
 * A fake implementation of the Span API which does nothing. This can be used as the default span.
 */
declare class NoopSpan implements Span {
    id: string;
    spanId: string;
    rootSpanId: string;
    spanParents: string[];
    kind: "span";
    constructor();
    log(_: ExperimentLogPartialArgs): void;
    logFeedback(_event: Omit<LogFeedbackFullArgs, "id">): void;
    traced<R>(callback: (span: Span) => R, _1?: StartSpanArgs & SetCurrentArg): R;
    startSpan(_1?: StartSpanArgs): this;
    end(args?: EndSpanArgs): number;
    export(): Promise<string>;
    permalink(): Promise<string>;
    link(): string;
    flush(): Promise<void>;
    close(args?: EndSpanArgs): number;
    setAttributes(_args: Omit<StartSpanArgs, "event">): void;
    startSpanWithParents(_spanId: string, _spanParents: string[], _args?: StartSpanArgs): Span;
    state(): BraintrustState;
}
declare const NOOP_SPAN: NoopSpan;
declare const NOOP_SPAN_PERMALINK = "https://braintrust.dev/noop-span";
declare global {
    var __inherited_braintrust_state: BraintrustState;
}
declare const loginSchema: z$1.ZodObject<{
    appUrl: z$1.ZodString;
    appPublicUrl: z$1.ZodString;
    orgName: z$1.ZodString;
    apiUrl: z$1.ZodString;
    proxyUrl: z$1.ZodString;
    loginToken: z$1.ZodString;
    orgId: z$1.ZodOptional<z$1.ZodNullable<z$1.ZodString>>;
    gitMetadataSettings: z$1.ZodOptional<z$1.ZodNullable<z$1.ZodObject<{
        collect: z$1.ZodEnum<["all", "none", "some"]>;
        fields: z$1.ZodOptional<z$1.ZodArray<z$1.ZodEnum<["commit", "branch", "tag", "dirty", "author_name", "author_email", "commit_message", "commit_time", "git_diff"]>, "many">>;
    }, "strip", z$1.ZodTypeAny, {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    }, {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    }>>>;
}, "strict", z$1.ZodTypeAny, {
    appUrl: string;
    appPublicUrl: string;
    orgName: string;
    apiUrl: string;
    proxyUrl: string;
    loginToken: string;
    orgId?: string | null | undefined;
    gitMetadataSettings?: {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    } | null | undefined;
}, {
    appUrl: string;
    appPublicUrl: string;
    orgName: string;
    apiUrl: string;
    proxyUrl: string;
    loginToken: string;
    orgId?: string | null | undefined;
    gitMetadataSettings?: {
        collect: "some" | "none" | "all";
        fields?: ("dirty" | "commit" | "branch" | "tag" | "author_name" | "author_email" | "commit_message" | "commit_time" | "git_diff")[] | undefined;
    } | null | undefined;
}>;
type SerializedBraintrustState = z$1.infer<typeof loginSchema>;
declare class BraintrustState {
    private loginParams;
    id: string;
    currentExperiment: Experiment | undefined;
    currentLogger: Logger<false> | undefined;
    currentParent: IsoAsyncLocalStorage<string>;
    currentSpan: IsoAsyncLocalStorage<Span>;
    private _bgLogger;
    private _overrideBgLogger;
    appUrl: string | null;
    appPublicUrl: string | null;
    loginToken: string | null;
    orgId: string | null;
    orgName: string | null;
    apiUrl: string | null;
    proxyUrl: string | null;
    loggedIn: boolean;
    gitMetadataSettings?: GitMetadataSettingsType;
    fetch: typeof globalThis.fetch;
    private _appConn;
    private _apiConn;
    private _proxyConn;
    promptCache: PromptCache;
    constructor(loginParams: LoginOptions);
    resetLoginInfo(): void;
    copyLoginInfo(other: BraintrustState): void;
    serialize(): SerializedBraintrustState;
    static deserialize(serialized: unknown, opts?: LoginOptions): BraintrustState;
    setFetch(fetch: typeof globalThis.fetch): void;
    setMaskingFunction(maskingFunction: ((value: unknown) => unknown) | null): void;
    login(loginParams: LoginOptions & {
        forceLogin?: boolean;
    }): Promise<void>;
    appConn(): HTTPConnection;
    apiConn(): HTTPConnection;
    proxyConn(): HTTPConnection;
    bgLogger(): BackgroundLogger;
    httpLogger(): HTTPBackgroundLogger;
    setOverrideBgLogger(logger: BackgroundLogger | null): void;
    loginReplaceApiConn(apiConn: HTTPConnection): void;
    disable(): void;
    enforceQueueSizeLimit(enforce: boolean): void;
}
declare function useTestBackgroundLogger(): TestBackgroundLogger;
declare function clearTestBackgroundLogger(): void;
declare function initTestExperiment(experimentName: string, projectName?: string): Experiment;
/**
 * This function should be invoked exactly once after configuring the `iso`
 * object based on the platform. See js/src/node.ts for an example.
 * @internal
 */
declare function _internalSetInitialState(): void;
/**
 * @internal
 */
declare const _internalGetGlobalState: () => BraintrustState;
declare class FailedHTTPResponse extends Error {
    status: number;
    text: string;
    data: string;
    constructor(status: number, text: string, data: string);
}
declare class HTTPConnection {
    base_url: string;
    token: string | null;
    headers: Record<string, string>;
    fetch: typeof globalThis.fetch;
    constructor(base_url: string, fetch: typeof globalThis.fetch);
    setFetch(fetch: typeof globalThis.fetch): void;
    ping(): Promise<boolean>;
    make_long_lived(): void;
    static sanitize_token(token: string): string;
    set_token(token: string): void;
    _reset(): void;
    get(path: string, params?: Record<string, string | string[] | undefined> | undefined, config?: RequestInit): Promise<Response>;
    post(path: string, params?: Record<string, unknown> | string, config?: RequestInit): Promise<Response>;
    get_json(object_type: string, args?: Record<string, string | string[] | undefined> | undefined, retries?: number): Promise<any>;
    post_json(object_type: string, args?: Record<string, unknown> | string | undefined): Promise<any>;
}
interface ObjectMetadata {
    id: string;
    name: string;
    fullInfo: Record<string, unknown>;
}
interface ProjectExperimentMetadata {
    project: ObjectMetadata;
    experiment: ObjectMetadata;
}
interface ProjectDatasetMetadata {
    project: ObjectMetadata;
    dataset: ObjectMetadata;
}
interface OrgProjectMetadata {
    org_id: string;
    project: ObjectMetadata;
}
interface LogOptions<IsAsyncFlush> {
    asyncFlush?: IsAsyncFlush;
    computeMetadataArgs?: Record<string, any>;
}
type PromiseUnless<B, R> = B extends true ? R : Promise<Awaited<R>>;
interface AttachmentParams {
    data: string | Blob | ArrayBuffer;
    filename: string;
    contentType: string;
    state?: BraintrustState;
}
interface ExternalAttachmentParams {
    url: string;
    filename: string;
    contentType: string;
    state?: BraintrustState;
}
declare abstract class BaseAttachment {
    readonly reference: AttachmentReferenceType;
    abstract upload(): Promise<AttachmentStatusType>;
    abstract data(): Promise<Blob>;
    abstract debugInfo(): Record<string, unknown>;
}
/**
 * Represents an attachment to be uploaded and the associated metadata.
 * `Attachment` objects can be inserted anywhere in an event, allowing you to
 * log arbitrary file data. The SDK will asynchronously upload the file to
 * object storage and replace the `Attachment` object with an
 * `AttachmentReference`.
 */
declare class Attachment extends BaseAttachment {
    /**
     * The object that replaces this `Attachment` at upload time.
     */
    readonly reference: BraintrustAttachmentReferenceType;
    private readonly uploader;
    private readonly _data;
    private readonly state?;
    private readonly dataDebugString;
    /**
     * Construct an attachment.
     *
     * @param param A parameter object with:
     *
     * `data`: A string representing the path of the file on disk, or a
     * `Blob`/`ArrayBuffer` with the file's contents. The caller is responsible
     * for ensuring the file/blob/buffer is not modified until upload is complete.
     *
     * `filename`: The desired name of the file in Braintrust after uploading.
     * This parameter is for visualization purposes only and has no effect on
     * attachment storage.
     *
     * `contentType`: The MIME type of the file.
     *
     * `state`: (Optional) For internal use.
     */
    constructor({ data, filename, contentType, state }: AttachmentParams);
    /**
     * On first access, (1) reads the attachment from disk if needed, (2)
     * authenticates with the data plane to request a signed URL, (3) uploads to
     * object store, and (4) updates the attachment.
     *
     * @returns The attachment status.
     */
    upload(): Promise<{
        upload_status: "uploading" | "done" | "error";
        error_message?: string | undefined;
    }>;
    /**
     * The attachment contents. This is a lazy value that will read the attachment contents from disk or memory on first access.
     */
    data(): Promise<Blob>;
    /**
     * A human-readable description for logging and debugging.
     *
     * @returns The debug object. The return type is not stable and may change in
     * a future release.
     */
    debugInfo(): Record<string, unknown>;
    private initUploader;
    private initData;
    private ensureFileReadable;
}
/**
 * Represents an attachment that resides in an external object store and the associated metadata.
 *
 * `ExternalAttachment` objects can be inserted anywhere in an event, similar to
 * `Attachment` objects, but they reference files that already exist in an external
 * object store rather than requiring upload. The SDK will replace the `ExternalAttachment`
 * object with an `AttachmentReference` during logging.
 */
declare class ExternalAttachment extends BaseAttachment {
    /**
     * The object that replaces this `ExternalAttachment` at upload time.
     */
    readonly reference: ExternalAttachmentReferenceType;
    private readonly _data;
    private readonly state?;
    /**
     * Construct an external attachment.
     *
     * @param param A parameter object with:
     *
     * `url`: The fully qualified URL of the file in the external object store.
     *
     * `filename`: The desired name of the file in Braintrust after uploading.
     * This parameter is for visualization purposes only and has no effect on
     * attachment storage.
     *
     * `contentType`: The MIME type of the file.
     *
     * `state`: (Optional) For internal use.
     */
    constructor({ url, filename, contentType, state }: ExternalAttachmentParams);
    /**
     * For ExternalAttachment, this is a no-op since the data already resides
     * in the external object store. It marks the attachment as already uploaded.
     *
     * @returns The attachment status, which will always indicate success.
     */
    upload(): Promise<{
        upload_status: "done";
    }>;
    /**
     * The attachment contents. This is a lazy value that will read the attachment contents from the external object store on first access.
     */
    data(): Promise<Blob>;
    /**
     * A human-readable description for logging and debugging.
     *
     * @returns The debug object. The return type is not stable and may change in
     * a future release.
     */
    debugInfo(): Record<string, unknown>;
    private initData;
}
declare const attachmentMetadataSchema: z$1.ZodObject<{
    downloadUrl: z$1.ZodString;
    status: z$1.ZodObject<{
        upload_status: z$1.ZodEnum<["uploading", "done", "error"]>;
        error_message: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        upload_status: "uploading" | "done" | "error";
        error_message?: string | undefined;
    }, {
        upload_status: "uploading" | "done" | "error";
        error_message?: string | undefined;
    }>;
}, "strip", z$1.ZodTypeAny, {
    status: {
        upload_status: "uploading" | "done" | "error";
        error_message?: string | undefined;
    };
    downloadUrl: string;
}, {
    status: {
        upload_status: "uploading" | "done" | "error";
        error_message?: string | undefined;
    };
    downloadUrl: string;
}>;
type AttachmentMetadata = z$1.infer<typeof attachmentMetadataSchema>;
/**
 * A readonly alternative to `Attachment`, which can be used for fetching
 * already-uploaded Attachments.
 */
declare class ReadonlyAttachment {
    /**
     * Attachment metadata.
     */
    readonly reference: AttachmentReferenceType;
    private readonly _data;
    private readonly state?;
    /**
     * Construct a ReadonlyAttachment.
     *
     * @param reference The `AttachmentReference` that should be read by the
     * `ReadonlyAttachment` object.
     * @param state (Optional) For internal use.
     * @returns The new `ReadonlyAttachment` object.
     */
    constructor(reference: AttachmentReferenceType, state?: BraintrustState);
    /**
     * The attachment contents. This is a lazy value that will read the attachment
     * contents from the object store on first access.
     */
    data(): Promise<Blob>;
    /**
     * Returns the attachment contents as a base64-encoded URL that is suitable
     * for use in a prompt.
     *
     * @returns The attachment contents as a base64-encoded URL.
     */
    asBase64Url(): Promise<string>;
    /**
     * Fetch the attachment metadata, which includes a downloadUrl and a status.
     * This will re-fetch the status each time in case it changes over time.
     */
    metadata(): Promise<AttachmentMetadata>;
    /**
     * Fetch the attachment upload status. This will re-fetch the status each time
     * in case it changes over time.
     */
    status(): Promise<AttachmentStatusType>;
    private initDownloader;
}
/**
 * Update a span using the output of `span.export()`. It is important that you only resume updating
 * to a span once the original span has been fully written and flushed, since otherwise updates to
 * the span may conflict with the original span.
 *
 * @param exported The output of `span.export()`.
 * @param event The event data to update the span with. See {@link Experiment.log} for a full list of valid fields.
 * @param state (optional) Login state to use. If not provided, the global state will be used.
 */
declare function updateSpan({ exported, state, ...event }: {
    exported: string;
} & Omit<Partial<ExperimentEvent>, "id"> & OptionalStateArg): void;
interface ParentSpanIds {
    spanId: string;
    rootSpanId: string;
}
interface MultiParentSpanIds {
    parentSpanIds: string[];
    rootSpanId: string;
}
declare function spanComponentsToObjectId({ components, state, }: {
    components: SpanComponentsV3;
    state?: BraintrustState;
}): Promise<string>;
declare const ERR_PERMALINK = "https://braintrust.dev/error-generating-link";
/**
 * Format a permalink to the Braintrust application for viewing the span
 * represented by the provided `slug`.
 *
 * Links can be generated at any time, but they will only become viewable after
 * the span and its root have been flushed to the server and ingested.
 *
 * If you have a `Span` object, use {@link Span.link} instead.
 *
 * @param slug The identifier generated from {@link Span.export}.
 * @param opts Optional arguments.
 * @param opts.state The login state to use. If not provided, the global state will be used.
 * @param opts.orgName The org name to use. If not provided, the org name will be inferred from the state.
 * @param opts.appUrl The app URL to use. If not provided, the app URL will be inferred from the state.
 * @returns A permalink to the exported span.
 */
declare function permalink(slug: string, opts?: {
    state?: BraintrustState;
    orgName?: string;
    appUrl?: string;
}): Promise<string>;
declare class Logger<IsAsyncFlush extends boolean> implements Exportable {
    private state;
    private lazyMetadata;
    private _asyncFlush;
    private computeMetadataArgs;
    private lastStartTime;
    private lazyId;
    private calledStartSpan;
    kind: "logger";
    constructor(state: BraintrustState, lazyMetadata: LazyValue<OrgProjectMetadata>, logOptions?: LogOptions<IsAsyncFlush>);
    get org_id(): Promise<string>;
    get project(): Promise<ObjectMetadata>;
    get id(): Promise<string>;
    private parentObjectType;
    /**
     * Log a single event. The event will be batched and uploaded behind the scenes if `logOptions.asyncFlush` is true.
     *
     * @param event The event to log.
     * @param event.input: (Optional) the arguments that uniquely define a user input (an arbitrary, JSON serializable object).
     * @param event.output: (Optional) the output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
     * @param event.expected: (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
     * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
     * @param event.scores: (Optional) a dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs.
     * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
     * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
     * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
     * @param options Additional logging options
     * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the logger elsewhere, set this to true.
     * @returns The `id` of the logged event.
     */
    log(event: Readonly<StartSpanEventArgs>, options?: {
        allowConcurrentWithSpans?: boolean;
    }): PromiseUnless<IsAsyncFlush, string>;
    /**
     * Create a new toplevel span underneath the logger. The name defaults to "root".
     *
     * See {@link Span.traced} for full details.
     */
    traced<R>(callback: (span: Span) => R, args?: StartSpanArgs & SetCurrentArg): PromiseUnless<IsAsyncFlush, R>;
    /**
     * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
     * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
     * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
     *
     * See {@link traced} for full details.
     */
    startSpan(args?: StartSpanArgs): Span;
    private startSpanImpl;
    /**
     * Log feedback to an event. Feedback is used to save feedback scores, set an expected value, or add a comment.
     *
     * @param event
     * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
     * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
     * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
     * @param event.comment (Optional) an optional comment string to log about the event.
     * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
     * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
     */
    logFeedback(event: LogFeedbackFullArgs): void;
    /**
     * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
     * since otherwise updates to the span may conflict with the original span.
     *
     * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
     */
    updateSpan(event: Omit<Partial<ExperimentEvent>, "id"> & Required<Pick<ExperimentEvent, "id">>): void;
    /**
     * Return a serialized representation of the logger that can be used to start subspans in other places.
     *
     * See {@link Span.startSpan} for more details.
     */
    export(): Promise<string>;
    flush(): Promise<void>;
    get asyncFlush(): IsAsyncFlush | undefined;
}
interface BackgroundLoggerOpts {
    noExitFlush?: boolean;
    onFlushError?: (error: unknown) => void;
}
interface BackgroundLogger {
    log(items: LazyValue<BackgroundLogEvent>[]): void;
    flush(): Promise<void>;
    setMaskingFunction(maskingFunction: ((value: unknown) => unknown) | null): void;
}
declare class TestBackgroundLogger implements BackgroundLogger {
    private items;
    private maskingFunction;
    log(items: LazyValue<BackgroundLogEvent>[]): void;
    setMaskingFunction(maskingFunction: ((value: unknown) => unknown) | null): void;
    flush(): Promise<void>;
    drain(): Promise<BackgroundLogEvent[]>;
}
declare class HTTPBackgroundLogger implements BackgroundLogger {
    private apiConn;
    private queue;
    private activeFlush;
    private activeFlushResolved;
    private activeFlushError;
    private onFlushError?;
    private maskingFunction;
    syncFlush: boolean;
    maxRequestSize: number;
    defaultBatchSize: number;
    numTries: number;
    queueDropExceedingMaxsize: number;
    queueDropLoggingPeriod: number;
    failedPublishPayloadsDir: string | undefined;
    allPublishPayloadsDir: string | undefined;
    private _disabled;
    private queueDropLoggingState;
    constructor(apiConn: LazyValue<HTTPConnection>, opts?: BackgroundLoggerOpts);
    setMaskingFunction(maskingFunction: ((value: unknown) => unknown) | null): void;
    log(items: LazyValue<BackgroundLogEvent>[]): void;
    flush(): Promise<void>;
    private flushOnce;
    private unwrapLazyValues;
    private submitLogsRequest;
    private registerDroppedItemCount;
    private dumpDroppedEvents;
    private static writePayloadToDir;
    private triggerActiveFlush;
    private logFailedPayloadsDir;
    internalReplaceApiConn(apiConn: HTTPConnection): void;
    disable(): void;
    enforceQueueSizeLimit(enforce: boolean): void;
}
type InitOpenOption<IsOpen extends boolean> = {
    open?: IsOpen;
};
type InitOptions<IsOpen extends boolean> = FullLoginOptions & {
    experiment?: string;
    description?: string;
    dataset?: AnyDataset;
    update?: boolean;
    baseExperiment?: string;
    isPublic?: boolean;
    metadata?: Record<string, unknown>;
    gitMetadataSettings?: GitMetadataSettingsType;
    projectId?: string;
    baseExperimentId?: string;
    repoInfo?: RepoInfoType;
    setCurrent?: boolean;
    state?: BraintrustState;
} & InitOpenOption<IsOpen>;
type FullInitOptions<IsOpen extends boolean> = {
    project?: string;
} & InitOptions<IsOpen>;
type InitializedExperiment<IsOpen extends boolean | undefined> = IsOpen extends true ? ReadonlyExperiment : Experiment;
/**
 * Log in, and then initialize a new experiment in a specified project. If the project does not exist, it will be created.
 *
 * @param options Options for configuring init().
 * @param options.project The name of the project to create the experiment in. Must specify at least one of `project` or `projectId`.
 * @param options.experiment The name of the experiment to create. If not specified, a name will be generated automatically.
 * @param options.description An optional description of the experiment.
 * @param options.dataset (Optional) A dataset to associate with the experiment. You can pass in the name of the dataset (in the same project) or a dataset object (from any project).
 * @param options.update If the experiment already exists, continue logging to it. If it does not exist, creates the experiment with the specified arguments.
 * @param options.baseExperiment An optional experiment name to use as a base. If specified, the new experiment will be summarized and compared to this experiment. Otherwise, it will pick an experiment by finding the closest ancestor on the default (e.g. main) branch.
 * @param options.isPublic An optional parameter to control whether the experiment is publicly visible to anybody with the link or privately visible to only members of the organization. Defaults to private.
 * @param options.appUrl The URL of the Braintrust App. Defaults to https://www.braintrust.dev.
 * @param options.apiKey The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable. If no API key is specified, will prompt the user to login.
 * @param options.orgName (Optional) The name of a specific organization to connect to. This is useful if you belong to multiple.
 * @param options.metadata (Optional) A dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
 * @param options.gitMetadataSettings (Optional) Settings for collecting git metadata. By default, will collect all git metadata fields allowed in org-level settings.
 * @param setCurrent If true (the default), set the global current-experiment to the newly-created one.
 * @param options.open If the experiment already exists, open it in read-only mode. Throws an error if the experiment does not already exist.
 * @param options.projectId The id of the project to create the experiment in. This takes precedence over `project` if specified.
 * @param options.baseExperimentId An optional experiment id to use as a base. If specified, the new experiment will be summarized and compared to this. This takes precedence over `baseExperiment` if specified.
 * @param options.repoInfo (Optional) Explicitly specify the git metadata for this experiment. This takes precedence over `gitMetadataSettings` if specified.
 * @returns The newly created Experiment.
 */
declare function init<IsOpen extends boolean = false>(options: Readonly<FullInitOptions<IsOpen>>): InitializedExperiment<IsOpen>;
/**
 * Legacy form of `init` which accepts the project name as the first parameter,
 * separately from the remaining options. See `init(options)` for full details.
 */
declare function init<IsOpen extends boolean = false>(project: string, options?: Readonly<InitOptions<IsOpen>>): InitializedExperiment<IsOpen>;
/**
 * Alias for init(options).
 */
declare function initExperiment<IsOpen extends boolean = false>(options: Readonly<InitOptions<IsOpen>>): InitializedExperiment<IsOpen>;
/**
 * Alias for init(project, options).
 */
declare function initExperiment<IsOpen extends boolean = false>(project: string, options?: Readonly<InitOptions<IsOpen>>): InitializedExperiment<IsOpen>;
/**
 * @deprecated Use {@link init} instead.
 */
declare function withExperiment<R>(project: string, callback: (experiment: Experiment) => R, options?: Readonly<InitOptions<false> & SetCurrentArg>): R;
/**
 * @deprecated Use {@link initLogger} instead.
 */
declare function withLogger<IsAsyncFlush extends boolean = false, R = void>(callback: (logger: Logger<IsAsyncFlush>) => R, options?: Readonly<InitLoggerOptions<IsAsyncFlush> & SetCurrentArg>): R;
type UseOutputOption<IsLegacyDataset extends boolean> = {
    useOutput?: IsLegacyDataset;
};
type InitDatasetOptions<IsLegacyDataset extends boolean> = FullLoginOptions & {
    dataset?: string;
    description?: string;
    version?: string;
    projectId?: string;
    metadata?: Record<string, unknown>;
    state?: BraintrustState;
    _internal_btql?: Record<string, unknown>;
} & UseOutputOption<IsLegacyDataset>;
type FullInitDatasetOptions<IsLegacyDataset extends boolean> = {
    project?: string;
} & InitDatasetOptions<IsLegacyDataset>;
/**
 * Create a new dataset in a specified project. If the project does not exist, it will be created.
 *
 * @param options Options for configuring initDataset().
 * @param options.project The name of the project to create the dataset in. Must specify at least one of `project` or `projectId`.
 * @param options.dataset The name of the dataset to create. If not specified, a name will be generated automatically.
 * @param options.description An optional description of the dataset.
 * @param options.appUrl The URL of the Braintrust App. Defaults to https://www.braintrust.dev.
 * @param options.apiKey The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable. If no API key is specified, will prompt the user to login.
 * @param options.orgName (Optional) The name of a specific organization to connect to. This is useful if you belong to multiple.
 * @param options.projectId The id of the project to create the dataset in. This takes precedence over `project` if specified.
 * @param options.metadata A dictionary with additional data about the dataset. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
 * @param options.useOutput (Deprecated) If true, records will be fetched from this dataset in the legacy format, with the "expected" field renamed to "output". This option will be removed in a future version of Braintrust.
 * @returns The newly created Dataset.
 */
declare function initDataset<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET>(options: Readonly<FullInitDatasetOptions<IsLegacyDataset>>): Dataset<IsLegacyDataset>;
/**
 * Legacy form of `initDataset` which accepts the project name as the first
 * parameter, separately from the remaining options.
 *
 * See `initDataset(options)` for full details.
 */
declare function initDataset<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET>(project: string, options?: Readonly<InitDatasetOptions<IsLegacyDataset>>): Dataset<IsLegacyDataset>;
/**
 * @deprecated Use {@link initDataset} instead.
 */
declare function withDataset<R, IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET>(project: string, callback: (dataset: Dataset<IsLegacyDataset>) => R, options?: Readonly<InitDatasetOptions<IsLegacyDataset>>): R;
type AsyncFlushArg<IsAsyncFlush> = {
    asyncFlush?: IsAsyncFlush;
};
type InitLoggerOptions<IsAsyncFlush> = FullLoginOptions & {
    projectName?: string;
    projectId?: string;
    setCurrent?: boolean;
    state?: BraintrustState;
    orgProjectMetadata?: OrgProjectMetadata;
} & AsyncFlushArg<IsAsyncFlush>;
/**
 * Create a new logger in a specified project. If the project does not exist, it will be created.
 *
 * @param options Additional options for configuring init().
 * @param options.projectName The name of the project to log into. If unspecified, will default to the Global project.
 * @param options.projectId The id of the project to log into. This takes precedence over projectName if specified.
 * @param options.asyncFlush If true, will log asynchronously in the background. Otherwise, will log synchronously. (true by default)
 * @param options.appUrl The URL of the Braintrust App. Defaults to https://www.braintrust.dev.
 * @param options.apiKey The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable. If no API
 * key is specified, will prompt the user to login.
 * @param options.orgName (Optional) The name of a specific organization to connect to. This is useful if you belong to multiple.
 * @param options.forceLogin Login again, even if you have already logged in (by default, the logger will not login if you are already logged in)
 * @param setCurrent If true (the default), set the global current-experiment to the newly-created one.
 * @returns The newly created Logger.
 */
declare function initLogger<IsAsyncFlush extends boolean = true>(options?: Readonly<InitLoggerOptions<IsAsyncFlush>>): Logger<IsAsyncFlush>;
type LoadPromptOptions = FullLoginOptions & {
    projectName?: string;
    projectId?: string;
    slug?: string;
    version?: string;
    id?: string;
    defaults?: DefaultPromptArgs;
    noTrace?: boolean;
    environment?: string;
    state?: BraintrustState;
};
/**
 * Load a prompt from the specified project.
 *
 * @param options Options for configuring loadPrompt().
 * @param options.projectName The name of the project to load the prompt from. Must specify at least one of `projectName` or `projectId`.
 * @param options.projectId The id of the project to load the prompt from. This takes precedence over `projectName` if specified.
 * @param options.slug The slug of the prompt to load.
 * @param options.version An optional version of the prompt (to read). If not specified, the latest version will be used.
 * @param options.environment Fetch the version of the prompt assigned to the specified environment (e.g. "production", "staging"). Cannot be specified at the same time as `version`.
 * @param options.id The id of a specific prompt to load. If specified, this takes precedence over all other parameters (project, slug, version).
 * @param options.defaults (Optional) A dictionary of default values to use when rendering the prompt. Prompt values will override these defaults.
 * @param options.noTrace If true, do not include logging metadata for this prompt when build() is called.
 * @param options.appUrl The URL of the Braintrust App. Defaults to https://www.braintrust.dev.
 * @param options.apiKey The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable. If no API
 * key is specified, will prompt the user to login.
 * @param options.orgName (Optional) The name of a specific organization to connect to. This is useful if you belong to multiple.
 * @returns The prompt object.
 * @throws If the prompt is not found.
 * @throws If multiple prompts are found with the same slug in the same project (this should never happen).
 *
 * @example
 * ```javascript
 * const prompt = await loadPrompt({
 *  projectName: "My Project",
 *  slug: "my-prompt",
 * });
 * ```
 */
declare function loadPrompt({ projectName, projectId, slug, version, environment, id, defaults, noTrace, appUrl, apiKey, orgName, fetch, forceLogin, state: stateArg, }: LoadPromptOptions): Promise<Prompt<true, true>>;
/**
 * Options for logging in to Braintrust.
 */
interface LoginOptions {
    /**
     * The URL of the Braintrust App. Defaults to https://www.braintrust.dev. You should not need
     * to change this unless you are doing the "Full" deployment.
     */
    appUrl?: string;
    /**
     * The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable.
     */
    apiKey?: string;
    /**
     * The name of a specific organization to connect to. Since API keys are scoped to organizations, this parameter is usually
     * unnecessary unless you are logging in with a JWT.
     */
    orgName?: string;
    /**
     * A custom fetch implementation to use.
     */
    fetch?: typeof globalThis.fetch;
    /**
     * By default, the SDK installs an event handler that flushes pending writes on the `beforeExit` event.
     * If true, this event handler will _not_ be installed.
     */
    noExitFlush?: boolean;
    /**
     * Calls this function if there's an error in the background flusher.
     */
    onFlushError?: (error: unknown) => void;
}
type FullLoginOptions = LoginOptions & {
    forceLogin?: boolean;
};
/**
 * Set a global masking function that will be applied to all logged data before sending to Braintrust.
 * The masking function will be applied after records are merged but before they are sent to the backend.
 *
 * @param maskingFunction A function that takes a JSON-serializable object and returns a masked version.
 *                        Set to null to disable masking.
 */
declare function setMaskingFunction(maskingFunction: ((value: unknown) => unknown) | null): void;
/**
 * Log into Braintrust. This will prompt you for your API token, which you can find at
 * https://www.braintrust.dev/app/token. This method is called automatically by `init()`.
 *
 * @param options Options for configuring login().
 * @param options.appUrl The URL of the Braintrust App. Defaults to https://www.braintrust.dev.
 * @param options.apiKey The API key to use. If the parameter is not specified, will try to use the `BRAINTRUST_API_KEY` environment variable. If no API
 * key is specified, will prompt the user to login.
 * @param options.orgName (Optional) The name of a specific organization to connect to. This is useful if you belong to multiple.
 * @param options.forceLogin Login again, even if you have already logged in (by default, this function will exit quickly if you have already logged in)
 */
declare function login(options?: LoginOptions & {
    forceLogin?: boolean;
}): Promise<BraintrustState>;
declare function loginToState(options?: LoginOptions): Promise<BraintrustState>;
/**
 * Log a single event to the current experiment. The event will be batched and uploaded behind the scenes.
 *
 * @param event The event to log. See {@link Experiment.log} for full details.
 * @returns The `id` of the logged event.
 */
declare function log(event: ExperimentLogFullArgs): string;
/**
 * Summarize the current experiment, including the scores (compared to the closest reference experiment) and metadata.
 *
 * @param options Options for summarizing the experiment.
 * @param options.summarizeScores Whether to summarize the scores. If False, only the metadata will be returned.
 * @param options.comparisonExperimentId The experiment to compare against. If None, the most recent experiment on the origin's main branch will be used.
 * @returns A summary of the experiment, including the scores (compared to the closest reference experiment) and metadata.
 */
declare function summarize(options?: {
    readonly summarizeScores?: boolean;
    readonly comparisonExperimentId?: string;
}): Promise<ExperimentSummary>;
type OptionalStateArg = {
    state?: BraintrustState;
};
/**
 * Returns the currently-active experiment (set by {@link init}). Returns undefined if no current experiment has been set.
 */
declare function currentExperiment(options?: OptionalStateArg): Experiment | undefined;
/**
 * Returns the currently-active logger (set by {@link initLogger}). Returns undefined if no current logger has been set.
 */
declare function currentLogger<IsAsyncFlush extends boolean>(options?: AsyncFlushArg<IsAsyncFlush> & OptionalStateArg): Logger<IsAsyncFlush> | undefined;
/**
 * Return the currently-active span for logging (set by one of the `traced` methods). If there is no active span, returns a no-op span object, which supports the same interface as spans but does no logging.
 *
 * See {@link Span} for full details.
 */
declare function currentSpan(options?: OptionalStateArg): Span;
/**
 * Mainly for internal use. Return the parent object for starting a span in a global context.
 * Applies precedence: current span > propagated parent string > experiment > logger.
 */
declare function getSpanParentObject<IsAsyncFlush extends boolean>(options?: AsyncFlushArg<IsAsyncFlush> & OptionalStateArg & {
    parent?: string;
}): SpanComponentsV3 | Span | Experiment | Logger<IsAsyncFlush>;
declare function logError(span: Span, error: unknown): void;
/**
 * Toplevel function for starting a span. It checks the following (in precedence order):
 *  * Currently-active span
 *  * Currently-active experiment
 *  * Currently-active logger
 *
 * and creates a span under the first one that is active. Alternatively, if `parent` is specified, it creates a span under the specified parent row. If none of these are active, it returns a no-op span object.
 *
 * See {@link Span.traced} for full details.
 */
declare function traced<IsAsyncFlush extends boolean = true, R = void>(callback: (span: Span) => R, args?: StartSpanArgs & SetCurrentArg & AsyncFlushArg<IsAsyncFlush> & OptionalStateArg): PromiseUnless<IsAsyncFlush, R>;
/**
 * Check if a function is a sync generator function.
 *
 * Note: This uses Object.prototype.toString which is sufficient for environments that
 * support generator functions (ES6+). While our code is compiled to ES2022, consumers
 * may run it in various environments. However, if generators aren't supported in their
 * environment, the generator functions themselves won't work anyway, making detection moot.
 *
 * @param fn The function to check.
 * @returns True if the function is a sync generator function.
 */
declare function isGeneratorFunction(fn: any): boolean;
/**
 * Check if a function is an async generator function.
 *
 * Note: see isGeneratorFunction disclaimer
 * @param fn The function to check.
 * @returns True if the function is an async generator function.
 */
declare function isAsyncGeneratorFunction(fn: any): boolean;
type WrapTracedArgs = {
    noTraceIO?: boolean;
};
/**
 * Wrap a function with `traced`, using the arguments as `input` and return value as `output`.
 * Any functions wrapped this way will automatically be traced, similar to the `@traced` decorator
 * in Python. If you want to correctly propagate the function's name and define it in one go, then
 * you can do so like this:
 *
 * ```ts
 * const myFunc = wrapTraced(async function myFunc(input) {
 *  const result = await client.chat.completions.create({
 *    model: "gpt-3.5-turbo",
 *    messages: [{ role: "user", content: input }],
 *  });
 *  return result.choices[0].message.content ?? "unknown";
 * },
 * // Optional: if you're using a framework like NextJS that minifies your code, specify the function name and it will be used for the span name
 * { name: "myFunc" },
 * );
 * ```
 * Now, any calls to `myFunc` will be traced, and the input and output will be logged automatically.
 * If tracing is inactive, i.e. there is no active logger or experiment, it's just a no-op.
 *
 * @param fn The function to wrap.
 * @param args Span-level arguments (e.g. a custom name or type) to pass to `traced`.
 * @returns The wrapped function.
 */
declare function wrapTraced<F extends (...args: any[]) => any, IsAsyncFlush extends boolean = true>(fn: F, args?: StartSpanArgs & SetCurrentArg & AsyncFlushArg<IsAsyncFlush> & WrapTracedArgs): IsAsyncFlush extends false ? (...args: Parameters<F>) => Promise<Awaited<ReturnType<F>>> : F;
/**
 * A synonym for `wrapTraced`. If you're porting from systems that use `traceable`, you can use this to
 * make your codebase more consistent.
 */
declare const traceable: typeof wrapTraced;
/**
 * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
 * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
 * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
 *
 * See {@link traced} for full details.
 */
declare function startSpan<IsAsyncFlush extends boolean = true>(args?: StartSpanArgs & AsyncFlushArg<IsAsyncFlush> & OptionalStateArg): Span;
/**
 * Flush any pending rows to the server.
 */
declare function flush(options?: OptionalStateArg): Promise<void>;
/**
 * Set the fetch implementation to use for requests. You can specify it here,
 * or when you call `login`.
 *
 * @param fetch The fetch implementation to use.
 */
declare function setFetch(fetch: typeof globalThis.fetch): void;
/**
 * Runs the provided callback with the span as the current span.
 */
declare function withCurrent<R>(span: Span, callback: (span: Span) => R, state?: BraintrustState | undefined): R;
declare function withParent<R>(parent: string, callback: () => R, state?: BraintrustState | undefined): R;
/**
 * Creates a deep copy of the given event. Replaces references to user objects
 * with placeholder strings to ensure serializability, except for
 * {@link Attachment} and {@link ExternalAttachment} objects, which are preserved
 * and not deep-copied.
 */
declare function deepCopyEvent<T extends Partial<BackgroundLogEvent>>(event: T): T;
/**
 * Helper function for uploading attachments. Recursively extracts `Attachment`
 * and `ExternalAttachment` objects and replaces them with their associated
 * `AttachmentReference` objects.
 *
 * @param event The event to filter. Will be modified in-place.
 * @param attachments Flat array of extracted attachments (output parameter).
 */
declare function extractAttachments(event: Record<string, any>, attachments: BaseAttachment[]): void;
type WithTransactionId<R> = R & {
    [TRANSACTION_ID_FIELD]: TransactionId;
};
declare const INTERNAL_BTQL_LIMIT = 1000;
declare class ObjectFetcher<RecordType> implements AsyncIterable<WithTransactionId<RecordType>> {
    private objectType;
    private pinnedVersion;
    private mutateRecord?;
    private _internal_btql?;
    private _fetchedData;
    constructor(objectType: "dataset" | "experiment", pinnedVersion: string | undefined, mutateRecord?: ((r: any) => WithTransactionId<RecordType>) | undefined, _internal_btql?: Record<string, unknown> | undefined);
    get id(): Promise<string>;
    protected getState(): Promise<BraintrustState>;
    fetch(): AsyncGenerator<WithTransactionId<RecordType>>;
    [Symbol.asyncIterator](): AsyncIterator<WithTransactionId<RecordType>>;
    fetchedData(): Promise<WithTransactionId<RecordType>[]>;
    clearCache(): void;
    version(): Promise<string | undefined>;
}
type BaseMetadata = Record<string, unknown> | void;
type DefaultMetadataType = void;
type EvalCase<Input, Expected, Metadata> = {
    input: Input;
    tags?: string[];
    id?: string;
    _xact_id?: TransactionId;
    created?: string | null;
    upsert_id?: string;
} & (Expected extends void ? object : {
    expected: Expected;
}) & (Metadata extends void ? object : {
    metadata: Metadata;
});
/**
 * An experiment is a collection of logged events, such as model inputs and outputs, which represent
 * a snapshot of your application at a particular point in time. An experiment is meant to capture more
 * than just the model you use, and includes the data you use to test, pre- and post- processing code,
 * comparison metrics (scores), and any other metadata you want to include.
 *
 * Experiments are associated with a project, and two experiments are meant to be easily comparable via
 * their `inputs`. You can change the attributes of the experiments in a project (e.g. scoring functions)
 * over time, simply by changing what you log.
 *
 * You should not create `Experiment` objects directly. Instead, use the `braintrust.init()` method.
 */
declare class Experiment extends ObjectFetcher<ExperimentEvent> implements Exportable {
    private readonly lazyMetadata;
    readonly dataset?: AnyDataset;
    private lastStartTime;
    private lazyId;
    private calledStartSpan;
    private state;
    kind: "experiment";
    constructor(state: BraintrustState, lazyMetadata: LazyValue<ProjectExperimentMetadata>, dataset?: AnyDataset);
    get id(): Promise<string>;
    get name(): Promise<string>;
    get project(): Promise<ObjectMetadata>;
    private parentObjectType;
    protected getState(): Promise<BraintrustState>;
    /**
     * Log a single event to the experiment. The event will be batched and uploaded behind the scenes.
     *
     * @param event The event to log.
     * @param event.input: The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical.
     * @param event.output: The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
     * @param event.expected: (Optional) The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
     * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
     * @param event.scores: A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments.
     * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
     * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
     * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
     * @param event.dataset_record_id: (Optional) the id of the dataset record that this event is associated with. This field is required if and only if the experiment is associated with a dataset. This field is unused and will be removed in a future version.
     * @param options Additional logging options
     * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the experiment elsewhere, set this to true.
     * @returns The `id` of the logged event.
     */
    log(event: Readonly<ExperimentLogFullArgs>, options?: {
        allowConcurrentWithSpans?: boolean;
    }): string;
    /**
     * Create a new toplevel span underneath the experiment. The name defaults to "root".
     *
     * See {@link Span.traced} for full details.
     */
    traced<R>(callback: (span: Span) => R, args?: StartSpanArgs & SetCurrentArg): R;
    /**
     * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
     * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
     * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
     *
     * See {@link traced} for full details.
     */
    startSpan(args?: StartSpanArgs): Span;
    private startSpanImpl;
    fetchBaseExperiment(): Promise<{
        id: any;
        name: any;
    } | null>;
    /**
     * Summarize the experiment, including the scores (compared to the closest reference experiment) and metadata.
     *
     * @param options Options for summarizing the experiment.
     * @param options.summarizeScores Whether to summarize the scores. If False, only the metadata will be returned.
     * @param options.comparisonExperimentId The experiment to compare against. If None, the most recent experiment on the origin's main branch will be used.
     * @returns A summary of the experiment, including the scores (compared to the closest reference experiment) and metadata.
     */
    summarize(options?: {
        readonly summarizeScores?: boolean;
        readonly comparisonExperimentId?: string;
    }): Promise<ExperimentSummary>;
    /**
     * Log feedback to an event in the experiment. Feedback is used to save feedback scores, set an expected value, or add a comment.
     *
     * @param event
     * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
     * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
     * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
     * @param event.comment (Optional) an optional comment string to log about the event.
     * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
     * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
     */
    logFeedback(event: LogFeedbackFullArgs): void;
    /**
     * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
     * since otherwise updates to the span may conflict with the original span.
     *
     * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
     */
    updateSpan(event: Omit<Partial<ExperimentEvent>, "id"> & Required<Pick<ExperimentEvent, "id">>): void;
    /**
     * Return a serialized representation of the experiment that can be used to start subspans in other places.
     *
     * See {@link Span.startSpan} for more details.
     */
    export(): Promise<string>;
    /**
     * Flush any pending rows to the server.
     */
    flush(): Promise<void>;
    /**
     * @deprecated This function is deprecated. You can simply remove it from your code.
     */
    close(): Promise<string>;
}
/**
 * A read-only view of an experiment, initialized by passing `open: true` to `init()`.
 */
declare class ReadonlyExperiment extends ObjectFetcher<ExperimentEvent> {
    private state;
    private readonly lazyMetadata;
    constructor(state: BraintrustState, lazyMetadata: LazyValue<ProjectExperimentMetadata>);
    get id(): Promise<string>;
    get name(): Promise<string>;
    protected getState(): Promise<BraintrustState>;
    asDataset<Input, Expected, Metadata = DefaultMetadataType>(): AsyncGenerator<EvalCase<Input, Expected, Metadata>>;
}
declare function newId(): string;
/**
 * Primary implementation of the `Span` interface. See {@link Span} for full details on each method.
 *
 * We suggest using one of the various `traced` methods, instead of creating Spans directly. See {@link Span.startSpan} for full details.
 */
declare class SpanImpl implements Span {
    private _state;
    private isMerge;
    private loggedEndTime;
    private propagatedEvent;
    private parentObjectType;
    private parentObjectId;
    private parentComputeObjectMetadataArgs;
    private _id;
    private _spanId;
    private _rootSpanId;
    private _spanParents;
    kind: "span";
    constructor(args: {
        state: BraintrustState;
        parentObjectType: SpanObjectTypeV3;
        parentObjectId: LazyValue<string>;
        parentComputeObjectMetadataArgs: Record<string, any> | undefined;
        parentSpanIds: ParentSpanIds | MultiParentSpanIds | undefined;
        defaultRootType?: SpanType;
        spanId?: string;
    } & Omit<StartSpanArgs, "parent">);
    get id(): string;
    get spanId(): string;
    get rootSpanId(): string;
    get spanParents(): string[];
    setAttributes(args: Omit<StartSpanArgs, "event">): void;
    setSpanParents(parents: string[]): void;
    log(event: ExperimentLogPartialArgs): void;
    private logInternal;
    logFeedback(event: Omit<LogFeedbackFullArgs, "id">): void;
    traced<R>(callback: (span: Span) => R, args?: StartSpanArgs & SetCurrentArg): R;
    startSpan(args?: StartSpanArgs): Span;
    startSpanWithParents(spanId: string, spanParents: string[], args?: StartSpanArgs): Span;
    end(args?: EndSpanArgs): number;
    export(): Promise<string>;
    permalink(): Promise<string>;
    link(): string;
    _link(orgName: string): string;
    flush(): Promise<void>;
    close(args?: EndSpanArgs): number;
    state(): BraintrustState;
}
/**
 * A dataset is a collection of records, such as model inputs and expected outputs, which represent
 * data you can use to evaluate and fine-tune models. You can log production data to datasets,
 * curate them with interesting examples, edit/delete records, and run evaluations against them.
 *
 * You should not create `Dataset` objects directly. Instead, use the `braintrust.initDataset()` method.
 */
declare class Dataset<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET> extends ObjectFetcher<DatasetRecord<IsLegacyDataset>> {
    private state;
    private readonly lazyMetadata;
    private readonly __braintrust_dataset_marker;
    private newRecords;
    constructor(state: BraintrustState, lazyMetadata: LazyValue<ProjectDatasetMetadata>, pinnedVersion?: string, legacy?: IsLegacyDataset, _internal_btql?: Record<string, unknown>);
    get id(): Promise<string>;
    get name(): Promise<string>;
    get project(): Promise<ObjectMetadata>;
    protected getState(): Promise<BraintrustState>;
    private validateEvent;
    private createArgs;
    /**
     * Insert a single record to the dataset. The record will be batched and uploaded behind the scenes. If you pass in an `id`,
     * and a record with that `id` already exists, it will be overwritten (upsert).
     *
     * @param event The event to log.
     * @param event.input The argument that uniquely define an input case (an arbitrary, JSON serializable object).
     * @param event.expected The output of your application, including post-processing (an arbitrary, JSON serializable object).
     * @param event.tags (Optional) a list of strings that you can use to filter and group records later.
     * @param event.metadata (Optional) a dictionary with additional data about the test example, model outputs, or just
     * about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the
     * `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any
     * JSON-serializable type, but its keys must be strings.
     * @param event.id (Optional) a unique identifier for the event. If you don't provide one, Braintrust will generate one for you.
     * @param event.output: (Deprecated) The output of your application. Use `expected` instead.
     * @returns The `id` of the logged record.
     */
    insert({ input, expected, metadata, tags, id, output, }: {
        readonly input?: unknown;
        readonly expected?: unknown;
        readonly tags?: string[];
        readonly metadata?: Record<string, unknown>;
        readonly id?: string;
        readonly output?: unknown;
    }): string;
    /**
     * Update fields of a single record in the dataset. The updated fields will be batched and uploaded behind the scenes.
     * You must pass in an `id` of the record to update. Only the fields provided will be updated; other fields will remain unchanged.
     *
     * @param event The fields to update in the record.
     * @param event.id The unique identifier of the record to update.
     * @param event.input (Optional) The new input value for the record (an arbitrary, JSON serializable object).
     * @param event.expected (Optional) The new expected output value for the record (an arbitrary, JSON serializable object).
     * @param event.tags (Optional) A list of strings to update the tags of the record.
     * @param event.metadata (Optional) A dictionary to update the metadata of the record. The values in `metadata` can be any
     * JSON-serializable type, but its keys must be strings.
     * @returns The `id` of the updated record.
     */
    update({ input, expected, metadata, tags, id, }: {
        readonly id: string;
        readonly input?: unknown;
        readonly expected?: unknown;
        readonly tags?: string[];
        readonly metadata?: Record<string, unknown>;
    }): string;
    delete(id: string): string;
    /**
     * Summarize the dataset, including high level metrics about its size and other metadata.
     * @param summarizeData Whether to summarize the data. If false, only the metadata will be returned.
     * @returns `DatasetSummary`
     * @returns A summary of the dataset.
     */
    summarize(options?: {
        readonly summarizeData?: boolean;
    }): Promise<DatasetSummary>;
    /**
     * Flush any pending rows to the server.
     */
    flush(): Promise<void>;
    /**
     * @deprecated This function is deprecated. You can simply remove it from your code.
     */
    close(): Promise<string>;
    static isDataset(data: unknown): data is Dataset;
}
type CompiledPromptParams = Omit<NonNullable<PromptDataType["options"]>["params"], "use_cache"> & {
    model: NonNullable<NonNullable<PromptDataType["options"]>["model"]>;
};
type ChatPrompt = {
    messages: ChatCompletionOpenAIMessageParamType[];
    tools?: ChatCompletionToolType[];
};
type CompletionPrompt = {
    prompt: string;
};
type CompiledPrompt<Flavor extends "chat" | "completion"> = CompiledPromptParams & {
    span_info?: {
        name?: string;
        spanAttributes?: Record<any, any>;
        metadata: {
            prompt: {
                variables: Record<string, unknown>;
                id: string;
                project_id: string;
                version: string;
            };
        };
    };
} & (Flavor extends "chat" ? ChatPrompt : Flavor extends "completion" ? CompletionPrompt : {});
type DefaultPromptArgs = Partial<CompiledPromptParams & AnyModelParamsType & ChatPrompt & CompletionPrompt>;
declare function renderMessage<T extends ChatCompletionMessageParamType>(render: (template: string) => string, message: T): T;
type PromptRowWithId<HasId extends boolean = true, HasVersion extends boolean = true> = Omit<PromptType, "log_id" | "org_id" | "project_id" | "id" | "_xact_id"> & Partial<Pick<PromptType, "project_id">> & (HasId extends true ? Pick<PromptType, "id"> : Partial<Pick<PromptType, "id">>) & (HasVersion extends true ? Pick<PromptType, "_xact_id"> : Partial<Pick<PromptType, "_xact_id">>);
declare function deserializePlainStringAsJSON(s: string): {
    value: any;
    error: undefined;
} | {
    value: string;
    error: unknown;
};
declare function renderPromptParams(params: ModelParamsType | undefined, args: Record<string, unknown>, options: {
    strict?: boolean;
}): ModelParamsType | undefined;
declare class Prompt<HasId extends boolean = true, HasVersion extends boolean = true> {
    private metadata;
    private defaults;
    private noTrace;
    private parsedPromptData;
    private hasParsedPromptData;
    private readonly __braintrust_prompt_marker;
    constructor(metadata: PromptRowWithId<HasId, HasVersion> | PromptSessionEventType, defaults: DefaultPromptArgs, noTrace: boolean);
    get id(): HasId extends true ? string : string | undefined;
    get projectId(): string | undefined;
    get name(): string;
    get slug(): string;
    get prompt(): PromptDataType["prompt"];
    get version(): HasId extends true ? TransactionId : TransactionId | undefined;
    get options(): NonNullable<PromptDataType["options"]>;
    get promptData(): PromptDataType;
    /**
     * Build the prompt with the given formatting options. The args you pass in will
     * be forwarded to the mustache template that defines the prompt and rendered with
     * the `mustache-js` library.
     *
     * @param buildArgs Args to forward along to the prompt template.
     */
    build<Flavor extends "chat" | "completion" = "chat">(buildArgs: unknown, options?: {
        flavor?: Flavor;
        messages?: ChatCompletionMessageParamType[];
        strict?: boolean;
    }): CompiledPrompt<Flavor>;
    /**
     * This is a special build method that first resolves attachment references, and then
     * calls the regular build method. You should use this if you are building prompts from
     * dataset rows that contain attachments.
     *
     * @param buildArgs Args to forward along to the prompt template.
     */
    buildWithAttachments<Flavor extends "chat" | "completion" = "chat">(buildArgs: unknown, options?: {
        flavor?: Flavor;
        messages?: ChatCompletionMessageParamType[];
        strict?: boolean;
        state?: BraintrustState;
    }): Promise<CompiledPrompt<Flavor>>;
    private runBuild;
    static renderPrompt({ prompt, buildArgs, options, }: {
        prompt: PromptBlockDataType;
        buildArgs: unknown;
        options: {
            strict?: boolean;
            messages?: ChatCompletionMessageParamType[];
        };
    }): PromptBlockDataType;
    private getParsedPromptData;
    static isPrompt(data: unknown): data is Prompt<boolean, boolean>;
    static fromPromptData(name: string, promptData: PromptDataType): Prompt<false, false>;
}
type AnyDataset = Dataset<boolean>;
/**
 * Summary of a score's performance.
 * @property name Name of the score.
 * @property score Average score across all examples.
 * @property diff Difference in score between the current and reference experiment.
 * @property improvements Number of improvements in the score.
 * @property regressions Number of regressions in the score.
 */
interface ScoreSummary {
    name: string;
    score: number;
    diff?: number;
    improvements: number;
    regressions: number;
}
/**
 * Summary of a metric's performance.
 * @property name Name of the metric.
 * @property metric Average metric across all examples.
 * @property unit Unit label for the metric.
 * @property diff Difference in metric between the current and reference experiment.
 * @property improvements Number of improvements in the metric.
 * @property regressions Number of regressions in the metric.
 */
interface MetricSummary {
    name: string;
    metric: number;
    unit: string;
    diff?: number;
    improvements: number;
    regressions: number;
}
/**
 * Summary of an experiment's scores and metadata.
 * @property projectName Name of the project that the experiment belongs to.
 * @property experimentName Name of the experiment.
 * @property experimentId ID of the experiment. May be `undefined` if the eval was run locally.
 * @property projectUrl URL to the project's page in the Braintrust app.
 * @property experimentUrl URL to the experiment's page in the Braintrust app.
 * @property comparisonExperimentName The experiment scores are baselined against.
 * @property scores Summary of the experiment's scores.
 */
interface ExperimentSummary {
    projectName: string;
    experimentName: string;
    projectId?: string;
    experimentId?: string;
    projectUrl?: string;
    experimentUrl?: string;
    comparisonExperimentName?: string;
    scores: Record<string, ScoreSummary>;
    metrics?: Record<string, MetricSummary>;
}
/**
 * Summary of a dataset's data.
 *
 * @property totalRecords Total records in the dataset.
 */
interface DataSummary {
    /**
     * New or updated records added in this session.
     */
    newRecords: number;
    /**
     * Total records in the dataset.
     */
    totalRecords: number;
}
/**
 * Summary of a dataset's scores and metadata.
 *
 * @property projectName Name of the project that the dataset belongs to.
 * @property datasetName Name of the dataset.
 * @property projectUrl URL to the project's page in the Braintrust app.
 * @property datasetUrl URL to the experiment's page in the Braintrust app.
 * @property dataSummary Summary of the dataset's data.
 */
interface DatasetSummary {
    projectName: string;
    datasetName: string;
    projectUrl: string;
    datasetUrl: string;
    dataSummary: DataSummary | undefined;
}
declare function setInitialTestState(): void;
declare function simulateLoginForTests(): Promise<BraintrustState>;
declare function simulateLogoutForTests(): BraintrustState;
/**
 * Get the versions for a prompt.
 *
 * @param projectId The ID of the project to query
 * @param promptId The ID of the prompt to get versions for
 * @returns Promise containing the version data
 */
declare function getPromptVersions(projectId: string, promptId: string): Promise<any>;
declare const _exportsForTestingOnly: {
    extractAttachments: typeof extractAttachments;
    deepCopyEvent: typeof deepCopyEvent;
    useTestBackgroundLogger: typeof useTestBackgroundLogger;
    clearTestBackgroundLogger: typeof clearTestBackgroundLogger;
    simulateLoginForTests: typeof simulateLoginForTests;
    simulateLogoutForTests: typeof simulateLogoutForTests;
    setInitialTestState: typeof setInitialTestState;
    initTestExperiment: typeof initTestExperiment;
    isGeneratorFunction: typeof isGeneratorFunction;
    isAsyncGeneratorFunction: typeof isAsyncGeneratorFunction;
};

declare const braintrustStreamChunkSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"text_delta">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "text_delta";
    data: string;
}, {
    type: "text_delta";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"reasoning_delta">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "reasoning_delta";
    data: string;
}, {
    type: "reasoning_delta";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"json_delta">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "json_delta";
    data: string;
}, {
    type: "json_delta";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"error">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "error";
    data: string;
}, {
    type: "error";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"console">;
    data: z.ZodObject<{
        stream: z.ZodEnum<["stderr", "stdout"]>;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        stream: "stderr" | "stdout";
    }, {
        message: string;
        stream: "stderr" | "stdout";
    }>;
}, "strip", z.ZodTypeAny, {
    type: "console";
    data: {
        message: string;
        stream: "stderr" | "stdout";
    };
}, {
    type: "console";
    data: {
        message: string;
        stream: "stderr" | "stdout";
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"progress">;
    data: z.ZodObject<{
        id: z.ZodString;
        object_type: z.ZodEnum<["prompt", "tool", "scorer", "task", "agent"]>;
        origin: z.ZodOptional<z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
            object_type: z.ZodEnum<["project_logs", "experiment", "dataset", "prompt", "function", "prompt_session"]>;
            object_id: z.ZodString;
            id: z.ZodString;
            _xact_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            created: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        }, {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        }>, z.ZodNull]>, z.ZodUnknown>>;
        format: z.ZodEnum<["llm", "code", "global", "graph"]>;
        output_type: z.ZodEnum<["completion", "score", "any"]>;
        name: z.ZodString;
        event: z.ZodEnum<["reasoning_delta", "text_delta", "json_delta", "error", "console", "start", "done", "progress"]>;
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
        name: string;
        data: string;
        event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
        format: "code" | "llm" | "global" | "graph";
        output_type: "score" | "completion" | "any";
        origin?: {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        } | null | undefined;
    }, {
        id: string;
        object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
        name: string;
        data: string;
        event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
        format: "code" | "llm" | "global" | "graph";
        output_type: "score" | "completion" | "any";
        origin?: {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        } | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "progress";
    data: {
        id: string;
        object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
        name: string;
        data: string;
        event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
        format: "code" | "llm" | "global" | "graph";
        output_type: "score" | "completion" | "any";
        origin?: {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        } | null | undefined;
    };
}, {
    type: "progress";
    data: {
        id: string;
        object_type: "prompt" | "tool" | "task" | "scorer" | "agent";
        name: string;
        data: string;
        event: "done" | "error" | "text_delta" | "reasoning_delta" | "json_delta" | "progress" | "console" | "start";
        format: "code" | "llm" | "global" | "graph";
        output_type: "score" | "completion" | "any";
        origin?: {
            id: string;
            object_type: "function" | "experiment" | "dataset" | "prompt" | "prompt_session" | "project_logs";
            object_id: string;
            created?: string | null | undefined;
            _xact_id?: string | null | undefined;
        } | null | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"start">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "start";
    data: string;
}, {
    type: "start";
    data: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"done">;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "done";
    data: string;
}, {
    type: "done";
    data: string;
}>]>;
/**
 * A chunk of data from a Braintrust stream. Each chunk type matches
 * an SSE event type.
 */
type BraintrustStreamChunk = z.infer<typeof braintrustStreamChunkSchema>;
/**
 * A Braintrust stream. This is a wrapper around a ReadableStream of `BraintrustStreamChunk`,
 * with some utility methods to make them easy to log and convert into various formats.
 */
declare class BraintrustStream {
    private stream;
    private memoizedFinalValue;
    private signal;
    constructor(baseStream: ReadableStream<Uint8Array>, opts?: {
        signal?: AbortSignal;
    });
    constructor(stream: ReadableStream<string>, opts?: {
        signal?: AbortSignal;
    });
    constructor(stream: ReadableStream<BraintrustStreamChunk>, opts?: {
        signal?: AbortSignal;
    });
    /**
     * Copy the stream. This returns a new stream that shares the same underlying
     * stream (via `tee`). Since streams are consumed in Javascript, use `copy()` if you
     * need to use the stream multiple times.
     *
     * @returns A new stream that you can independently consume.
     */
    copy(): BraintrustStream;
    /**
     * Get the underlying ReadableStream.
     *
     * @returns The underlying ReadableStream<BraintrustStreamChunk>.
     */
    toReadableStream(): ReadableStream<BraintrustStreamChunk>;
    /**
     * Returns an async iterator for the BraintrustStream.
     * This allows for easy consumption of the stream using a for-await...of loop.
     *
     * @returns An async iterator that yields BraintrustStreamChunk objects.
     */
    [Symbol.asyncIterator](): AsyncIterator<BraintrustStreamChunk>;
    /**
     * Get the final value of the stream. The final value is the concatenation of all
     * the chunks in the stream, deserialized into a string or JSON object, depending on
     * the value's type.
     *
     * This function returns a promise that resolves when the stream is closed, and
     * contains the final value. Multiple calls to `finalValue()` will return the same
     * promise, so it is safe to call this multiple times.
     *
     * This function consumes the stream, so if you need to use the stream multiple
     * times, you should call `copy()` first.
     *
     * @returns A promise that resolves with the final value of the stream or `undefined` if the stream is empty.
     */
    finalValue(): Promise<unknown>;
    static parseRawEvent(event: CallEventType): BraintrustStreamChunk;
    static serializeRawEvent(event: BraintrustStreamChunk): CallEventType;
}
/**
 * Create a stream that passes through the final value of the stream. This is
 * used to implement `BraintrustStream.finalValue()`.
 *
 * @param onFinal A function to call with the final value of the stream.
 * @returns A new stream that passes through the final value of the stream.
 */
declare function createFinalValuePassThroughStream<T extends BraintrustStreamChunk | string | Uint8Array>(onFinal: (result: unknown) => void, onError: (error: unknown) => void): TransformStream<T, BraintrustStreamChunk>;
declare function devNullWritableStream(): WritableStream;

/**
 * Arguments for the `invoke` function.
 */
interface InvokeFunctionArgs<Input, Output, Stream extends boolean = false> {
    /**
     * The ID of the function to invoke.
     */
    function_id?: string;
    /**
     * The name of the project containing the function to invoke.
     */
    projectName?: string;
    /**
     * The slug of the function to invoke.
     */
    slug?: string;
    /**
     * The name of the global function to invoke.
     */
    globalFunction?: string;
    /**
     * The ID of the prompt session to invoke the function from.
     */
    promptSessionId?: string;
    /**
     * The ID of the function in the prompt session to invoke.
     */
    promptSessionFunctionId?: string;
    /**
     * The version of the function to invoke.
     */
    version?: string;
    /**
     * The input to the function. This will be logged as the `input` field in the span.
     */
    input: Input;
    /**
     * Additional OpenAI-style messages to add to the prompt (only works for llm functions).
     */
    messages?: ChatCompletionMessageParamType[];
    /**
     * Additional metadata to add to the span. This will be logged as the `metadata` field in the span.
     * It will also be available as the {{metadata}} field in the prompt and as the `metadata` argument
     * to the function.
     */
    metadata?: Record<string, unknown>;
    /**
     * Tags to add to the span. This will be logged as the `tags` field in the span.
     */
    tags?: string[];
    /**
     * The parent of the function. This can be an existing span, logger, or experiment, or
     * the output of `.export()` if you are distributed tracing. If unspecified, will use
     * the same semantics as `traced()` to determine the parent and no-op if not in a tracing
     * context.
     */
    parent?: Exportable | string;
    /**
     * Whether to stream the function's output. If true, the function will return a
     * `BraintrustStream`, otherwise it will return the output of the function as a JSON
     * object.
     */
    stream?: Stream;
    /**
     * The mode of the function. If "auto", will return a string if the function returns a string,
     * and a JSON object otherwise. If "parallel", will return an array of JSON objects with one
     * object per tool call.
     */
    mode?: StreamingModeType;
    /**
     * Whether to use strict mode for the function. If true, the function will throw an error
     * if the variable names in the prompt do not match the input keys.
     */
    strict?: boolean;
    /**
     * A Zod schema to validate the output of the function and return a typed value. This
     * is only used if `stream` is false.
     */
    schema?: Stream extends true ? never : z.ZodSchema<Output>;
    /**
     * (Advanced) This parameter allows you to pass in a custom login state. This is useful
     * for multi-tenant environments where you are running functions from different Braintrust
     * organizations.
     */
    state?: BraintrustState;
}
/**
 * The return type of the `invoke` function. Conditionally returns a `BraintrustStream`
 * if `stream` is true, otherwise returns the output of the function using the Zod schema's
 * type if present.
 */
type InvokeReturn<Stream extends boolean, Output> = Stream extends true ? BraintrustStream : Output;
/**
 * Invoke a Braintrust function, returning a `BraintrustStream` or the value as a plain
 * Javascript object.
 *
 * @param args The arguments for the function (see {@link InvokeFunctionArgs} for more details).
 * @returns The output of the function.
 */
declare function invoke<Input, Output, Stream extends boolean = false>(args: InvokeFunctionArgs<Input, Output, Stream> & FullLoginOptions): Promise<InvokeReturn<Stream, Output>>;
/**
 * Creates a function that can be used as a task or scorer in the Braintrust evaluation framework.
 * The returned function wraps a Braintrust function and can be passed directly to Eval().
 *
 * When used as a task:
 * ```ts
 * const myFunction = initFunction({projectName: "myproject", slug: "myfunction"});
 * await Eval("test", {
 *   task: myFunction,
 *   data: testData,
 *   scores: [...]
 * });
 * ```
 *
 * When used as a scorer:
 * ```ts
 * const myScorer = initFunction({projectName: "myproject", slug: "myscorer"});
 * await Eval("test", {
 *   task: someTask,
 *   data: testData,
 *   scores: [myScorer]
 * });
 * ```
 *
 * @param options Options for the function.
 * @param options.projectName The project name containing the function.
 * @param options.slug The slug of the function to invoke.
 * @param options.version Optional version of the function to use. Defaults to latest.
 * @returns A function that can be used as a task or scorer in Eval().
 */
declare function initFunction({ projectName, slug, version, }: {
    projectName: string;
    slug: string;
    version?: string;
}): (input: any) => Promise<any>;

interface BetaLike {
    chat: {
        completions: {
            stream: any;
        };
    };
    embeddings: any;
}
interface ChatLike {
    completions: any;
}
interface OpenAILike {
    chat: ChatLike;
    embeddings: any;
    moderations: any;
    beta?: BetaLike;
    responses?: any;
}
declare global {
    var __inherited_braintrust_wrap_openai: ((openai: any) => any) | undefined;
}
/**
 * Wrap an `OpenAI` object (created with `new OpenAI(...)`) to add tracing. If Braintrust is
 * not configured, nothing will be traced. If this is not an `OpenAI` object, this function is
 * a no-op.
 *
 * Currently, this supports both the `v4` and `v5` API.
 *
 * @param openai
 * @returns The wrapped `OpenAI` object.
 */
declare function wrapOpenAI<T extends object>(openai: T): T;
declare function wrapOpenAIv4<T extends OpenAILike>(openai: T): T;
declare const LEGACY_CACHED_HEADER = "x-cached";
declare const X_CACHED_HEADER = "x-bt-cached";
declare function parseCachedHeader(value: string | null | undefined): number | undefined;

type GenericFunction<Input, Output> = ((input: Input) => Output) | ((input: Input) => Promise<Output>);

interface BaseFnOpts {
    name: string;
    slug: string;
    description: string;
    ifExists: IfExistsType;
}

type NameOrId = {
    name: string;
} | {
    id: string;
};
type CreateProjectOpts = NameOrId;
declare class Project {
    readonly name?: string;
    readonly id?: string;
    tools: ToolBuilder;
    prompts: PromptBuilder;
    scorers: ScorerBuilder;
    private _publishableCodeFunctions;
    private _publishablePrompts;
    constructor(args: CreateProjectOpts);
    addPrompt(prompt: CodePrompt): void;
    addCodeFunction(fn: CodeFunction<any, any, GenericFunction<any, any>>): void;
    publish(): Promise<void>;
}
declare class ToolBuilder {
    private readonly project;
    private taskCounter;
    constructor(project: Project);
    create<TParams extends {
        _output: any;
        _input: any;
        _def: any;
    }, TReturns extends {
        _output: any;
        _input: any;
        _def: any;
    }, THandler extends GenericFunction<TParams["_output"], TReturns["_output"]>>(opts: Partial<BaseFnOpts> & {
        handler: THandler;
        parameters: TParams;
        returns: TReturns;
    }): CodeFunction<TParams["_output"], TReturns["_output"], THandler>;
    create<THandler extends GenericFunction<any, any>>(opts: Partial<BaseFnOpts> & {
        handler: THandler;
        parameters?: any;
        returns?: any;
    }): CodeFunction<any, any, THandler>;
}
declare class ScorerBuilder {
    private readonly project;
    private taskCounter;
    constructor(project: Project);
    create<Output, Input, Params, Returns, Fn extends GenericFunction<Exact<Params, ScorerArgs<Output, Input>>, Returns>>(opts: ScorerOpts<Output, Input, Params, Returns, Fn>): void;
}
type Schema<Input, Output> = Partial<{
    parameters: z.ZodSchema<Input>;
    returns: z.ZodSchema<Output>;
}>;
type CodeOpts<Params, Returns, Fn extends GenericFunction<Params, Returns>> = Partial<BaseFnOpts> & {
    handler: Fn;
} & Schema<Params, Returns>;
type ScorerPromptOpts = Partial<BaseFnOpts> & PromptOpts<false, false, false, false> & {
    useCot: boolean;
    choiceScores: Record<string, number>;
};
type ScorerArgs<Output, Input> = {
    output: Output;
    expected?: Output;
    input?: Input;
    metadata?: Record<string, unknown>;
};
type Exact<T, Shape> = T extends Shape ? Exclude<keyof T, keyof Shape> extends never ? T : never : never;
type ScorerOpts<Output, Input, Params, Returns, Fn extends GenericFunction<Exact<Params, ScorerArgs<Output, Input>>, Returns>> = CodeOpts<Exact<Params, ScorerArgs<Output, Input>>, Returns, Fn> | ScorerPromptOpts;
declare class CodeFunction<Input, Output, Fn extends GenericFunction<Input, Output>> {
    readonly project: Project;
    readonly handler: Fn;
    readonly name: string;
    readonly slug: string;
    readonly type: FunctionTypeEnumType;
    readonly description?: string;
    readonly parameters?: z.ZodSchema<Input>;
    readonly returns?: z.ZodSchema<Output>;
    readonly ifExists?: IfExistsType;
    constructor(project: Project, opts: Omit<CodeOpts<Input, Output, Fn>, "name" | "slug"> & {
        name: string;
        slug: string;
        type: FunctionTypeEnumType;
    });
    key(): string;
}
type GenericCodeFunction = CodeFunction<any, any, GenericFunction<any, any>>;
declare class CodePrompt {
    readonly project: Project;
    readonly name: string;
    readonly slug: string;
    readonly prompt: PromptDataType;
    readonly ifExists?: IfExistsType;
    readonly description?: string;
    readonly id?: string;
    readonly functionType?: FunctionTypeEnumType;
    readonly toolFunctions: (SavedFunctionIdType | GenericCodeFunction)[];
    constructor(project: Project, prompt: PromptDataType, toolFunctions: (SavedFunctionIdType | GenericCodeFunction)[], opts: Omit<PromptOpts<false, false, false, false>, "name" | "slug"> & {
        name: string;
        slug: string;
    }, functionType?: FunctionTypeEnumType);
    toFunctionDefinition(projectNameToId: ProjectNameIdMap): Promise<FunctionEvent>;
}
interface PromptId {
    id: string;
}
interface PromptVersion {
    version: TransactionId;
}
interface PromptTools {
    tools: (GenericCodeFunction | SavedFunctionIdType | ToolFunctionDefinitionType)[];
}
interface PromptNoTrace {
    noTrace: boolean;
}
declare const promptDefinitionSchema: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    prompt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    prompt: string;
}, {
    prompt: string;
}>, z.ZodObject<{
    messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"system">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "system";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }, {
        role: "system";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, z.ZodObject<{
            image_url: z.ZodObject<{
                url: z.ZodString;
                detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
            }, "strip", z.ZodTypeAny, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }, {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            }>;
            type: z.ZodLiteral<"image_url">;
        }, "strip", z.ZodTypeAny, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }, {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        }>]>, "many">]>;
        role: z.ZodLiteral<"user">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    }, {
        role: "user";
        content: string | ({
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"assistant">;
        content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">, z.ZodNull]>>;
        function_call: z.ZodOptional<z.ZodObject<{
            arguments: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            arguments: string;
        }, {
            name: string;
            arguments: string;
        }>>;
        name: z.ZodOptional<z.ZodString>;
        tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            function: z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>;
            type: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }, {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }>, "many">>;
        reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            content: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            content?: string | undefined;
        }, {
            id?: string | undefined;
            content?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    }, {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"tool">;
        tool_call_id: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "tool";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id: string;
    }, {
        role: "tool";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id?: string | undefined;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        name: z.ZodString;
        role: z.ZodLiteral<"function">;
    }, "strip", z.ZodTypeAny, {
        role: "function";
        name: string;
        content: string | null;
    }, {
        role: "function";
        name: string;
        content: string | null;
    }>, z.ZodObject<{
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            text: z.ZodDefault<z.ZodString>;
            type: z.ZodLiteral<"text">;
            cache_control: z.ZodOptional<z.ZodObject<{
                type: z.ZodLiteral<"ephemeral">;
            }, "strip", z.ZodTypeAny, {
                type: "ephemeral";
            }, {
                type: "ephemeral";
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }, {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }>, "many">]>;
        role: z.ZodLiteral<"developer">;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        role: "developer";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }, {
        role: "developer";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    }>, z.ZodObject<{
        role: z.ZodLiteral<"model">;
        content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        role: "model";
        content?: string | null | undefined;
    }, {
        role: "model";
        content?: string | null | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    } | {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    } | {
        role: "tool";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id: string;
    } | {
        role: "function";
        name: string;
        content: string | null;
    } | {
        role: "developer";
        content: string | {
            type: "text";
            text: string;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
}, {
    messages: ({
        role: "system";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "user";
        content: string | ({
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        } | {
            type: "image_url";
            image_url: {
                url: string;
                detail?: "auto" | "low" | "high" | undefined;
            };
        })[];
        name?: string | undefined;
    } | {
        role: "assistant";
        name?: string | undefined;
        function_call?: {
            name: string;
            arguments: string;
        } | undefined;
        content?: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[] | null | undefined;
        tool_calls?: {
            function: {
                name: string;
                arguments: string;
            };
            type: "function";
            id: string;
        }[] | undefined;
        reasoning?: {
            id?: string | undefined;
            content?: string | undefined;
        }[] | undefined;
    } | {
        role: "tool";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        tool_call_id?: string | undefined;
    } | {
        role: "function";
        name: string;
        content: string | null;
    } | {
        role: "developer";
        content: string | {
            type: "text";
            text?: string | undefined;
            cache_control?: {
                type: "ephemeral";
            } | undefined;
        }[];
        name?: string | undefined;
    } | {
        role: "model";
        content?: string | null | undefined;
    })[];
}>]>, z.ZodObject<{
    model: z.ZodString;
    params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        max_completion_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>, z.ZodNull]>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        max_completion_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>, z.ZodNull]>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        max_completion_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>, z.ZodNull]>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>]>>;
}, "strip", z.ZodTypeAny, {
    model: string;
    params?: z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        max_completion_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>, z.ZodNull]>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    model: string;
    params?: z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        top_p: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        max_completion_tokens: z.ZodOptional<z.ZodNumber>;
        frequency_penalty: z.ZodOptional<z.ZodNumber>;
        presence_penalty: z.ZodOptional<z.ZodNumber>;
        response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"json_object">;
        }, "strip", z.ZodTypeAny, {
            type: "json_object";
        }, {
            type: "json_object";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json_schema">;
            json_schema: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }, {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }, {
            type: "json_schema";
            json_schema: {
                name: string;
                description?: string | undefined;
                schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                strict?: boolean | null | undefined;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"text">;
        }, "strip", z.ZodTypeAny, {
            type: "text";
        }, {
            type: "text";
        }>, z.ZodNull]>>;
        tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
            };
            type: "function";
        }, {
            function: {
                name: string;
            };
            type: "function";
        }>]>>;
        function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>]>>;
        n: z.ZodOptional<z.ZodNumber>;
        stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        max_tokens: z.ZodNumber;
        temperature: z.ZodNumber;
        top_p: z.ZodOptional<z.ZodNumber>;
        top_k: z.ZodOptional<z.ZodNumber>;
        stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
        temperature: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
    }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
        use_cache: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>>;
type PromptDefinition = z.infer<typeof promptDefinitionSchema>;
type PromptOpts<HasId extends boolean, HasVersion extends boolean, HasTools extends boolean = true, HasNoTrace extends boolean = true> = (Partial<Omit<BaseFnOpts, "name">> & {
    name: string;
}) & (HasId extends true ? PromptId : Partial<PromptId>) & (HasVersion extends true ? PromptVersion : Partial<PromptVersion>) & (HasTools extends true ? Partial<PromptTools> : {}) & (HasNoTrace extends true ? Partial<PromptNoTrace> : {}) & PromptDefinition;
declare class PromptBuilder {
    private readonly project;
    constructor(project: Project);
    create<HasId extends boolean = false, HasVersion extends boolean = false>(opts: PromptOpts<HasId, HasVersion>): Prompt<HasId, HasVersion>;
}
interface FunctionEvent {
    project_id: string;
    slug: string;
    name: string;
    description: string;
    prompt_data?: PromptDataType;
    function_data: z.infer<typeof FunctionData>;
    function_type?: FunctionTypeEnumType;
    if_exists?: IfExistsType;
}
declare class ProjectNameIdMap {
    private nameToId;
    private idToName;
    getId(projectName: string): Promise<string>;
    getName(projectId: string): Promise<string>;
    resolve(project: Project): Promise<string>;
}

declare const evalParametersSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"prompt">;
    default: z.ZodOptional<z.ZodIntersection<z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
        prompt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        prompt: string;
    }, {
        prompt: string;
    }>, z.ZodObject<{
        messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"system">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }, {
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, z.ZodObject<{
                image_url: z.ZodObject<{
                    url: z.ZodString;
                    detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                }, "strip", z.ZodTypeAny, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }, {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                }>;
                type: z.ZodLiteral<"image_url">;
            }, "strip", z.ZodTypeAny, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }, {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            }>]>, "many">]>;
            role: z.ZodLiteral<"user">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        }, {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"assistant">;
            content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">, z.ZodNull]>>;
            function_call: z.ZodOptional<z.ZodObject<{
                arguments: z.ZodString;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                arguments: string;
            }, {
                name: string;
                arguments: string;
            }>>;
            name: z.ZodOptional<z.ZodString>;
            tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                function: z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>;
                type: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }, {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }>, "many">>;
            reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                content: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id?: string | undefined;
                content?: string | undefined;
            }, {
                id?: string | undefined;
                content?: string | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        }, {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"tool">;
            tool_call_id: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        }, {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
            name: z.ZodString;
            role: z.ZodLiteral<"function">;
        }, "strip", z.ZodTypeAny, {
            role: "function";
            name: string;
            content: string | null;
        }, {
            role: "function";
            name: string;
            content: string | null;
        }>, z.ZodObject<{
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                text: z.ZodDefault<z.ZodString>;
                type: z.ZodLiteral<"text">;
                cache_control: z.ZodOptional<z.ZodObject<{
                    type: z.ZodLiteral<"ephemeral">;
                }, "strip", z.ZodTypeAny, {
                    type: "ephemeral";
                }, {
                    type: "ephemeral";
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }, {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }>, "many">]>;
            role: z.ZodLiteral<"developer">;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }, {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        }>, z.ZodObject<{
            role: z.ZodLiteral<"model">;
            content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            role: "model";
            content?: string | null | undefined;
        }, {
            role: "model";
            content?: string | null | undefined;
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
    }, {
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
    }>]>, z.ZodObject<{
        model: z.ZodString;
        params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>]>>;
    }, "strip", z.ZodTypeAny, {
        model: string;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        model: string;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }>>, z.ZodObject<{
        tools: z.ZodOptional<z.ZodArray<z.ZodObject<{
            type: z.ZodLiteral<"function">;
            function: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                parameters: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }, {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }, {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
    }, {
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
    }>>>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "prompt";
    description?: string | undefined;
    default?: ((({
        prompt: string;
    } | {
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id: string;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text: string;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
    }) & {
        model: string;
        params?: z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }) & {
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
    }) | undefined;
}, {
    type: "prompt";
    description?: string | undefined;
    default?: ((({
        prompt: string;
    } | {
        messages: ({
            role: "system";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "user";
            content: string | ({
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            } | {
                type: "image_url";
                image_url: {
                    url: string;
                    detail?: "auto" | "low" | "high" | undefined;
                };
            })[];
            name?: string | undefined;
        } | {
            role: "assistant";
            name?: string | undefined;
            function_call?: {
                name: string;
                arguments: string;
            } | undefined;
            content?: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[] | null | undefined;
            tool_calls?: {
                function: {
                    name: string;
                    arguments: string;
                };
                type: "function";
                id: string;
            }[] | undefined;
            reasoning?: {
                id?: string | undefined;
                content?: string | undefined;
            }[] | undefined;
        } | {
            role: "tool";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            tool_call_id?: string | undefined;
        } | {
            role: "function";
            name: string;
            content: string | null;
        } | {
            role: "developer";
            content: string | {
                type: "text";
                text?: string | undefined;
                cache_control?: {
                    type: "ephemeral";
                } | undefined;
            }[];
            name?: string | undefined;
        } | {
            role: "model";
            content?: string | null | undefined;
        })[];
    }) & {
        model: string;
        params?: z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            top_p: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            max_completion_tokens: z.ZodOptional<z.ZodNumber>;
            frequency_penalty: z.ZodOptional<z.ZodNumber>;
            presence_penalty: z.ZodOptional<z.ZodNumber>;
            response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"json_object">;
            }, "strip", z.ZodTypeAny, {
                type: "json_object";
            }, {
                type: "json_object";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"json_schema">;
                json_schema: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                    strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }, {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }, {
                type: "json_schema";
                json_schema: {
                    name: string;
                    description?: string | undefined;
                    schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                    strict?: boolean | null | undefined;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"text">;
            }, "strip", z.ZodTypeAny, {
                type: "text";
            }, {
                type: "text";
            }>, z.ZodNull]>>;
            tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                type: z.ZodLiteral<"function">;
                function: z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                };
                type: "function";
            }, {
                function: {
                    name: string;
                };
                type: "function";
            }>]>>;
            function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>]>>;
            n: z.ZodOptional<z.ZodNumber>;
            stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            max_tokens: z.ZodNumber;
            temperature: z.ZodNumber;
            top_p: z.ZodOptional<z.ZodNumber>;
            top_k: z.ZodOptional<z.ZodNumber>;
            stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            maxOutputTokens: z.ZodOptional<z.ZodNumber>;
            topP: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
            temperature: z.ZodOptional<z.ZodNumber>;
            topK: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            use_cache: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    }) & {
        tools?: {
            function: {
                name: string;
                description?: string | undefined;
                strict?: boolean | null | undefined;
                parameters?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
            type: "function";
        }[] | undefined;
    }) | undefined;
}>, z.ZodType<z.ZodType<unknown, z.ZodTypeDef, unknown>, z.ZodTypeDef, z.ZodType<unknown, z.ZodTypeDef, unknown>>]>>;
type EvalParameters = z.infer<typeof evalParametersSchema>;
type InferParameterValue<T> = T extends {
    type: "prompt";
} ? Prompt : T extends z.ZodType ? z.infer<T> : never;
type InferParameters<T extends EvalParameters> = {
    [K in keyof T]: InferParameterValue<T[K]>;
};

type BaseExperiment<Input, Expected, Metadata extends BaseMetadata = DefaultMetadataType> = {
    _type: "BaseExperiment";
    _phantom?: [Input, Expected, Metadata];
    name?: string;
};
/**
 * Use this to specify that the dataset should actually be the data from a previous (base) experiment.
 * If you do not specify a name, Braintrust will automatically figure out the best base experiment to
 * use based on your git history (or fall back to timestamps).
 *
 * @param options
 * @param options.name The name of the base experiment to use. If unspecified, Braintrust will automatically figure out the best base
 * using your git history (or fall back to timestamps).
 * @returns
 */
declare function BaseExperiment<Input = unknown, Expected = unknown, Metadata extends BaseMetadata = DefaultMetadataType>(options?: {
    name?: string;
}): BaseExperiment<Input, Expected, Metadata>;
type EvalData<Input, Expected, Metadata extends BaseMetadata = DefaultMetadataType> = EvalCase<Input, Expected, Metadata>[] | (() => EvalCase<Input, Expected, Metadata>[]) | Promise<EvalCase<Input, Expected, Metadata>[]> | (() => Promise<EvalCase<Input, Expected, Metadata>[]>) | AsyncGenerator<EvalCase<Input, Expected, Metadata>> | AsyncIterable<EvalCase<Input, Expected, Metadata>> | BaseExperiment<Input, Expected, Metadata> | (() => BaseExperiment<Input, Expected, Metadata>);
type EvalTask<Input, Output, Expected, Metadata extends BaseMetadata, Parameters extends EvalParameters> = ((input: Input, hooks: EvalHooks<Expected, Metadata, Parameters>) => Promise<Output>) | ((input: Input, hooks: EvalHooks<Expected, Metadata, Parameters>) => Output);
type TaskProgressEvent = Omit<SSEProgressEventDataType, "id" | "origin" | "object_type" | "name">;
interface EvalHooks<Expected, Metadata extends BaseMetadata, Parameters extends EvalParameters> {
    /**
     * @deprecated Use `metadata` instead.
     */
    meta: (info: Metadata) => void;
    /**
     * The metadata object for the current evaluation. You can mutate this object to add or remove metadata.
     */
    metadata: Metadata extends void ? Record<string, unknown> : Metadata;
    /**
     * The expected output for the current evaluation.
     */
    expected: Expected;
    /**
     * The task's span.
     */
    span: Span;
    /**
     * The current parameters being used for this specific task execution.
     * Array parameters are converted to single values.
     */
    parameters: InferParameters<Parameters>;
    /**
     * Report progress that will show up in the playground.
     */
    reportProgress: (progress: TaskProgressEvent) => void;
    /**
     * The index of the current trial (0-based). This is useful when trialCount > 1.
     */
    trialIndex: number;
    /**
     * The tags for the current evaluation.
     */
    tags: string[] | undefined;
}
type EvalScorerArgs<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType> = EvalCase<Input, Expected, Metadata> & {
    output: Output;
};
type OneOrMoreScores = Score | number | null | Array<Score>;
type EvalScorer<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType> = (args: EvalScorerArgs<Input, Output, Expected, Metadata>) => OneOrMoreScores | Promise<OneOrMoreScores>;
type EvalResult<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType> = EvalCase<Input, Expected, Metadata> & {
    output: Output;
    scores: Record<string, number | null>;
    error: unknown;
    origin?: ObjectReferenceType;
};
type ErrorScoreHandler = (args: {
    rootSpan: Span;
    data: EvalCase<any, any, any>;
    unhandledScores: string[];
}) => Record<string, number> | undefined | void;
interface Evaluator<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType, Parameters extends EvalParameters = EvalParameters> {
    /**
     * A function that returns a list of inputs, expected outputs, and metadata.
     */
    data: EvalData<Input, Expected, Metadata>;
    /**
     * A function that takes an input and returns an output.
     */
    task: EvalTask<Input, Output, Expected, Metadata, Parameters>;
    /**
     * A set of functions that take an input, output, and expected value and return a score.
     */
    scores: EvalScorer<Input, Output, Expected, Metadata>[];
    /**
     * A set of parameters that will be passed to the evaluator.
     * Can contain array values that will be converted to single values in the task.
     */
    parameters?: Parameters;
    /**
     * An optional name for the experiment.
     */
    experimentName?: string;
    /**
     * An optional description for the experiment.
     */
    description?: string;
    /**
     * The number of times to run the evaluator per input. This is useful for evaluating applications that
     * have non-deterministic behavior and gives you both a stronger aggregate measure and a sense of the
     * variance in the results.
     */
    trialCount?: number;
    /**
     * Optional additional metadata for the experiment.
     */
    metadata?: Record<string, unknown>;
    /**
     * Whether the experiment should be public. Defaults to false.
     */
    isPublic?: boolean;
    /**
     * Whether to update an existing experiment with `experiment_name` if one exists. Defaults to false.
     */
    update?: boolean;
    /**
     * The duration, in milliseconds, after which to time out the evaluation.
     * Defaults to undefined, in which case there is no timeout.
     */
    timeout?: number;
    /**
     * An abort signal that can be used to stop the evaluation.
     */
    signal?: AbortSignal;
    /**
     * The maximum number of tasks/scorers that will be run concurrently.
     * Defaults to undefined, in which case there is no max concurrency.
     */
    maxConcurrency?: number;
    /**
     * If specified, uses the given project ID instead of the evaluator's name to identify the project.
     */
    projectId?: string;
    /**
     * If specified, uses the logger state to initialize Braintrust objects. If unspecified, falls back
     * to the global state (initialized using your API key).
     */
    state?: BraintrustState;
    /**
     * An optional experiment name to use as a base. If specified, the new experiment will be summarized
     * and compared to this experiment.
     */
    baseExperimentName?: string;
    /**
     * An optional experiment id to use as a base. If specified, the new experiment will be summarized
     * and compared to this experiment. This takes precedence over `baseExperimentName` if specified.
     */
    baseExperimentId?: string;
    /**
     * Optional settings for collecting git metadata. By default, will collect all git metadata fields allowed in org-level settings.
     */
    gitMetadataSettings?: GitMetadataSettingsType;
    /**
     * Optionally explicitly specify the git metadata for this experiment. This takes precedence over `gitMetadataSettings` if specified.
     */
    repoInfo?: RepoInfoType;
    /**
     * Optionally supply a custom function to specifically handle score values when tasks or scoring functions have errored.
     * A default implementation is exported as `defaultErrorScoreHandler` which will log a 0 score to the root span for any scorer that was not run.
     */
    errorScoreHandler?: ErrorScoreHandler;
    /**
     * Whether to summarize the scores of the experiment after it has run.
     * Defaults to true.
     */
    summarizeScores?: boolean;
}
declare class EvalResultWithSummary<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType> {
    summary: ExperimentSummary;
    results: EvalResult<Input, Output, Expected, Metadata>[];
    constructor(summary: ExperimentSummary, results: EvalResult<Input, Output, Expected, Metadata>[]);
    toString(): string;
    toJSON(): {
        summary: ExperimentSummary;
        results: EvalResult<Input, Output, Expected, Metadata>[];
    };
}
interface ReporterOpts {
    verbose: boolean;
    jsonl: boolean;
}
interface ReporterBody<EvalReport> {
    /**
     * A function that takes an evaluator and its result and returns a report.
     *
     * @param evaluator
     * @param result
     * @param opts
     */
    reportEval(evaluator: EvaluatorDef<any, any, any, any, any>, result: EvalResultWithSummary<any, any, any, any>, opts: ReporterOpts): Promise<EvalReport> | EvalReport;
    /**
     * A function that takes all evaluator results and returns a boolean indicating
     * whether the run was successful. If you return false, the `braintrust eval`
     * command will exit with a non-zero status code.
     *
     * @param reports
     */
    reportRun(reports: EvalReport[]): boolean | Promise<boolean>;
}
type ReporterDef<EvalReport> = {
    name: string;
} & ReporterBody<EvalReport>;
type EvaluatorDef<Input, Output, Expected, Metadata extends BaseMetadata = DefaultMetadataType, Parameters extends EvalParameters = EvalParameters> = {
    projectName: string;
    evalName: string;
} & Evaluator<Input, Output, Expected, Metadata, Parameters>;
type EvaluatorFile = {
    functions: CodeFunction<unknown, unknown, GenericFunction<unknown, unknown>>[];
    prompts: CodePrompt[];
    evaluators: {
        [evalName: string]: {
            evaluator: EvaluatorDef<unknown, unknown, unknown, BaseMetadata, EvalParameters>;
            reporter?: ReporterDef<unknown> | string;
        };
    };
    reporters: {
        [reporterName: string]: ReporterDef<unknown>;
    };
};
type SpanContext = {
    currentSpan: typeof currentSpan;
    startSpan: typeof startSpan;
    withCurrent: typeof withCurrent;
    NOOP_SPAN: typeof NOOP_SPAN;
};
declare global {
    var _evals: EvaluatorFile;
    var _spanContext: SpanContext | undefined;
    var _lazy_load: boolean;
}

type EvaluatorManifest = Record<string, EvaluatorDef<unknown, unknown, unknown, BaseMetadata>>;
declare const evalParametersSerializedSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"prompt">;
    default: z.ZodOptional<z.ZodObject<{
        prompt: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"completion">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "completion";
            content: string;
        }, {
            type: "completion";
            content: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"chat">;
            messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"system">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, z.ZodObject<{
                    image_url: z.ZodObject<{
                        url: z.ZodString;
                        detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                    }, "strip", z.ZodTypeAny, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }, {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    }>;
                    type: z.ZodLiteral<"image_url">;
                }, "strip", z.ZodTypeAny, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }, {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                }>]>, "many">]>;
                role: z.ZodLiteral<"user">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }, {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"assistant">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">, z.ZodNull]>>;
                function_call: z.ZodOptional<z.ZodObject<{
                    arguments: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    arguments: string;
                }, {
                    name: string;
                    arguments: string;
                }>>;
                name: z.ZodOptional<z.ZodString>;
                tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    function: z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>;
                    type: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }, {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }>, "many">>;
                reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    content: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id?: string | undefined;
                    content?: string | undefined;
                }, {
                    id?: string | undefined;
                    content?: string | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }, {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"tool">;
                tool_call_id: z.ZodDefault<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            }, {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                name: z.ZodString;
                role: z.ZodLiteral<"function">;
            }, "strip", z.ZodTypeAny, {
                role: "function";
                name: string;
                content: string | null;
            }, {
                role: "function";
                name: string;
                content: string | null;
            }>, z.ZodObject<{
                content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                    text: z.ZodDefault<z.ZodString>;
                    type: z.ZodLiteral<"text">;
                    cache_control: z.ZodOptional<z.ZodObject<{
                        type: z.ZodLiteral<"ephemeral">;
                    }, "strip", z.ZodTypeAny, {
                        type: "ephemeral";
                    }, {
                        type: "ephemeral";
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }, {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }>, "many">]>;
                role: z.ZodLiteral<"developer">;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }, {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            }>, z.ZodObject<{
                role: z.ZodLiteral<"model">;
                content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                role: "model";
                content?: string | null | undefined;
            }, {
                role: "model";
                content?: string | null | undefined;
            }>]>, "many">;
            tools: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }, {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        }>, z.ZodNull]>>;
        options: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            model: z.ZodOptional<z.ZodString>;
            params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>]>>;
            position: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        }, {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        }>, z.ZodNull]>>;
        parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"llm_classifier">;
            use_cot: z.ZodBoolean;
            choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }, {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        }>, z.ZodNull]>>;
        tool_functions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"function">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "function";
            id: string;
        }, {
            type: "function";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"global">;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "global";
            name: string;
        }, {
            type: "global";
            name: string;
        }>]>, "many">, z.ZodNull]>>;
        origin: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            prompt_id: z.ZodOptional<z.ZodString>;
            project_id: z.ZodOptional<z.ZodString>;
            prompt_version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        }, {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        options?: {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    }, {
        options?: {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    }>>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "prompt";
    description?: string | undefined;
    default?: {
        options?: {
            params?: z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id: string;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text: string;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    } | undefined;
}, {
    type: "prompt";
    description?: string | undefined;
    default?: {
        options?: {
            params?: z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                top_p: z.ZodOptional<z.ZodNumber>;
                max_tokens: z.ZodOptional<z.ZodNumber>;
                max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                frequency_penalty: z.ZodOptional<z.ZodNumber>;
                presence_penalty: z.ZodOptional<z.ZodNumber>;
                response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"json_object">;
                }, "strip", z.ZodTypeAny, {
                    type: "json_object";
                }, {
                    type: "json_object";
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"json_schema">;
                    json_schema: z.ZodObject<{
                        name: z.ZodString;
                        description: z.ZodOptional<z.ZodString>;
                        schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                        strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }, {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }, {
                    type: "json_schema";
                    json_schema: {
                        name: string;
                        description?: string | undefined;
                        schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                        strict?: boolean | null | undefined;
                    };
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"text">;
                }, "strip", z.ZodTypeAny, {
                    type: "text";
                }, {
                    type: "text";
                }>, z.ZodNull]>>;
                tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                    type: z.ZodLiteral<"function">;
                    function: z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }, {
                    function: {
                        name: string;
                    };
                    type: "function";
                }>]>>;
                function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                }, {
                    name: string;
                }>]>>;
                n: z.ZodOptional<z.ZodNumber>;
                stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                max_tokens: z.ZodNumber;
                temperature: z.ZodNumber;
                top_p: z.ZodOptional<z.ZodNumber>;
                top_k: z.ZodOptional<z.ZodNumber>;
                stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                topP: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
                temperature: z.ZodOptional<z.ZodNumber>;
                topK: z.ZodOptional<z.ZodNumber>;
            }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                use_cache: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
            model?: string | undefined;
            position?: string | undefined;
        } | null | undefined;
        prompt?: {
            type: "completion";
            content: string;
        } | {
            type: "chat";
            messages: ({
                role: "system";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "user";
                content: string | ({
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                } | {
                    type: "image_url";
                    image_url: {
                        url: string;
                        detail?: "auto" | "low" | "high" | undefined;
                    };
                })[];
                name?: string | undefined;
            } | {
                role: "assistant";
                name?: string | undefined;
                function_call?: {
                    name: string;
                    arguments: string;
                } | undefined;
                content?: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[] | null | undefined;
                tool_calls?: {
                    function: {
                        name: string;
                        arguments: string;
                    };
                    type: "function";
                    id: string;
                }[] | undefined;
                reasoning?: {
                    id?: string | undefined;
                    content?: string | undefined;
                }[] | undefined;
            } | {
                role: "tool";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                tool_call_id?: string | undefined;
            } | {
                role: "function";
                name: string;
                content: string | null;
            } | {
                role: "developer";
                content: string | {
                    type: "text";
                    text?: string | undefined;
                    cache_control?: {
                        type: "ephemeral";
                    } | undefined;
                }[];
                name?: string | undefined;
            } | {
                role: "model";
                content?: string | null | undefined;
            })[];
            tools?: string | undefined;
        } | null | undefined;
        origin?: {
            project_id?: string | undefined;
            prompt_id?: string | undefined;
            prompt_version?: string | undefined;
        } | null | undefined;
        parser?: {
            type: "llm_classifier";
            use_cot: boolean;
            choice_scores: Record<string, number>;
        } | null | undefined;
        tool_functions?: ({
            type: "function";
            id: string;
        } | {
            type: "global";
            name: string;
        })[] | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"data">;
    schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    default: z.ZodOptional<z.ZodUnknown>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "data";
    schema: Record<string, unknown>;
    description?: string | undefined;
    default?: unknown;
}, {
    type: "data";
    schema: Record<string, unknown>;
    description?: string | undefined;
    default?: unknown;
}>]>>;
type EvalParameterSerializedSchema = z.infer<typeof evalParametersSerializedSchema>;
declare const evaluatorDefinitionSchema: z.ZodObject<{
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"prompt">;
        default: z.ZodOptional<z.ZodObject<{
            prompt: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"completion">;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "completion";
                content: string;
            }, {
                type: "completion";
                content: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"chat">;
                messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"system">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }, {
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, z.ZodObject<{
                        image_url: z.ZodObject<{
                            url: z.ZodString;
                            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }>;
                        type: z.ZodLiteral<"image_url">;
                    }, "strip", z.ZodTypeAny, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }>]>, "many">]>;
                    role: z.ZodLiteral<"user">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                }, {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"assistant">;
                    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">, z.ZodNull]>>;
                    function_call: z.ZodOptional<z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>>;
                    name: z.ZodOptional<z.ZodString>;
                    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        function: z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>;
                        type: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }>, "many">>;
                    reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        content: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id?: string | undefined;
                        content?: string | undefined;
                    }, {
                        id?: string | undefined;
                        content?: string | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                }, {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"tool">;
                    tool_call_id: z.ZodDefault<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                }, {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    name: z.ZodString;
                    role: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    role: "function";
                    name: string;
                    content: string | null;
                }, {
                    role: "function";
                    name: string;
                    content: string | null;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"developer">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }, {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"model">;
                    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    role: "model";
                    content?: string | null | undefined;
                }, {
                    role: "model";
                    content?: string | null | undefined;
                }>]>, "many">;
                tools: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }, {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }>, z.ZodNull]>>;
            options: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                model: z.ZodOptional<z.ZodString>;
                params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">>]>>;
                position: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            }, {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            }>, z.ZodNull]>>;
            parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"llm_classifier">;
                use_cot: z.ZodBoolean;
                choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }>, z.ZodNull]>>;
            tool_functions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">, z.ZodNull]>>;
            origin: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                prompt_id: z.ZodOptional<z.ZodString>;
                project_id: z.ZodOptional<z.ZodString>;
                prompt_version: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            }, {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            }>, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        }, {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        }>>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    }, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"data">;
        schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        default: z.ZodOptional<z.ZodUnknown>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }, {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }>]>>>;
}, "strip", z.ZodTypeAny, {
    parameters?: Record<string, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    } | {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }> | undefined;
}, {
    parameters?: Record<string, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    } | {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }> | undefined;
}>;
type EvaluatorDefinition = z.infer<typeof evaluatorDefinitionSchema>;
declare const evaluatorDefinitionsSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"prompt">;
        default: z.ZodOptional<z.ZodObject<{
            prompt: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"completion">;
                content: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "completion";
                content: string;
            }, {
                type: "completion";
                content: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"chat">;
                messages: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"system">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }, {
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, z.ZodObject<{
                        image_url: z.ZodObject<{
                            url: z.ZodString;
                            detail: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"low">, z.ZodLiteral<"high">]>>;
                        }, "strip", z.ZodTypeAny, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }, {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        }>;
                        type: z.ZodLiteral<"image_url">;
                    }, "strip", z.ZodTypeAny, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }, {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    }>]>, "many">]>;
                    role: z.ZodLiteral<"user">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                }, {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"assistant">;
                    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">, z.ZodNull]>>;
                    function_call: z.ZodOptional<z.ZodObject<{
                        arguments: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        arguments: string;
                    }, {
                        name: string;
                        arguments: string;
                    }>>;
                    name: z.ZodOptional<z.ZodString>;
                    tool_calls: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodString;
                        function: z.ZodObject<{
                            arguments: z.ZodString;
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            arguments: string;
                        }, {
                            name: string;
                            arguments: string;
                        }>;
                        type: z.ZodLiteral<"function">;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }, {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }>, "many">>;
                    reasoning: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        content: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id?: string | undefined;
                        content?: string | undefined;
                    }, {
                        id?: string | undefined;
                        content?: string | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                }, {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"tool">;
                    tool_call_id: z.ZodDefault<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                }, {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodNull]>;
                    name: z.ZodString;
                    role: z.ZodLiteral<"function">;
                }, "strip", z.ZodTypeAny, {
                    role: "function";
                    name: string;
                    content: string | null;
                }, {
                    role: "function";
                    name: string;
                    content: string | null;
                }>, z.ZodObject<{
                    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
                        text: z.ZodDefault<z.ZodString>;
                        type: z.ZodLiteral<"text">;
                        cache_control: z.ZodOptional<z.ZodObject<{
                            type: z.ZodLiteral<"ephemeral">;
                        }, "strip", z.ZodTypeAny, {
                            type: "ephemeral";
                        }, {
                            type: "ephemeral";
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }, {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }>, "many">]>;
                    role: z.ZodLiteral<"developer">;
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }, {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                }>, z.ZodObject<{
                    role: z.ZodLiteral<"model">;
                    content: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
                }, "strip", z.ZodTypeAny, {
                    role: "model";
                    content?: string | null | undefined;
                }, {
                    role: "model";
                    content?: string | null | undefined;
                }>]>, "many">;
                tools: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }, {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            }>, z.ZodNull]>>;
            options: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                model: z.ZodOptional<z.ZodString>;
                params: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough">>]>>;
                position: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            }, {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            }>, z.ZodNull]>>;
            parser: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"llm_classifier">;
                use_cot: z.ZodBoolean;
                choice_scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }, {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            }>, z.ZodNull]>>;
            tool_functions: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"function">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "function";
                id: string;
            }, {
                type: "function";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"global">;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "global";
                name: string;
            }, {
                type: "global";
                name: string;
            }>]>, "many">, z.ZodNull]>>;
            origin: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                prompt_id: z.ZodOptional<z.ZodString>;
                project_id: z.ZodOptional<z.ZodString>;
                prompt_version: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            }, {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            }>, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        }, {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        }>>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    }, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"data">;
        schema: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        default: z.ZodOptional<z.ZodUnknown>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }, {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }>]>>>;
}, "strip", z.ZodTypeAny, {
    parameters?: Record<string, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id: string;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text: string;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    } | {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }> | undefined;
}, {
    parameters?: Record<string, {
        type: "prompt";
        description?: string | undefined;
        default?: {
            options?: {
                params?: z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    max_tokens: z.ZodOptional<z.ZodNumber>;
                    max_completion_tokens: z.ZodOptional<z.ZodNumber>;
                    frequency_penalty: z.ZodOptional<z.ZodNumber>;
                    presence_penalty: z.ZodOptional<z.ZodNumber>;
                    response_format: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"json_object">;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_object";
                    }, {
                        type: "json_object";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"json_schema">;
                        json_schema: z.ZodObject<{
                            name: z.ZodString;
                            description: z.ZodOptional<z.ZodString>;
                            schema: z.ZodOptional<z.ZodUnion<[z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, z.ZodString]>>;
                            strict: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodNull]>>;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }, {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }, {
                        type: "json_schema";
                        json_schema: {
                            name: string;
                            description?: string | undefined;
                            schema?: string | z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                            strict?: boolean | null | undefined;
                        };
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"text">;
                    }, "strip", z.ZodTypeAny, {
                        type: "text";
                    }, {
                        type: "text";
                    }>, z.ZodNull]>>;
                    tool_choice: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodLiteral<"required">, z.ZodObject<{
                        type: z.ZodLiteral<"function">;
                        function: z.ZodObject<{
                            name: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            name: string;
                        }, {
                            name: string;
                        }>;
                    }, "strip", z.ZodTypeAny, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }, {
                        function: {
                            name: string;
                        };
                        type: "function";
                    }>]>>;
                    function_call: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"auto">, z.ZodLiteral<"none">, z.ZodObject<{
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                    }, {
                        name: string;
                    }>]>>;
                    n: z.ZodOptional<z.ZodNumber>;
                    stop: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    reasoning_effort: z.ZodOptional<z.ZodEnum<["minimal", "low", "medium", "high"]>>;
                    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    max_tokens: z.ZodNumber;
                    temperature: z.ZodNumber;
                    top_p: z.ZodOptional<z.ZodNumber>;
                    top_k: z.ZodOptional<z.ZodNumber>;
                    stop_sequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    max_tokens_to_sample: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
                    topP: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                    temperature: z.ZodOptional<z.ZodNumber>;
                    topK: z.ZodOptional<z.ZodNumber>;
                }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
                    use_cache: z.ZodOptional<z.ZodBoolean>;
                }, z.ZodTypeAny, "passthrough"> | undefined;
                model?: string | undefined;
                position?: string | undefined;
            } | null | undefined;
            prompt?: {
                type: "completion";
                content: string;
            } | {
                type: "chat";
                messages: ({
                    role: "system";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "user";
                    content: string | ({
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    } | {
                        type: "image_url";
                        image_url: {
                            url: string;
                            detail?: "auto" | "low" | "high" | undefined;
                        };
                    })[];
                    name?: string | undefined;
                } | {
                    role: "assistant";
                    name?: string | undefined;
                    function_call?: {
                        name: string;
                        arguments: string;
                    } | undefined;
                    content?: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[] | null | undefined;
                    tool_calls?: {
                        function: {
                            name: string;
                            arguments: string;
                        };
                        type: "function";
                        id: string;
                    }[] | undefined;
                    reasoning?: {
                        id?: string | undefined;
                        content?: string | undefined;
                    }[] | undefined;
                } | {
                    role: "tool";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    tool_call_id?: string | undefined;
                } | {
                    role: "function";
                    name: string;
                    content: string | null;
                } | {
                    role: "developer";
                    content: string | {
                        type: "text";
                        text?: string | undefined;
                        cache_control?: {
                            type: "ephemeral";
                        } | undefined;
                    }[];
                    name?: string | undefined;
                } | {
                    role: "model";
                    content?: string | null | undefined;
                })[];
                tools?: string | undefined;
            } | null | undefined;
            origin?: {
                project_id?: string | undefined;
                prompt_id?: string | undefined;
                prompt_version?: string | undefined;
            } | null | undefined;
            parser?: {
                type: "llm_classifier";
                use_cot: boolean;
                choice_scores: Record<string, number>;
            } | null | undefined;
            tool_functions?: ({
                type: "function";
                id: string;
            } | {
                type: "global";
                name: string;
            })[] | null | undefined;
        } | undefined;
    } | {
        type: "data";
        schema: Record<string, unknown>;
        description?: string | undefined;
        default?: unknown;
    }> | undefined;
}>>;
type EvaluatorDefinitions = z.infer<typeof evaluatorDefinitionsSchema>;

type braintrust_AnyDataset = AnyDataset;
type braintrust_Attachment = Attachment;
declare const braintrust_Attachment: typeof Attachment;
type braintrust_AttachmentParams = AttachmentParams;
type braintrust_BackgroundLoggerOpts = BackgroundLoggerOpts;
type braintrust_BaseAttachment = BaseAttachment;
declare const braintrust_BaseAttachment: typeof BaseAttachment;
type braintrust_BaseMetadata = BaseMetadata;
type braintrust_BraintrustState = BraintrustState;
declare const braintrust_BraintrustState: typeof BraintrustState;
type braintrust_BraintrustStream = BraintrustStream;
declare const braintrust_BraintrustStream: typeof BraintrustStream;
type braintrust_BraintrustStreamChunk = BraintrustStreamChunk;
type braintrust_ChatPrompt = ChatPrompt;
type braintrust_CommentEvent = CommentEvent;
type braintrust_CompiledPrompt<Flavor extends "chat" | "completion"> = CompiledPrompt<Flavor>;
type braintrust_CompiledPromptParams = CompiledPromptParams;
type braintrust_CompletionPrompt = CompletionPrompt;
type braintrust_DataSummary = DataSummary;
type braintrust_Dataset<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET> = Dataset<IsLegacyDataset>;
declare const braintrust_Dataset: typeof Dataset;
type braintrust_DatasetRecord<IsLegacyDataset extends boolean = typeof DEFAULT_IS_LEGACY_DATASET> = DatasetRecord<IsLegacyDataset>;
type braintrust_DatasetSummary = DatasetSummary;
type braintrust_DefaultMetadataType = DefaultMetadataType;
type braintrust_DefaultPromptArgs = DefaultPromptArgs;
declare const braintrust_ERR_PERMALINK: typeof ERR_PERMALINK;
type braintrust_EndSpanArgs = EndSpanArgs;
type braintrust_EvalCase<Input, Expected, Metadata> = EvalCase<Input, Expected, Metadata>;
type braintrust_EvalParameterSerializedSchema = EvalParameterSerializedSchema;
type braintrust_EvalParameters = EvalParameters;
type braintrust_EvaluatorDefinition = EvaluatorDefinition;
type braintrust_EvaluatorDefinitions = EvaluatorDefinitions;
type braintrust_EvaluatorManifest = EvaluatorManifest;
type braintrust_Experiment = Experiment;
declare const braintrust_Experiment: typeof Experiment;
type braintrust_ExperimentLogFullArgs = ExperimentLogFullArgs;
type braintrust_ExperimentLogPartialArgs = ExperimentLogPartialArgs;
type braintrust_ExperimentSummary = ExperimentSummary;
type braintrust_Exportable = Exportable;
type braintrust_ExternalAttachment = ExternalAttachment;
declare const braintrust_ExternalAttachment: typeof ExternalAttachment;
type braintrust_ExternalAttachmentParams = ExternalAttachmentParams;
type braintrust_FailedHTTPResponse = FailedHTTPResponse;
declare const braintrust_FailedHTTPResponse: typeof FailedHTTPResponse;
type braintrust_FullInitOptions<IsOpen extends boolean> = FullInitOptions<IsOpen>;
type braintrust_FullLoginOptions = FullLoginOptions;
declare const braintrust_INTERNAL_BTQL_LIMIT: typeof INTERNAL_BTQL_LIMIT;
type braintrust_IdField = IdField;
type braintrust_InitOptions<IsOpen extends boolean> = InitOptions<IsOpen>;
type braintrust_InputField = InputField;
type braintrust_InvokeFunctionArgs<Input, Output, Stream extends boolean = false> = InvokeFunctionArgs<Input, Output, Stream>;
type braintrust_InvokeReturn<Stream extends boolean, Output> = InvokeReturn<Stream, Output>;
declare const braintrust_LEGACY_CACHED_HEADER: typeof LEGACY_CACHED_HEADER;
type braintrust_LazyValue<T> = LazyValue<T>;
declare const braintrust_LazyValue: typeof LazyValue;
type braintrust_LogCommentFullArgs = LogCommentFullArgs;
type braintrust_LogFeedbackFullArgs = LogFeedbackFullArgs;
type braintrust_LogOptions<IsAsyncFlush> = LogOptions<IsAsyncFlush>;
type braintrust_Logger<IsAsyncFlush extends boolean> = Logger<IsAsyncFlush>;
declare const braintrust_Logger: typeof Logger;
type braintrust_LoginOptions = LoginOptions;
type braintrust_MetricSummary = MetricSummary;
declare const braintrust_NOOP_SPAN: typeof NOOP_SPAN;
declare const braintrust_NOOP_SPAN_PERMALINK: typeof NOOP_SPAN_PERMALINK;
type braintrust_NoopSpan = NoopSpan;
declare const braintrust_NoopSpan: typeof NoopSpan;
type braintrust_ObjectMetadata = ObjectMetadata;
type braintrust_OtherExperimentLogFields = OtherExperimentLogFields;
type braintrust_ParentExperimentIds = ParentExperimentIds;
type braintrust_ParentProjectLogIds = ParentProjectLogIds;
type braintrust_PromiseUnless<B, R> = PromiseUnless<B, R>;
type braintrust_Prompt<HasId extends boolean = true, HasVersion extends boolean = true> = Prompt<HasId, HasVersion>;
declare const braintrust_Prompt: typeof Prompt;
type braintrust_PromptRowWithId<HasId extends boolean = true, HasVersion extends boolean = true> = PromptRowWithId<HasId, HasVersion>;
type braintrust_ReadonlyAttachment = ReadonlyAttachment;
declare const braintrust_ReadonlyAttachment: typeof ReadonlyAttachment;
type braintrust_ReadonlyExperiment = ReadonlyExperiment;
declare const braintrust_ReadonlyExperiment: typeof ReadonlyExperiment;
type braintrust_ScoreSummary = ScoreSummary;
type braintrust_SerializedBraintrustState = SerializedBraintrustState;
type braintrust_SetCurrentArg = SetCurrentArg;
type braintrust_Span = Span;
type braintrust_SpanImpl = SpanImpl;
declare const braintrust_SpanImpl: typeof SpanImpl;
type braintrust_StartSpanArgs = StartSpanArgs;
type braintrust_TestBackgroundLogger = TestBackgroundLogger;
declare const braintrust_TestBackgroundLogger: typeof TestBackgroundLogger;
type braintrust_WithTransactionId<R> = WithTransactionId<R>;
declare const braintrust_X_CACHED_HEADER: typeof X_CACHED_HEADER;
declare const braintrust__exportsForTestingOnly: typeof _exportsForTestingOnly;
declare const braintrust__internalGetGlobalState: typeof _internalGetGlobalState;
declare const braintrust__internalSetInitialState: typeof _internalSetInitialState;
declare const braintrust_braintrustStreamChunkSchema: typeof braintrustStreamChunkSchema;
declare const braintrust_createFinalValuePassThroughStream: typeof createFinalValuePassThroughStream;
declare const braintrust_currentExperiment: typeof currentExperiment;
declare const braintrust_currentLogger: typeof currentLogger;
declare const braintrust_currentSpan: typeof currentSpan;
declare const braintrust_deserializePlainStringAsJSON: typeof deserializePlainStringAsJSON;
declare const braintrust_devNullWritableStream: typeof devNullWritableStream;
declare const braintrust_evaluatorDefinitionSchema: typeof evaluatorDefinitionSchema;
declare const braintrust_evaluatorDefinitionsSchema: typeof evaluatorDefinitionsSchema;
declare const braintrust_flush: typeof flush;
declare const braintrust_getPromptVersions: typeof getPromptVersions;
declare const braintrust_getSpanParentObject: typeof getSpanParentObject;
declare const braintrust_init: typeof init;
declare const braintrust_initDataset: typeof initDataset;
declare const braintrust_initExperiment: typeof initExperiment;
declare const braintrust_initFunction: typeof initFunction;
declare const braintrust_initLogger: typeof initLogger;
declare const braintrust_invoke: typeof invoke;
declare const braintrust_loadPrompt: typeof loadPrompt;
declare const braintrust_log: typeof log;
declare const braintrust_logError: typeof logError;
declare const braintrust_login: typeof login;
declare const braintrust_loginToState: typeof loginToState;
declare const braintrust_newId: typeof newId;
declare const braintrust_parseCachedHeader: typeof parseCachedHeader;
declare const braintrust_permalink: typeof permalink;
declare const braintrust_renderMessage: typeof renderMessage;
declare const braintrust_renderPromptParams: typeof renderPromptParams;
declare const braintrust_setFetch: typeof setFetch;
declare const braintrust_setMaskingFunction: typeof setMaskingFunction;
declare const braintrust_spanComponentsToObjectId: typeof spanComponentsToObjectId;
declare const braintrust_startSpan: typeof startSpan;
declare const braintrust_summarize: typeof summarize;
declare const braintrust_traceable: typeof traceable;
declare const braintrust_traced: typeof traced;
declare const braintrust_updateSpan: typeof updateSpan;
declare const braintrust_withCurrent: typeof withCurrent;
declare const braintrust_withDataset: typeof withDataset;
declare const braintrust_withExperiment: typeof withExperiment;
declare const braintrust_withLogger: typeof withLogger;
declare const braintrust_withParent: typeof withParent;
declare const braintrust_wrapOpenAI: typeof wrapOpenAI;
declare const braintrust_wrapOpenAIv4: typeof wrapOpenAIv4;
declare const braintrust_wrapTraced: typeof wrapTraced;
declare namespace braintrust {
  export { type braintrust_AnyDataset as AnyDataset, braintrust_Attachment as Attachment, type braintrust_AttachmentParams as AttachmentParams, type braintrust_BackgroundLoggerOpts as BackgroundLoggerOpts, braintrust_BaseAttachment as BaseAttachment, type braintrust_BaseMetadata as BaseMetadata, braintrust_BraintrustState as BraintrustState, braintrust_BraintrustStream as BraintrustStream, type braintrust_BraintrustStreamChunk as BraintrustStreamChunk, type braintrust_ChatPrompt as ChatPrompt, type braintrust_CommentEvent as CommentEvent, type braintrust_CompiledPrompt as CompiledPrompt, type braintrust_CompiledPromptParams as CompiledPromptParams, type braintrust_CompletionPrompt as CompletionPrompt, type braintrust_DataSummary as DataSummary, braintrust_Dataset as Dataset, type braintrust_DatasetRecord as DatasetRecord, type braintrust_DatasetSummary as DatasetSummary, type braintrust_DefaultMetadataType as DefaultMetadataType, type braintrust_DefaultPromptArgs as DefaultPromptArgs, braintrust_ERR_PERMALINK as ERR_PERMALINK, type braintrust_EndSpanArgs as EndSpanArgs, type braintrust_EvalCase as EvalCase, type braintrust_EvalParameterSerializedSchema as EvalParameterSerializedSchema, type braintrust_EvalParameters as EvalParameters, type braintrust_EvaluatorDefinition as EvaluatorDefinition, type braintrust_EvaluatorDefinitions as EvaluatorDefinitions, type braintrust_EvaluatorManifest as EvaluatorManifest, braintrust_Experiment as Experiment, type braintrust_ExperimentLogFullArgs as ExperimentLogFullArgs, type braintrust_ExperimentLogPartialArgs as ExperimentLogPartialArgs, type braintrust_ExperimentSummary as ExperimentSummary, type braintrust_Exportable as Exportable, braintrust_ExternalAttachment as ExternalAttachment, type braintrust_ExternalAttachmentParams as ExternalAttachmentParams, braintrust_FailedHTTPResponse as FailedHTTPResponse, type braintrust_FullInitOptions as FullInitOptions, type braintrust_FullLoginOptions as FullLoginOptions, braintrust_INTERNAL_BTQL_LIMIT as INTERNAL_BTQL_LIMIT, type braintrust_IdField as IdField, type braintrust_InitOptions as InitOptions, type braintrust_InputField as InputField, type braintrust_InvokeFunctionArgs as InvokeFunctionArgs, type braintrust_InvokeReturn as InvokeReturn, braintrust_LEGACY_CACHED_HEADER as LEGACY_CACHED_HEADER, braintrust_LazyValue as LazyValue, type braintrust_LogCommentFullArgs as LogCommentFullArgs, type braintrust_LogFeedbackFullArgs as LogFeedbackFullArgs, type braintrust_LogOptions as LogOptions, braintrust_Logger as Logger, type braintrust_LoginOptions as LoginOptions, type braintrust_MetricSummary as MetricSummary, braintrust_NOOP_SPAN as NOOP_SPAN, braintrust_NOOP_SPAN_PERMALINK as NOOP_SPAN_PERMALINK, braintrust_NoopSpan as NoopSpan, type braintrust_ObjectMetadata as ObjectMetadata, type braintrust_OtherExperimentLogFields as OtherExperimentLogFields, type braintrust_ParentExperimentIds as ParentExperimentIds, type braintrust_ParentProjectLogIds as ParentProjectLogIds, type braintrust_PromiseUnless as PromiseUnless, braintrust_Prompt as Prompt, type braintrust_PromptRowWithId as PromptRowWithId, braintrust_ReadonlyAttachment as ReadonlyAttachment, braintrust_ReadonlyExperiment as ReadonlyExperiment, type braintrust_ScoreSummary as ScoreSummary, type braintrust_SerializedBraintrustState as SerializedBraintrustState, type braintrust_SetCurrentArg as SetCurrentArg, type braintrust_Span as Span, braintrust_SpanImpl as SpanImpl, type braintrust_StartSpanArgs as StartSpanArgs, braintrust_TestBackgroundLogger as TestBackgroundLogger, type braintrust_WithTransactionId as WithTransactionId, braintrust_X_CACHED_HEADER as X_CACHED_HEADER, braintrust__exportsForTestingOnly as _exportsForTestingOnly, braintrust__internalGetGlobalState as _internalGetGlobalState, braintrust__internalSetInitialState as _internalSetInitialState, braintrust_braintrustStreamChunkSchema as braintrustStreamChunkSchema, braintrust_createFinalValuePassThroughStream as createFinalValuePassThroughStream, braintrust_currentExperiment as currentExperiment, braintrust_currentLogger as currentLogger, braintrust_currentSpan as currentSpan, braintrust_deserializePlainStringAsJSON as deserializePlainStringAsJSON, braintrust_devNullWritableStream as devNullWritableStream, braintrust_evaluatorDefinitionSchema as evaluatorDefinitionSchema, braintrust_evaluatorDefinitionsSchema as evaluatorDefinitionsSchema, braintrust_flush as flush, braintrust_getPromptVersions as getPromptVersions, braintrust_getSpanParentObject as getSpanParentObject, braintrust_init as init, braintrust_initDataset as initDataset, braintrust_initExperiment as initExperiment, braintrust_initFunction as initFunction, braintrust_initLogger as initLogger, braintrust_invoke as invoke, braintrust_loadPrompt as loadPrompt, braintrust_log as log, braintrust_logError as logError, braintrust_login as login, braintrust_loginToState as loginToState, braintrust_newId as newId, braintrust_parseCachedHeader as parseCachedHeader, braintrust_permalink as permalink, braintrust_renderMessage as renderMessage, braintrust_renderPromptParams as renderPromptParams, braintrust_setFetch as setFetch, braintrust_setMaskingFunction as setMaskingFunction, braintrust_spanComponentsToObjectId as spanComponentsToObjectId, braintrust_startSpan as startSpan, braintrust_summarize as summarize, braintrust_traceable as traceable, braintrust_traced as traced, braintrust_updateSpan as updateSpan, braintrust_withCurrent as withCurrent, braintrust_withDataset as withDataset, braintrust_withExperiment as withExperiment, braintrust_withLogger as withLogger, braintrust_withParent as withParent, braintrust_wrapOpenAI as wrapOpenAI, braintrust_wrapOpenAIv4 as wrapOpenAIv4, braintrust_wrapTraced as wrapTraced };
}

export { type AnyDataset, Attachment, type AttachmentParams, type BackgroundLoggerOpts, BaseAttachment, type BaseMetadata, BraintrustState, BraintrustStream, type BraintrustStreamChunk, type ChatPrompt, type CommentEvent, type CompiledPrompt, type CompiledPromptParams, type CompletionPrompt, type DataSummary, Dataset, type DatasetRecord, type DatasetSummary, type DefaultMetadataType, type DefaultPromptArgs, ERR_PERMALINK, type EndSpanArgs, type EvalCase, type EvalParameterSerializedSchema, type EvalParameters, type EvaluatorDefinition, type EvaluatorDefinitions, type EvaluatorManifest, Experiment, type ExperimentLogFullArgs, type ExperimentLogPartialArgs, type ExperimentSummary, type Exportable, ExternalAttachment, type ExternalAttachmentParams, FailedHTTPResponse, type FullInitOptions, type FullLoginOptions, INTERNAL_BTQL_LIMIT, type IdField, type InitOptions, type InputField, type InvokeFunctionArgs, type InvokeReturn, LEGACY_CACHED_HEADER, LazyValue, type LogCommentFullArgs, type LogFeedbackFullArgs, type LogOptions, Logger, type LoginOptions, type MetricSummary, NOOP_SPAN, NOOP_SPAN_PERMALINK, NoopSpan, type ObjectMetadata, type OtherExperimentLogFields, type ParentExperimentIds, type ParentProjectLogIds, type PromiseUnless, Prompt, type PromptRowWithId, ReadonlyAttachment, ReadonlyExperiment, type ScoreSummary, type SerializedBraintrustState, type SetCurrentArg, type Span, SpanImpl, type StartSpanArgs, TestBackgroundLogger, type WithTransactionId, X_CACHED_HEADER, _exportsForTestingOnly, _internalGetGlobalState, _internalSetInitialState, braintrustStreamChunkSchema, createFinalValuePassThroughStream, currentExperiment, currentLogger, currentSpan, braintrust as default, deserializePlainStringAsJSON, devNullWritableStream, evaluatorDefinitionSchema, evaluatorDefinitionsSchema, flush, getPromptVersions, getSpanParentObject, init, initDataset, initExperiment, initFunction, initLogger, invoke, loadPrompt, log, logError, login, loginToState, newId, parseCachedHeader, permalink, renderMessage, renderPromptParams, setFetch, setMaskingFunction, spanComponentsToObjectId, startSpan, summarize, traceable, traced, updateSpan, withCurrent, withDataset, withExperiment, withLogger, withParent, wrapOpenAI, wrapOpenAIv4, wrapTraced };
