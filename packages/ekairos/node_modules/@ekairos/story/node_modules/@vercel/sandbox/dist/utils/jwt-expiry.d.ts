import { z } from "zod";
import { schema } from "./get-credentials";
export declare class OidcRefreshError extends Error {
    name: string;
}
/**
 * Expiry implementation for JWT tokens (OIDC tokens).
 * Parses the JWT once and provides fast expiry validation.
 */
export declare class JwtExpiry {
    readonly token: string;
    private expiryTime;
    readonly payload?: Readonly<z.infer<typeof schema>>;
    static fromToken(token: string): JwtExpiry | null;
    /**
     * Creates a new JWT expiry checker.
     *
     * @param token - The JWT token to parse
     */
    constructor(token: string);
    /**
     * Checks if the JWT token is valid (not expired).
     * @returns true if token is valid, false if expired or expiring soon
     */
    isValid(): boolean;
    /**
     * Gets the expiry date of the JWT token.
     *
     * @returns Date object representing when the token expires, or null if no expiry
     */
    getExpiryDate(): Date | null;
    /**
     * Refreshes the JWT token by fetching a new OIDC token.
     *
     * @returns Promise resolving to a new JwtExpiry instance with fresh token
     */
    refresh(): Promise<JwtExpiry>;
    /**
     * Refreshes the JWT token if it's expired or expiring soon.
     */
    tryRefresh(): Promise<JwtExpiry | null>;
}
