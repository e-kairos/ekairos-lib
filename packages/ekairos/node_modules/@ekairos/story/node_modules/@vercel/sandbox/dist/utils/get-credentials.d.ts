import { z } from "zod";
export interface Credentials {
    /**
     * Authentication token for the Vercel API. It could be an OIDC token
     * or a personal access token.
     */
    token: string;
    /**
     * The ID of the project to associate Sandbox operations.
     */
    projectId: string;
    /**
     * The ID of the team to associate Sandbox operations.
     */
    teamId: string;
}
/**
 * Allow to get credentials to access the Vercel API. Credentials can be
 * provided in two different ways:
 *
 * 1. By passing an object with the `teamId`, `token`, and `projectId` properties.
 * 2. By using an environment variable VERCEL_OIDC_TOKEN.
 *
 * If both methods are used, the object properties take precedence over the
 * environment variable. If neither method is used, an error is thrown.
 */
export declare function getCredentials(params?: unknown): Promise<Credentials>;
/**
 * Schema to validate the payload of the Vercel OIDC token where we expect
 * to find the `teamId` and `projectId`.
 */
export declare const schema: z.ZodObject<{
    exp: z.ZodOptional<z.ZodNumber>;
    iat: z.ZodOptional<z.ZodNumber>;
    owner_id: z.ZodString;
    project_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    owner_id: string;
    project_id: string;
    exp?: number | undefined;
    iat?: number | undefined;
}, {
    owner_id: string;
    project_id: string;
    exp?: number | undefined;
    iat?: number | undefined;
}>;
