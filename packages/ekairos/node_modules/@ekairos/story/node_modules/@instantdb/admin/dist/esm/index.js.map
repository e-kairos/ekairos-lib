{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Readable } from 'node:stream';\n\nimport {\n  tx,\n  lookup,\n  getOps,\n  i,\n  id,\n  txInit,\n  version as coreVersion,\n  InstantAPIError,\n  type InstantIssue,\n  type TransactionChunk,\n  type AuthToken,\n  type Exactly,\n\n  // core types\n  type User,\n  type Query,\n\n  // query types\n  type QueryResponse,\n  type InstaQLResponse,\n  type InstaQLParams,\n  type ValidQuery,\n  type InstaQLFields,\n  type InstantQuery,\n  type InstantQueryResult,\n  type InstantSchema,\n  type InstantSchemaDatabase,\n  type InstantObject,\n  type InstantEntity,\n  type BackwardsCompatibleSchema,\n  type IInstantDatabase,\n\n  // schema types\n  type AttrsDefs,\n  type CardinalityKind,\n  type DataAttrDef,\n  type EntitiesDef,\n  type EntitiesWithLinks,\n  type EntityDef,\n  type InstantGraph,\n  type LinkAttrDef,\n  type LinkDef,\n  type InstantUnknownSchemaDef,\n  type LinksDef,\n  type RoomsOf,\n  type RoomsDef,\n  type PresenceOf,\n  type RoomHandle,\n  type ResolveAttrs,\n  type ValueTypes,\n  type InstantSchemaDef,\n  type InstantUnknownSchema,\n  type InstaQLEntity,\n  type InstaQLResult,\n  type InstaQLEntitySubquery,\n  type InstantRules,\n  type UpdateParams,\n  type LinkParams,\n  type RuleParams,\n  type TopicsOf,\n  type TopicOf,\n\n  // storage types\n  type FileOpts,\n  type UploadFileResponse,\n  type DeleteFileResponse,\n  validateQuery,\n  validateTransactions,\n} from '@instantdb/core';\n\nimport version from './version.ts';\n\nimport {\n  subscribe,\n  SubscribeQueryCallback,\n  SubscribeQueryResponse,\n  SubscribeQueryPayload,\n  SubscriptionReadyState,\n} from './subscribe.ts';\n\ntype DebugCheckResult = {\n  /** The ID of the record. */\n  id: string;\n  /** The namespace/table of the record. */\n  entity: string;\n  /** The value of the record. */\n  record: Record<string, any>;\n  /** The result of evaluating the corresponding permissions rule for a record. */\n  check: any;\n};\n\ntype Config = {\n  appId: string;\n  adminToken?: string;\n  apiURI?: string;\n  useDateObjects?: boolean;\n  disableValidation?: boolean;\n};\n\nexport type InstantConfig<\n  Schema extends InstantSchemaDef<any, any, any>,\n  UseDates extends boolean = false,\n> = {\n  appId: string;\n  adminToken?: string;\n  apiURI?: string;\n  schema?: Schema;\n  useDateObjects?: UseDates;\n  disableValidation?: boolean;\n};\n\ntype InstantConfigFilled<\n  Schema extends InstantSchemaDef<any, any, any>,\n  UseDates extends boolean,\n> = InstantConfig<Schema, UseDates> & { apiURI: string };\n\ntype FilledConfig = Config & { apiURI: string };\n\ntype ImpersonationOpts =\n  | { email: string }\n  | { token: AuthToken }\n  | { guest: boolean };\n\ntype DebugTransactResult = {\n  'tx-id': number;\n  'all-checks-ok?': boolean;\n};\n\nfunction configWithDefaults(config: Config): FilledConfig {\n  const defaultConfig = {\n    apiURI: 'https://api.instantdb.com',\n  };\n  const r = { ...defaultConfig, ...config };\n  return r;\n}\n\nfunction instantConfigWithDefaults<\n  Schema extends InstantSchemaDef<any, any, any>,\n  UseDates extends boolean,\n>(\n  config: InstantConfig<Schema, UseDates>,\n): InstantConfigFilled<Schema, UseDates> {\n  const defaultConfig = {\n    apiURI: 'https://api.instantdb.com',\n  };\n  const r = { ...defaultConfig, ...config };\n  return r;\n}\n\nfunction withImpersonation(\n  headers: { [key: string]: string },\n  opts: ImpersonationOpts,\n) {\n  if ('email' in opts) {\n    headers['as-email'] = opts.email;\n  } else if ('token' in opts) {\n    headers['as-token'] = opts.token;\n  } else if ('guest' in opts) {\n    headers['as-guest'] = 'true';\n  }\n  return headers;\n}\n\nfunction validateConfigAndImpersonation(\n  config: FilledConfig,\n  impersonationOpts: ImpersonationOpts,\n) {\n  if (\n    impersonationOpts &&\n    ('token' in impersonationOpts || 'guest' in impersonationOpts)\n  ) {\n    // adminToken is not required for `token` or `guest` impersonation\n    return;\n  }\n  if (config.adminToken) {\n    // An adminToken is provided.\n    return;\n  }\n  if (impersonationOpts && 'email' in impersonationOpts) {\n    throw new Error(\n      'Admin token required. To impersonate users with an email you must pass `adminToken` to `init`.',\n    );\n  }\n  throw new Error(\n    'Admin token required. To run this operation pass `adminToken` to `init`, or use `db.asUser`.',\n  );\n}\n\nfunction authorizedHeaders(\n  config: FilledConfig,\n  impersonationOpts?: ImpersonationOpts,\n): Record<string, string> {\n  validateConfigAndImpersonation(config, impersonationOpts);\n\n  const { adminToken, appId } = config;\n  const headers: Record<string, string> = {\n    'content-type': 'application/json',\n    'app-id': appId,\n  };\n\n  if (adminToken) {\n    headers.authorization = `Bearer ${adminToken}`;\n  }\n\n  return impersonationOpts\n    ? withImpersonation(headers, impersonationOpts)\n    : headers;\n}\n\n// NextJS 13 and 14 cache fetch requests by default.\n//\n// Since adminDB.query uses fetch, this means that it would also cache by default.\n//\n// We don't want this behavior. `adminDB.query` should return the latest result by default.\n//\n// To get around this, we set an explicit `cache` header for NextJS 13 and 14.\n// This is no longer needed in NextJS 15 onwards, as the default is `no-store` again.\n// Once NextJS 13 and 14 are no longer common, we can remove this code.\nfunction isNextJSVersionThatCachesFetchByDefault() {\n  return (\n    // NextJS 13 onwards added a `__nextPatched` property to the fetch function\n    fetch['__nextPatched'] &&\n    // NextJS 15 onwards _also_ added a global `next-patch` symbol.\n    !globalThis[Symbol.for('next-patch')]\n  );\n}\n\nfunction getDefaultFetchOpts(): RequestInit {\n  return isNextJSVersionThatCachesFetchByDefault() ? { cache: 'no-store' } : {};\n}\n\nasync function jsonReject(rejectFn, res) {\n  const body = await res.text();\n  try {\n    const json = JSON.parse(body);\n    return rejectFn(new InstantAPIError({ status: res.status, body: json }));\n  } catch (_e) {\n    return rejectFn(\n      new InstantAPIError({\n        status: res.status,\n        body: { type: undefined, message: body },\n      }),\n    );\n  }\n}\n\nasync function jsonFetch(\n  input: RequestInfo,\n  init: RequestInit | undefined,\n): Promise<any> {\n  const defaultFetchOpts = getDefaultFetchOpts();\n  const headers = {\n    ...(init.headers || {}),\n    'Instant-Admin-Version': version,\n    'Instant-Core-Version': coreVersion,\n  };\n  const res = await fetch(input, { ...defaultFetchOpts, ...init, headers });\n  if (res.status === 200) {\n    const json = await res.json();\n    return Promise.resolve(json);\n  }\n\n  return jsonReject((x) => Promise.reject(x), res);\n}\n\n/**\n *\n * The first step: init your application!\n *\n * Visit https://instantdb.com/dash to get your `appId` :)\n *\n * @example\n *  import { init } from \"@instantdb/admin\"\n *\n *  const db = init({\n *    appId: process.env.INSTANT_APP_ID!,\n *    adminToken: process.env.INSTANT_APP_ADMIN_TOKEN\n *  })\n *\n *  // You can also provide a schema for type safety and editor autocomplete!\n *\n *  import { init } from \"@instantdb/admin\"\n *  import schema from \"\"../instant.schema.ts\";\n *\n *  const db = init({\n *    appId: process.env.INSTANT_APP_ID!,\n *    adminToken: process.env.INSTANT_APP_ADMIN_TOKEN,\n *    schema,\n *  })\n *  // To learn more: https://instantdb.com/docs/modeling-data\n */\nfunction init<\n  Schema extends InstantSchemaDef<any, any, any> = InstantUnknownSchema,\n  UseDates extends boolean = false,\n>(\n  config: InstantConfig<Schema, UseDates>,\n): InstantAdminDatabase<Schema, InstantConfig<Schema, UseDates>> {\n  return new InstantAdminDatabase<Schema, InstantConfig<Schema, UseDates>>(\n    config,\n  );\n}\n\n/**\n * @deprecated\n * `init_experimental` is deprecated. You can replace it with `init`.\n *\n * @example\n *\n * // Before\n * import { init_experimental } from \"@instantdb/admin\"\n * const db = init_experimental({  ...  });\n *\n * // After\n * import { init } from \"@instantdb/admin\"\n * const db = init({ ...  });\n */\nconst init_experimental = init;\n\nfunction steps(inputChunks) {\n  const chunks = Array.isArray(inputChunks) ? inputChunks : [inputChunks];\n  return chunks.flatMap(getOps);\n}\n\ntype PresenceResult<Data> = {\n  [peerId: string]: { data: Data; 'peer-id': string; user: User | null };\n};\n\nclass Rooms<Schema extends InstantSchemaDef<any, any, any>> {\n  config: FilledConfig;\n\n  constructor(config: FilledConfig) {\n    this.config = config;\n  }\n\n  async getPresence<RoomType extends keyof RoomsOf<Schema>>(\n    roomType: RoomType,\n    roomId: string,\n  ): Promise<PresenceResult<PresenceOf<Schema, RoomType>>> {\n    const res = await jsonFetch(\n      `${this.config.apiURI}/admin/rooms/presence?room-type=${String(roomType)}&room-id=${roomId}`,\n      {\n        method: 'GET',\n        headers: authorizedHeaders(this.config),\n      },\n    );\n\n    return res.sessions || {};\n  }\n}\n\nclass Auth {\n  config: FilledConfig;\n\n  constructor(config: FilledConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Generates a magic code for the user with the given email.\n   * This is useful if you want to use your own email provider\n   * to send magic codes.\n   *\n   * @example\n   *   // Generate a magic code\n   *   const { code } = await db.auth.generateMagicCode({ email })\n   *   // Send the magic code to the user with your own email provider\n   *   await customEmailProvider.sendMagicCode(email, code)\n   *\n   * @see https://instantdb.com/docs/backend#custom-magic-codes\n   */\n  generateMagicCode = async (email: string): Promise<{ code: string }> => {\n    return jsonFetch(`${this.config.apiURI}/admin/magic_code`, {\n      method: 'POST',\n      headers: authorizedHeaders(this.config),\n      body: JSON.stringify({ email }),\n    });\n  };\n\n  /**\n   * Sends a magic code to the user with the given email.\n   * This uses Instant's built-in email provider.\n   *\n   * @example\n   *   // Send an email to user with magic code\n   *   await db.auth.sendMagicCode({ email })\n   *\n   * @see https://instantdb.com/docs/backend#custom-magic-codes\n   */\n  sendMagicCode = async (email: string): Promise<{ code: string }> => {\n    return jsonFetch(`${this.config.apiURI}/admin/send_magic_code`, {\n      method: 'POST',\n      headers: authorizedHeaders(this.config),\n      body: JSON.stringify({ email }),\n    });\n  };\n\n  /**\n   * Verifies a magic code for the user with the given email.\n   *\n   * @example\n   *   const user = await db.auth.verifyMagicCode({ email, code })\n   *   console.log(\"Verified user:\", user)\n   *\n   * @see https://instantdb.com/docs/backend#custom-magic-codes\n   */\n  verifyMagicCode = async (email: string, code: string): Promise<User> => {\n    const { user } = await jsonFetch(\n      `${this.config.apiURI}/admin/verify_magic_code`,\n      {\n        method: 'POST',\n        headers: authorizedHeaders(this.config),\n        body: JSON.stringify({ email, code }),\n      },\n    );\n    return user;\n  };\n\n  /**\n   * Creates a login token for the user with the given email.\n   * If that user does not exist, we create one.\n   *\n   * This is often useful for writing custom auth flows.\n   *\n   * @example\n   *   app.post('/custom_sign_in', async (req, res) => {\n   *     // ... your custom flow for users\n   *     const token = await db.auth.createToken(email)\n   *     return res.status(200).send({ token })\n   *   })\n   *\n   * @see https://instantdb.com/docs/backend#custom-auth\n   */\n  createToken = async (email: string): Promise<AuthToken> => {\n    const ret: { user: { refresh_token: string } } = await jsonFetch(\n      `${this.config.apiURI}/admin/refresh_tokens`,\n      {\n        method: 'POST',\n        headers: authorizedHeaders(this.config),\n        body: JSON.stringify({ email }),\n      },\n    );\n    return ret.user.refresh_token;\n  };\n\n  /**\n   * Verifies a given token and returns the associated user.\n   *\n   * This is often useful for writing custom endpoints, where you need\n   * to authenticate users.\n   *\n   * @example\n   *   app.post('/custom_endpoint', async (req, res) => {\n   *     const user = await db.auth.verifyToken(req.headers['token'])\n   *     if (!user) {\n   *       return res.status(401).send('Uh oh, you are not authenticated')\n   *     }\n   *     // ...\n   *   })\n   * @see https://instantdb.com/docs/backend#custom-endpoints\n   */\n  verifyToken = async (token: AuthToken): Promise<User> => {\n    const res = await jsonFetch(\n      `${this.config.apiURI}/runtime/auth/verify_refresh_token`,\n      {\n        method: 'POST',\n        headers: { 'content-type': 'application/json' },\n        body: JSON.stringify({\n          'app-id': this.config.appId,\n          'refresh-token': token,\n        }),\n      },\n    );\n    return res.user;\n  };\n\n  /**\n   * Retrieves an app user by id, email, or refresh token.\n   *\n   * @example\n   *   try {\n   *     const user = await db.auth.getUser({ email })\n   *     console.log(\"Found user:\", user)\n   *   } catch (err) {\n   *     console.error(\"Failed to retrieve user:\", err.message);\n   *   }\n   *\n   * @see https://instantdb.com/docs/backend#retrieve-a-user\n   */\n  getUser = async (\n    params: { email: string } | { id: string } | { refresh_token: string },\n  ): Promise<Omit<User, 'refresh_token'>> => {\n    const qs = Object.entries(params)\n      .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)\n      .join('&');\n\n    const response: { user: User } = await jsonFetch(\n      `${this.config.apiURI}/admin/users?${qs}`,\n      {\n        method: 'GET',\n        headers: authorizedHeaders(this.config),\n      },\n    );\n\n    return response.user;\n  };\n\n  /**\n   * Deletes an app user by id, email, or refresh token.\n   *\n   * NB: This _only_ deletes the user; it does not delete all user data.\n   * You will need to handle this manually.\n   *\n   * @example\n   *   try {\n   *     const deletedUser = await db.auth.deleteUser({ email })\n   *     console.log(\"Deleted user:\", deletedUser)\n   *   } catch (err) {\n   *     console.error(\"Failed to delete user:\", err.message);\n   *   }\n   *\n   * @see https://instantdb.com/docs/backend#delete-a-user\n   */\n  deleteUser = async (\n    params: { email: string } | { id: string } | { refresh_token: string },\n  ): Promise<User> => {\n    const qs = Object.entries(params).map(([k, v]) => `${k}=${v}`);\n    const response: { deleted: User } = await jsonFetch(\n      `${this.config.apiURI}/admin/users?${qs}`,\n      {\n        method: 'DELETE',\n        headers: authorizedHeaders(this.config),\n      },\n    );\n\n    return response.deleted;\n  };\n\n  /**\n   * Signs out the user with the given email.\n   * This invalidates any tokens associated with the user.\n   * If the user is not found, an error will be thrown.\n   *\n   * @example\n   *   try {\n   *     await auth.signOut({ email: \"alyssa_p_hacker@instantdb.com\" });\n   *     console.log(\"Successfully signed out\");\n   *   } catch (err) {\n   *     console.error(\"Sign out failed:\", err.message);\n   *   }\n   *\n   * @see https://instantdb.com/docs/backend#sign-out\n   */\n  async signOut(\n    params: { email: string } | { id: string } | { refresh_token: string },\n  ): Promise<void>;\n\n  /**\n   * @deprecated Passing an email string directly is deprecated.\n   * Use an object with the `email` key instead.\n   *\n   * @example\n   * // Before\n   * auth.signOut(email)\n   *\n   * // After\n   * auth.signOut({ email })\n   */\n  async signOut(email: string): Promise<void>;\n\n  async signOut(\n    input:\n      | string\n      | { email: string }\n      | { id: string }\n      | { refresh_token: string },\n  ): Promise<void> {\n    // If input is a string, we assume it's an email.\n    // This is because of backwards compatibility: we used to only\n    // accept email strings. Eventually we can remove this\n    const params = typeof input === 'string' ? { email: input } : input;\n    const config = this.config;\n    await jsonFetch(`${config.apiURI}/admin/sign_out`, {\n      method: 'POST',\n      headers: authorizedHeaders(config),\n      body: JSON.stringify(params),\n    });\n  }\n}\n\ntype StorageFile = {\n  key: string;\n  name: string;\n  size: number;\n  etag: string;\n  last_modified: number;\n};\n\ntype DeleteManyFileResponse = {\n  data: {\n    ids: string[] | null;\n  };\n};\n\nconst isNodeReadable = (v: any): v is Readable =>\n  v &&\n  typeof v === 'object' &&\n  typeof v.pipe === 'function' &&\n  typeof v.read === 'function';\n\nconst isWebReadable = (v: any): v is ReadableStream =>\n  v && typeof v.getReader === 'function';\n\n/**\n * Functions to manage file storage.\n */\nclass Storage {\n  config: FilledConfig;\n  impersonationOpts?: ImpersonationOpts;\n\n  constructor(config: FilledConfig, impersonationOpts?: ImpersonationOpts) {\n    this.config = config;\n    this.impersonationOpts = impersonationOpts;\n  }\n\n  /**\n   * Uploads file at the provided path. Accepts a Buffer or a Readable stream.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   const buffer = fs.readFileSync('demo.png');\n   *   const isSuccess = await db.storage.uploadFile('photos/demo.png', buffer);\n   */\n  uploadFile = async (\n    path: string,\n    file: Buffer | Readable | ReadableStream,\n    metadata: FileOpts = {},\n  ): Promise<UploadFileResponse> => {\n    const headers = {\n      ...authorizedHeaders(this.config, this.impersonationOpts),\n      path,\n    };\n    if (metadata.contentDisposition) {\n      headers['content-disposition'] = metadata.contentDisposition;\n    }\n\n    // headers.content-type will become \"undefined\" (string)\n    // if not removed from the object\n    delete headers['content-type'];\n\n    if (metadata.contentType) {\n      headers['content-type'] = metadata.contentType;\n    }\n\n    let duplex: 'half' | undefined;\n    if (isNodeReadable(file)) {\n      duplex = 'half'; // one-way stream\n    }\n    if (isNodeReadable(file) || isWebReadable(file)) {\n      headers['content-length'] = metadata.fileSize.toString();\n      if (!metadata.fileSize) {\n        throw new Error(\n          'fileSize is required in metadata when uploading streams',\n        );\n      }\n    }\n\n    let options = {\n      method: 'PUT',\n      headers,\n      body: file as unknown as BodyInit,\n      ...(duplex && { duplex }),\n    };\n\n    return jsonFetch(`${this.config.apiURI}/admin/storage/upload`, options);\n  };\n\n  /**\n   * Deletes a file by its path name (e.g. \"photos/demo.png\").\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   await db.storage.delete(\"photos/demo.png\");\n   */\n  delete = async (pathname: string): Promise<DeleteFileResponse> => {\n    return jsonFetch(\n      `${this.config.apiURI}/admin/storage/files?filename=${encodeURIComponent(\n        pathname,\n      )}`,\n      {\n        method: 'DELETE',\n        headers: authorizedHeaders(this.config, this.impersonationOpts),\n      },\n    );\n  };\n\n  /**\n   * Deletes multiple files by their path names (e.g. \"photos/demo.png\", \"essays/demo.txt\").\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   await db.storage.deleteMany([\"images/1.png\", \"images/2.png\", \"images/3.png\"]);\n   */\n  deleteMany = async (pathnames: string[]): Promise<DeleteManyFileResponse> => {\n    return jsonFetch(`${this.config.apiURI}/admin/storage/files/delete`, {\n      method: 'POST',\n      headers: authorizedHeaders(this.config, this.impersonationOpts),\n      body: JSON.stringify({ filenames: pathnames }),\n    });\n  };\n\n  /**\n   * @deprecated. This method will be removed in the future. Use `uploadFile`\n   * instead\n   */\n  upload = async (\n    pathname: string,\n    file: Buffer,\n    metadata: FileOpts = {},\n  ): Promise<boolean> => {\n    const { data: presignedUrl } = await jsonFetch(\n      `${this.config.apiURI}/admin/storage/signed-upload-url`,\n      {\n        method: 'POST',\n        headers: authorizedHeaders(this.config),\n        body: JSON.stringify({\n          app_id: this.config.appId,\n          filename: pathname,\n        }),\n      },\n    );\n    const { ok } = await fetch(presignedUrl, {\n      method: 'PUT',\n      body: file,\n      headers: {\n        'Content-Type': metadata.contentType,\n      },\n    });\n\n    return ok;\n  };\n\n  /**\n   * @deprecated. This method will be removed in the future. Use `query` instead\n   * @example\n   * const files = await db.query({ $files: {}})\n   */\n  list = async (): Promise<StorageFile[]> => {\n    const { data } = await jsonFetch(\n      `${this.config.apiURI}/admin/storage/files`,\n      {\n        method: 'GET',\n        headers: authorizedHeaders(this.config),\n      },\n    );\n\n    return data;\n  };\n\n  /**\n   * @deprecated. getDownloadUrl will be removed in the future.\n   * Use `query` instead to query and fetch for valid urls\n   *\n   * db.useQuery({\n   *   $files: {\n   *     $: {\n   *       where: {\n   *         path: \"moop.png\"\n   *       }\n   *     }\n   *   }\n   * })\n   */\n  getDownloadUrl = async (pathname: string): Promise<string> => {\n    const { data } = await jsonFetch(\n      `${this.config.apiURI}/admin/storage/signed-download-url?app_id=${this.config.appId}&filename=${encodeURIComponent(pathname)}`,\n      {\n        method: 'GET',\n        headers: authorizedHeaders(this.config),\n      },\n    );\n\n    return data;\n  };\n}\n\ntype AdminQueryOpts = {\n  ruleParams?: RuleParams;\n  fetchOpts?: RequestInit;\n};\n\n/**\n *\n * The first step: init your application!\n *\n * Visit https://instantdb.com/dash to get your `appId` and `adminToken` :)\n *\n * @example\n *  const db = init({ appId: \"my-app-id\", adminToken: \"my-admin-token\" })\n */\nclass InstantAdminDatabase<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n> {\n  config: InstantConfigFilled<Schema, Config['useDateObjects']>;\n  auth: Auth;\n  storage: Storage;\n  rooms: Rooms<Schema>;\n  impersonationOpts?: ImpersonationOpts;\n\n  public tx = txInit<NonNullable<Schema>>();\n\n  constructor(_config: Config) {\n    this.config = instantConfigWithDefaults(_config);\n    this.auth = new Auth(this.config);\n    this.storage = new Storage(this.config, this.impersonationOpts);\n    this.rooms = new Rooms<Schema>(this.config);\n  }\n\n  /**\n   * Sometimes you want to scope queries to a specific user.\n   *\n   * You can provide a user's auth token, email, or impersonate a guest.\n   *\n   * @see https://instantdb.com/docs/backend#impersonating-users\n   * @example\n   *  await db.asUser({email: \"stopa@instantdb.com\"}).query({ goals: {} })\n   */\n  asUser = (opts: ImpersonationOpts): InstantAdminDatabase<Schema, Config> => {\n    const newClient = new InstantAdminDatabase<Schema, Config>({\n      ...(this.config as Config),\n    });\n    newClient.impersonationOpts = opts;\n    newClient.storage = new Storage(this.config, opts);\n    return newClient;\n  };\n\n  /**\n   * Use this to query your data!\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *  // fetch all goals\n   *  await db.query({ goals: {} })\n   *\n   *  // goals where the title is \"Get Fit\"\n   *  await db.query({ goals: { $: { where: { title: \"Get Fit\" } } } })\n   *\n   *  // all goals, _alongside_ their todos\n   *  await db.query({ goals: { todos: {} } })\n   */\n  query = <Q extends ValidQuery<Q, Schema>>(\n    query: Q,\n    opts: AdminQueryOpts = {},\n  ): Promise<\n    InstaQLResponse<Schema, Q, NonNullable<Config['useDateObjects']>>\n  > => {\n    if (query && opts && 'ruleParams' in opts) {\n      query = { $$ruleParams: opts['ruleParams'], ...query };\n    }\n\n    if (!this.config.disableValidation) {\n      validateQuery(query, this.config.schema);\n    }\n\n    const fetchOpts = opts.fetchOpts || {};\n    const fetchOptsHeaders = fetchOpts['headers'] || {};\n    return jsonFetch(`${this.config.apiURI}/admin/query`, {\n      ...fetchOpts,\n      method: 'POST',\n      headers: {\n        ...fetchOptsHeaders,\n        ...authorizedHeaders(this.config, this.impersonationOpts),\n      },\n      body: JSON.stringify({\n        query: query,\n        'inference?': !!this.config.schema,\n      }),\n    });\n  };\n\n  /**\n   * Use this to to get a live view of your data!\n   *\n   * @see https://www.instantdb.com/docs/backend\n   *\n   * @example\n   *  // create a subscription to a query\n   *  const query = { goals: { $: { where: { title: \"Get Fit\" } } } }\n   *  const sub = db.subscribeQuery(query);\n   *\n   *  // iterate through the results with an async iterator\n   *  for await (const payload of sub) {\n   *    if (payload.error) {\n   *      console.log(payload.error);\n   *      // Stop the subscription\n   *      sub.close();\n   *    } else {\n   *      console.log(payload.data);\n   *    }\n   *  }\n   *\n   *  // Stop the subscription\n   *  sub.close();\n   *\n   *  // Create a subscription with a callback\n   *  const sub = db.subscribeQuery(query, (payload) => {\n   *    if (payload.error) {\n   *      console.log(payload.error);\n   *      // Stop the subscription\n   *      sub.close();\n   *    } else {\n   *      console.log(payload.data);\n   *    }\n   *  });\n   */\n  subscribeQuery<Q extends ValidQuery<Q, Schema>>(\n    query: Q,\n    cb?: SubscribeQueryCallback<Schema, Q, Config>,\n    opts: AdminQueryOpts = {},\n  ): SubscribeQueryResponse<Schema, Q, Config> {\n    if (query && opts && 'ruleParams' in opts) {\n      query = { $$ruleParams: opts['ruleParams'], ...query };\n    }\n\n    if (!this.config.disableValidation) {\n      validateQuery(query, this.config.schema);\n    }\n\n    const fetchOpts = opts.fetchOpts || {};\n    const fetchOptsHeaders = fetchOpts['headers'] || {};\n\n    const headers: HeadersInit = {\n      ...fetchOptsHeaders,\n      ...authorizedHeaders(this.config, this.impersonationOpts),\n    };\n\n    const inference = !!this.config.schema;\n\n    return subscribe(query, cb, {\n      headers,\n      inference,\n      apiURI: this.config.apiURI,\n    });\n  }\n\n  /**\n   * Use this to write data! You can create, update, delete, and link objects\n   *\n   * @see https://instantdb.com/docs/instaml\n   *\n   * @example\n   *   // Create a new object in the `goals` namespace\n   *   const goalId = id();\n   *   db.transact(db.tx.goals[goalId].update({title: \"Get fit\"}))\n   *\n   *   // Update the title\n   *   db.transact(db.tx.goals[goalId].update({title: \"Get super fit\"}))\n   *\n   *   // Delete it\n   *   db.transact(db.tx.goals[goalId].delete())\n   *\n   *   // Or create an association:\n   *   todoId = id();\n   *   db.transact([\n   *    db.tx.todos[todoId].update({ title: 'Go on a run' }),\n   *    db.tx.goals[goalId].link({todos: todoId}),\n   *  ])\n   */\n  transact = (\n    inputChunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n  ) => {\n    if (!this.config.disableValidation) {\n      validateTransactions(inputChunks, this.config.schema);\n    }\n    return jsonFetch(`${this.config.apiURI}/admin/transact`, {\n      method: 'POST',\n      headers: authorizedHeaders(this.config, this.impersonationOpts),\n      body: JSON.stringify({\n        steps: steps(inputChunks),\n        'throw-on-missing-attrs?': !!this.config.schema,\n      }),\n    });\n  };\n\n  /**\n   * Like `query`, but returns debugging information\n   * for permissions checks along with the result.\n   * Useful for inspecting the values returned by the permissions checks.\n   * Note, this will return debug information for *all* entities\n   * that match the query's `where` clauses.\n   *\n   * Requires a user/guest context to be set with `asUser`,\n   * since permissions checks are user-specific.\n   *\n   * Accepts an optional configuration object with a `rules` key.\n   * The provided rules will override the rules in the database for the query.\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *  await db.asUser({ guest: true }).debugQuery(\n   *    { goals: {} },\n   *    { rules: { goals: { allow: { read: \"auth.id != null\" } } }\n   *  )\n   */\n  debugQuery = async <Q extends ValidQuery<Q, Schema>>(\n    query: Q,\n    opts?: { rules?: any; ruleParams?: { [key: string]: any } },\n  ): Promise<{\n    result: InstaQLResponse<Schema, Q, Config['useDateObjects']>;\n    checkResults: DebugCheckResult[];\n  }> => {\n    if (query && opts && 'ruleParams' in opts) {\n      query = { $$ruleParams: opts['ruleParams'], ...query };\n    }\n\n    const response = await jsonFetch(\n      `${this.config.apiURI}/admin/query_perms_check`,\n      {\n        method: 'POST',\n        headers: authorizedHeaders(this.config, this.impersonationOpts),\n        body: JSON.stringify({ query, 'rules-override': opts?.rules }),\n      },\n    );\n\n    return {\n      result: response.result,\n      checkResults: response['check-results'],\n    };\n  };\n\n  /**\n   * Like `transact`, but does not write to the database.\n   * Returns debugging information for permissions checks.\n   * Useful for inspecting the values returned by the permissions checks.\n   *\n   * Requires a user/guest context to be set with `asUser`,\n   * since permissions checks are user-specific.\n   *\n   * Accepts an optional configuration object with a `rules` key.\n   * The provided rules will override the rules in the database for the duration of the transaction.\n   *\n   * @example\n   *   const goalId = id();\n   *   db.asUser({ guest: true }).debugTransact(\n   *      [db.tx.goals[goalId].update({title: \"Get fit\"})],\n   *      { rules: { goals: { allow: { update: \"auth.id != null\" } } }\n   *   )\n   */\n  debugTransact = (\n    inputChunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n    opts?: { rules?: any },\n  ): Promise<DebugTransactResult> => {\n    return jsonFetch(`${this.config.apiURI}/admin/transact_perms_check`, {\n      method: 'POST',\n      headers: authorizedHeaders(this.config, this.impersonationOpts),\n      body: JSON.stringify({\n        steps: steps(inputChunks),\n        'rules-override': opts?.rules,\n        // @ts-expect-error because we're using a private API (for now)\n        'dangerously-commit-tx': opts?.__dangerouslyCommit,\n      }),\n    });\n  };\n}\n\nexport {\n  init,\n  init_experimental,\n  id,\n  tx,\n  lookup,\n  i,\n\n  // error\n  InstantAPIError,\n\n  // types\n  type Config,\n  type ImpersonationOpts,\n  type TransactionChunk,\n  type DebugCheckResult,\n  type InstantAdminDatabase,\n\n  // core types\n  type User,\n  type InstaQLParams,\n  type ValidQuery,\n  type Query,\n\n  // query types\n  type QueryResponse,\n  type InstaQLResponse,\n  type InstantQuery,\n  type InstantUnknownSchemaDef,\n  type InstantQueryResult,\n  type InstantSchema,\n  type InstantSchemaDatabase,\n  type IInstantDatabase,\n  type InstantObject,\n  type InstantEntity,\n  type BackwardsCompatibleSchema,\n  type InstaQLFields,\n  type SubscribeQueryCallback,\n  type SubscribeQueryResponse,\n  type SubscribeQueryPayload,\n  type SubscriptionReadyState,\n\n  // schema types\n  type AttrsDefs,\n  type CardinalityKind,\n  type DataAttrDef,\n  type EntitiesDef,\n  type EntitiesWithLinks,\n  type EntityDef,\n  type InstantGraph,\n  type LinkAttrDef,\n  type LinkDef,\n  type LinksDef,\n  type ResolveAttrs,\n  type RoomsOf,\n  type PresenceOf,\n  type RoomsDef,\n  type RoomHandle,\n  type ValueTypes,\n  type InstantSchemaDef,\n  type InstantUnknownSchema,\n  type InstaQLEntity,\n  type InstaQLResult,\n  type InstaQLEntitySubquery,\n  type InstantRules,\n  type UpdateParams,\n  type LinkParams,\n\n  // storage types\n  type FileOpts,\n  type UploadFileResponse,\n  type DeleteFileResponse,\n  type DeleteManyFileResponse,\n\n  // error types\n  type InstantIssue,\n};\n"]}