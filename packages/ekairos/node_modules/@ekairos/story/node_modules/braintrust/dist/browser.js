"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; } var _class; var _class2; var _class3; var _class4; var _class5; var _class6; var _class7; var _class8; var _class9; var _class10; var _class11; var _class12; var _class13;var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/isomorph.ts
var DefaultAsyncLocalStorage = class {
  constructor() {
  }
  enterWith(_) {
  }
  run(_, callback) {
    return callback();
  }
  getStore() {
    return void 0;
  }
};
var iso = {
  getRepoInfo: async (_settings) => void 0,
  getPastNAncestors: async () => [],
  getEnv: (_name) => void 0,
  getCallerLocation: () => void 0,
  newAsyncLocalStorage: () => new DefaultAsyncLocalStorage(),
  processOn: (_0, _1) => {
  }
};
var isomorph_default = iso;

// src/logger.ts
var _uuid = require('uuid'); var uuid3 = _interopRequireWildcard(_uuid); var uuid2 = _interopRequireWildcard(_uuid); var uuid = _interopRequireWildcard(_uuid);

// src/queue.ts
var DEFAULT_QUEUE_SIZE = 15e3;
var Queue = (_class = class {
  __init() {this.items = []}
  
  __init2() {this.enforceSizeLimit = false}
  constructor(maxSize) {;_class.prototype.__init.call(this);_class.prototype.__init2.call(this);
    if (maxSize < 1) {
      console.warn(
        `maxSize ${maxSize} is <1, using default ${DEFAULT_QUEUE_SIZE}`
      );
      maxSize = DEFAULT_QUEUE_SIZE;
    }
    this.maxSize = maxSize;
  }
  /**
   * Set queue size limit enforcement. When enabled, the queue will drop new items
   * when it reaches maxSize. When disabled (default), the queue can grow unlimited.
   */
  enforceQueueSizeLimit(enforce) {
    this.enforceSizeLimit = enforce;
  }
  push(...items) {
    const dropped = [];
    for (const item of items) {
      if (!this.enforceSizeLimit) {
        this.items.push(item);
      } else {
        if (this.items.length >= this.maxSize) {
          dropped.push(item);
        } else {
          this.items.push(item);
        }
      }
    }
    return dropped;
  }
  peek() {
    return this.items[0];
  }
  drain() {
    const items = [...this.items];
    this.items = [];
    return items;
  }
  clear() {
    this.items = [];
  }
  length() {
    return this.items.length;
  }
  get capacity() {
    return this.maxSize;
  }
}, _class);

// util/db_fields.ts
var TRANSACTION_ID_FIELD = "_xact_id";
var IS_MERGE_FIELD = "_is_merge";
var AUDIT_SOURCE_FIELD = "_audit_source";
var AUDIT_METADATA_FIELD = "_audit_metadata";
var VALID_SOURCES = ["app", "api", "external"];
var PARENT_ID_FIELD = "_parent_id";

// util/span_identifier_v3.ts


// util/span_identifier_v2.ts


// util/span_identifier_v1.ts

var _v3 = require('zod/v3');
function tryMakeUuid(s) {
  try {
    const ret = uuid.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER = 1;
var INVALID_ENCODING_ERRMSG = "SpanComponents string is not properly encoded. This may be due to a version mismatch between the SDK library used to export the span and the library used to decode it. Please make sure you are using the same SDK version across the board";
var SpanObjectTypeV1 = /* @__PURE__ */ ((SpanObjectTypeV12) => {
  SpanObjectTypeV12[SpanObjectTypeV12["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV12[SpanObjectTypeV12["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV12;
})(SpanObjectTypeV1 || {});
var SpanObjectTypeV1EnumSchema = _v3.z.nativeEnum(SpanObjectTypeV1);
var SpanRowIdsV1 = class {
  
  
  
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV1 = class _SpanComponentsV1 {
  
  
  
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.rowIds = args.rowIds;
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER,
        this.objectType,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid(
      this.objectId
    );
    if (!objectIdIsUUID) {
      throw new Error("object_id component must be a valid UUID");
    }
    allBuffers.push(objectIdBytes);
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV1EnumSchema.parse(rawBytes[1]);
      if (![0, 1].includes(rawBytes[2])) {
        throw new Error();
      }
      if (![0, 1].includes(rawBytes[3])) {
        throw new Error();
      }
      const hasRowId = rawBytes[2] == 1;
      const rowIdIsUUID = rawBytes[3] == 1;
      const objectId = uuid.stringify(rawBytes.subarray(4, 20));
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        const spanId = uuid.stringify(rawBytes.subarray(20, 36));
        const rootSpanId = uuid.stringify(rawBytes.subarray(36, 52));
        const rowId = rowIdIsUUID ? uuid.stringify(rawBytes.subarray(52)) : rawBytes.subarray(52).toString("utf-8");
        return new SpanRowIdsV1({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV1({ objectType, objectId, rowIds });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG);
    }
  }
  objectIdFields() {
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      rowIds: _optionalChain([this, 'access', _2 => _2.rowIds, 'optionalAccess', _3 => _3.toObject, 'call', _4 => _4()])
    };
  }
};

// util/span_identifier_v2.ts

function tryMakeUuid2(s) {
  try {
    const ret = uuid2.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: Buffer.from(ret), isUUID: true };
  } catch (e) {
    return { bytes: Buffer.from(s, "utf-8"), isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER2 = 2;
var INVALID_ENCODING_ERRMSG2 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER2}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var INTEGER_ENCODING_NUM_BYTES = 4;
var SpanObjectTypeV2 = /* @__PURE__ */ ((SpanObjectTypeV22) => {
  SpanObjectTypeV22[SpanObjectTypeV22["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV22[SpanObjectTypeV22["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  return SpanObjectTypeV22;
})(SpanObjectTypeV2 || {});
var SpanObjectTypeV2EnumSchema = _v3.z.nativeEnum(SpanObjectTypeV2);
var SpanRowIdsV2 = class {
  
  
  
  constructor(args) {
    this.rowId = args.rowId;
    this.spanId = args.spanId;
    this.rootSpanId = args.rootSpanId;
    if (!this.rowId) {
      throw new Error("rowId must be nonempty string");
    }
    if (!this.spanId) {
      throw new Error("spanId must be nonempty string");
    }
    if (!this.rootSpanId) {
      throw new Error("rootSpanId must be nonempty string");
    }
  }
  toObject() {
    return {
      rowId: this.rowId,
      spanId: this.spanId,
      rootSpanId: this.rootSpanId
    };
  }
};
var SpanComponentsV2 = class _SpanComponentsV2 {
  
  
  
  
  constructor(args) {
    this.objectType = args.objectType;
    this.objectId = args.objectId;
    this.computeObjectMetadataArgs = args.computeObjectMetadataArgs;
    this.rowIds = args.rowIds;
    if (!(this.objectId || this.computeObjectMetadataArgs)) {
      throw new Error(
        "Must provide either objectId or computeObjectMetadataArgs"
      );
    }
  }
  toStr() {
    const allBuffers = [];
    const { bytes: rowIdBytes, isUUID: rowIdIsUUID } = this.rowIds ? tryMakeUuid2(this.rowIds.rowId) : { bytes: Buffer.from(""), isUUID: false };
    allBuffers.push(
      Buffer.from([
        ENCODING_VERSION_NUMBER2,
        this.objectType,
        this.objectId ? 1 : 0,
        this.computeObjectMetadataArgs ? 1 : 0,
        this.rowIds ? 1 : 0,
        rowIdIsUUID ? 1 : 0
      ])
    );
    if (this.objectId) {
      const { bytes: objectIdBytes, isUUID: objectIdIsUUID } = tryMakeUuid2(
        this.objectId
      );
      if (!objectIdIsUUID) {
        throw new Error("object_id component must be a valid UUID");
      }
      allBuffers.push(objectIdBytes);
    }
    if (this.computeObjectMetadataArgs) {
      const computeObjectMetadataBytes = Buffer.from(
        JSON.stringify(this.computeObjectMetadataArgs),
        "utf-8"
      );
      const serializedLenBytes = Buffer.alloc(INTEGER_ENCODING_NUM_BYTES);
      serializedLenBytes.writeInt32BE(computeObjectMetadataBytes.length);
      allBuffers.push(serializedLenBytes, computeObjectMetadataBytes);
    }
    if (this.rowIds) {
      const { bytes: spanIdBytes, isUUID: spanIdIsUUID } = tryMakeUuid2(
        this.rowIds.spanId
      );
      if (!spanIdIsUUID) {
        throw new Error("span_id component must be a valid UUID");
      }
      const { bytes: rootSpanIdBytes, isUUID: rootSpanIdIsUUID } = tryMakeUuid2(
        this.rowIds.rootSpanId
      );
      if (!rootSpanIdIsUUID) {
        throw new Error("root_span_id component must be a valid UUID");
      }
      allBuffers.push(spanIdBytes, rootSpanIdBytes, rowIdBytes);
    }
    return Buffer.concat(allBuffers).toString("base64");
  }
  static fromStr(s) {
    try {
      const rawBytes = Buffer.from(s, "base64");
      if (rawBytes[0] < ENCODING_VERSION_NUMBER2) {
        const spanComponentsOld = SpanComponentsV1.fromStr(s);
        return new _SpanComponentsV2({
          objectType: SpanObjectTypeV2EnumSchema.parse(
            spanComponentsOld.objectType
          ),
          objectId: spanComponentsOld.objectId,
          rowIds: spanComponentsOld.rowIds ? new SpanRowIdsV2({
            rowId: spanComponentsOld.rowIds.rowId,
            spanId: spanComponentsOld.rowIds.spanId,
            rootSpanId: spanComponentsOld.rowIds.rootSpanId
          }) : void 0
        });
      }
      if (rawBytes[0] !== ENCODING_VERSION_NUMBER2) {
        throw new Error();
      }
      const objectType = SpanObjectTypeV2EnumSchema.parse(rawBytes[1]);
      for (let i = 2; i < 6; ++i) {
        if (![0, 1].includes(rawBytes[i])) {
          throw new Error();
        }
      }
      const hasObjectId = rawBytes[2] == 1;
      const hasComputeObjectMetadataArgs = rawBytes[3] == 1;
      const hasRowId = rawBytes[4] == 1;
      const rowIdIsUUID = rawBytes[5] == 1;
      let byteCursor = 6;
      let objectId = void 0;
      if (hasObjectId) {
        const nextByteCursor = byteCursor + 16;
        objectId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
      }
      let computeObjectMetadataArgs;
      if (hasComputeObjectMetadataArgs) {
        let nextByteCursor = byteCursor + INTEGER_ENCODING_NUM_BYTES;
        const serializedLenBytes = rawBytes.readInt32BE(byteCursor);
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + serializedLenBytes;
        computeObjectMetadataArgs = JSON.parse(
          rawBytes.subarray(byteCursor, nextByteCursor).toString("utf-8")
        );
        byteCursor = nextByteCursor;
      }
      const rowIds = (() => {
        if (!hasRowId) {
          return void 0;
        }
        let nextByteCursor = byteCursor + 16;
        const spanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        nextByteCursor = byteCursor + 16;
        const rootSpanId = uuid2.stringify(
          rawBytes.subarray(byteCursor, nextByteCursor)
        );
        byteCursor = nextByteCursor;
        const rowId = rowIdIsUUID ? uuid2.stringify(rawBytes.subarray(byteCursor)) : rawBytes.subarray(byteCursor).toString("utf-8");
        return new SpanRowIdsV2({ rowId, spanId, rootSpanId });
      })();
      return new _SpanComponentsV2({
        objectType,
        objectId,
        computeObjectMetadataArgs,
        rowIds
      });
    } catch (e) {
      throw new Error(INVALID_ENCODING_ERRMSG2);
    }
  }
  objectIdFields() {
    if (!this.objectId) {
      throw new Error(
        "Impossible: cannot invoke `object_id_fields` unless SpanComponentsV2 is initialized with an `object_id`"
      );
    }
    switch (this.objectType) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.objectId };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.objectId, log_id: "g" };
      default:
        throw new Error("Impossible");
    }
  }
  toObject() {
    return {
      objectType: this.objectType,
      objectId: this.objectId,
      computeObjectMetadataArgs: this.computeObjectMetadataArgs,
      rowIds: _optionalChain([this, 'access', _5 => _5.rowIds, 'optionalAccess', _6 => _6.toObject, 'call', _7 => _7()])
    };
  }
};

// util/span_identifier_v3.ts


// util/bytes.ts
function concatUint8Arrays(...arrays) {
  const totalLength = arrays.reduce((acc, arr) => acc + arr.length, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  for (const arr of arrays) {
    result.set(arr, offset);
    offset += arr.length;
  }
  return result;
}
function uint8ArrayToBase64(uint8Array) {
  let binary = "";
  for (let i = 0; i < uint8Array.length; i++) {
    binary += String.fromCharCode(uint8Array[i]);
  }
  return btoa(binary);
}
function base64ToUint8Array(base64) {
  const binary = atob(base64);
  const uint8Array = new Uint8Array(binary.length);
  for (let i = 0; i < binary.length; i++) {
    uint8Array[i] = binary.charCodeAt(i);
  }
  return uint8Array;
}
function uint8ArrayToString(uint8Array) {
  const decoder = new TextDecoder("utf-8");
  return decoder.decode(uint8Array);
}
function stringToUint8Array(str) {
  const encoder = new TextEncoder();
  return encoder.encode(str);
}

// util/span_identifier_v3.ts
function tryMakeUuid3(s) {
  try {
    const ret = uuid3.parse(s);
    if (ret.length !== 16) {
      throw new Error();
    }
    return { bytes: new Uint8Array(ret), isUUID: true };
  } catch (e2) {
    return { bytes: void 0, isUUID: false };
  }
}
var ENCODING_VERSION_NUMBER3 = 3;
var INVALID_ENCODING_ERRMSG3 = `SpanComponents string is not properly encoded. This library only supports encoding versions up to ${ENCODING_VERSION_NUMBER3}. Please make sure the SDK library used to decode the SpanComponents is at least as new as any library used to encode it.`;
var SpanObjectTypeV3 = /* @__PURE__ */ ((SpanObjectTypeV32) => {
  SpanObjectTypeV32[SpanObjectTypeV32["EXPERIMENT"] = 1] = "EXPERIMENT";
  SpanObjectTypeV32[SpanObjectTypeV32["PROJECT_LOGS"] = 2] = "PROJECT_LOGS";
  SpanObjectTypeV32[SpanObjectTypeV32["PLAYGROUND_LOGS"] = 3] = "PLAYGROUND_LOGS";
  return SpanObjectTypeV32;
})(SpanObjectTypeV3 || {});
var spanObjectTypeV3EnumSchema = _v3.z.nativeEnum(SpanObjectTypeV3);
function spanObjectTypeV3ToString(objectType) {
  switch (objectType) {
    case 1 /* EXPERIMENT */:
      return "experiment";
    case 2 /* PROJECT_LOGS */:
      return "project_logs";
    case 3 /* PLAYGROUND_LOGS */:
      return "playground_logs";
    default:
      const x = objectType;
      throw new Error(`Unknown SpanObjectTypeV3: ${x}`);
  }
}
var InternalSpanComponentUUIDFields = /* @__PURE__ */ ((InternalSpanComponentUUIDFields2) => {
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["OBJECT_ID"] = 1] = "OBJECT_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROW_ID"] = 2] = "ROW_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["SPAN_ID"] = 3] = "SPAN_ID";
  InternalSpanComponentUUIDFields2[InternalSpanComponentUUIDFields2["ROOT_SPAN_ID"] = 4] = "ROOT_SPAN_ID";
  return InternalSpanComponentUUIDFields2;
})(InternalSpanComponentUUIDFields || {});
var internalSpanComponentUUIDFieldsEnumSchema = _v3.z.nativeEnum(
  InternalSpanComponentUUIDFields
);
var _INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME = {
  [1 /* OBJECT_ID */]: "object_id",
  [2 /* ROW_ID */]: "row_id",
  [3 /* SPAN_ID */]: "span_id",
  [4 /* ROOT_SPAN_ID */]: "root_span_id"
};
var spanComponentsV3Schema = _v3.z.object({
  object_type: spanObjectTypeV3EnumSchema,
  // TODO(manu): We should have a more elaborate zod schema for
  // `propagated_event`. This will required zod-ifying the contents of
  // sdk/js/util/object.ts.
  propagated_event: _v3.z.record(_v3.z.unknown()).nullish()
}).and(
  _v3.z.union([
    // Must provide one or the other.
    _v3.z.object({
      object_id: _v3.z.string().nullish(),
      compute_object_metadata_args: _v3.z.optional(_v3.z.null())
    }),
    _v3.z.object({
      object_id: _v3.z.optional(_v3.z.null()),
      compute_object_metadata_args: _v3.z.record(_v3.z.unknown())
    })
  ])
).and(
  _v3.z.union([
    // Either all of these must be provided or none.
    _v3.z.object({
      row_id: _v3.z.string(),
      span_id: _v3.z.string(),
      root_span_id: _v3.z.string()
    }),
    _v3.z.object({
      row_id: _v3.z.optional(_v3.z.null()),
      span_id: _v3.z.optional(_v3.z.null()),
      root_span_id: _v3.z.optional(_v3.z.null())
    })
  ])
);
var SpanComponentsV3 = class _SpanComponentsV3 {
  constructor(data) {
    this.data = data;
  }
  toStr() {
    const jsonObj = {
      compute_object_metadata_args: this.data.compute_object_metadata_args || void 0,
      propagated_event: this.data.propagated_event || void 0
    };
    const allBuffers = [];
    allBuffers.push(
      new Uint8Array([ENCODING_VERSION_NUMBER3, this.data.object_type])
    );
    const uuidEntries = [];
    function addUuidField(origVal, fieldId) {
      const ret = tryMakeUuid3(origVal);
      if (ret.isUUID) {
        uuidEntries.push(
          concatUint8Arrays(new Uint8Array([fieldId]), ret.bytes)
        );
      } else {
        jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = origVal;
      }
    }
    if (this.data.object_id) {
      addUuidField(
        this.data.object_id,
        1 /* OBJECT_ID */
      );
    }
    if (this.data.row_id) {
      addUuidField(this.data.row_id, 2 /* ROW_ID */);
    }
    if (this.data.span_id) {
      addUuidField(this.data.span_id, 3 /* SPAN_ID */);
    }
    if (this.data.root_span_id) {
      addUuidField(
        this.data.root_span_id,
        4 /* ROOT_SPAN_ID */
      );
    }
    if (uuidEntries.length > 255) {
      throw new Error("Impossible: too many UUID entries to encode");
    }
    allBuffers.push(new Uint8Array([uuidEntries.length]));
    allBuffers.push(...uuidEntries);
    if (Object.keys(jsonObj).length > 0) {
      allBuffers.push(stringToUint8Array(JSON.stringify(jsonObj)));
    }
    return uint8ArrayToBase64(concatUint8Arrays(...allBuffers));
  }
  static fromStr(s) {
    try {
      const rawBytes = base64ToUint8Array(s);
      const jsonObj = {};
      if (rawBytes[0] < ENCODING_VERSION_NUMBER3) {
        const spanComponentsOld = SpanComponentsV2.fromStr(s);
        jsonObj["object_type"] = spanComponentsOld.objectType;
        jsonObj["object_id"] = spanComponentsOld.objectId;
        jsonObj["compute_object_metadata_args"] = spanComponentsOld.computeObjectMetadataArgs;
        if (spanComponentsOld.rowIds) {
          jsonObj["row_id"] = spanComponentsOld.rowIds.rowId;
          jsonObj["span_id"] = spanComponentsOld.rowIds.spanId;
          jsonObj["root_span_id"] = spanComponentsOld.rowIds.rootSpanId;
        }
      } else {
        jsonObj["object_type"] = rawBytes[1];
        const numUuidEntries = rawBytes[2];
        let byteOffset = 3;
        for (let i = 0; i < numUuidEntries; ++i) {
          const fieldId = internalSpanComponentUUIDFieldsEnumSchema.parse(
            rawBytes[byteOffset]
          );
          const fieldBytes = rawBytes.subarray(byteOffset + 1, byteOffset + 17);
          byteOffset += 17;
          jsonObj[_INTERNAL_SPAN_COMPONENT_UUID_FIELDS_ID_TO_NAME[fieldId]] = uuid3.stringify(fieldBytes);
        }
        if (byteOffset < rawBytes.length) {
          const remainingJsonObj = JSON.parse(
            uint8ArrayToString(rawBytes.subarray(byteOffset))
          );
          Object.assign(jsonObj, remainingJsonObj);
        }
      }
      return _SpanComponentsV3.fromJsonObj(jsonObj);
    } catch (e3) {
      throw new Error(INVALID_ENCODING_ERRMSG3);
    }
  }
  objectIdFields() {
    if (!this.data.object_id) {
      throw new Error(
        "Impossible: cannot invoke `objectIdFields` unless SpanComponentsV3 is initialized with an `object_id`"
      );
    }
    switch (this.data.object_type) {
      case 1 /* EXPERIMENT */:
        return { experiment_id: this.data.object_id };
      case 2 /* PROJECT_LOGS */:
        return { project_id: this.data.object_id, log_id: "g" };
      case 3 /* PLAYGROUND_LOGS */:
        return { prompt_session_id: this.data.object_id, log_id: "x" };
      default:
        const _ = this.data.object_type;
        throw new Error("Impossible");
    }
  }
  async export() {
    return this.toStr();
  }
  static fromJsonObj(jsonObj) {
    return new _SpanComponentsV3(spanComponentsV3Schema.parse(jsonObj));
  }
};

// util/type_util.ts
function isObject(value) {
  return value instanceof Object && !(value instanceof Array);
}
function isArray(value) {
  return value instanceof Array;
}
function isObjectOrArray(value) {
  return value instanceof Object;
}

// util/object_util.ts
function mergeDictsWithPaths({
  mergeInto,
  mergeFrom,
  mergePaths
}) {
  const mergePathsSerialized = new Set(
    mergePaths.map((p) => JSON.stringify(p))
  );
  return mergeDictsWithPathsHelper({
    mergeInto,
    mergeFrom,
    path: [],
    mergePaths: mergePathsSerialized
  });
}
function mergeDictsWithPathsHelper({
  mergeInto,
  mergeFrom,
  path,
  mergePaths
}) {
  Object.entries(mergeFrom).forEach(([k, mergeFromV]) => {
    const fullPath = path.concat([k]);
    const fullPathSerialized = JSON.stringify(fullPath);
    const mergeIntoV = recordFind(mergeInto, k);
    if (isObject(mergeIntoV) && isObject(mergeFromV) && !mergePaths.has(fullPathSerialized)) {
      mergeDictsWithPathsHelper({
        mergeInto: mergeIntoV,
        mergeFrom: mergeFromV,
        path: fullPath,
        mergePaths
      });
    } else {
      mergeInto[k] = mergeFromV;
    }
  });
  return mergeInto;
}
function mergeDicts(mergeInto, mergeFrom) {
  return mergeDictsWithPaths({ mergeInto, mergeFrom, mergePaths: [] });
}
function mapAt(m, k) {
  const ret = m.get(k);
  if (ret === void 0) {
    throw new Error(`Map does not contain key ${k}`);
  }
  return ret;
}
function recordFind(m, k) {
  return m[k];
}
function getObjValueByPath(row, path) {
  let curr = row;
  for (const p of path) {
    if (!isObjectOrArray(curr)) {
      return null;
    }
    curr = curr[p];
  }
  return curr;
}

// util/graph_util.ts
function depthFirstSearch(args) {
  const { graph, firstVisitF, lastVisitF } = args;
  for (const vs of graph.values()) {
    for (const v of vs.values()) {
      if (!graph.has(v)) {
        throw new Error(`Outgoing vertex ${v} must be a key in the graph`);
      }
    }
  }
  const firstVisitedVertices = /* @__PURE__ */ new Set();
  const visitationOrder = _nullishCoalesce(args.visitationOrder, () => ( [...graph.keys()]));
  const events = visitationOrder.map((vertex) => ({ eventType: "first", vertex, extras: {} })).reverse();
  while (events.length) {
    const { eventType, vertex, extras } = events.pop();
    if (eventType === "last") {
      _optionalChain([lastVisitF, 'optionalCall', _8 => _8(vertex)]);
      continue;
    }
    if (firstVisitedVertices.has(vertex)) {
      continue;
    }
    firstVisitedVertices.add(vertex);
    _optionalChain([firstVisitF, 'optionalCall', _9 => _9(vertex, { parentVertex: extras.parentVertex })]);
    events.push({ eventType: "last", vertex, extras: {} });
    mapAt(graph, vertex).forEach((child) => {
      events.push({
        eventType: "first",
        vertex: child,
        extras: { parentVertex: vertex }
      });
    });
  }
}
function undirectedConnectedComponents(graph) {
  const directedGraph = new Map(
    [...graph.vertices].map((v) => [v, /* @__PURE__ */ new Set()])
  );
  for (const [i, j] of graph.edges) {
    mapAt(directedGraph, i).add(j);
    mapAt(directedGraph, j).add(i);
  }
  let labelCounter = 0;
  const vertexLabels = /* @__PURE__ */ new Map();
  const firstVisitF = (vertex, args) => {
    const label = _optionalChain([args, 'optionalAccess', _10 => _10.parentVertex]) !== void 0 ? mapAt(vertexLabels, _optionalChain([args, 'optionalAccess', _11 => _11.parentVertex])) : labelCounter++;
    vertexLabels.set(vertex, label);
  };
  depthFirstSearch({ graph: directedGraph, firstVisitF });
  const output = Array.from({ length: labelCounter }).map(() => []);
  for (const [vertex, label] of vertexLabels.entries()) {
    output[label].push(vertex);
  }
  return output;
}
function topologicalSort(graph, visitationOrder) {
  const reverseOrdering = [];
  const lastVisitF = (vertex) => {
    reverseOrdering.push(vertex);
  };
  depthFirstSearch({ graph, lastVisitF, visitationOrder });
  return reverseOrdering.reverse();
}

// util/merge_row_batch.ts
function generateMergedRowKey(row, useParentIdForId) {
  return JSON.stringify(
    [
      "org_id",
      "project_id",
      "experiment_id",
      "dataset_id",
      "prompt_session_id",
      "log_id",
      _nullishCoalesce(useParentIdForId, () => ( false)) ? PARENT_ID_FIELD : "id"
    ].map((k) => row[k])
  );
}
var MERGE_ROW_SKIP_FIELDS = [
  "created",
  "span_id",
  "root_span_id",
  "span_parents",
  "_parent_id"
  // TODO: handle merge paths.
];
function popMergeRowSkipFields(row) {
  const popped = {};
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    if (field in row) {
      popped[field] = row[field];
      delete row[field];
    }
  }
  return popped;
}
function restoreMergeRowSkipFields(row, skipFields) {
  for (const field of MERGE_ROW_SKIP_FIELDS) {
    delete row[field];
    if (field in skipFields) {
      row[field] = skipFields[field];
    }
  }
}
function mergeRowBatch(rows) {
  for (const row of rows) {
    if (row.id === void 0) {
      throw new Error(
        "Logged row is missing an id. This is an internal braintrust error. Please contact us at info@braintrust.dev for help"
      );
    }
  }
  const rowGroups = /* @__PURE__ */ new Map();
  for (const row of rows) {
    const key = generateMergedRowKey(row);
    const existingRow = rowGroups.get(key);
    if (existingRow !== void 0 && row[IS_MERGE_FIELD]) {
      const skipFields = popMergeRowSkipFields(existingRow);
      const preserveNoMerge = !existingRow[IS_MERGE_FIELD];
      mergeDicts(existingRow, row);
      restoreMergeRowSkipFields(existingRow, skipFields);
      if (preserveNoMerge) {
        delete existingRow[IS_MERGE_FIELD];
      }
    } else {
      rowGroups.set(key, row);
    }
  }
  const merged = [...rowGroups.values()];
  const rowToLabel = new Map(
    merged.map((r, i) => [generateMergedRowKey(r), i])
  );
  const graph = new Map(
    Array.from({ length: merged.length }).map((_, i) => [i, /* @__PURE__ */ new Set()])
  );
  merged.forEach((r, i) => {
    const parentId = r[PARENT_ID_FIELD];
    if (!parentId) {
      return;
    }
    const parentRowKey = generateMergedRowKey(
      r,
      true
      /* useParentIdForId */
    );
    const parentLabel = rowToLabel.get(parentRowKey);
    if (parentLabel !== void 0) {
      mapAt(graph, parentLabel).add(i);
    }
  });
  const connectedComponents = undirectedConnectedComponents({
    vertices: new Set(graph.keys()),
    edges: new Set(
      [...graph.entries()].flatMap(
        ([k, vs]) => [...vs].map((v) => {
          const ret = [k, v];
          return ret;
        })
      )
    )
  });
  const buckets = connectedComponents.map(
    (cc) => topologicalSort(
      graph,
      cc
      /* visitationOrder */
    )
  );
  return buckets.map((bucket) => bucket.map((i) => merged[i]));
}
function batchItems(args) {
  let { items } = args;
  const batchMaxNumItems = _nullishCoalesce(args.batchMaxNumItems, () => ( Number.POSITIVE_INFINITY));
  const batchMaxNumBytes = _nullishCoalesce(args.batchMaxNumBytes, () => ( Number.POSITIVE_INFINITY));
  const output = [];
  let nextItems = [];
  let batchSet = [];
  let batch = [];
  let batchLen = 0;
  function addToBatch(item) {
    batch.push(item);
    batchLen += item.length;
  }
  function flushBatch() {
    batchSet.push(batch);
    batch = [];
    batchLen = 0;
  }
  while (items.length) {
    for (const bucket of items) {
      let i = 0;
      for (const item of bucket) {
        if (batch.length === 0 || item.length + batchLen < batchMaxNumBytes && batch.length < batchMaxNumItems) {
          addToBatch(item);
        } else if (i === 0) {
          flushBatch();
          addToBatch(item);
        } else {
          break;
        }
        ++i;
      }
      if (i < bucket.length) {
        nextItems.push(bucket.slice(i));
      }
      if (batchLen >= batchMaxNumBytes || batch.length > batchMaxNumItems) {
        flushBatch();
      }
    }
    if (batch.length) {
      flushBatch();
    }
    if (batchSet.length) {
      output.push(batchSet);
      batchSet = [];
    }
    items = nextItems;
    nextItems = [];
  }
  return output;
}

// util/object.ts
var DEFAULT_IS_LEGACY_DATASET = false;
function ensureDatasetRecord(r, legacy) {
  if (legacy) {
    return ensureLegacyDatasetRecord(r);
  } else {
    return ensureNewDatasetRecord(r);
  }
}
function ensureLegacyDatasetRecord(r) {
  if ("output" in r) {
    return r;
  }
  const row = {
    ...r,
    output: r.expected
  };
  delete row.expected;
  return row;
}
function ensureNewDatasetRecord(r) {
  if ("expected" in r) {
    return r;
  }
  const row = {
    ...r,
    tags: null,
    expected: r.output
  };
  delete row.output;
  return row;
}

// util/json_util.ts
function constructJsonArray(items) {
  return `[${items.join(",")}]`;
}

// util/string_util.ts
function _urljoin(...parts) {
  return parts.map(
    (x, i) => x.replace(/^\//, "").replace(i < parts.length - 1 ? /\/$/ : "", "")
  ).filter((x) => x.trim() !== "").join("/");
}

// util/git_fields.ts
function mergeGitMetadataSettings(s1, s2) {
  if (s1.collect === "all") {
    return s2;
  } else if (s2.collect === "all") {
    return s1;
  } else if (s1.collect === "none") {
    return s1;
  } else if (s2.collect === "none") {
    return s2;
  }
  const fields = (_nullishCoalesce(s1.fields, () => ( []))).filter((f) => (_nullishCoalesce(s2.fields, () => ( []))).includes(f));
  const collect = fields.length > 0 ? "some" : "none";
  return { collect, fields };
}

// util/xact-ids.ts
var TOP_BITS = BigInt("0x0DE1") << BigInt(48);
var MOD = BigInt(1) << BigInt(64);
var COPRIME = BigInt("205891132094649");
var COPRIME_INVERSE = BigInt("1522336535492693385");
function modularMultiply(value, prime) {
  return value * prime % MOD;
}
function prettifyXact(valueString) {
  const value = BigInt(valueString);
  const encoded = modularMultiply(value, COPRIME);
  return encoded.toString(16).padStart(16, "0");
}

// util/zod_util.ts


// src/generated_types.ts

var AclObjectType = _v3.z.union([
  _v3.z.enum([
    "organization",
    "project",
    "experiment",
    "dataset",
    "prompt",
    "prompt_session",
    "group",
    "role",
    "org_member",
    "project_log",
    "org_project"
  ]),
  _v3.z.null()
]);
var Permission = _v3.z.enum([
  "create",
  "read",
  "update",
  "delete",
  "create_acls",
  "read_acls",
  "update_acls",
  "delete_acls"
]);
var Acl = _v3.z.object({
  id: _v3.z.string().uuid(),
  object_type: AclObjectType.and(_v3.z.string()),
  object_id: _v3.z.string().uuid(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  group_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  permission: Permission.and(_v3.z.union([_v3.z.string(), _v3.z.null()])).optional(),
  restrict_object_type: AclObjectType.and(_v3.z.unknown()).optional(),
  role_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  _object_org_id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var AISecret = _v3.z.object({
  id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  updated_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  org_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  type: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional(),
  preview_secret: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var ResponseFormatJsonSchema = _v3.z.object({
  name: _v3.z.string(),
  description: _v3.z.string().optional(),
  schema: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.string()]).optional(),
  strict: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
});
var ResponseFormatNullish = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("json_object") }),
  _v3.z.object({
    type: _v3.z.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  _v3.z.object({ type: _v3.z.literal("text") }),
  _v3.z.null()
]);
var AnyModelParams = _v3.z.object({
  temperature: _v3.z.number().optional(),
  top_p: _v3.z.number().optional(),
  max_tokens: _v3.z.number(),
  max_completion_tokens: _v3.z.number().optional(),
  frequency_penalty: _v3.z.number().optional(),
  presence_penalty: _v3.z.number().optional(),
  response_format: ResponseFormatNullish.optional(),
  tool_choice: _v3.z.union([
    _v3.z.literal("auto"),
    _v3.z.literal("none"),
    _v3.z.literal("required"),
    _v3.z.object({
      type: _v3.z.literal("function"),
      function: _v3.z.object({ name: _v3.z.string() })
    })
  ]).optional(),
  function_call: _v3.z.union([
    _v3.z.literal("auto"),
    _v3.z.literal("none"),
    _v3.z.object({ name: _v3.z.string() })
  ]).optional(),
  n: _v3.z.number().optional(),
  stop: _v3.z.array(_v3.z.string()).optional(),
  reasoning_effort: _v3.z.enum(["minimal", "low", "medium", "high"]).optional(),
  verbosity: _v3.z.enum(["low", "medium", "high"]).optional(),
  top_k: _v3.z.number().optional(),
  stop_sequences: _v3.z.array(_v3.z.string()).optional(),
  max_tokens_to_sample: _v3.z.number().optional(),
  maxOutputTokens: _v3.z.number().optional(),
  topP: _v3.z.number().optional(),
  topK: _v3.z.number().optional(),
  use_cache: _v3.z.boolean().optional()
});
var ApiKey = _v3.z.object({
  id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  preview_name: _v3.z.string(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_email: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_given_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_family_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  org_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var AsyncScoringState = _v3.z.union([
  _v3.z.object({
    status: _v3.z.literal("enabled"),
    token: _v3.z.string(),
    function_ids: _v3.z.array(_v3.z.unknown()).min(1),
    skip_logging: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
  }),
  _v3.z.object({ status: _v3.z.literal("disabled") }),
  _v3.z.null(),
  _v3.z.null()
]);
var AsyncScoringControl = _v3.z.union([
  _v3.z.object({ kind: _v3.z.literal("score_update"), token: _v3.z.string() }),
  _v3.z.object({ kind: _v3.z.literal("state_override"), state: AsyncScoringState }),
  _v3.z.object({ kind: _v3.z.literal("state_force_reselect") }),
  _v3.z.object({ kind: _v3.z.literal("state_enabled_force_rescore") })
]);
var BraintrustAttachmentReference = _v3.z.object({
  type: _v3.z.literal("braintrust_attachment"),
  filename: _v3.z.string().min(1),
  content_type: _v3.z.string().min(1),
  key: _v3.z.string().min(1)
});
var ExternalAttachmentReference = _v3.z.object({
  type: _v3.z.literal("external_attachment"),
  filename: _v3.z.string().min(1),
  content_type: _v3.z.string().min(1),
  url: _v3.z.string().min(1)
});
var AttachmentReference = _v3.z.discriminatedUnion("type", [
  BraintrustAttachmentReference,
  ExternalAttachmentReference
]);
var UploadStatus = _v3.z.enum(["uploading", "done", "error"]);
var AttachmentStatus = _v3.z.object({
  upload_status: UploadStatus,
  error_message: _v3.z.string().optional()
});
var BraintrustModelParams = _v3.z.object({ use_cache: _v3.z.boolean() }).partial();
var CallEvent = _v3.z.union([
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("text_delta")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("reasoning_delta")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("json_delta")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("progress")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("error")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    data: _v3.z.string(),
    event: _v3.z.literal("console")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    event: _v3.z.literal("start"),
    data: _v3.z.literal("")
  }),
  _v3.z.object({
    id: _v3.z.string().optional(),
    event: _v3.z.literal("done"),
    data: _v3.z.literal("")
  })
]);
var ChatCompletionContentPartTextWithTitle = _v3.z.object({
  text: _v3.z.string().default(""),
  type: _v3.z.literal("text"),
  cache_control: _v3.z.object({ type: _v3.z.literal("ephemeral") }).optional()
});
var ChatCompletionContentPartImageWithTitle = _v3.z.object({
  image_url: _v3.z.object({
    url: _v3.z.string(),
    detail: _v3.z.union([_v3.z.literal("auto"), _v3.z.literal("low"), _v3.z.literal("high")]).optional()
  }),
  type: _v3.z.literal("image_url")
});
var ChatCompletionContentPart = _v3.z.union([
  ChatCompletionContentPartTextWithTitle,
  ChatCompletionContentPartImageWithTitle
]);
var ChatCompletionContentPartText = _v3.z.object({
  text: _v3.z.string().default(""),
  type: _v3.z.literal("text"),
  cache_control: _v3.z.object({ type: _v3.z.literal("ephemeral") }).optional()
});
var ChatCompletionMessageToolCall = _v3.z.object({
  id: _v3.z.string(),
  function: _v3.z.object({ arguments: _v3.z.string(), name: _v3.z.string() }),
  type: _v3.z.literal("function")
});
var ChatCompletionMessageReasoning = _v3.z.object({ id: _v3.z.string(), content: _v3.z.string() }).partial();
var ChatCompletionMessageParam = _v3.z.union([
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("system"),
    name: _v3.z.string().optional()
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPart)]),
    role: _v3.z.literal("user"),
    name: _v3.z.string().optional()
  }),
  _v3.z.object({
    role: _v3.z.literal("assistant"),
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText), _v3.z.null()]).optional(),
    function_call: _v3.z.object({ arguments: _v3.z.string(), name: _v3.z.string() }).optional(),
    name: _v3.z.string().optional(),
    tool_calls: _v3.z.array(ChatCompletionMessageToolCall).optional(),
    reasoning: _v3.z.array(ChatCompletionMessageReasoning).optional()
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("tool"),
    tool_call_id: _v3.z.string().default("")
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    name: _v3.z.string(),
    role: _v3.z.literal("function")
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("developer"),
    name: _v3.z.string().optional()
  }),
  _v3.z.object({
    role: _v3.z.literal("model"),
    content: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  })
]);
var ChatCompletionOpenAIMessageParam = _v3.z.union([
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("system"),
    name: _v3.z.string().optional()
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPart)]),
    role: _v3.z.literal("user"),
    name: _v3.z.string().optional()
  }),
  _v3.z.object({
    role: _v3.z.literal("assistant"),
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText), _v3.z.null()]).optional(),
    function_call: _v3.z.object({ arguments: _v3.z.string(), name: _v3.z.string() }).optional(),
    name: _v3.z.string().optional(),
    tool_calls: _v3.z.array(ChatCompletionMessageToolCall).optional(),
    reasoning: _v3.z.array(ChatCompletionMessageReasoning).optional()
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("tool"),
    tool_call_id: _v3.z.string().default("")
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    name: _v3.z.string(),
    role: _v3.z.literal("function")
  }),
  _v3.z.object({
    content: _v3.z.union([_v3.z.string(), _v3.z.array(ChatCompletionContentPartText)]),
    role: _v3.z.literal("developer"),
    name: _v3.z.string().optional()
  })
]);
var ChatCompletionTool = _v3.z.object({
  function: _v3.z.object({
    name: _v3.z.string(),
    description: _v3.z.string().optional(),
    parameters: _v3.z.object({}).partial().passthrough().optional()
  }),
  type: _v3.z.literal("function")
});
var CodeBundle = _v3.z.object({
  runtime_context: _v3.z.object({
    runtime: _v3.z.enum(["node", "python"]),
    version: _v3.z.string()
  }),
  location: _v3.z.union([
    _v3.z.object({
      type: _v3.z.literal("experiment"),
      eval_name: _v3.z.string(),
      position: _v3.z.union([
        _v3.z.object({ type: _v3.z.literal("task") }),
        _v3.z.object({ type: _v3.z.literal("scorer"), index: _v3.z.number().int().gte(0) })
      ])
    }),
    _v3.z.object({ type: _v3.z.literal("function"), index: _v3.z.number().int().gte(0) })
  ]),
  bundle_id: _v3.z.string(),
  preview: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var Dataset = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional()
});
var ObjectReferenceNullish = _v3.z.union([
  _v3.z.object({
    object_type: _v3.z.enum([
      "project_logs",
      "experiment",
      "dataset",
      "prompt",
      "function",
      "prompt_session"
    ]),
    object_id: _v3.z.string().uuid(),
    id: _v3.z.string(),
    _xact_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  }),
  _v3.z.null()
]);
var DatasetEvent = _v3.z.object({
  id: _v3.z.string(),
  _xact_id: _v3.z.string(),
  created: _v3.z.string().datetime({ offset: true }),
  _pagination_key: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  project_id: _v3.z.string().uuid(),
  dataset_id: _v3.z.string().uuid(),
  input: _v3.z.unknown().optional(),
  expected: _v3.z.unknown().optional(),
  metadata: _v3.z.union([
    _v3.z.object({ model: _v3.z.union([_v3.z.string(), _v3.z.null()]) }).partial().passthrough(),
    _v3.z.null()
  ]).optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  span_id: _v3.z.string(),
  root_span_id: _v3.z.string(),
  is_root: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var EnvVar = _v3.z.object({
  id: _v3.z.string().uuid(),
  object_type: _v3.z.enum(["organization", "project", "function"]),
  object_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  used: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var RepoInfo = _v3.z.union([
  _v3.z.object({
    commit: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    branch: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    tag: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    dirty: _v3.z.union([_v3.z.boolean(), _v3.z.null()]),
    author_name: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    author_email: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    commit_message: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    commit_time: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    git_diff: _v3.z.union([_v3.z.string(), _v3.z.null()])
  }).partial(),
  _v3.z.null()
]);
var Experiment = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  repo_info: RepoInfo.optional(),
  commit: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  base_exp_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  dataset_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  dataset_version: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  public: _v3.z.boolean(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional()
});
var SpanType = _v3.z.union([
  _v3.z.enum(["llm", "score", "function", "eval", "task", "tool"]),
  _v3.z.null()
]);
var SpanAttributes = _v3.z.union([
  _v3.z.object({ name: _v3.z.union([_v3.z.string(), _v3.z.null()]), type: SpanType }).partial().passthrough(),
  _v3.z.null()
]);
var ExperimentEvent = _v3.z.object({
  id: _v3.z.string(),
  _xact_id: _v3.z.string(),
  created: _v3.z.string().datetime({ offset: true }),
  _pagination_key: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  project_id: _v3.z.string().uuid(),
  experiment_id: _v3.z.string().uuid(),
  input: _v3.z.unknown().optional(),
  output: _v3.z.unknown().optional(),
  expected: _v3.z.unknown().optional(),
  error: _v3.z.unknown().optional(),
  scores: _v3.z.union([_v3.z.record(_v3.z.union([_v3.z.number(), _v3.z.null()])), _v3.z.null()]).optional(),
  metadata: _v3.z.union([
    _v3.z.object({ model: _v3.z.union([_v3.z.string(), _v3.z.null()]) }).partial().passthrough(),
    _v3.z.null()
  ]).optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  metrics: _v3.z.union([_v3.z.record(_v3.z.number()), _v3.z.null()]).optional(),
  context: _v3.z.union([
    _v3.z.object({
      caller_functionname: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      caller_filename: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      caller_lineno: _v3.z.union([_v3.z.number(), _v3.z.null()])
    }).partial().passthrough(),
    _v3.z.null()
  ]).optional(),
  span_id: _v3.z.string(),
  span_parents: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  root_span_id: _v3.z.string(),
  span_attributes: SpanAttributes.optional(),
  is_root: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  origin: ObjectReferenceNullish.optional()
});
var ExtendedSavedFunctionId = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("function"), id: _v3.z.string() }),
  _v3.z.object({ type: _v3.z.literal("global"), name: _v3.z.string() }),
  _v3.z.object({
    type: _v3.z.literal("slug"),
    project_id: _v3.z.string(),
    slug: _v3.z.string()
  })
]);
var PromptBlockDataNullish = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("completion"), content: _v3.z.string() }),
  _v3.z.object({
    type: _v3.z.literal("chat"),
    messages: _v3.z.array(ChatCompletionMessageParam),
    tools: _v3.z.string().optional()
  }),
  _v3.z.null()
]);
var ModelParams = _v3.z.union([
  _v3.z.object({
    use_cache: _v3.z.boolean(),
    temperature: _v3.z.number(),
    top_p: _v3.z.number(),
    max_tokens: _v3.z.number(),
    max_completion_tokens: _v3.z.number(),
    frequency_penalty: _v3.z.number(),
    presence_penalty: _v3.z.number(),
    response_format: ResponseFormatNullish,
    tool_choice: _v3.z.union([
      _v3.z.literal("auto"),
      _v3.z.literal("none"),
      _v3.z.literal("required"),
      _v3.z.object({
        type: _v3.z.literal("function"),
        function: _v3.z.object({ name: _v3.z.string() })
      })
    ]),
    function_call: _v3.z.union([
      _v3.z.literal("auto"),
      _v3.z.literal("none"),
      _v3.z.object({ name: _v3.z.string() })
    ]),
    n: _v3.z.number(),
    stop: _v3.z.array(_v3.z.string()),
    reasoning_effort: _v3.z.enum(["minimal", "low", "medium", "high"]),
    verbosity: _v3.z.enum(["low", "medium", "high"])
  }).partial().passthrough(),
  _v3.z.object({
    use_cache: _v3.z.boolean().optional(),
    max_tokens: _v3.z.number(),
    temperature: _v3.z.number(),
    top_p: _v3.z.number().optional(),
    top_k: _v3.z.number().optional(),
    stop_sequences: _v3.z.array(_v3.z.string()).optional(),
    max_tokens_to_sample: _v3.z.number().optional()
  }).passthrough(),
  _v3.z.object({
    use_cache: _v3.z.boolean(),
    temperature: _v3.z.number(),
    maxOutputTokens: _v3.z.number(),
    topP: _v3.z.number(),
    topK: _v3.z.number()
  }).partial().passthrough(),
  _v3.z.object({
    use_cache: _v3.z.boolean(),
    temperature: _v3.z.number(),
    topK: _v3.z.number()
  }).partial().passthrough(),
  _v3.z.object({ use_cache: _v3.z.boolean() }).partial().passthrough()
]);
var PromptOptionsNullish = _v3.z.union([
  _v3.z.object({ model: _v3.z.string(), params: ModelParams, position: _v3.z.string() }).partial(),
  _v3.z.null()
]);
var PromptParserNullish = _v3.z.union([
  _v3.z.object({
    type: _v3.z.literal("llm_classifier"),
    use_cot: _v3.z.boolean(),
    choice_scores: _v3.z.record(_v3.z.number().gte(0).lte(1))
  }),
  _v3.z.null()
]);
var SavedFunctionId = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("function"), id: _v3.z.string() }),
  _v3.z.object({ type: _v3.z.literal("global"), name: _v3.z.string() })
]);
var PromptDataNullish = _v3.z.union([
  _v3.z.object({
    prompt: PromptBlockDataNullish,
    options: PromptOptionsNullish,
    parser: PromptParserNullish,
    tool_functions: _v3.z.union([_v3.z.array(SavedFunctionId), _v3.z.null()]),
    origin: _v3.z.union([
      _v3.z.object({
        prompt_id: _v3.z.string(),
        project_id: _v3.z.string(),
        prompt_version: _v3.z.string()
      }).partial(),
      _v3.z.null()
    ])
  }).partial(),
  _v3.z.null()
]);
var FunctionTypeEnumNullish = _v3.z.union([
  _v3.z.enum(["llm", "scorer", "task", "tool"]),
  _v3.z.null()
]);
var FunctionIdRef = _v3.z.object({}).partial().passthrough();
var PromptBlockData = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("completion"), content: _v3.z.string() }),
  _v3.z.object({
    type: _v3.z.literal("chat"),
    messages: _v3.z.array(ChatCompletionMessageParam),
    tools: _v3.z.string().optional()
  })
]);
var GraphNode = _v3.z.union([
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("function"),
    function: FunctionIdRef
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("input")
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("output")
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("literal"),
    value: _v3.z.unknown().optional()
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("btql"),
    expr: _v3.z.string()
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("gate"),
    condition: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("aggregator")
  }),
  _v3.z.object({
    description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    position: _v3.z.union([_v3.z.object({ x: _v3.z.number(), y: _v3.z.number() }), _v3.z.null()]).optional(),
    type: _v3.z.literal("prompt_template"),
    prompt: PromptBlockData
  })
]);
var GraphEdge = _v3.z.object({
  source: _v3.z.object({ node: _v3.z.string().max(1024), variable: _v3.z.string() }),
  target: _v3.z.object({ node: _v3.z.string().max(1024), variable: _v3.z.string() }),
  purpose: _v3.z.enum(["control", "data", "messages"])
});
var GraphData = _v3.z.object({
  type: _v3.z.literal("graph"),
  nodes: _v3.z.record(GraphNode),
  edges: _v3.z.record(GraphEdge)
});
var FunctionData = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("prompt") }),
  _v3.z.object({
    type: _v3.z.literal("code"),
    data: _v3.z.union([
      _v3.z.object({ type: _v3.z.literal("bundle") }).and(CodeBundle),
      _v3.z.object({
        type: _v3.z.literal("inline"),
        runtime_context: _v3.z.object({
          runtime: _v3.z.enum(["node", "python"]),
          version: _v3.z.string()
        }),
        code: _v3.z.string()
      })
    ])
  }),
  GraphData,
  _v3.z.object({
    type: _v3.z.literal("remote_eval"),
    endpoint: _v3.z.string(),
    eval_name: _v3.z.string(),
    parameters: _v3.z.object({}).partial().passthrough()
  }),
  _v3.z.object({ type: _v3.z.literal("global"), name: _v3.z.string() })
]);
var Function = _v3.z.object({
  id: _v3.z.string().uuid(),
  _xact_id: _v3.z.string(),
  project_id: _v3.z.string().uuid(),
  log_id: _v3.z.literal("p"),
  org_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  slug: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  function_data: FunctionData,
  origin: _v3.z.union([
    _v3.z.object({
      object_type: AclObjectType.and(_v3.z.string()),
      object_id: _v3.z.string().uuid(),
      internal: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
    }),
    _v3.z.null()
  ]).optional(),
  function_schema: _v3.z.union([
    _v3.z.object({ parameters: _v3.z.unknown(), returns: _v3.z.unknown() }).partial(),
    _v3.z.null()
  ]).optional()
});
var FunctionFormat = _v3.z.enum(["llm", "code", "global", "graph"]);
var PromptData = _v3.z.object({
  prompt: PromptBlockDataNullish,
  options: PromptOptionsNullish,
  parser: PromptParserNullish,
  tool_functions: _v3.z.union([_v3.z.array(SavedFunctionId), _v3.z.null()]),
  origin: _v3.z.union([
    _v3.z.object({
      prompt_id: _v3.z.string(),
      project_id: _v3.z.string(),
      prompt_version: _v3.z.string()
    }).partial(),
    _v3.z.null()
  ])
}).partial();
var FunctionTypeEnum = _v3.z.enum(["llm", "scorer", "task", "tool"]);
var FunctionId = _v3.z.union([
  _v3.z.object({ function_id: _v3.z.string(), version: _v3.z.string().optional() }),
  _v3.z.object({
    project_name: _v3.z.string(),
    slug: _v3.z.string(),
    version: _v3.z.string().optional()
  }),
  _v3.z.object({ global_function: _v3.z.string() }),
  _v3.z.object({
    prompt_session_id: _v3.z.string(),
    prompt_session_function_id: _v3.z.string(),
    version: _v3.z.string().optional()
  }),
  _v3.z.object({
    inline_context: _v3.z.object({
      runtime: _v3.z.enum(["node", "python"]),
      version: _v3.z.string()
    }),
    code: _v3.z.string(),
    name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  }),
  _v3.z.object({
    inline_prompt: PromptData.optional(),
    inline_function: _v3.z.object({}).partial().passthrough(),
    function_type: FunctionTypeEnum.optional(),
    name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  }),
  _v3.z.object({
    inline_prompt: PromptData,
    function_type: FunctionTypeEnum.optional(),
    name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
  })
]);
var FunctionObjectType = _v3.z.enum([
  "prompt",
  "tool",
  "scorer",
  "task",
  "agent"
]);
var FunctionOutputType = _v3.z.enum(["completion", "score", "any"]);
var GitMetadataSettings = _v3.z.object({
  collect: _v3.z.enum(["all", "none", "some"]),
  fields: _v3.z.array(
    _v3.z.enum([
      "commit",
      "branch",
      "tag",
      "dirty",
      "author_name",
      "author_email",
      "commit_message",
      "commit_time",
      "git_diff"
    ])
  ).optional()
});
var Group = _v3.z.object({
  id: _v3.z.string().uuid(),
  org_id: _v3.z.string().uuid(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  member_users: _v3.z.union([_v3.z.array(_v3.z.string().uuid()), _v3.z.null()]).optional(),
  member_groups: _v3.z.union([_v3.z.array(_v3.z.string().uuid()), _v3.z.null()]).optional()
});
var IfExists = _v3.z.enum(["error", "ignore", "replace"]);
var InvokeParent = _v3.z.union([
  _v3.z.object({
    object_type: _v3.z.enum(["project_logs", "experiment", "playground_logs"]),
    object_id: _v3.z.string(),
    row_ids: _v3.z.union([
      _v3.z.object({
        id: _v3.z.string(),
        span_id: _v3.z.string(),
        root_span_id: _v3.z.string()
      }),
      _v3.z.null()
    ]).optional(),
    propagated_event: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional()
  }),
  _v3.z.string()
]);
var StreamingMode = _v3.z.union([_v3.z.enum(["auto", "parallel"]), _v3.z.null()]);
var InvokeFunction = FunctionId.and(
  _v3.z.object({
    input: _v3.z.unknown(),
    expected: _v3.z.unknown(),
    metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]),
    tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]),
    messages: _v3.z.array(ChatCompletionMessageParam),
    parent: InvokeParent,
    stream: _v3.z.union([_v3.z.boolean(), _v3.z.null()]),
    mode: StreamingMode,
    strict: _v3.z.union([_v3.z.boolean(), _v3.z.null()])
  }).partial()
);
var MessageRole = _v3.z.enum([
  "system",
  "user",
  "assistant",
  "function",
  "tool",
  "model",
  "developer"
]);
var ObjectReference = _v3.z.object({
  object_type: _v3.z.enum([
    "project_logs",
    "experiment",
    "dataset",
    "prompt",
    "function",
    "prompt_session"
  ]),
  object_id: _v3.z.string().uuid(),
  id: _v3.z.string(),
  _xact_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var OnlineScoreConfig = _v3.z.union([
  _v3.z.object({
    sampling_rate: _v3.z.number().gte(0).lte(1),
    scorers: _v3.z.array(SavedFunctionId),
    btql_filter: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
    apply_to_root_span: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
    apply_to_span_names: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
    skip_logging: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
  }),
  _v3.z.null()
]);
var Organization = _v3.z.object({
  id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  api_url: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  is_universal_api: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  proxy_url: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  realtime_url: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var ProjectSettings = _v3.z.union([
  _v3.z.object({
    comparison_key: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    baseline_experiment_id: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    spanFieldOrder: _v3.z.union([
      _v3.z.array(
        _v3.z.object({
          object_type: _v3.z.string(),
          column_id: _v3.z.string(),
          position: _v3.z.string(),
          layout: _v3.z.union([_v3.z.literal("full"), _v3.z.literal("two_column"), _v3.z.null()]).optional()
        })
      ),
      _v3.z.null()
    ]),
    remote_eval_sources: _v3.z.union([
      _v3.z.array(
        _v3.z.object({
          url: _v3.z.string(),
          name: _v3.z.string(),
          description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
        })
      ),
      _v3.z.null()
    ])
  }).partial(),
  _v3.z.null()
]);
var Project = _v3.z.object({
  id: _v3.z.string().uuid(),
  org_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  settings: ProjectSettings.optional()
});
var RetentionObjectType = _v3.z.enum([
  "project_logs",
  "experiment",
  "dataset"
]);
var ProjectAutomation = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  config: _v3.z.union([
    _v3.z.object({
      event_type: _v3.z.literal("logs"),
      btql_filter: _v3.z.string(),
      interval_seconds: _v3.z.number().gte(1).lte(2592e3),
      action: _v3.z.object({ type: _v3.z.literal("webhook"), url: _v3.z.string() })
    }),
    _v3.z.object({
      event_type: _v3.z.literal("btql_export"),
      export_definition: _v3.z.union([
        _v3.z.object({ type: _v3.z.literal("log_traces") }),
        _v3.z.object({ type: _v3.z.literal("log_spans") }),
        _v3.z.object({ type: _v3.z.literal("btql_query"), btql_query: _v3.z.string() })
      ]),
      export_path: _v3.z.string(),
      format: _v3.z.enum(["jsonl", "parquet"]),
      interval_seconds: _v3.z.number().gte(1).lte(2592e3),
      credentials: _v3.z.object({
        type: _v3.z.literal("aws_iam"),
        role_arn: _v3.z.string(),
        external_id: _v3.z.string()
      }),
      batch_size: _v3.z.union([_v3.z.number(), _v3.z.null()]).optional()
    }),
    _v3.z.object({
      event_type: _v3.z.literal("retention"),
      object_type: RetentionObjectType,
      retention_days: _v3.z.number().gte(0)
    })
  ])
});
var ProjectLogsEvent = _v3.z.object({
  id: _v3.z.string(),
  _xact_id: _v3.z.string(),
  _pagination_key: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.string().datetime({ offset: true }),
  org_id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  log_id: _v3.z.literal("g"),
  input: _v3.z.unknown().optional(),
  output: _v3.z.unknown().optional(),
  expected: _v3.z.unknown().optional(),
  error: _v3.z.unknown().optional(),
  scores: _v3.z.union([_v3.z.record(_v3.z.union([_v3.z.number(), _v3.z.null()])), _v3.z.null()]).optional(),
  metadata: _v3.z.union([
    _v3.z.object({ model: _v3.z.union([_v3.z.string(), _v3.z.null()]) }).partial().passthrough(),
    _v3.z.null()
  ]).optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  metrics: _v3.z.union([_v3.z.record(_v3.z.number()), _v3.z.null()]).optional(),
  context: _v3.z.union([
    _v3.z.object({
      caller_functionname: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      caller_filename: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      caller_lineno: _v3.z.union([_v3.z.number(), _v3.z.null()])
    }).partial().passthrough(),
    _v3.z.null()
  ]).optional(),
  span_id: _v3.z.string(),
  span_parents: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  root_span_id: _v3.z.string(),
  is_root: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  span_attributes: SpanAttributes.optional(),
  origin: ObjectReferenceNullish.optional()
});
var ProjectScoreType = _v3.z.enum([
  "slider",
  "categorical",
  "weighted",
  "minimum",
  "maximum",
  "online",
  "free-form"
]);
var ProjectScoreCategory = _v3.z.object({
  name: _v3.z.string(),
  value: _v3.z.number()
});
var ProjectScoreCategories = _v3.z.union([
  _v3.z.array(ProjectScoreCategory),
  _v3.z.record(_v3.z.number()),
  _v3.z.array(_v3.z.string()),
  _v3.z.null()
]);
var ProjectScoreConfig = _v3.z.union([
  _v3.z.object({
    multi_select: _v3.z.union([_v3.z.boolean(), _v3.z.null()]),
    destination: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    online: OnlineScoreConfig
  }).partial(),
  _v3.z.null()
]);
var ProjectScore = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  user_id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  score_type: ProjectScoreType,
  categories: ProjectScoreCategories.optional(),
  config: ProjectScoreConfig.optional(),
  position: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var ProjectTag = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  user_id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  color: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  position: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var Prompt = _v3.z.object({
  id: _v3.z.string().uuid(),
  _xact_id: _v3.z.string(),
  project_id: _v3.z.string().uuid(),
  log_id: _v3.z.literal("p"),
  org_id: _v3.z.string().uuid(),
  name: _v3.z.string(),
  slug: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  prompt_data: PromptDataNullish.optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional(),
  metadata: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional(),
  function_type: FunctionTypeEnumNullish.optional()
});
var PromptOptions = _v3.z.object({ model: _v3.z.string(), params: ModelParams, position: _v3.z.string() }).partial();
var PromptSessionEvent = _v3.z.object({
  id: _v3.z.string(),
  _xact_id: _v3.z.string(),
  created: _v3.z.string().datetime({ offset: true }),
  _pagination_key: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  project_id: _v3.z.string().uuid(),
  prompt_session_id: _v3.z.string().uuid(),
  prompt_session_data: _v3.z.unknown().optional(),
  prompt_data: _v3.z.unknown().optional(),
  function_data: _v3.z.unknown().optional(),
  function_type: FunctionTypeEnumNullish.optional(),
  object_data: _v3.z.unknown().optional(),
  completion: _v3.z.unknown().optional(),
  tags: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]).optional()
});
var ResponseFormat = _v3.z.union([
  _v3.z.object({ type: _v3.z.literal("json_object") }),
  _v3.z.object({
    type: _v3.z.literal("json_schema"),
    json_schema: ResponseFormatJsonSchema
  }),
  _v3.z.object({ type: _v3.z.literal("text") })
]);
var Role = _v3.z.object({
  id: _v3.z.string().uuid(),
  org_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  member_permissions: _v3.z.union([
    _v3.z.array(
      _v3.z.object({
        permission: Permission,
        restrict_object_type: AclObjectType.optional()
      })
    ),
    _v3.z.null()
  ]).optional(),
  member_roles: _v3.z.union([_v3.z.array(_v3.z.string().uuid()), _v3.z.null()]).optional()
});
var RunEval = _v3.z.object({
  project_id: _v3.z.string(),
  data: _v3.z.union([
    _v3.z.object({
      dataset_id: _v3.z.string(),
      _internal_btql: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional()
    }),
    _v3.z.object({
      project_name: _v3.z.string(),
      dataset_name: _v3.z.string(),
      _internal_btql: _v3.z.union([_v3.z.object({}).partial().passthrough(), _v3.z.null()]).optional()
    }),
    _v3.z.object({ data: _v3.z.array(_v3.z.unknown()) })
  ]),
  task: FunctionId.and(_v3.z.unknown()),
  scores: _v3.z.array(FunctionId),
  experiment_name: _v3.z.string().optional(),
  metadata: _v3.z.object({}).partial().passthrough().optional(),
  parent: InvokeParent.and(_v3.z.unknown()).optional(),
  stream: _v3.z.boolean().optional(),
  trial_count: _v3.z.union([_v3.z.number(), _v3.z.null()]).optional(),
  is_public: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  timeout: _v3.z.union([_v3.z.number(), _v3.z.null()]).optional(),
  max_concurrency: _v3.z.union([_v3.z.number(), _v3.z.null()]).optional().default(10),
  base_experiment_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  base_experiment_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  git_metadata_settings: GitMetadataSettings.and(
    _v3.z.union([_v3.z.object({}).partial(), _v3.z.null()])
  ).optional(),
  repo_info: RepoInfo.and(_v3.z.unknown()).optional(),
  strict: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional(),
  stop_token: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  extra_messages: _v3.z.string().optional(),
  tags: _v3.z.array(_v3.z.string()).optional()
});
var ServiceToken = _v3.z.object({
  id: _v3.z.string().uuid(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  preview_name: _v3.z.string(),
  service_account_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  service_account_email: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  service_account_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  org_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var SpanIFrame = _v3.z.object({
  id: _v3.z.string().uuid(),
  project_id: _v3.z.string().uuid(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  name: _v3.z.string(),
  description: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  url: _v3.z.string(),
  post_message: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
});
var SSEConsoleEventData = _v3.z.object({
  stream: _v3.z.enum(["stderr", "stdout"]),
  message: _v3.z.string()
});
var SSEProgressEventData = _v3.z.object({
  id: _v3.z.string(),
  object_type: FunctionObjectType,
  origin: ObjectReferenceNullish.and(_v3.z.unknown()).optional(),
  format: FunctionFormat,
  output_type: FunctionOutputType,
  name: _v3.z.string(),
  event: _v3.z.enum([
    "reasoning_delta",
    "text_delta",
    "json_delta",
    "error",
    "console",
    "start",
    "done",
    "progress"
  ]),
  data: _v3.z.string()
});
var ToolFunctionDefinition = _v3.z.object({
  type: _v3.z.literal("function"),
  function: _v3.z.object({
    name: _v3.z.string(),
    description: _v3.z.string().optional(),
    parameters: _v3.z.object({}).partial().passthrough().optional(),
    strict: _v3.z.union([_v3.z.boolean(), _v3.z.null()]).optional()
  })
});
var User = _v3.z.object({
  id: _v3.z.string().uuid(),
  given_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  family_name: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  email: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  avatar_url: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});
var ViewDataSearch = _v3.z.union([
  _v3.z.object({
    filter: _v3.z.union([_v3.z.array(_v3.z.unknown()), _v3.z.null()]),
    tag: _v3.z.union([_v3.z.array(_v3.z.unknown()), _v3.z.null()]),
    match: _v3.z.union([_v3.z.array(_v3.z.unknown()), _v3.z.null()]),
    sort: _v3.z.union([_v3.z.array(_v3.z.unknown()), _v3.z.null()])
  }).partial(),
  _v3.z.null()
]);
var ViewData = _v3.z.union([
  _v3.z.object({ search: ViewDataSearch }).partial(),
  _v3.z.null()
]);
var ViewOptions = _v3.z.union([
  _v3.z.object({
    viewType: _v3.z.literal("monitor"),
    options: _v3.z.object({
      spanType: _v3.z.union([_v3.z.enum(["range", "frame"]), _v3.z.null()]),
      rangeValue: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      frameStart: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      frameEnd: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      tzUTC: _v3.z.union([_v3.z.boolean(), _v3.z.null()]),
      chartVisibility: _v3.z.union([_v3.z.record(_v3.z.boolean()), _v3.z.null()]),
      projectId: _v3.z.union([_v3.z.string(), _v3.z.null()]),
      type: _v3.z.union([_v3.z.enum(["project", "experiment"]), _v3.z.null()]),
      groupBy: _v3.z.union([_v3.z.string(), _v3.z.null()])
    }).partial()
  }),
  _v3.z.object({
    columnVisibility: _v3.z.union([_v3.z.record(_v3.z.boolean()), _v3.z.null()]),
    columnOrder: _v3.z.union([_v3.z.array(_v3.z.string()), _v3.z.null()]),
    columnSizing: _v3.z.union([_v3.z.record(_v3.z.number()), _v3.z.null()]),
    grouping: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    rowHeight: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    tallGroupRows: _v3.z.union([_v3.z.boolean(), _v3.z.null()]),
    layout: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    chartHeight: _v3.z.union([_v3.z.number(), _v3.z.null()]),
    excludedMeasures: _v3.z.union([
      _v3.z.array(
        _v3.z.object({
          type: _v3.z.enum(["none", "score", "metric", "metadata"]),
          value: _v3.z.string()
        })
      ),
      _v3.z.null()
    ]),
    yMetric: _v3.z.union([
      _v3.z.object({
        type: _v3.z.enum(["none", "score", "metric", "metadata"]),
        value: _v3.z.string()
      }),
      _v3.z.null()
    ]),
    xAxis: _v3.z.union([
      _v3.z.object({
        type: _v3.z.enum(["none", "score", "metric", "metadata"]),
        value: _v3.z.string()
      }),
      _v3.z.null()
    ]),
    symbolGrouping: _v3.z.union([
      _v3.z.object({
        type: _v3.z.enum(["none", "score", "metric", "metadata"]),
        value: _v3.z.string()
      }),
      _v3.z.null()
    ]),
    xAxisAggregation: _v3.z.union([_v3.z.string(), _v3.z.null()]),
    chartAnnotations: _v3.z.union([
      _v3.z.array(_v3.z.object({ id: _v3.z.string(), text: _v3.z.string() })),
      _v3.z.null()
    ]),
    timeRangeFilter: _v3.z.union([
      _v3.z.string(),
      _v3.z.object({ from: _v3.z.string(), to: _v3.z.string() }),
      _v3.z.null()
    ])
  }).partial(),
  _v3.z.null()
]);
var View = _v3.z.object({
  id: _v3.z.string().uuid(),
  object_type: AclObjectType.and(_v3.z.string()),
  object_id: _v3.z.string().uuid(),
  view_type: _v3.z.enum([
    "projects",
    "experiments",
    "experiment",
    "playgrounds",
    "playground",
    "datasets",
    "dataset",
    "prompts",
    "tools",
    "scorers",
    "logs",
    "agents",
    "monitor"
  ]),
  name: _v3.z.string(),
  created: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  view_data: ViewData.optional(),
  options: ViewOptions.optional(),
  user_id: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional(),
  deleted_at: _v3.z.union([_v3.z.string(), _v3.z.null()]).optional()
});

// src/logger.ts
var _functions = require('@vercel/functions');
var _mustache = require('mustache'); var _mustache2 = _interopRequireDefault(_mustache);
var _zod = require('zod');

// src/functions/stream.ts


var _eventsourceparser = require('eventsource-parser');

var braintrustStreamChunkSchema = _v3.z.union([
  _v3.z.object({
    type: _v3.z.literal("text_delta"),
    data: _v3.z.string()
  }),
  _v3.z.object({
    type: _v3.z.literal("reasoning_delta"),
    data: _v3.z.string()
  }),
  _v3.z.object({
    type: _v3.z.literal("json_delta"),
    data: _v3.z.string()
  }),
  _v3.z.object({
    type: _v3.z.literal("error"),
    data: _v3.z.string()
  }),
  _v3.z.object({
    type: _v3.z.literal("console"),
    data: SSEConsoleEventData
  }),
  _v3.z.object({
    type: _v3.z.literal("progress"),
    data: SSEProgressEventData
  }),
  _v3.z.object({
    type: _v3.z.literal("start"),
    data: _v3.z.string()
  }),
  _v3.z.object({
    type: _v3.z.literal("done"),
    data: _v3.z.string()
  })
]);
var BraintrustStream = class _BraintrustStream {
  
  
  
  constructor(baseStream, { signal } = {}) {
    this.signal = signal;
    this.stream = baseStream.pipeThrough(btStreamParser(), { signal });
  }
  /**
   * Copy the stream. This returns a new stream that shares the same underlying
   * stream (via `tee`). Since streams are consumed in Javascript, use `copy()` if you
   * need to use the stream multiple times.
   *
   * @returns A new stream that you can independently consume.
   */
  copy() {
    const [newStream, copyStream] = this.stream.tee();
    this.stream = copyStream;
    return new _BraintrustStream(newStream, { signal: this.signal });
  }
  /**
   * Get the underlying ReadableStream.
   *
   * @returns The underlying ReadableStream<BraintrustStreamChunk>.
   */
  toReadableStream() {
    return this.stream;
  }
  /**
   * Returns an async iterator for the BraintrustStream.
   * This allows for easy consumption of the stream using a for-await...of loop.
   *
   * @returns An async iterator that yields BraintrustStreamChunk objects.
   */
  [Symbol.asyncIterator]() {
    const reader = this.stream.getReader();
    return {
      async next() {
        const { done, value } = await reader.read();
        if (done) {
          reader.releaseLock();
          return { done: true, value: void 0 };
        }
        return { done: false, value };
      },
      async return() {
        reader.releaseLock();
        return { done: true, value: void 0 };
      },
      async throw(error) {
        reader.releaseLock();
        throw error;
      }
    };
  }
  /**
   * Get the final value of the stream. The final value is the concatenation of all
   * the chunks in the stream, deserialized into a string or JSON object, depending on
   * the value's type.
   *
   * This function returns a promise that resolves when the stream is closed, and
   * contains the final value. Multiple calls to `finalValue()` will return the same
   * promise, so it is safe to call this multiple times.
   *
   * This function consumes the stream, so if you need to use the stream multiple
   * times, you should call `copy()` first.
   *
   * @returns A promise that resolves with the final value of the stream or `undefined` if the stream is empty.
   */
  finalValue() {
    if (this.memoizedFinalValue) {
      return this.memoizedFinalValue;
    }
    this.memoizedFinalValue = new Promise((resolve, reject) => {
      this.stream.pipeThrough(createFinalValuePassThroughStream(resolve, reject), {
        signal: this.signal
      }).pipeTo(devNullWritableStream(), { signal: this.signal }).catch(reject);
    });
    return this.memoizedFinalValue;
  }
  static parseRawEvent(event) {
    switch (event.event) {
      case "text_delta":
        return {
          type: "text_delta",
          data: JSON.parse(event.data)
        };
      case "reasoning_delta":
        return {
          type: "reasoning_delta",
          data: JSON.parse(event.data)
        };
      case "json_delta":
        return {
          type: "json_delta",
          data: event.data
        };
      case "error":
        return {
          type: "error",
          data: JSON.parse(event.data)
        };
      case "progress":
        return {
          type: "progress",
          data: SSEProgressEventData.parse(JSON.parse(event.data))
        };
      case "console":
        return {
          type: "console",
          data: SSEConsoleEventData.parse(JSON.parse(event.data))
        };
      case "start":
        return {
          type: "start",
          data: ""
        };
      case "done":
        return {
          type: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
  static serializeRawEvent(event) {
    switch (event.type) {
      case "text_delta":
        return {
          event: "text_delta",
          data: JSON.stringify(event.data)
        };
      case "reasoning_delta":
        return {
          event: "reasoning_delta",
          data: JSON.stringify(event.data)
        };
      case "json_delta":
        return {
          event: "json_delta",
          data: event.data
        };
      case "error":
        return {
          event: "error",
          data: JSON.stringify(event.data)
        };
      case "progress":
        return {
          event: "progress",
          data: JSON.stringify(event.data)
        };
      case "console":
        return {
          event: "console",
          data: JSON.stringify(event.data)
        };
      case "start":
        return {
          event: "start",
          data: ""
        };
      case "done":
        return {
          event: "done",
          data: ""
        };
      default: {
        const _event = event;
        throw new Error(`Unknown event type ${JSON.stringify(_event)}`);
      }
    }
  }
};
function btStreamParser() {
  const decoder = new TextDecoder();
  let parser;
  return new TransformStream({
    async start(controller) {
      parser = _eventsourceparser.createParser.call(void 0, (event) => {
        if (event.type === "reconnect-interval") {
          return;
        }
        const parsed = CallEvent.safeParse(event);
        if (!parsed.success) {
          throw new Error(`Failed to parse event: ${parsed.error}`);
        }
        controller.enqueue(BraintrustStream.parseRawEvent(parsed.data));
      });
    },
    async transform(chunk, controller) {
      if (chunk instanceof Uint8Array) {
        parser.feed(decoder.decode(chunk));
      } else if (typeof chunk === "string") {
        parser.feed(chunk);
      } else {
        controller.enqueue(chunk);
      }
    },
    async flush(controller) {
      controller.terminate();
    }
  });
}
function createFinalValuePassThroughStream(onFinal, onError) {
  const decoder = new TextDecoder();
  const textChunks = [];
  const jsonChunks = [];
  const reasoningChunks = [];
  const transformStream = new TransformStream({
    transform(chunk, controller) {
      if (typeof chunk === "string") {
        textChunks.push(chunk);
        controller.enqueue({
          type: "text_delta",
          data: chunk
        });
      } else if (chunk instanceof Uint8Array) {
        textChunks.push(decoder.decode(chunk));
        controller.enqueue({
          type: "text_delta",
          data: decoder.decode(chunk)
        });
      } else if (braintrustStreamChunkSchema.safeParse(chunk).success) {
        const chunkType = chunk.type;
        switch (chunkType) {
          case "text_delta":
            textChunks.push(chunk.data);
            break;
          case "json_delta":
            jsonChunks.push(chunk.data);
            break;
          case "reasoning_delta":
            reasoningChunks.push(chunk.data);
            break;
          case "error":
            onError(chunk.data);
            break;
          case "progress":
          case "start":
          case "done":
          case "console":
            break;
          default:
            const _type = chunkType;
            onError(`Unknown chunk type: ${_type}`);
        }
        controller.enqueue(chunk);
      } else {
        onError(`Unknown chunk type ${JSON.stringify(chunk)}`);
      }
    },
    flush(controller) {
      if (jsonChunks.length > 0) {
        onFinal(JSON.parse(jsonChunks.join("")));
      } else if (textChunks.length > 0) {
        onFinal(textChunks.join(""));
      } else if (reasoningChunks.length > 0) {
        onFinal(reasoningChunks.join(""));
      } else {
        onFinal(void 0);
      }
      controller.terminate();
    }
  });
  return transformStream;
}
function devNullWritableStream() {
  return new WritableStream({
    write(chunk) {
    },
    close() {
    },
    abort(reason) {
    },
    start(controller) {
    }
  });
}

// src/prompt-cache/disk-cache.ts
function canUseDiskCache() {
  return !!(isomorph_default.hash && isomorph_default.gunzip && isomorph_default.gzip && isomorph_default.stat && isomorph_default.readFile && isomorph_default.writeFile && isomorph_default.utimes && isomorph_default.readdir && isomorph_default.mkdir && isomorph_default.unlink && isomorph_default.homedir);
}
var DiskCache = class {
  
  
  
  
  /**
   * Creates a new DiskCache instance.
   * @param options - Configuration options for the cache.
   */
  constructor(options) {
    if (!canUseDiskCache()) {
      throw new Error("Disk cache is not supported on this platform");
    }
    this.dir = options.cacheDir;
    this.max = options.max;
    this.logWarnings = _nullishCoalesce(options.logWarnings, () => ( true));
    this.mkdir = _nullishCoalesce(options.mkdir, () => ( true));
  }
  getEntryPath(key) {
    const hashed = isomorph_default.hash(key);
    return isomorph_default.pathJoin(this.dir, hashed);
  }
  /**
   * Retrieves a value from the cache.
   * Updates the entry's access time when read.
   *
   * @param key - The key to look up in the cache.
   * @returns The cached value if found, undefined otherwise.
   */
  async get(key) {
    try {
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gunzip(await isomorph_default.readFile(filePath));
      await isomorph_default.utimes(filePath, /* @__PURE__ */ new Date(), /* @__PURE__ */ new Date());
      return JSON.parse(data.toString());
    } catch (e) {
      if (e.code === "ENOENT") {
        return void 0;
      }
      if (this.logWarnings) {
        console.warn("Failed to read from disk cache", e);
      }
      return void 0;
    }
  }
  /**
   * Stores a value in the cache.
   * If the cache is at its maximum size, the least recently used entries will be evicted.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   */
  async set(key, value) {
    try {
      if (this.mkdir) {
        await isomorph_default.mkdir(this.dir, { recursive: true });
      }
      const filePath = this.getEntryPath(key);
      const data = await isomorph_default.gzip(JSON.stringify(value));
      await isomorph_default.writeFile(filePath, data);
      await this.evictOldestIfFull();
    } catch (e) {
      if (this.logWarnings) {
        console.warn("Failed to write to disk cache", e);
      }
      return;
    }
  }
  async evictOldestIfFull() {
    if (!this.max) {
      return;
    }
    const files = await isomorph_default.readdir(this.dir);
    const paths = files.map((file) => isomorph_default.pathJoin(this.dir, file));
    if (paths.length <= this.max) {
      return;
    }
    const stats = await Promise.all(
      paths.map(async (path) => {
        const stat = await isomorph_default.stat(path);
        return {
          path,
          mtime: stat.mtime.getTime()
        };
      })
    );
    stats.sort((a, b) => a.mtime - b.mtime);
    const toRemove = stats.slice(0, stats.length - this.max);
    await Promise.all(toRemove.map((stat) => isomorph_default.unlink(stat.path)));
  }
};

// src/prompt-cache/lru-cache.ts
var LRUCache = class {
  
  
  constructor(options = {}) {
    this.cache = /* @__PURE__ */ new Map();
    this.maxSize = options.max;
  }
  /**
   * Retrieves a value from the cache.
   * If the key exists, the item is marked as most recently used.
   *
   * @param key - The key to look up.
   * @returns The cached value if found, undefined otherwise.
   */
  get(key) {
    const value = this.cache.get(key);
    if (value === void 0) {
      return void 0;
    }
    this.cache.delete(key);
    this.cache.set(key, value);
    return value;
  }
  /**
   * Stores a value in the cache.
   * If the key already exists, the value is updated and marked as most recently used.
   * If the cache is at its maximum size, the least recently used item is evicted.
   *
   * @param key - The key to store.
   * @param value - The value to store.
   */
  set(key, value) {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.maxSize && this.cache.size >= this.maxSize) {
      const first = this.cache.keys().next().value;
      this.cache.delete(first);
    }
    this.cache.set(key, value);
  }
  /**
   * Removes all items from the cache.
   */
  clear() {
    this.cache.clear();
  }
};

// src/prompt-cache/prompt-cache.ts
function createCacheKey(key) {
  if (key.id) {
    return `id:${key.id}`;
  }
  const prefix = _nullishCoalesce(key.projectId, () => ( key.projectName));
  if (!prefix) {
    throw new Error("Either projectId or projectName must be provided");
  }
  if (!key.slug) {
    throw new Error("Slug must be provided when not using ID");
  }
  return `${prefix}:${key.slug}:${_nullishCoalesce(key.version, () => ( "latest"))}`;
}
var PromptCache = class {
  
  
  constructor(options) {
    this.memoryCache = options.memoryCache;
    this.diskCache = options.diskCache;
  }
  /**
   * Retrieves a prompt from the cache.
   * First checks the in-memory LRU cache, then falls back to checking the disk cache if available.
   */
  async get(key) {
    const cacheKey = createCacheKey(key);
    const memoryPrompt = this.memoryCache.get(cacheKey);
    if (memoryPrompt !== void 0) {
      return memoryPrompt;
    }
    if (this.diskCache) {
      const diskPrompt = await this.diskCache.get(cacheKey);
      if (!diskPrompt) {
        return void 0;
      }
      this.memoryCache.set(cacheKey, diskPrompt);
      return diskPrompt;
    }
    return void 0;
  }
  /**
   * Stores a prompt in the cache.
   * Writes to the in-memory cache and the disk cache if available.
   *
   * @param key - The key to store the value under.
   * @param value - The value to store in the cache.
   * @throws If there is an error writing to the disk cache.
   */
  async set(key, value) {
    const cacheKey = createCacheKey(key);
    this.memoryCache.set(cacheKey, value);
    if (this.diskCache) {
      await this.diskCache.set(cacheKey, value);
    }
  }
};

// src/util.ts
var GLOBAL_PROJECT = "Global";
function runCatchFinally(f, catchF, finallyF) {
  let runSyncCleanup = true;
  try {
    const ret = f();
    if (ret instanceof Promise) {
      runSyncCleanup = false;
      return ret.catch(catchF).finally(finallyF);
    } else {
      return ret;
    }
  } catch (e) {
    return catchF(e);
  } finally {
    if (runSyncCleanup) {
      finallyF();
    }
  }
}
function getCurrentUnixTimestamp() {
  return (/* @__PURE__ */ new Date()).getTime() / 1e3;
}
function isEmpty(a) {
  return a === void 0 || a === null;
}
var LazyValue = (_class2 = class {
  
  __init3() {this.resolvedValue = void 0}
  __init4() {this.value = {
    computedState: "uninitialized"
  }}
  constructor(callable) {;_class2.prototype.__init3.call(this);_class2.prototype.__init4.call(this);
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    this.value = {
      computedState: "in_progress",
      val: this.callable().then((x) => {
        this.value.computedState = "succeeded";
        this.resolvedValue = x;
        return x;
      })
    };
    return this.value.val;
  }
  getSync() {
    return {
      resolved: this.value.computedState === "succeeded",
      value: this.resolvedValue
    };
  }
  // If this is true, the caller should be able to obtain the LazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
}, _class2);
var SyncLazyValue = (_class3 = class {
  
  __init5() {this.value = {
    computedState: "uninitialized"
  }}
  constructor(callable) {;_class3.prototype.__init5.call(this);
    this.callable = callable;
  }
  get() {
    if (this.value.computedState !== "uninitialized") {
      return this.value.val;
    }
    const result = this.callable();
    this.value = { computedState: "succeeded", val: result };
    return result;
  }
  // If this is true, the caller should be able to obtain the SyncLazyValue without
  // it throwing.
  get hasSucceeded() {
    return this.value.computedState === "succeeded";
  }
}, _class3);
function addAzureBlobHeaders(headers, url) {
  if (url.includes("blob.core.windows.net")) {
    headers["x-ms-blob-type"] = "BlockBlob";
  }
}
function filterFrom(record, keys) {
  const out = {};
  for (const k of Object.keys(record)) {
    if (!keys.includes(k)) {
      out[k] = record[k];
    }
  }
  return out;
}
function objectIsEmpty(obj) {
  return !obj || Object.keys(obj).length === 0;
}

// src/mustache-utils.ts

function lintTemplate(template, context) {
  const variables = getMustacheVars(template);
  for (const variable of variables) {
    const arrPathsReplaced = variable[1].replaceAll(/\.\d+/g, ".0");
    const fieldExists = getObjValueByPath(context, arrPathsReplaced.split(".")) !== void 0;
    if (!fieldExists) {
      throw new Error(`Variable '${variable[1]}' does not exist.`);
    }
  }
}
function getMustacheVars(prompt) {
  try {
    return _mustache2.default.parse(prompt).filter(
      (span) => span[0] === "name" || span[0] === "&"
    );
  } catch (e4) {
    return [];
  }
}

// src/logger.ts
var BRAINTRUST_ATTACHMENT = BraintrustAttachmentReference.shape.type.value;
var EXTERNAL_ATTACHMENT = ExternalAttachmentReference.shape.type.value;
var BRAINTRUST_PARAMS = Object.keys(BraintrustModelParams.shape);
var REDACTION_FIELDS = [
  "input",
  "output",
  "expected",
  "metadata",
  "context",
  "scores",
  "metrics"
];
var MaskingError = class {
  constructor(fieldName, errorType) {
    this.fieldName = fieldName;
    this.errorType = errorType;
  }
  get errorMsg() {
    return `ERROR: Failed to mask field '${this.fieldName}' - ${this.errorType}`;
  }
};
function applyMaskingToField(maskingFunction, data, fieldName) {
  try {
    return maskingFunction(data);
  } catch (error) {
    const errorType = error instanceof Error ? error.constructor.name : "Error";
    if (fieldName === "scores" || fieldName === "metrics") {
      return new MaskingError(fieldName, errorType);
    }
    if (fieldName === "metadata") {
      return {
        error: `ERROR: Failed to mask field '${fieldName}' - ${errorType}`
      };
    }
    return `ERROR: Failed to mask field '${fieldName}' - ${errorType}`;
  }
}
var NoopSpan = (_class4 = class {
  
  
  
  
  __init6() {this.kind = "span"}
  constructor() {;_class4.prototype.__init6.call(this);
    this.id = "";
    this.spanId = "";
    this.rootSpanId = "";
    this.spanParents = [];
  }
  log(_) {
  }
  logFeedback(_event) {
  }
  traced(callback, _1) {
    return callback(this);
  }
  startSpan(_1) {
    return this;
  }
  end(args) {
    return _nullishCoalesce(_optionalChain([args, 'optionalAccess', _12 => _12.endTime]), () => ( getCurrentUnixTimestamp()));
  }
  async export() {
    return "";
  }
  async permalink() {
    return NOOP_SPAN_PERMALINK;
  }
  link() {
    return NOOP_SPAN_PERMALINK;
  }
  async flush() {
  }
  close(args) {
    return this.end(args);
  }
  setAttributes(_args) {
  }
  startSpanWithParents(_spanId, _spanParents, _args) {
    return this;
  }
  state() {
    return _internalGetGlobalState();
  }
}, _class4);
var NOOP_SPAN = new NoopSpan();
var NOOP_SPAN_PERMALINK = "https://braintrust.dev/noop-span";
var loginSchema = _zod.z.strictObject({
  appUrl: _zod.z.string(),
  appPublicUrl: _zod.z.string(),
  orgName: _zod.z.string(),
  apiUrl: _zod.z.string(),
  proxyUrl: _zod.z.string(),
  loginToken: _zod.z.string(),
  orgId: _zod.z.string().nullish(),
  gitMetadataSettings: GitMetadataSettings.nullish()
});
var stateNonce = 0;
var BraintrustState = (_class5 = class _BraintrustState {
  constructor(loginParams) {;_class5.prototype.__init7.call(this);_class5.prototype.__init8.call(this);_class5.prototype.__init9.call(this);_class5.prototype.__init10.call(this);_class5.prototype.__init11.call(this);_class5.prototype.__init12.call(this);_class5.prototype.__init13.call(this);_class5.prototype.__init14.call(this);_class5.prototype.__init15.call(this);_class5.prototype.__init16.call(this);_class5.prototype.__init17.call(this);_class5.prototype.__init18.call(this);_class5.prototype.__init19.call(this);
    this.loginParams = loginParams;
    this.id = `${(/* @__PURE__ */ new Date()).toLocaleString()}-${stateNonce++}`;
    this.currentExperiment = void 0;
    this.currentLogger = void 0;
    this.currentParent = isomorph_default.newAsyncLocalStorage();
    this.currentSpan = isomorph_default.newAsyncLocalStorage();
    if (loginParams.fetch) {
      this.fetch = loginParams.fetch;
    }
    const defaultGetLogConn = async () => {
      await this.login({});
      return this.apiConn();
    };
    this._bgLogger = new SyncLazyValue(
      () => new HTTPBackgroundLogger(new LazyValue(defaultGetLogConn), loginParams)
    );
    this.resetLoginInfo();
    const memoryCache = new LRUCache({
      max: _nullishCoalesce(Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_MEMORY_MAX")), () => ( 1 << 10))
    });
    const diskCache = canUseDiskCache() ? new DiskCache({
      cacheDir: _nullishCoalesce(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DIR"), () => ( `${_nullishCoalesce(isomorph_default.getEnv("HOME"), () => ( isomorph_default.homedir()))}/.braintrust/prompt_cache`)),
      max: _nullishCoalesce(Number(isomorph_default.getEnv("BRAINTRUST_PROMPT_CACHE_DISK_MAX")), () => ( 1 << 20))
    }) : void 0;
    this.promptCache = new PromptCache({ memoryCache, diskCache });
  }
  
  
  // Note: the value of IsAsyncFlush doesn't really matter here, since we
  // (safely) dynamically cast it whenever retrieving the logger.
  
  
  
  // Any time we re-log in, we directly update the apiConn inside the logger.
  // This is preferable to replacing the whole logger, which would create the
  // possibility of multiple loggers floating around, which may not log in a
  // deterministic order.
  
  __init7() {this._overrideBgLogger = null}
  __init8() {this.appUrl = null}
  __init9() {this.appPublicUrl = null}
  __init10() {this.loginToken = null}
  __init11() {this.orgId = null}
  __init12() {this.orgName = null}
  __init13() {this.apiUrl = null}
  __init14() {this.proxyUrl = null}
  __init15() {this.loggedIn = false}
  
  __init16() {this.fetch = globalThis.fetch}
  __init17() {this._appConn = null}
  __init18() {this._apiConn = null}
  __init19() {this._proxyConn = null}
  
  resetLoginInfo() {
    this.appUrl = null;
    this.appPublicUrl = null;
    this.loginToken = null;
    this.orgId = null;
    this.orgName = null;
    this.apiUrl = null;
    this.proxyUrl = null;
    this.loggedIn = false;
    this.gitMetadataSettings = void 0;
    this._appConn = null;
    this._apiConn = null;
    this._proxyConn = null;
  }
  copyLoginInfo(other) {
    this.appUrl = other.appUrl;
    this.appPublicUrl = other.appPublicUrl;
    this.loginToken = other.loginToken;
    this.orgId = other.orgId;
    this.orgName = other.orgName;
    this.apiUrl = other.apiUrl;
    this.proxyUrl = other.proxyUrl;
    this.loggedIn = other.loggedIn;
    this.gitMetadataSettings = other.gitMetadataSettings;
    this._appConn = other._appConn;
    this._apiConn = other._apiConn;
    this.loginReplaceApiConn(this.apiConn());
    this._proxyConn = other._proxyConn;
  }
  serialize() {
    if (!this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without being logged in"
      );
    }
    if (!this.appUrl || !this.appPublicUrl || !this.apiUrl || !this.proxyUrl || !this.orgName || !this.loginToken || !this.loggedIn) {
      throw new Error(
        "Cannot serialize BraintrustState without all login attributes"
      );
    }
    return {
      appUrl: this.appUrl,
      appPublicUrl: this.appPublicUrl,
      loginToken: this.loginToken,
      orgId: this.orgId,
      orgName: this.orgName,
      apiUrl: this.apiUrl,
      proxyUrl: this.proxyUrl,
      gitMetadataSettings: this.gitMetadataSettings
    };
  }
  static deserialize(serialized, opts) {
    const serializedParsed = loginSchema.safeParse(serialized);
    if (!serializedParsed.success) {
      throw new Error(
        `Cannot deserialize BraintrustState: ${serializedParsed.error.message}`
      );
    }
    const state = new _BraintrustState({ ...opts });
    for (const key of Object.keys(loginSchema.shape)) {
      state[key] = serializedParsed.data[key];
    }
    if (!state.loginToken) {
      throw new Error(
        "Cannot deserialize BraintrustState without a login token"
      );
    }
    state.apiConn().set_token(state.loginToken);
    state.apiConn().make_long_lived();
    state.appConn().set_token(state.loginToken);
    if (state.proxyUrl) {
      state.proxyConn().make_long_lived();
      state.proxyConn().set_token(state.loginToken);
    }
    state.loggedIn = true;
    state.loginReplaceApiConn(state.apiConn());
    return state;
  }
  setFetch(fetch2) {
    this.loginParams.fetch = fetch2;
    this.fetch = fetch2;
    _optionalChain([this, 'access', _13 => _13._apiConn, 'optionalAccess', _14 => _14.setFetch, 'call', _15 => _15(fetch2)]);
    _optionalChain([this, 'access', _16 => _16._appConn, 'optionalAccess', _17 => _17.setFetch, 'call', _18 => _18(fetch2)]);
  }
  setMaskingFunction(maskingFunction) {
    this.bgLogger().setMaskingFunction(maskingFunction);
  }
  async login(loginParams) {
    if (this.apiUrl && !loginParams.forceLogin) {
      return;
    }
    const newState = await loginToState({
      ...this.loginParams,
      ...Object.fromEntries(
        Object.entries(loginParams).filter(([k, v]) => !isEmpty(v))
      )
    });
    this.copyLoginInfo(newState);
  }
  appConn() {
    if (!this._appConn) {
      if (!this.appUrl) {
        throw new Error("Must initialize appUrl before requesting appConn");
      }
      this._appConn = new HTTPConnection(this.appUrl, this.fetch);
    }
    return this._appConn;
  }
  apiConn() {
    if (!this._apiConn) {
      if (!this.apiUrl) {
        throw new Error("Must initialize apiUrl before requesting apiConn");
      }
      this._apiConn = new HTTPConnection(this.apiUrl, this.fetch);
    }
    return this._apiConn;
  }
  proxyConn() {
    if (!this.proxyUrl) {
      return this.apiConn();
    }
    if (!this._proxyConn) {
      if (!this.proxyUrl) {
        throw new Error("Must initialize proxyUrl before requesting proxyConn");
      }
      this._proxyConn = new HTTPConnection(this.proxyUrl, this.fetch);
    }
    return this._proxyConn;
  }
  bgLogger() {
    if (this._overrideBgLogger) {
      return this._overrideBgLogger;
    }
    return this._bgLogger.get();
  }
  httpLogger() {
    return this._bgLogger.get();
  }
  setOverrideBgLogger(logger) {
    this._overrideBgLogger = logger;
  }
  // Should only be called by the login function.
  loginReplaceApiConn(apiConn) {
    this._bgLogger.get().internalReplaceApiConn(apiConn);
  }
  disable() {
    this._bgLogger.get().disable();
  }
  enforceQueueSizeLimit(enforce) {
    this._bgLogger.get().enforceQueueSizeLimit(enforce);
  }
}, _class5);
var _globalState;
function useTestBackgroundLogger() {
  const state = _internalGetGlobalState();
  if (!state) {
    throw new Error("global state not set yet");
  }
  const logger = new TestBackgroundLogger();
  state.setOverrideBgLogger(logger);
  return logger;
}
function clearTestBackgroundLogger() {
  _optionalChain([_internalGetGlobalState, 'call', _19 => _19(), 'optionalAccess', _20 => _20.setOverrideBgLogger, 'call', _21 => _21(null)]);
}
function initTestExperiment(experimentName, projectName) {
  setInitialTestState();
  const state = _internalGetGlobalState();
  const project = _nullishCoalesce(projectName, () => ( experimentName));
  const lazyMetadata = new LazyValue(
    async () => ({
      project: { id: project, name: project, fullInfo: {} },
      experiment: { id: experimentName, name: experimentName, fullInfo: {} }
    })
  );
  return new Experiment2(state, lazyMetadata);
}
function _internalSetInitialState() {
  if (_globalState) {
    console.warn(
      "global state already set, should only call _internalSetInitialState once"
    );
    return;
  }
  _globalState = globalThis.__inherited_braintrust_state || new BraintrustState({
    /*empty login options*/
  });
}
var _internalGetGlobalState = () => _globalState;
var FailedHTTPResponse = class extends Error {
  
  
  
  constructor(status, text, data) {
    super(`${status}: ${text} (${data})`);
    this.status = status;
    this.text = text;
    this.data = data;
  }
};
async function checkResponse(resp) {
  if (resp.ok) {
    return resp;
  } else {
    throw new FailedHTTPResponse(
      resp.status,
      resp.statusText,
      await resp.text()
    );
  }
}
var HTTPConnection = class _HTTPConnection {
  
  
  
  
  constructor(base_url, fetch2) {
    this.base_url = base_url;
    this.token = null;
    this.headers = {};
    this._reset();
    this.fetch = fetch2;
  }
  setFetch(fetch2) {
    this.fetch = fetch2;
  }
  async ping() {
    try {
      const resp = await this.get("ping");
      return resp.status === 200;
    } catch (e) {
      return false;
    }
  }
  make_long_lived() {
    this._reset();
  }
  static sanitize_token(token) {
    return token.trim();
  }
  set_token(token) {
    token = _HTTPConnection.sanitize_token(token);
    this.token = token;
    this._reset();
  }
  // As far as I can tell, you cannot set the retry/backoff factor here
  _reset() {
    this.headers = {};
    if (this.token) {
      this.headers["Authorization"] = `Bearer ${this.token}`;
    }
  }
  async get(path, params = void 0, config) {
    const { headers, ...rest } = config || {};
    const url = new URL(_urljoin(this.base_url, path));
    url.search = new URLSearchParams(
      params ? Object.entries(params).filter(([_, v]) => v !== void 0).flatMap(
        ([k, v]) => v !== void 0 ? typeof v === "string" ? [[k, v]] : v.map((x) => [k, x]) : []
      ) : []
    ).toString();
    const this_fetch = this.fetch;
    const this_headers = this.headers;
    return await checkResponse(
      // Using toString() here makes it work with isomorphic fetch
      await this_fetch(url.toString(), {
        headers: {
          Accept: "application/json",
          ...this_headers,
          ...headers
        },
        keepalive: true,
        ...rest
      })
    );
  }
  async post(path, params, config) {
    const { headers, ...rest } = config || {};
    const this_fetch = this.fetch;
    const this_base_url = this.base_url;
    const this_headers = this.headers;
    return await checkResponse(
      await this_fetch(_urljoin(this_base_url, path), {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          ...this_headers,
          ...headers
        },
        body: typeof params === "string" ? params : params ? JSON.stringify(params) : void 0,
        keepalive: true,
        ...rest
      })
    );
  }
  async get_json(object_type, args = void 0, retries = 0) {
    const tries = retries + 1;
    for (let i = 0; i < tries; i++) {
      try {
        const resp = await this.get(`${object_type}`, args);
        return await resp.json();
      } catch (e) {
        if (i < tries - 1) {
          console.log(
            `Retrying API request ${object_type} ${JSON.stringify(args)} ${e.status} ${e.text}`
          );
          continue;
        }
        throw e;
      }
    }
  }
  async post_json(object_type, args = void 0) {
    const resp = await this.post(`${object_type}`, args, {
      headers: { "Content-Type": "application/json" }
    });
    return await resp.json();
  }
};
var BaseAttachment = class {
  
};
var Attachment = class extends BaseAttachment {
  /**
   * The object that replaces this `Attachment` at upload time.
   */
  
  
  
  
  // For debug logging only.
  
  /**
   * Construct an attachment.
   *
   * @param param A parameter object with:
   *
   * `data`: A string representing the path of the file on disk, or a
   * `Blob`/`ArrayBuffer` with the file's contents. The caller is responsible
   * for ensuring the file/blob/buffer is not modified until upload is complete.
   *
   * `filename`: The desired name of the file in Braintrust after uploading.
   * This parameter is for visualization purposes only and has no effect on
   * attachment storage.
   *
   * `contentType`: The MIME type of the file.
   *
   * `state`: (Optional) For internal use.
   */
  constructor({ data, filename, contentType, state }) {
    super();
    this.reference = {
      type: BRAINTRUST_ATTACHMENT,
      filename,
      content_type: contentType,
      key: newId()
    };
    this.state = state;
    this.dataDebugString = typeof data === "string" ? data : "<in-memory data>";
    this._data = this.initData(data);
    this.uploader = this.initUploader();
  }
  /**
   * On first access, (1) reads the attachment from disk if needed, (2)
   * authenticates with the data plane to request a signed URL, (3) uploads to
   * object store, and (4) updates the attachment.
   *
   * @returns The attachment status.
   */
  async upload() {
    return await this.uploader.get();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment contents from disk or memory on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * A human-readable description for logging and debugging.
   *
   * @returns The debug object. The return type is not stable and may change in
   * a future release.
   */
  debugInfo() {
    return {
      inputData: this.dataDebugString,
      reference: this.reference,
      state: this.state
    };
  }
  initUploader() {
    const doUpload = async (conn, orgId) => {
      const requestParams = {
        key: this.reference.key,
        filename: this.reference.filename,
        content_type: this.reference.content_type,
        org_id: orgId
      };
      const [metadataPromiseResult, dataPromiseResult] = await Promise.allSettled([
        conn.post("/attachment", requestParams),
        this._data.get()
      ]);
      if (metadataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(metadataPromiseResult.reason);
        throw new Error(
          `Failed to request signed URL from API server: ${errorStr}`
        );
      }
      if (dataPromiseResult.status === "rejected") {
        const errorStr = JSON.stringify(dataPromiseResult.reason);
        throw new Error(`Failed to read file: ${errorStr}`);
      }
      const metadataResponse = metadataPromiseResult.value;
      const data = dataPromiseResult.value;
      let signedUrl;
      let headers;
      try {
        ({ signedUrl, headers } = _zod.z.object({
          signedUrl: _zod.z.string().url(),
          headers: _zod.z.record(_zod.z.string())
        }).parse(await metadataResponse.json()));
      } catch (error) {
        if (error instanceof _zod.ZodError) {
          const errorStr = JSON.stringify(error.flatten());
          throw new Error(`Invalid response from API server: ${errorStr}`);
        }
        throw error;
      }
      addAzureBlobHeaders(headers, signedUrl);
      let objectStoreResponse;
      try {
        objectStoreResponse = await checkResponse(
          await fetch(signedUrl, {
            method: "PUT",
            headers,
            body: data
          })
        );
      } catch (error) {
        if (error instanceof FailedHTTPResponse) {
          throw new Error(
            `Failed to upload attachment to object store: ${error.status} ${error.text} ${error.data}`
          );
        }
        throw error;
      }
      return { signedUrl, metadataResponse, objectStoreResponse };
    };
    const errorWrapper = async () => {
      const status = { upload_status: "done" };
      const state = _nullishCoalesce(this.state, () => ( _globalState));
      await state.login({});
      const conn = state.apiConn();
      const orgId = _nullishCoalesce(state.orgId, () => ( ""));
      try {
        await doUpload(conn, orgId);
      } catch (error) {
        status.upload_status = "error";
        status.error_message = error instanceof Error ? error.message : JSON.stringify(error);
      }
      const requestParams = {
        key: this.reference.key,
        org_id: orgId,
        status
      };
      const statusResponse = await conn.post(
        "/attachment/status",
        requestParams
      );
      if (!statusResponse.ok) {
        const errorStr = JSON.stringify(statusResponse);
        throw new Error(`Couldn't log attachment status: ${errorStr}`);
      }
      return status;
    };
    return new LazyValue(errorWrapper);
  }
  initData(data) {
    if (typeof data === "string") {
      this.ensureFileReadable(data);
      const readFile = isomorph_default.readFile;
      if (!readFile) {
        throw new Error(
          `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
        );
      }
      return new LazyValue(async () => new Blob([await readFile(data)]));
    } else {
      return new LazyValue(async () => new Blob([data]));
    }
  }
  ensureFileReadable(data) {
    const statSync = isomorph_default.statSync;
    if (!statSync) {
      throw new Error(
        `This platform does not support reading the filesystem. Construct the Attachment
with a Blob/ArrayBuffer, or run the program on Node.js.`
      );
    }
    try {
      statSync(data);
    } catch (e) {
      console.warn(`Failed to read file: ${e}`);
    }
  }
};
var ExternalAttachment = class extends BaseAttachment {
  /**
   * The object that replaces this `ExternalAttachment` at upload time.
   */
  
  
  
  /**
   * Construct an external attachment.
   *
   * @param param A parameter object with:
   *
   * `url`: The fully qualified URL of the file in the external object store.
   *
   * `filename`: The desired name of the file in Braintrust after uploading.
   * This parameter is for visualization purposes only and has no effect on
   * attachment storage.
   *
   * `contentType`: The MIME type of the file.
   *
   * `state`: (Optional) For internal use.
   */
  constructor({ url, filename, contentType, state }) {
    super();
    this.reference = {
      type: EXTERNAL_ATTACHMENT,
      filename,
      content_type: contentType,
      url
    };
    this._data = this.initData();
  }
  /**
   * For ExternalAttachment, this is a no-op since the data already resides
   * in the external object store. It marks the attachment as already uploaded.
   *
   * @returns The attachment status, which will always indicate success.
   */
  async upload() {
    return { upload_status: "done" };
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment contents from the external object store on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * A human-readable description for logging and debugging.
   *
   * @returns The debug object. The return type is not stable and may change in
   * a future release.
   */
  debugInfo() {
    return {
      url: this.reference.url,
      reference: this.reference,
      state: this.state
    };
  }
  initData() {
    return new LazyValue(async () => {
      const readonly = new ReadonlyAttachment(this.reference, this.state);
      return await readonly.data();
    });
  }
};
var attachmentMetadataSchema = _zod.z.object({
  downloadUrl: _zod.z.string(),
  status: AttachmentStatus
});
var ReadonlyAttachment = class {
  /**
   * Attachment metadata.
   */
  
  
  
  /**
   * Construct a ReadonlyAttachment.
   *
   * @param reference The `AttachmentReference` that should be read by the
   * `ReadonlyAttachment` object.
   * @param state (Optional) For internal use.
   * @returns The new `ReadonlyAttachment` object.
   */
  constructor(reference, state) {
    this.reference = reference;
    this.state = state;
    this._data = this.initDownloader();
  }
  /**
   * The attachment contents. This is a lazy value that will read the attachment
   * contents from the object store on first access.
   */
  async data() {
    return this._data.get();
  }
  /**
   * Returns the attachment contents as a base64-encoded URL that is suitable
   * for use in a prompt.
   *
   * @returns The attachment contents as a base64-encoded URL.
   */
  async asBase64Url() {
    const buf = await (await this.data()).arrayBuffer();
    const base64 = Buffer.from(buf).toString("base64");
    return `data:${this.reference.content_type};base64,${base64}`;
  }
  /**
   * Fetch the attachment metadata, which includes a downloadUrl and a status.
   * This will re-fetch the status each time in case it changes over time.
   */
  async metadata() {
    const state = _nullishCoalesce(this.state, () => ( _globalState));
    await state.login({});
    const params = {
      filename: this.reference.filename,
      content_type: this.reference.content_type,
      org_id: state.orgId || ""
    };
    if (this.reference.type === "braintrust_attachment") {
      params.key = this.reference.key;
    } else if (this.reference.type === "external_attachment") {
      params.url = this.reference.url;
    }
    const resp = await state.apiConn().get("/attachment", params);
    if (!resp.ok) {
      const errorStr = JSON.stringify(resp);
      throw new Error(`Invalid response from API server: ${errorStr}`);
    }
    return attachmentMetadataSchema.parse(await resp.json());
  }
  /**
   * Fetch the attachment upload status. This will re-fetch the status each time
   * in case it changes over time.
   */
  async status() {
    return (await this.metadata()).status;
  }
  initDownloader() {
    const download = async () => {
      const { downloadUrl, status } = await this.metadata();
      if (status.upload_status !== "done") {
        throw new Error(
          `Expected attachment status "done", got "${status.upload_status}"`
        );
      }
      const objResponse = await fetch(downloadUrl);
      if (objResponse.status !== 200) {
        const error = await objResponse.text();
        throw new Error(`Couldn't download attachment: ${error}`);
      }
      return await objResponse.blob();
    };
    return new LazyValue(download);
  }
};
function logFeedbackImpl(state, parentObjectType, parentObjectId, {
  id,
  expected,
  scores,
  metadata: inputMetadata,
  tags,
  comment,
  source: inputSource
}) {
  const source = _nullishCoalesce(inputSource, () => ( "external"));
  if (!VALID_SOURCES.includes(source)) {
    throw new Error(`source must be one of ${VALID_SOURCES}`);
  }
  if (isEmpty(scores) && isEmpty(expected) && isEmpty(tags) && isEmpty(comment)) {
    throw new Error(
      "At least one of scores, expected, tags, or comment must be specified"
    );
  }
  const validatedEvent = validateAndSanitizeExperimentLogPartialArgs({
    scores,
    metadata: inputMetadata,
    expected,
    tags
  });
  let { metadata, ...updateEvent } = deepCopyEvent(validatedEvent);
  updateEvent = Object.fromEntries(
    Object.entries(updateEvent).filter(([_, v]) => !isEmpty(v))
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  if (Object.keys(updateEvent).length > 0) {
    const record = new LazyValue(async () => {
      return {
        id,
        ...updateEvent,
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata,
        [IS_MERGE_FIELD]: true
      };
    });
    state.bgLogger().log([record]);
  }
  if (!isEmpty(comment)) {
    const record = new LazyValue(async () => {
      return {
        id: _uuid.v4.call(void 0, ),
        created: (/* @__PURE__ */ new Date()).toISOString(),
        origin: {
          // NOTE: We do not know (or care?) what the transaction id of the row that
          // we're commenting on is here, so we omit it.
          id
        },
        comment: {
          text: comment
        },
        ...await parentIds(),
        [AUDIT_SOURCE_FIELD]: source,
        [AUDIT_METADATA_FIELD]: metadata
      };
    });
    state.bgLogger().log([record]);
  }
}
function updateSpanImpl({
  state,
  parentObjectType,
  parentObjectId,
  id,
  event
}) {
  const updateEvent = deepCopyEvent(
    validateAndSanitizeExperimentLogPartialArgs({
      id,
      ...event
    })
  );
  const parentIds = async () => new SpanComponentsV3({
    object_type: parentObjectType,
    object_id: await parentObjectId.get()
  }).objectIdFields();
  const record = new LazyValue(async () => ({
    id,
    ...updateEvent,
    ...await parentIds(),
    [IS_MERGE_FIELD]: true
  }));
  state.bgLogger().log([record]);
}
function updateSpan({
  exported,
  state,
  ...event
}) {
  const resolvedState = _nullishCoalesce(state, () => ( _globalState));
  const components = SpanComponentsV3.fromStr(exported);
  if (!components.data.row_id) {
    throw new Error("Exported span must have a row id");
  }
  updateSpanImpl({
    state: resolvedState,
    parentObjectType: components.data.object_type,
    parentObjectId: new LazyValue(
      spanComponentsToObjectIdLambda(resolvedState, components)
    ),
    id: components.data.row_id,
    event
  });
}
function spanComponentsToObjectIdLambda(state, components) {
  if (components.data.object_id) {
    const ret = components.data.object_id;
    return async () => ret;
  }
  if (!components.data.compute_object_metadata_args) {
    throw new Error(
      "Impossible: must provide either objectId or computeObjectMetadataArgs"
    );
  }
  switch (components.data.object_type) {
    case 1 /* EXPERIMENT */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for experiments"
      );
    case 3 /* PLAYGROUND_LOGS */:
      throw new Error(
        "Impossible: computeObjectMetadataArgs not supported for prompt sessions"
      );
    case 2 /* PROJECT_LOGS */:
      return async () => (await computeLoggerMetadata(state, {
        ...components.data.compute_object_metadata_args
      })).project.id;
    default:
      const x = components.data.object_type;
      throw new Error(`Unknown object type: ${x}`);
  }
}
async function spanComponentsToObjectId({
  components,
  state
}) {
  return await spanComponentsToObjectIdLambda(
    _nullishCoalesce(state, () => ( _globalState)),
    components
  )();
}
var ERR_PERMALINK = "https://braintrust.dev/error-generating-link";
function getErrPermlink(msg) {
  if (msg == "") {
    return ERR_PERMALINK;
  }
  return `${ERR_PERMALINK}?msg=${encodeURIComponent(msg)}`;
}
async function permalink(slug, opts) {
  if (slug === "") {
    return NOOP_SPAN_PERMALINK;
  }
  const state = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _22 => _22.state]), () => ( _globalState));
  const getOrgName = async () => {
    if (_optionalChain([opts, 'optionalAccess', _23 => _23.orgName])) {
      return opts.orgName;
    }
    await state.login({});
    if (!state.orgName) {
      throw new Error("provide-org-or-login");
    }
    return state.orgName;
  };
  const getAppUrl = async () => {
    if (_optionalChain([opts, 'optionalAccess', _24 => _24.appUrl])) {
      return opts.appUrl;
    }
    await state.login({});
    if (!state.appUrl) {
      throw new Error("provide-app-url-or-login");
    }
    return state.appUrl;
  };
  try {
    const components = SpanComponentsV3.fromStr(slug);
    const object_type = spanObjectTypeV3ToString(components.data.object_type);
    const [orgName, appUrl, object_id] = await Promise.all([
      getOrgName(),
      getAppUrl(),
      spanComponentsToObjectId({ components, state })
    ]);
    const id = components.data.row_id;
    if (!id) {
      throw new Error("Span slug does not refer to an individual row");
    }
    const urlParams = new URLSearchParams({ object_type, object_id, id });
    return `${appUrl}/app/${orgName}/object?${urlParams}`;
  } catch (e) {
    if (e instanceof FailedHTTPResponse) {
      return getErrPermlink(`http-error-${e.status}`);
    }
    return getErrPermlink(e instanceof Error ? e.message : String(e));
  }
}
function startSpanParentArgs(args) {
  let argParentObjectId = void 0;
  let argParentSpanIds = void 0;
  let argPropagatedEvent = void 0;
  if (args.parent) {
    if (args.parentSpanIds) {
      throw new Error("Cannot specify both parent and parentSpanIds");
    }
    const parentComponents = SpanComponentsV3.fromStr(args.parent);
    if (args.parentObjectType !== parentComponents.data.object_type) {
      throw new Error(
        `Mismatch between expected span parent object type ${args.parentObjectType} and provided type ${parentComponents.data.object_type}`
      );
    }
    const parentComponentsObjectIdLambda = spanComponentsToObjectIdLambda(
      args.state,
      parentComponents
    );
    const computeParentObjectId = async () => {
      const parentComponentsObjectId = await parentComponentsObjectIdLambda();
      if (await args.parentObjectId.get() !== parentComponentsObjectId) {
        throw new Error(
          `Mismatch between expected span parent object id ${await args.parentObjectId.get()} and provided id ${parentComponentsObjectId}`
        );
      }
      return await args.parentObjectId.get();
    };
    argParentObjectId = new LazyValue(computeParentObjectId);
    if (parentComponents.data.row_id) {
      argParentSpanIds = {
        spanId: parentComponents.data.span_id,
        rootSpanId: parentComponents.data.root_span_id
      };
    }
    argPropagatedEvent = _nullishCoalesce(args.propagatedEvent, () => ( (_nullishCoalesce(parentComponents.data.propagated_event, () => ( void 0)))));
  } else {
    argParentObjectId = args.parentObjectId;
    argParentSpanIds = args.parentSpanIds;
    argPropagatedEvent = args.propagatedEvent;
  }
  return {
    parentObjectType: args.parentObjectType,
    parentObjectId: argParentObjectId,
    parentComputeObjectMetadataArgs: args.parentComputeObjectMetadataArgs,
    parentSpanIds: argParentSpanIds,
    propagatedEvent: argPropagatedEvent
  };
}
var Logger = (_class6 = class {
  
  
  
  
  
  
  
  // For type identification.
  __init20() {this.kind = "logger"}
  constructor(state, lazyMetadata, logOptions = {}) {;_class6.prototype.__init20.call(this);
    this.lazyMetadata = lazyMetadata;
    this._asyncFlush = logOptions.asyncFlush;
    this.computeMetadataArgs = logOptions.computeMetadataArgs;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get org_id() {
    return (async () => {
      return (await this.lazyMetadata.get()).org_id;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  get id() {
    return (async () => (await this.project).id)();
  }
  parentObjectType() {
    return 2 /* PROJECT_LOGS */;
  }
  /**
   * Log a single event. The event will be batched and uploaded behind the scenes if `logOptions.asyncFlush` is true.
   *
   * @param event The event to log.
   * @param event.input: (Optional) the arguments that uniquely define a user input (an arbitrary, JSON serializable object).
   * @param event.output: (Optional) the output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: (Optional) a dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare logs.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the logger elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !_optionalChain([options, 'optionalAccess', _25 => _25.allowConcurrentWithSpans])) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `logger.traced` and then log with `span.log`"
      );
    }
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    const ret = span.id;
    if (this.asyncFlush === true) {
      return ret;
    } else {
      return (async () => {
        await this.flush();
        return ret;
      })();
    }
  }
  /**
   * Create a new toplevel span underneath the logger. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = _nullishCoalesce(args, () => ( {}));
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (_nullishCoalesce(setCurrent, () => ( true))) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    if (this.asyncFlush) {
      return ret;
    } else {
      return (async () => {
        const awaitedRet = await ret;
        await this.flush();
        return awaitedRet;
      })();
    }
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this logger's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: _optionalChain([args, 'optionalAccess', _26 => _26.parent]),
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: this.computeMetadataArgs,
        parentSpanIds: _optionalChain([args, 'optionalAccess', _27 => _27.parentSpanIds]),
        propagatedEvent: _optionalChain([args, 'optionalAccess', _28 => _28.propagatedEvent])
      }),
      defaultRootType: "task" /* TASK */
    });
  }
  /**
   * Log feedback to an event. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the logger that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      ...this.computeMetadataArgs && !this.lazyId.hasSucceeded ? { compute_object_metadata_args: this.computeMetadataArgs } : { object_id: await this.lazyId.get() }
    }).toStr();
  }
  /*
   * Flush any pending logs to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  get asyncFlush() {
    return this._asyncFlush;
  }
}, _class6);
function castLogger(logger, asyncFlush) {
  if (logger === void 0) return void 0;
  if (asyncFlush !== void 0 && !!asyncFlush !== !!logger.asyncFlush) {
    throw new Error(
      `Asserted asyncFlush setting ${asyncFlush} does not match stored logger's setting ${logger.asyncFlush}`
    );
  }
  return logger;
}
function constructLogs3Data(items) {
  return `{"rows": ${constructJsonArray(items)}, "api_version": 2}`;
}
function now() {
  return (/* @__PURE__ */ new Date()).getTime();
}
var TestBackgroundLogger = (_class7 = class {constructor() { _class7.prototype.__init21.call(this);_class7.prototype.__init22.call(this); }
  __init21() {this.items = []}
  __init22() {this.maskingFunction = null}
  log(items) {
    this.items.push(items);
  }
  setMaskingFunction(maskingFunction) {
    this.maskingFunction = maskingFunction;
  }
  async flush() {
    return Promise.resolve();
  }
  async drain() {
    const items = this.items;
    this.items = [];
    const events = [];
    for (const item of items) {
      for (const event of item) {
        events.push(await event.get());
      }
    }
    const batch = mergeRowBatch(events);
    let flatBatch = batch.flat();
    if (this.maskingFunction) {
      flatBatch = flatBatch.map((item) => {
        const maskedItem = { ...item };
        for (const field of REDACTION_FIELDS) {
          if (item[field] !== void 0) {
            const maskedValue = applyMaskingToField(
              this.maskingFunction,
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              item[field],
              field
            );
            if (maskedValue instanceof MaskingError) {
              delete maskedItem[field];
              if (maskedItem.error) {
                maskedItem.error = `${maskedItem.error}; ${maskedValue.errorMsg}`;
              } else {
                maskedItem.error = maskedValue.errorMsg;
              }
            } else {
              maskedItem[field] = maskedValue;
            }
          }
        }
        return maskedItem;
      });
    }
    return flatBatch;
  }
}, _class7);
var BACKGROUND_LOGGER_BASE_SLEEP_TIME_S = 1;
var HTTPBackgroundLogger = (_class8 = class _HTTPBackgroundLogger {
  
  
  __init23() {this.activeFlush = Promise.resolve()}
  __init24() {this.activeFlushResolved = true}
  __init25() {this.activeFlushError = void 0}
  
  __init26() {this.maskingFunction = null}
  __init27() {this.syncFlush = false}
  // 6 MB for the AWS lambda gateway (from our own testing).
  __init28() {this.maxRequestSize = 6 * 1024 * 1024}
  __init29() {this.defaultBatchSize = 100}
  __init30() {this.numTries = 3}
  __init31() {this.queueDropExceedingMaxsize = DEFAULT_QUEUE_SIZE}
  __init32() {this.queueDropLoggingPeriod = 60}
  __init33() {this.failedPublishPayloadsDir = void 0}
  __init34() {this.allPublishPayloadsDir = void 0}
  __init35() {this._disabled = false}
  __init36() {this.queueDropLoggingState = {
    numDropped: 0,
    lastLoggedTimestamp: 0
  }}
  constructor(apiConn, opts) {;_class8.prototype.__init23.call(this);_class8.prototype.__init24.call(this);_class8.prototype.__init25.call(this);_class8.prototype.__init26.call(this);_class8.prototype.__init27.call(this);_class8.prototype.__init28.call(this);_class8.prototype.__init29.call(this);_class8.prototype.__init30.call(this);_class8.prototype.__init31.call(this);_class8.prototype.__init32.call(this);_class8.prototype.__init33.call(this);_class8.prototype.__init34.call(this);_class8.prototype.__init35.call(this);_class8.prototype.__init36.call(this);
    opts = _nullishCoalesce(opts, () => ( {}));
    this.apiConn = apiConn;
    const syncFlushEnv = Number(isomorph_default.getEnv("BRAINTRUST_SYNC_FLUSH"));
    if (!isNaN(syncFlushEnv)) {
      this.syncFlush = Boolean(syncFlushEnv);
    }
    const defaultBatchSizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_DEFAULT_BATCH_SIZE")
    );
    if (!isNaN(defaultBatchSizeEnv)) {
      this.defaultBatchSize = defaultBatchSizeEnv;
    }
    const maxRequestSizeEnv = Number(isomorph_default.getEnv("BRAINTRUST_MAX_REQUEST_SIZE"));
    if (!isNaN(maxRequestSizeEnv)) {
      this.maxRequestSize = maxRequestSizeEnv;
    }
    const numTriesEnv = Number(isomorph_default.getEnv("BRAINTRUST_NUM_RETRIES"));
    if (!isNaN(numTriesEnv)) {
      this.numTries = numTriesEnv + 1;
    }
    const queueDropExceedingMaxsizeEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_EXCEEDING_MAXSIZE")
    );
    if (!isNaN(queueDropExceedingMaxsizeEnv)) {
      this.queueDropExceedingMaxsize = queueDropExceedingMaxsizeEnv;
    }
    this.queue = new Queue(this.queueDropExceedingMaxsize);
    const queueDropLoggingPeriodEnv = Number(
      isomorph_default.getEnv("BRAINTRUST_QUEUE_DROP_LOGGING_PERIOD")
    );
    if (!isNaN(queueDropLoggingPeriodEnv)) {
      this.queueDropLoggingPeriod = queueDropLoggingPeriodEnv;
    }
    const failedPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_FAILED_PUBLISH_PAYLOADS_DIR"
    );
    if (failedPublishPayloadsDirEnv) {
      this.failedPublishPayloadsDir = failedPublishPayloadsDirEnv;
    }
    const allPublishPayloadsDirEnv = isomorph_default.getEnv(
      "BRAINTRUST_ALL_PUBLISH_PAYLOADS_DIR"
    );
    if (allPublishPayloadsDirEnv) {
      this.allPublishPayloadsDir = allPublishPayloadsDirEnv;
    }
    if (!opts.noExitFlush) {
      isomorph_default.processOn("beforeExit", async () => {
        await this.flush();
      });
    }
    this.onFlushError = opts.onFlushError;
  }
  setMaskingFunction(maskingFunction) {
    this.maskingFunction = maskingFunction;
  }
  log(items) {
    if (this._disabled) {
      return;
    }
    const droppedItems = this.queue.push(...items);
    if (!this.syncFlush) {
      this.triggerActiveFlush();
    }
    if (droppedItems.length) {
      this.registerDroppedItemCount(droppedItems.length);
      if (this.allPublishPayloadsDir || this.failedPublishPayloadsDir) {
        this.dumpDroppedEvents(droppedItems);
      }
    }
  }
  async flush() {
    if (this.syncFlush) {
      this.triggerActiveFlush();
    }
    await this.activeFlush;
    if (this.activeFlushError) {
      const err = this.activeFlushError;
      this.activeFlushError = void 0;
      if (this.syncFlush) {
        throw err;
      }
    }
  }
  async flushOnce(args) {
    if (this._disabled) {
      this.queue.clear();
      return;
    }
    const batchSize = _nullishCoalesce(_optionalChain([args, 'optionalAccess', _29 => _29.batchSize]), () => ( this.defaultBatchSize));
    const wrappedItems = this.queue.drain();
    const [allItems, attachments] = await this.unwrapLazyValues(wrappedItems);
    if (allItems.length === 0) {
      return;
    }
    const allItemsStr = allItems.map(
      (bucket) => bucket.map((item) => JSON.stringify(item))
    );
    const batchSets = batchItems({
      items: allItemsStr,
      batchMaxNumItems: batchSize,
      batchMaxNumBytes: this.maxRequestSize / 2
    });
    for (const batchSet of batchSets) {
      const postPromises = batchSet.map(
        (batch) => (async () => {
          try {
            await this.submitLogsRequest(batch);
            return { type: "success" };
          } catch (e) {
            return { type: "error", value: e };
          }
        })()
      );
      const results = await Promise.all(postPromises);
      const failingResultErrors = results.map((r) => r.type === "success" ? void 0 : r.value).filter((r) => r !== void 0);
      if (failingResultErrors.length) {
        throw new AggregateError(
          failingResultErrors,
          `Encountered the following errors while logging:`
        );
      }
    }
    const attachmentErrors = [];
    for (const attachment of attachments) {
      try {
        const result = await attachment.upload();
        if (result.upload_status === "error") {
          throw new Error(result.error_message);
        }
      } catch (error) {
        attachmentErrors.push(error);
      }
    }
    if (attachmentErrors.length === 1) {
      throw attachmentErrors[0];
    } else if (attachmentErrors.length > 1) {
      throw new AggregateError(
        attachmentErrors,
        `Encountered the following errors while uploading attachments:`
      );
    }
    if (this.queue.length() > 0) {
      await this.flushOnce(args);
    }
  }
  async unwrapLazyValues(wrappedItems) {
    for (let i = 0; i < this.numTries; ++i) {
      try {
        const items = await Promise.all(wrappedItems.map((x) => x.get()));
        const attachments = [];
        items.forEach((item) => extractAttachments(item, attachments));
        let mergedItems = mergeRowBatch(items);
        if (this.maskingFunction) {
          mergedItems = mergedItems.map(
            (batch) => batch.map((item) => {
              const maskedItem = { ...item };
              for (const field of REDACTION_FIELDS) {
                if (item[field] !== void 0) {
                  const maskedValue = applyMaskingToField(
                    this.maskingFunction,
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    item[field],
                    field
                  );
                  if (maskedValue instanceof MaskingError) {
                    delete maskedItem[field];
                    if (maskedItem.error) {
                      maskedItem.error = `${maskedItem.error}; ${maskedValue.errorMsg}`;
                    } else {
                      maskedItem.error = maskedValue.errorMsg;
                    }
                  } else {
                    maskedItem[field] = maskedValue;
                  }
                }
              }
              return maskedItem;
            })
          );
        }
        return [mergedItems, attachments];
      } catch (e) {
        let errmsg = "Encountered error when constructing records to flush";
        const isRetrying = i + 1 < this.numTries;
        if (isRetrying) {
          errmsg += ". Retrying";
        }
        console.warn(errmsg);
        if (!isRetrying) {
          console.warn(
            `Failed to construct log records to flush after ${this.numTries} attempts. Dropping batch`
          );
          throw e;
        } else {
          console.warn(e);
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve) => setTimeout(resolve, sleepTimeS * 1e3)
          );
        }
      }
    }
    throw new Error("Impossible");
  }
  async submitLogsRequest(items) {
    const conn = await this.apiConn.get();
    const dataStr = constructLogs3Data(items);
    if (this.allPublishPayloadsDir) {
      await _HTTPBackgroundLogger.writePayloadToDir({
        payloadDir: this.allPublishPayloadsDir,
        payload: dataStr
      });
    }
    for (let i = 0; i < this.numTries; i++) {
      const startTime = now();
      let error = void 0;
      try {
        await conn.post_json("logs3", dataStr);
      } catch (e) {
        error = e;
      }
      if (error === void 0) {
        return;
      }
      const isRetrying = i + 1 < this.numTries;
      const retryingText = isRetrying ? "" : " Retrying";
      const errorText = (() => {
        if (error instanceof FailedHTTPResponse) {
          return `${error.status} (${error.text}): ${error.data}`;
        } else {
          return `${error}`;
        }
      })();
      const errMsg = `log request failed. Elapsed time: ${(now() - startTime) / 1e3} seconds. Payload size: ${dataStr.length}.${retryingText}
Error: ${errorText}`;
      if (!isRetrying && this.failedPublishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({
          payloadDir: this.failedPublishPayloadsDir,
          payload: dataStr
        });
        this.logFailedPayloadsDir();
      }
      if (!isRetrying) {
        console.warn(
          `log request failed after ${this.numTries} retries. Dropping batch`
        );
        throw new Error(errMsg);
      } else {
        console.warn(errMsg);
        if (isRetrying) {
          const sleepTimeS = BACKGROUND_LOGGER_BASE_SLEEP_TIME_S * 2 ** i;
          console.info(`Sleeping for ${sleepTimeS}s`);
          await new Promise(
            (resolve) => setTimeout(resolve, sleepTimeS * 1e3)
          );
        }
      }
    }
  }
  registerDroppedItemCount(numItems) {
    if (numItems <= 0) {
      return;
    }
    this.queueDropLoggingState.numDropped += numItems;
    const timeNow = getCurrentUnixTimestamp();
    if (timeNow - this.queueDropLoggingState.lastLoggedTimestamp > this.queueDropLoggingPeriod) {
      console.warn(
        `Dropped ${this.queueDropLoggingState.numDropped} elements due to full queue`
      );
      if (this.failedPublishPayloadsDir) {
        this.logFailedPayloadsDir();
      }
      this.queueDropLoggingState.numDropped = 0;
      this.queueDropLoggingState.lastLoggedTimestamp = timeNow;
    }
  }
  async dumpDroppedEvents(wrappedItems) {
    const publishPayloadsDir = [
      this.allPublishPayloadsDir,
      this.failedPublishPayloadsDir
    ].reduce((acc, x) => x ? acc.concat([x]) : acc, new Array());
    if (!(wrappedItems.length && publishPayloadsDir.length)) {
      return;
    }
    try {
      const [allItems, allAttachments] = await this.unwrapLazyValues(wrappedItems);
      const dataStr = constructLogs3Data(
        allItems.map((x) => JSON.stringify(x))
      );
      const attachmentStr = JSON.stringify(
        allAttachments.map((a) => a.debugInfo())
      );
      const payload = `{"data": ${dataStr}, "attachments": ${attachmentStr}}
`;
      for (const payloadDir of publishPayloadsDir) {
        await _HTTPBackgroundLogger.writePayloadToDir({ payloadDir, payload });
      }
    } catch (e) {
      console.error(e);
    }
  }
  static async writePayloadToDir({
    payloadDir,
    payload
  }) {
    if (!(isomorph_default.pathJoin && isomorph_default.mkdir && isomorph_default.writeFile)) {
      console.warn(
        "Cannot dump payloads: filesystem-operations not supported on this platform"
      );
      return;
    }
    const payloadFile = isomorph_default.pathJoin(
      payloadDir,
      `payload_${getCurrentUnixTimestamp()}_${_uuid.v4.call(void 0, ).slice(0, 8)}.json`
    );
    try {
      await isomorph_default.mkdir(payloadDir, { recursive: true });
      await isomorph_default.writeFile(payloadFile, payload);
    } catch (e) {
      console.error(
        `Failed to write failed payload to output file ${payloadFile}:
`,
        e
      );
    }
  }
  triggerActiveFlush() {
    if (this.activeFlushResolved) {
      this.activeFlushResolved = false;
      this.activeFlushError = void 0;
      this.activeFlush = (async () => {
        try {
          await this.flushOnce();
        } catch (err) {
          if (err instanceof AggregateError) {
            for (const e of err.errors) {
              _optionalChain([this, 'access', _30 => _30.onFlushError, 'optionalCall', _31 => _31(e)]);
            }
          } else {
            _optionalChain([this, 'access', _32 => _32.onFlushError, 'optionalCall', _33 => _33(err)]);
          }
          this.activeFlushError = err;
        } finally {
          this.activeFlushResolved = true;
        }
      })();
      _functions.waitUntil.call(void 0, this.activeFlush);
    }
  }
  logFailedPayloadsDir() {
    console.warn(`Logging failed payloads to ${this.failedPublishPayloadsDir}`);
  }
  // Should only be called by BraintrustState.
  internalReplaceApiConn(apiConn) {
    this.apiConn = new LazyValue(async () => apiConn);
  }
  disable() {
    this._disabled = true;
  }
  enforceQueueSizeLimit(enforce) {
    this.queue.enforceQueueSizeLimit(enforce);
  }
}, _class8);
function init(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either init(project, options) or init(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    experiment,
    description,
    dataset,
    baseExperiment,
    isPublic,
    open,
    update,
    appUrl,
    apiKey,
    orgName,
    forceLogin,
    fetch: fetch2,
    metadata,
    gitMetadataSettings,
    projectId,
    baseExperimentId,
    repoInfo,
    state: stateArg
  } = options;
  if (!project && !projectId) {
    throw new Error("Must specify at least one of project or projectId");
  }
  if (open && update) {
    throw new Error("Cannot open and update an experiment at the same time");
  }
  const state = _nullishCoalesce(stateArg, () => ( _globalState));
  state.enforceQueueSizeLimit(false);
  if (open) {
    if (isEmpty(experiment)) {
      throw new Error(`Cannot open an experiment without specifying its name`);
    }
    const lazyMetadata2 = new LazyValue(
      async () => {
        await state.login({ apiKey, appUrl, orgName, fetch: fetch2, forceLogin });
        const args = {
          project_name: project,
          project_id: projectId,
          org_name: state.orgName,
          experiment_name: experiment
        };
        const response = await state.appConn().post_json("api/experiment/get", args);
        if (response.length === 0) {
          throw new Error(
            `Experiment ${experiment} not found in project ${_nullishCoalesce(projectId, () => ( project))}.`
          );
        }
        const info = response[0];
        return {
          project: {
            id: info.project_id,
            name: _nullishCoalesce(project, () => ( "UNKNOWN_PROJECT")),
            fullInfo: {}
          },
          experiment: {
            id: info.id,
            name: info.name,
            fullInfo: info
          }
        };
      }
    );
    return new ReadonlyExperiment(
      _nullishCoalesce(stateArg, () => ( _globalState)),
      lazyMetadata2
    );
  }
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({ apiKey, appUrl, orgName });
      const args = {
        project_name: project,
        project_id: projectId,
        org_id: state.orgId,
        update
      };
      if (experiment) {
        args["experiment_name"] = experiment;
      }
      if (description) {
        args["description"] = description;
      }
      const repoInfoArg = await (async () => {
        if (repoInfo) {
          return repoInfo;
        }
        let mergedGitMetadataSettings = {
          ...state.gitMetadataSettings || {
            collect: "all"
          }
        };
        if (gitMetadataSettings) {
          mergedGitMetadataSettings = mergeGitMetadataSettings(
            mergedGitMetadataSettings,
            gitMetadataSettings
          );
        }
        return await isomorph_default.getRepoInfo(mergedGitMetadataSettings);
      })();
      if (repoInfoArg) {
        args["repo_info"] = repoInfoArg;
      }
      if (baseExperimentId) {
        args["base_exp_id"] = baseExperimentId;
      } else if (baseExperiment) {
        args["base_experiment"] = baseExperiment;
      } else {
        args["ancestor_commits"] = await isomorph_default.getPastNAncestors();
      }
      if (dataset !== void 0) {
        args["dataset_id"] = await dataset.id;
        args["dataset_version"] = await dataset.version();
      }
      if (isPublic !== void 0) {
        args["public"] = isPublic;
      }
      if (metadata) {
        args["metadata"] = metadata;
      }
      let response = null;
      while (true) {
        try {
          response = await state.appConn().post_json("api/experiment/register", args);
          break;
        } catch (e) {
          if (args["base_experiment"] && `${"data" in e && e.data}`.includes("base experiment")) {
            console.warn(
              `Base experiment ${args["base_experiment"]} not found.`
            );
            delete args["base_experiment"];
          } else {
            throw e;
          }
        }
      }
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        experiment: {
          id: response.experiment.id,
          name: response.experiment.name,
          created: response.experiment.created,
          fullInfo: response.experiment
        }
      };
    }
  );
  const ret = new Experiment2(state, lazyMetadata, dataset);
  if (_nullishCoalesce(options.setCurrent, () => ( true))) {
    state.currentExperiment = ret;
  }
  return ret;
}
function initExperiment(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either init(project, options) or init(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  return init(options);
}
function withExperiment(project, callback, options = {}) {
  console.warn(
    "withExperiment is deprecated and will be removed in a future version of braintrust. Simply create the experiment with `init`."
  );
  const experiment = init(project, options);
  return callback(experiment);
}
function withLogger(callback, options = {}) {
  console.warn(
    "withLogger is deprecated and will be removed in a future version of braintrust. Simply create the logger with `initLogger`."
  );
  const logger = initLogger(options);
  return callback(logger);
}
function initDataset(projectOrOptions, optionalOptions) {
  const options = (() => {
    if (typeof projectOrOptions === "string") {
      return { ...optionalOptions, project: projectOrOptions };
    } else {
      if (optionalOptions !== void 0) {
        throw new Error(
          "Cannot specify options struct as both parameters. Must call either initDataset(project, options) or initDataset(options)."
        );
      }
      return projectOrOptions;
    }
  })();
  const {
    project,
    dataset,
    description,
    version,
    appUrl,
    apiKey,
    orgName,
    fetch: fetch2,
    forceLogin,
    projectId,
    metadata,
    useOutput: legacy,
    state: stateArg,
    _internal_btql
  } = options;
  const state = _nullishCoalesce(stateArg, () => ( _globalState));
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({
        orgName,
        apiKey,
        appUrl,
        fetch: fetch2,
        forceLogin
      });
      const args = {
        org_id: state.orgId,
        project_name: project,
        project_id: projectId,
        dataset_name: dataset,
        description,
        metadata
      };
      const response = await state.appConn().post_json("api/dataset/register", args);
      return {
        project: {
          id: response.project.id,
          name: response.project.name,
          fullInfo: response.project
        },
        dataset: {
          id: response.dataset.id,
          name: response.dataset.name,
          fullInfo: response.dataset
        }
      };
    }
  );
  return new Dataset2(
    _nullishCoalesce(stateArg, () => ( _globalState)),
    lazyMetadata,
    version,
    legacy,
    _internal_btql
  );
}
function withDataset(project, callback, options = {}) {
  console.warn(
    "withDataset is deprecated and will be removed in a future version of braintrust. Simply create the dataset with `initDataset`."
  );
  const dataset = initDataset(project, options);
  return callback(dataset);
}
async function computeLoggerMetadata(state, {
  project_name,
  project_id
}) {
  await state.login({});
  const org_id = state.orgId;
  if (isEmpty(project_id)) {
    const response = await state.appConn().post_json("api/project/register", {
      project_name: project_name || GLOBAL_PROJECT,
      org_id
    });
    return {
      org_id,
      project: {
        id: response.project.id,
        name: response.project.name,
        fullInfo: response.project
      }
    };
  } else if (isEmpty(project_name)) {
    const response = await state.appConn().get_json("api/project", {
      id: project_id
    });
    return {
      org_id,
      project: {
        id: project_id,
        name: response.name,
        fullInfo: response.project
      }
    };
  } else {
    return {
      org_id,
      project: { id: project_id, name: project_name, fullInfo: {} }
    };
  }
}
function initLogger(options = {}) {
  const {
    projectName,
    projectId,
    asyncFlush: asyncFlushArg,
    appUrl,
    apiKey,
    orgName,
    forceLogin,
    fetch: fetch2,
    state: stateArg
  } = options || {};
  const asyncFlush = asyncFlushArg === void 0 ? true : asyncFlushArg;
  const computeMetadataArgs = {
    project_name: projectName,
    project_id: projectId
  };
  const state = _nullishCoalesce(stateArg, () => ( _globalState));
  state.enforceQueueSizeLimit(true);
  const lazyMetadata = new LazyValue(
    async () => {
      await state.login({
        orgName,
        apiKey,
        appUrl,
        forceLogin,
        fetch: fetch2
      });
      return computeLoggerMetadata(state, computeMetadataArgs);
    }
  );
  const ret = new Logger(state, lazyMetadata, {
    asyncFlush,
    computeMetadataArgs
  });
  if (_nullishCoalesce(options.setCurrent, () => ( true))) {
    state.currentLogger = ret;
  }
  return ret;
}
async function loadPrompt({
  projectName,
  projectId,
  slug,
  version,
  environment,
  id,
  defaults,
  noTrace = false,
  appUrl,
  apiKey,
  orgName,
  fetch: fetch2,
  forceLogin,
  state: stateArg
}) {
  if (version && environment) {
    throw new Error(
      "Cannot specify both 'version' and 'environment' parameters. Please use only one (remove the other)."
    );
  }
  if (id) {
  } else if (isEmpty(projectName) && isEmpty(projectId)) {
    throw new Error("Must specify either projectName or projectId");
  } else if (isEmpty(slug)) {
    throw new Error("Must specify slug");
  }
  const state = _nullishCoalesce(stateArg, () => ( _globalState));
  let response;
  try {
    await state.login({
      orgName,
      apiKey,
      appUrl,
      fetch: fetch2,
      forceLogin
    });
    if (id) {
      response = await state.apiConn().get_json(`v1/prompt/${id}`, {
        ...version && { version },
        ...environment && { environment }
      });
      if (response) {
        response = { objects: [response] };
      }
    } else {
      response = await state.apiConn().get_json("v1/prompt", {
        project_name: projectName,
        project_id: projectId,
        slug,
        version,
        ...environment && { environment }
      });
    }
  } catch (e) {
    if (environment || version) {
      throw new Error(`Prompt not found with specified parameters: ${e}`);
    }
    console.warn("Failed to load prompt, attempting to fall back to cache:", e);
    let prompt2;
    if (id) {
      prompt2 = await state.promptCache.get({ id });
      if (!prompt2) {
        throw new Error(
          `Prompt with id ${id} not found (not found on server or in local cache): ${e}`
        );
      }
    } else {
      prompt2 = await state.promptCache.get({
        slug,
        projectId,
        projectName,
        version: _nullishCoalesce(version, () => ( "latest"))
      });
      if (!prompt2) {
        throw new Error(
          `Prompt ${slug} (version ${_nullishCoalesce(version, () => ( "latest"))}) not found in ${[
            _nullishCoalesce(projectName, () => ( projectId))
          ]} (not found on server or in local cache): ${e}`
        );
      }
    }
    return prompt2;
  }
  if (!("objects" in response) || response.objects.length === 0) {
    if (id) {
      throw new Error(`Prompt with id ${id} not found.`);
    } else {
      throw new Error(
        `Prompt ${slug} not found in ${[_nullishCoalesce(projectName, () => ( projectId))]}`
      );
    }
  } else if (response.objects.length > 1) {
    if (id) {
      throw new Error(
        `Multiple prompts found with id ${id}. This should never happen.`
      );
    } else {
      throw new Error(
        `Multiple prompts found with slug ${slug} in project ${_nullishCoalesce(projectName, () => ( projectId))}. This should never happen.`
      );
    }
  }
  const metadata = Prompt.parse(response["objects"][0]);
  const prompt = new Prompt2(metadata, defaults || {}, noTrace);
  try {
    if (id) {
      await state.promptCache.set({ id }, prompt);
    } else if (slug) {
      await state.promptCache.set(
        { slug, projectId, projectName, version: _nullishCoalesce(version, () => ( "latest")) },
        prompt
      );
    }
  } catch (e) {
    console.warn("Failed to set prompt in cache:", e);
  }
  return prompt;
}
function setMaskingFunction(maskingFunction) {
  _globalState.setMaskingFunction(maskingFunction);
}
async function login(options = {}) {
  const { forceLogin = false } = options || {};
  if (_globalState.loggedIn && !forceLogin) {
    let checkUpdatedParam2 = function(varname, arg, orig) {
      if (!isEmpty(arg) && !isEmpty(orig) && arg !== orig) {
        throw new Error(
          `Re-logging in with different ${varname} (${arg}) than original (${orig}). To force re-login, pass \`forceLogin: true\``
        );
      }
    };
    var checkUpdatedParam = checkUpdatedParam2;
    checkUpdatedParam2("appUrl", options.appUrl, _globalState.appUrl);
    checkUpdatedParam2(
      "apiKey",
      options.apiKey ? HTTPConnection.sanitize_token(options.apiKey) : void 0,
      _globalState.loginToken
    );
    checkUpdatedParam2("orgName", options.orgName, _globalState.orgName);
    return _globalState;
  }
  await _globalState.login(options);
  globalThis.__inherited_braintrust_state = _globalState;
  return _globalState;
}
async function loginToState(options = {}) {
  const {
    appUrl = isomorph_default.getEnv("BRAINTRUST_APP_URL") || "https://www.braintrust.dev",
    apiKey = isomorph_default.getEnv("BRAINTRUST_API_KEY"),
    orgName = isomorph_default.getEnv("BRAINTRUST_ORG_NAME"),
    fetch: fetch2 = globalThis.fetch
  } = options || {};
  const appPublicUrl = isomorph_default.getEnv("BRAINTRUST_APP_PUBLIC_URL") || appUrl;
  const state = new BraintrustState(options);
  state.resetLoginInfo();
  state.appUrl = appUrl;
  state.appPublicUrl = appPublicUrl;
  let conn = null;
  if (!apiKey) {
    throw new Error(
      "Please specify an api key (e.g. by setting BRAINTRUST_API_KEY)."
    );
  } else if (apiKey === TEST_API_KEY) {
    const testOrgInfo = [
      {
        id: "test-org-id",
        name: "test-org-name",
        api_url: "https://braintrust.dev/fake-api-url"
      }
    ];
    state.loggedIn = true;
    state.loginToken = TEST_API_KEY;
    _saveOrgInfo(state, testOrgInfo, testOrgInfo[0].name);
    return state;
  } else {
    const resp = await checkResponse(
      await fetch2(_urljoin(state.appUrl, `/api/apikey/login`), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        }
      })
    );
    const info = await resp.json();
    _saveOrgInfo(state, info.org_info, orgName);
    if (!state.apiUrl) {
      if (orgName) {
        throw new Error(
          `Unable to log into organization '${orgName}'. Are you sure this credential is scoped to the organization?`
        );
      } else {
        throw new Error(
          "Unable to log into any organization with the provided credential."
        );
      }
    }
    conn = state.apiConn();
    conn.set_token(apiKey);
    if (!conn) {
      throw new Error("Conn should be set at this point (a bug)");
    }
    conn.make_long_lived();
    state.appConn().set_token(apiKey);
    if (state.proxyUrl) {
      state.proxyConn().set_token(apiKey);
    }
    state.loginToken = conn.token;
    state.loggedIn = true;
    state.loginReplaceApiConn(conn);
  }
  return state;
}
function log(event) {
  console.warn(
    "braintrust.log is deprecated and will be removed in a future version of braintrust. Use `experiment.log` instead."
  );
  const e = currentExperiment();
  if (!e) {
    throw new Error("Not initialized. Please call init() first");
  }
  return e.log(event);
}
async function summarize(options = {}) {
  console.warn(
    "braintrust.summarize is deprecated and will be removed in a future version of braintrust. Use `experiment.summarize` instead."
  );
  const e = currentExperiment();
  if (!e) {
    throw new Error("Not initialized. Please call init() first");
  }
  return await e.summarize(options);
}
function currentExperiment(options) {
  const state = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _34 => _34.state]), () => ( _globalState));
  return state.currentExperiment;
}
function currentLogger(options) {
  const state = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _35 => _35.state]), () => ( _globalState));
  return castLogger(state.currentLogger, _optionalChain([options, 'optionalAccess', _36 => _36.asyncFlush]));
}
function currentSpan(options) {
  const state = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _37 => _37.state]), () => ( _globalState));
  return _nullishCoalesce(state.currentSpan.getStore(), () => ( NOOP_SPAN));
}
function getSpanParentObject(options) {
  const state = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _38 => _38.state]), () => ( _globalState));
  const parentSpan = currentSpan({ state });
  if (!Object.is(parentSpan, NOOP_SPAN)) {
    return parentSpan;
  }
  const parentStr = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _39 => _39.parent]), () => ( state.currentParent.getStore()));
  if (parentStr) return SpanComponentsV3.fromStr(parentStr);
  const experiment = currentExperiment();
  if (experiment) {
    return experiment;
  }
  const logger = currentLogger(options);
  if (logger) {
    return logger;
  }
  return NOOP_SPAN;
}
function logError(span, error) {
  let errorMessage = "<error>";
  let stackTrace = "";
  if (error instanceof Error) {
    errorMessage = error.message;
    stackTrace = error.stack || "";
  } else {
    errorMessage = String(error);
  }
  span.log({ error: `${errorMessage}

${stackTrace}` });
}
function traced(callback, args) {
  const { span, isSyncFlushLogger } = startSpanAndIsLogger(args);
  const ret = runCatchFinally(
    () => {
      if (_nullishCoalesce(_optionalChain([args, 'optionalAccess', _40 => _40.setCurrent]), () => ( true))) {
        return withCurrent(span, callback);
      } else {
        return callback(span);
      }
    },
    (e) => {
      logError(span, e);
      throw e;
    },
    () => span.end()
  );
  if (_optionalChain([args, 'optionalAccess', _41 => _41.asyncFlush]) === void 0 || _optionalChain([args, 'optionalAccess', _42 => _42.asyncFlush])) {
    return ret;
  } else {
    return (async () => {
      const awaitedRet = await ret;
      if (isSyncFlushLogger) {
        await span.flush();
      }
      return awaitedRet;
    })();
  }
}
function isGeneratorFunction(fn) {
  return Object.prototype.toString.call(fn) === "[object GeneratorFunction]";
}
function isAsyncGeneratorFunction(fn) {
  return Object.prototype.toString.call(fn) === "[object AsyncGeneratorFunction]";
}
function wrapTracedSyncGenerator(fn, spanArgs, noTraceIO) {
  const wrapper = function* (...fnArgs) {
    const span = startSpan(spanArgs);
    try {
      if (!noTraceIO) {
        span.log({ input: fnArgs });
      }
      const envValue = isomorph_default.getEnv("BRAINTRUST_MAX_GENERATOR_ITEMS");
      const maxItems = envValue !== void 0 ? Number(envValue) : 1e3;
      if (!noTraceIO && maxItems !== 0) {
        let collected = [];
        let truncated = false;
        const gen = generatorWithCurrent(span, fn.apply(this, fnArgs));
        try {
          for (const value of gen) {
            if (maxItems === -1 || !truncated && collected.length < maxItems) {
              collected.push(value);
            } else {
              truncated = true;
              collected = [];
              console.warn(
                `Generator output exceeded limit of ${maxItems} items, output not logged. Increase BRAINTRUST_MAX_GENERATOR_ITEMS or set to -1 to disable limit.`
              );
            }
            yield value;
          }
          if (!truncated) {
            span.log({ output: collected });
          }
        } catch (error) {
          logError(span, error);
          if (!truncated && collected.length > 0) {
            span.log({ output: collected });
          }
          throw error;
        }
      } else {
        const gen = generatorWithCurrent(span, fn.apply(this, fnArgs));
        for (const value of gen) {
          yield value;
        }
      }
    } finally {
      span.end();
    }
  };
  Object.defineProperty(wrapper, "name", { value: fn.name });
  return wrapper;
}
function wrapTracedAsyncGenerator(fn, spanArgs, noTraceIO) {
  const wrapper = async function* (...fnArgs) {
    const span = startSpan(spanArgs);
    try {
      if (!noTraceIO) {
        span.log({ input: fnArgs });
      }
      const envValue = isomorph_default.getEnv("BRAINTRUST_MAX_GENERATOR_ITEMS");
      const maxItems = envValue !== void 0 ? Number(envValue) : 1e3;
      if (!noTraceIO && maxItems !== 0) {
        let collected = [];
        let truncated = false;
        const gen = asyncGeneratorWithCurrent(span, fn.apply(this, fnArgs));
        try {
          for await (const value of gen) {
            if (maxItems === -1 || !truncated && collected.length < maxItems) {
              collected.push(value);
            } else {
              truncated = true;
              collected = [];
              console.warn(
                `Generator output exceeded limit of ${maxItems} items, output not logged. Increase BRAINTRUST_MAX_GENERATOR_ITEMS or set to -1 to disable limit.`
              );
            }
            yield value;
          }
          if (!truncated) {
            span.log({ output: collected });
          }
        } catch (error) {
          logError(span, error);
          if (!truncated && collected.length > 0) {
            span.log({ output: collected });
          }
          throw error;
        }
      } else {
        const gen = asyncGeneratorWithCurrent(span, fn.apply(this, fnArgs));
        for await (const value of gen) {
          yield value;
        }
      }
    } finally {
      span.end();
    }
  };
  Object.defineProperty(wrapper, "name", { value: fn.name });
  return wrapper;
}
function wrapTraced(fn, args) {
  const spanArgs = {
    name: fn.name,
    type: "function",
    ...args
  };
  const hasExplicitInput = args && args.event && "input" in args.event && args.event.input !== void 0;
  const hasExplicitOutput = args && args.event && args.event.output !== void 0;
  const noTraceIO = _optionalChain([args, 'optionalAccess', _43 => _43.noTraceIO]) || hasExplicitInput || hasExplicitOutput;
  if (isGeneratorFunction(fn)) {
    return wrapTracedSyncGenerator(fn, spanArgs, !!noTraceIO);
  }
  if (isAsyncGeneratorFunction(fn)) {
    return wrapTracedAsyncGenerator(fn, spanArgs, !!noTraceIO);
  }
  if (_optionalChain([args, 'optionalAccess', _44 => _44.asyncFlush])) {
    return (...fnArgs) => traced((span) => {
      if (!hasExplicitInput) {
        span.log({ input: fnArgs });
      }
      const output = fn(...fnArgs);
      if (!hasExplicitOutput) {
        if (output instanceof Promise) {
          return (async () => {
            const result = await output;
            span.log({ output: result });
            return result;
          })();
        } else {
          span.log({ output });
        }
      }
      return output;
    }, spanArgs);
  } else {
    return (...fnArgs) => traced(async (span) => {
      if (!hasExplicitInput) {
        span.log({ input: fnArgs });
      }
      const outputResult = fn(...fnArgs);
      const output = await outputResult;
      if (!hasExplicitOutput) {
        span.log({ output });
      }
      return output;
    }, spanArgs);
  }
}
var traceable = wrapTraced;
function startSpan(args) {
  return startSpanAndIsLogger(args).span;
}
async function flush(options) {
  const state = _nullishCoalesce(_optionalChain([options, 'optionalAccess', _45 => _45.state]), () => ( _globalState));
  return await state.bgLogger().flush();
}
function setFetch(fetch2) {
  _globalState.setFetch(fetch2);
}
function startSpanAndIsLogger(args) {
  const state = _nullishCoalesce(_optionalChain([args, 'optionalAccess', _46 => _46.state]), () => ( _globalState));
  const parentObject = getSpanParentObject({
    asyncFlush: _optionalChain([args, 'optionalAccess', _47 => _47.asyncFlush]),
    parent: _optionalChain([args, 'optionalAccess', _48 => _48.parent]),
    state
  });
  if (parentObject instanceof SpanComponentsV3) {
    const parentSpanIds = parentObject.data.row_id ? {
      spanId: parentObject.data.span_id,
      rootSpanId: parentObject.data.root_span_id
    } : void 0;
    const span = new SpanImpl({
      state,
      ...args,
      parentObjectType: parentObject.data.object_type,
      parentObjectId: new LazyValue(
        spanComponentsToObjectIdLambda(state, parentObject)
      ),
      parentComputeObjectMetadataArgs: _nullishCoalesce(parentObject.data.compute_object_metadata_args, () => ( void 0)),
      parentSpanIds,
      propagatedEvent: _nullishCoalesce(_optionalChain([args, 'optionalAccess', _49 => _49.propagatedEvent]), () => ( // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      (_nullishCoalesce(parentObject.data.propagated_event, () => ( void 0)))))
    });
    return {
      span,
      isSyncFlushLogger: parentObject.data.object_type === 2 /* PROJECT_LOGS */ && // Since there's no parent logger here, we're free to choose the async flush
      // behavior, and therefore propagate along whatever we get from the arguments
      _optionalChain([args, 'optionalAccess', _50 => _50.asyncFlush]) === false
    };
  } else {
    const span = parentObject.startSpan(args);
    return {
      span,
      isSyncFlushLogger: parentObject.kind === "logger" && parentObject.asyncFlush === false
    };
  }
}
function withCurrent(span, callback, state = void 0) {
  return (_nullishCoalesce(state, () => ( _globalState))).currentSpan.run(span, () => callback(span));
}
function* generatorWithCurrent(span, gen, state = void 0) {
  let nextValue;
  while (true) {
    const result = withCurrent(
      span,
      () => {
        try {
          return gen.next(nextValue);
        } catch (e) {
          return { value: void 0, done: true, error: e };
        }
      },
      state
    );
    if ("error" in result) {
      throw result.error;
    }
    if (result.done) {
      return result.value;
    }
    nextValue = yield result.value;
  }
}
async function* asyncGeneratorWithCurrent(span, gen, state = void 0) {
  let nextValue;
  while (true) {
    const result = await withCurrent(
      span,
      async () => {
        try {
          return await gen.next(nextValue);
        } catch (e) {
          return { value: void 0, done: true, error: e };
        }
      },
      state
    );
    if ("error" in result) {
      throw result.error;
    }
    if (result.done) {
      return result.value;
    }
    nextValue = yield result.value;
  }
}
function withParent(parent, callback, state = void 0) {
  return (_nullishCoalesce(state, () => ( _globalState))).currentParent.run(parent, () => callback());
}
function _saveOrgInfo(state, org_info, org_name) {
  if (org_info.length === 0) {
    throw new Error("This user is not part of any organizations.");
  }
  for (const org of org_info) {
    if (org_name === void 0 || org.name === org_name) {
      state.orgId = org.id;
      state.orgName = org.name;
      state.apiUrl = _nullishCoalesce(isomorph_default.getEnv("BRAINTRUST_API_URL"), () => ( org.api_url));
      state.proxyUrl = _nullishCoalesce(isomorph_default.getEnv("BRAINTRUST_PROXY_URL"), () => ( org.proxy_url));
      state.gitMetadataSettings = org.git_metadata || void 0;
      break;
    }
  }
  if (state.orgId === void 0) {
    throw new Error(
      `Organization ${org_name} not found. Must be one of ${org_info.map((x) => x.name).join(", ")}`
    );
  }
}
function validateTags(tags) {
  const seen = /* @__PURE__ */ new Set();
  for (const tag of tags) {
    if (typeof tag !== "string") {
      throw new Error("tags must be strings");
    }
    if (seen.has(tag)) {
      throw new Error(`duplicate tag: ${tag}`);
    }
  }
}
function validateAndSanitizeExperimentLogPartialArgs(event) {
  if (event.scores) {
    if (Array.isArray(event.scores)) {
      throw new Error("scores must be an object, not an array");
    }
    for (let [name, score] of Object.entries(event.scores)) {
      if (typeof name !== "string") {
        throw new Error("score names must be strings");
      }
      if (score === null || score === void 0) {
        continue;
      }
      if (typeof score === "boolean") {
        score = score ? 1 : 0;
        event.scores[name] = score;
      }
      if (typeof score !== "number") {
        throw new Error("score values must be numbers");
      }
      if (score < 0 || score > 1) {
        throw new Error("score values must be between 0 and 1");
      }
    }
  }
  if (event.metadata) {
    for (const key of Object.keys(event.metadata)) {
      if (typeof key !== "string") {
        throw new Error("metadata keys must be strings");
      }
    }
  }
  if (event.metrics) {
    for (const [key, value] of Object.entries(event.metrics)) {
      if (typeof key !== "string") {
        throw new Error("metric keys must be strings");
      }
      if (value !== void 0 && typeof value !== "number") {
        throw new Error("metric values must be numbers");
      }
    }
  }
  if ("input" in event && event.input && "inputs" in event && event.inputs) {
    throw new Error(
      "Only one of input or inputs (deprecated) can be specified. Prefer input."
    );
  }
  if ("tags" in event && event.tags) {
    validateTags(event.tags);
  }
  if ("inputs" in event) {
    const { inputs, ...rest } = event;
    return { input: inputs, ...rest };
  } else {
    return { ...event };
  }
}
function deepCopyEvent(event) {
  const attachments = [];
  const IDENTIFIER = "_bt_internal_saved_attachment";
  const savedAttachmentSchema = _zod.z.strictObject({ [IDENTIFIER]: _zod.z.number() });
  const serialized = JSON.stringify(event, (_k, v) => {
    if (v instanceof SpanImpl || v instanceof NoopSpan) {
      return `<span>`;
    } else if (v instanceof Experiment2) {
      return `<experiment>`;
    } else if (v instanceof Dataset2) {
      return `<dataset>`;
    } else if (v instanceof Logger) {
      return `<logger>`;
    } else if (v instanceof BaseAttachment) {
      const idx = attachments.push(v);
      return { [IDENTIFIER]: idx - 1 };
    } else if (v instanceof ReadonlyAttachment) {
      return v.reference;
    }
    return v;
  });
  const x = JSON.parse(serialized, (_k, v) => {
    const parsedAttachment = savedAttachmentSchema.safeParse(v);
    if (parsedAttachment.success) {
      return attachments[parsedAttachment.data[IDENTIFIER]];
    }
    return v;
  });
  return x;
}
function extractAttachments(event, attachments) {
  for (const [key, value] of Object.entries(event)) {
    if (!value) {
      continue;
    }
    if (value instanceof BaseAttachment) {
      attachments.push(value);
      event[key] = value.reference;
      continue;
    }
    if (_optionalChain([value, 'optionalAccess', _51 => _51.type]) === BRAINTRUST_ATTACHMENT && value.key && !value.uploader) {
      continue;
    }
    if (_optionalChain([value, 'optionalAccess', _52 => _52.reference, 'optionalAccess', _53 => _53.type]) === BRAINTRUST_ATTACHMENT && _optionalChain([value, 'optionalAccess', _54 => _54.uploader])) {
      const attachment = new Attachment({
        data: value.dataDebugString,
        filename: value.reference.filename,
        contentType: value.reference.content_type
      });
      attachments.push(attachment);
      event[key] = attachment.reference;
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    extractAttachments(value, attachments);
  }
}
function enrichAttachments(event, state) {
  for (const [key, value] of Object.entries(event)) {
    const parsedValue = AttachmentReference.safeParse(value);
    if (parsedValue.success) {
      event[key] = new ReadonlyAttachment(parsedValue.data, state);
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    enrichAttachments(value, state);
  }
  return event;
}
async function resolveAttachmentsToBase64(event, state) {
  for (const [key, value] of Object.entries(event)) {
    if (value instanceof ReadonlyAttachment) {
      event[key] = await value.asBase64Url();
      continue;
    }
    if (!(value instanceof Object)) {
      continue;
    }
    await resolveAttachmentsToBase64(value, state);
  }
  return event;
}
function validateAndSanitizeExperimentLogFullArgs(event, hasDataset) {
  if ("input" in event && !isEmpty(event.input) && "inputs" in event && !isEmpty(event.inputs) || !("input" in event) && !("inputs" in event)) {
    throw new Error(
      "Exactly one of input or inputs (deprecated) must be specified. Prefer input."
    );
  }
  if (isEmpty(event.output)) {
    throw new Error("output must be specified");
  }
  if (isEmpty(event.scores)) {
    throw new Error("scores must be specified");
  }
  if (hasDataset && event.datasetRecordId === void 0) {
    throw new Error("datasetRecordId must be specified when using a dataset");
  } else if (!hasDataset && event.datasetRecordId !== void 0) {
    throw new Error(
      "datasetRecordId cannot be specified when not using a dataset"
    );
  }
  return event;
}
var INTERNAL_BTQL_LIMIT = 1e3;
var MAX_BTQL_ITERATIONS = 1e4;
var ObjectFetcher = (_class9 = class {
  constructor(objectType, pinnedVersion, mutateRecord, _internal_btql) {;_class9.prototype.__init37.call(this);
    this.objectType = objectType;
    this.pinnedVersion = pinnedVersion;
    this.mutateRecord = mutateRecord;
    this._internal_btql = _internal_btql;
  }
  __init37() {this._fetchedData = void 0}
  get id() {
    throw new Error("ObjectFetcher subclasses must have an 'id' attribute");
  }
  async getState() {
    throw new Error("ObjectFetcher subclasses must have a 'getState' method");
  }
  async *fetch() {
    const records = await this.fetchedData();
    for (const record of records) {
      yield record;
    }
  }
  [Symbol.asyncIterator]() {
    return this.fetch();
  }
  async fetchedData() {
    if (this._fetchedData === void 0) {
      const state = await this.getState();
      let data = void 0;
      let cursor = void 0;
      let iterations = 0;
      while (true) {
        const resp = await state.apiConn().post(
          `btql`,
          {
            query: {
              ...this._internal_btql,
              select: [
                {
                  op: "star"
                }
              ],
              from: {
                op: "function",
                name: {
                  op: "ident",
                  name: [this.objectType]
                },
                args: [
                  {
                    op: "literal",
                    value: await this.id
                  }
                ]
              },
              cursor,
              limit: INTERNAL_BTQL_LIMIT
            },
            use_columnstore: false,
            brainstore_realtime: true
          },
          { headers: { "Accept-Encoding": "gzip" } }
        );
        const respJson = await resp.json();
        data = (_nullishCoalesce(data, () => ( []))).concat(respJson.data);
        if (!respJson.cursor) {
          break;
        }
        cursor = respJson.cursor;
        iterations++;
        if (iterations > MAX_BTQL_ITERATIONS) {
          throw new Error("Too many BTQL iterations");
        }
      }
      this._fetchedData = this.mutateRecord ? _optionalChain([data, 'optionalAccess', _55 => _55.map, 'call', _56 => _56(this.mutateRecord)]) : data;
    }
    return this._fetchedData || [];
  }
  clearCache() {
    this._fetchedData = void 0;
  }
  async version() {
    if (this.pinnedVersion !== void 0) {
      return this.pinnedVersion;
    } else {
      const fetchedData = await this.fetchedData();
      let maxVersion = void 0;
      for (const record of fetchedData) {
        const xactId = String(_nullishCoalesce(record[TRANSACTION_ID_FIELD], () => ( "0")));
        if (maxVersion === void 0 || xactId > maxVersion) {
          maxVersion = xactId;
        }
      }
      return maxVersion;
    }
  }
}, _class9);
var Experiment2 = (_class10 = class extends ObjectFetcher {
  
  
  
  
  
  
  // For type identification.
  __init38() {this.kind = "experiment"}
  constructor(state, lazyMetadata, dataset) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));_class10.prototype.__init38.call(this);;
    this.lazyMetadata = lazyMetadata;
    this.dataset = dataset;
    this.lastStartTime = getCurrentUnixTimestamp();
    this.lazyId = new LazyValue(async () => await this.id);
    this.calledStartSpan = false;
    this.state = state;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  parentObjectType() {
    return 1 /* EXPERIMENT */;
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  /**
   * Log a single event to the experiment. The event will be batched and uploaded behind the scenes.
   *
   * @param event The event to log.
   * @param event.input: The arguments that uniquely define a test case (an arbitrary, JSON serializable object). Later on, Braintrust will use the `input` to know whether two test cases are the same between experiments, so they should not contain experiment-specific state. A simple rule of thumb is that if you run the same experiment twice, the `input` should be identical.
   * @param event.output: The output of your application, including post-processing (an arbitrary, JSON serializable object), that allows you to determine whether the result is correct or not. For example, in an app that generates SQL queries, the `output` should be the _result_ of the SQL query generated by the model, not the query itself, because there may be multiple valid queries that answer a single question.
   * @param event.expected: (Optional) The ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not. Braintrust currently does not compare `output` to `expected` for you, since there are so many different ways to do that correctly. Instead, these values are just used to help you navigate your experiments while digging into analyses. However, we may later use these values to re-score outputs or fine-tune your models.
   * @param event.error: (Optional) The error that occurred, if any. If you use tracing to run an experiment, errors are automatically logged when your code throws an exception.
   * @param event.scores: A dictionary of numeric values (between 0 and 1) to log. The scores should give you a variety of signals that help you determine how accurate the outputs are compared to what you expect and diagnose failures. For example, a summarization app might have one score that tells you how accurate the summary is, and another that measures the word similarity between the generated and grouth truth summary. The word similarity score could help you determine whether the summarization was covering similar concepts or not. You can use these scores to help you sort, filter, and compare experiments.
   * @param event.metadata: (Optional) a dictionary with additional data about the test example, model outputs, or just about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any JSON-serializable type, but its keys must be strings.
   * @param event.metrics: (Optional) a dictionary of metrics to log. The following keys are populated automatically: "start", "end".
   * @param event.id: (Optional) a unique identifier for the event. If you don't provide one, BrainTrust will generate one for you.
   * @param event.dataset_record_id: (Optional) the id of the dataset record that this event is associated with. This field is required if and only if the experiment is associated with a dataset. This field is unused and will be removed in a future version.
   * @param options Additional logging options
   * @param options.allowConcurrentWithSpans in rare cases where you need to log at the top level separately from spans on the experiment elsewhere, set this to true.
   * @returns The `id` of the logged event.
   */
  log(event, options) {
    if (this.calledStartSpan && !_optionalChain([options, 'optionalAccess', _57 => _57.allowConcurrentWithSpans])) {
      throw new Error(
        "Cannot run toplevel `log` method while using spans. To log to the span, call `experiment.traced` and then log with `span.log`"
      );
    }
    event = validateAndSanitizeExperimentLogFullArgs(event, !!this.dataset);
    const span = this.startSpanImpl({ startTime: this.lastStartTime, event });
    this.lastStartTime = span.end();
    return span.id;
  }
  /**
   * Create a new toplevel span underneath the experiment. The name defaults to "root".
   *
   * See {@link Span.traced} for full details.
   */
  traced(callback, args) {
    const { setCurrent, ...argsRest } = _nullishCoalesce(args, () => ( {}));
    const span = this.startSpan(argsRest);
    const ret = runCatchFinally(
      () => {
        if (_nullishCoalesce(setCurrent, () => ( true))) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
    return ret;
  }
  /**
   * Lower-level alternative to `traced`. This allows you to start a span yourself, and can be useful in situations
   * where you cannot use callbacks. However, spans started with `startSpan` will not be marked as the "current span",
   * so `currentSpan()` and `traced()` will be no-ops. If you want to mark a span as current, use `traced` instead.
   *
   * See {@link traced} for full details.
   */
  startSpan(args) {
    this.calledStartSpan = true;
    return this.startSpanImpl(args);
  }
  startSpanImpl(args) {
    return new SpanImpl({
      ...args,
      // Sometimes `args` gets passed directly into this function, and it contains an undefined value for `state`.
      // To ensure that we always use this experiment's state, we override the `state` argument no matter what.
      state: this.state,
      ...startSpanParentArgs({
        state: this.state,
        parent: _optionalChain([args, 'optionalAccess', _58 => _58.parent]),
        parentObjectType: this.parentObjectType(),
        parentObjectId: this.lazyId,
        parentComputeObjectMetadataArgs: void 0,
        parentSpanIds: void 0,
        propagatedEvent: _optionalChain([args, 'optionalAccess', _59 => _59.propagatedEvent])
      }),
      defaultRootType: "eval" /* EVAL */
    });
  }
  async fetchBaseExperiment() {
    const state = await this.getState();
    const conn = state.appConn();
    try {
      const resp = await conn.post("/api/base_experiment/get_id", {
        id: await this.id
      });
      const base = await resp.json();
      return {
        id: base["base_exp_id"],
        name: base["base_exp_name"]
      };
    } catch (e) {
      if (e instanceof FailedHTTPResponse && e.status === 400) {
        return null;
      } else {
        throw e;
      }
    }
  }
  /**
   * Summarize the experiment, including the scores (compared to the closest reference experiment) and metadata.
   *
   * @param options Options for summarizing the experiment.
   * @param options.summarizeScores Whether to summarize the scores. If False, only the metadata will be returned.
   * @param options.comparisonExperimentId The experiment to compare against. If None, the most recent experiment on the origin's main branch will be used.
   * @returns A summary of the experiment, including the scores (compared to the closest reference experiment) and metadata.
   */
  async summarize(options = {}) {
    let { summarizeScores = true, comparisonExperimentId = void 0 } = options || {};
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const experimentUrl = `${projectUrl}/experiments/${encodeURIComponent(
      await this.name
    )}`;
    let scores = void 0;
    let metrics = void 0;
    let comparisonExperimentName = void 0;
    if (summarizeScores) {
      await this.flush();
      if (comparisonExperimentId === void 0) {
        const baseExperiment = await this.fetchBaseExperiment();
        if (baseExperiment !== null) {
          comparisonExperimentId = baseExperiment.id;
          comparisonExperimentName = baseExperiment.name;
        }
      }
      try {
        const results = await state.apiConn().get_json(
          "/experiment-comparison2",
          {
            experiment_id: await this.id,
            base_experiment_id: comparisonExperimentId
          },
          3
        );
        scores = results["scores"];
        metrics = results["metrics"];
      } catch (e) {
        console.warn(
          `Failed to fetch experiment scores and metrics: ${e}

View complete results in Braintrust or run experiment.summarize() again.`
        );
        scores = {};
        metrics = {};
      }
    }
    return {
      projectName: (await this.project).name,
      experimentName: await this.name,
      projectId: (await this.project).id,
      experimentId: await this.id,
      projectUrl,
      experimentUrl,
      comparisonExperimentName,
      scores: _nullishCoalesce(scores, () => ( {})),
      metrics: _nullishCoalesce(metrics, () => ( {}))
    };
  }
  /**
   * Log feedback to an event in the experiment. Feedback is used to save feedback scores, set an expected value, or add a comment.
   *
   * @param event
   * @param event.id The id of the event to log feedback for. This is the `id` returned by `log` or accessible as the `id` field of a span.
   * @param event.scores (Optional) a dictionary of numeric values (between 0 and 1) to log. These scores will be merged into the existing scores for the event.
   * @param event.expected (Optional) the ground truth value (an arbitrary, JSON serializable object) that you'd compare to `output` to determine if your `output` value is correct or not.
   * @param event.comment (Optional) an optional comment string to log about the event.
   * @param event.metadata (Optional) a dictionary with additional data about the feedback. If you have a `user_id`, you can log it here and access it in the Braintrust UI. Note, this metadata does not correspond to the main event itself, but rather the audit log attached to the event.
   * @param event.source (Optional) the source of the feedback. Must be one of "external" (default), "app", or "api".
   */
  logFeedback(event) {
    logFeedbackImpl(this.state, this.parentObjectType(), this.lazyId, event);
  }
  /**
   * Update a span in the experiment using its id. It is important that you only update a span once the original span has been fully written and flushed,
   * since otherwise updates to the span may conflict with the original span.
   *
   * @param event The event data to update the span with. Must include `id`. See {@link Experiment.log} for a full list of valid fields.
   */
  updateSpan(event) {
    const { id, ...eventRest } = event;
    if (!id) {
      throw new Error("Span id is required to update a span");
    }
    updateSpanImpl({
      state: this.state,
      parentObjectType: this.parentObjectType(),
      parentObjectId: this.lazyId,
      id,
      event: eventRest
    });
  }
  /**
   * Return a serialized representation of the experiment that can be used to start subspans in other places.
   *
   * See {@link Span.startSpan} for more details.
   */
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType(),
      object_id: await this.id
    }).toStr();
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
}, _class10);
var ReadonlyExperiment = class extends ObjectFetcher {
  constructor(state, lazyMetadata) {
    super("experiment", void 0, (r) => enrichAttachments(r, state));
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).experiment.name;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  async *asDataset() {
    const records = this.fetch();
    for await (const record of records) {
      if (record.root_span_id !== record.span_id) {
        continue;
      }
      const { output, expected: expectedRecord, metadata } = record;
      const expected = _nullishCoalesce(expectedRecord, () => ( output));
      yield {
        input: record.input,
        tags: record.tags,
        expected,
        metadata
      };
    }
  }
};
var executionCounter = 0;
function newId() {
  return _uuid.v4.call(void 0, );
}
var SpanImpl = (_class11 = class _SpanImpl {
  
  
  
  
  // For internal use only.
  
  
  
  
  
  
  
  __init39() {this.kind = "span"}
  constructor(args) {;_class11.prototype.__init39.call(this);
    this._state = args.state;
    const spanAttributes = _nullishCoalesce(args.spanAttributes, () => ( {}));
    const rawEvent = _nullishCoalesce(args.event, () => ( {}));
    const type = _nullishCoalesce(args.type, () => ( (args.parentSpanIds ? void 0 : args.defaultRootType)));
    this.loggedEndTime = void 0;
    this.parentObjectType = args.parentObjectType;
    this.parentObjectId = args.parentObjectId;
    this.parentComputeObjectMetadataArgs = args.parentComputeObjectMetadataArgs;
    this.propagatedEvent = args.propagatedEvent;
    if (this.propagatedEvent) {
      mergeDicts(rawEvent, this.propagatedEvent);
    }
    const { id: eventId, ...event } = rawEvent;
    const callerLocation = isomorph_default.getCallerLocation();
    const name = (() => {
      if (args.name) return args.name;
      if (!args.parentSpanIds) return "root";
      if (callerLocation) {
        const pathComponents = callerLocation.caller_filename.split("/");
        const filename = pathComponents[pathComponents.length - 1];
        return [callerLocation.caller_functionname].concat(
          filename ? [`${filename}:${callerLocation.caller_lineno}`] : []
        ).join(":");
      }
      return "subspan";
    })();
    const internalData = {
      metrics: {
        start: _nullishCoalesce(args.startTime, () => ( getCurrentUnixTimestamp()))
      },
      context: { ...callerLocation },
      span_attributes: {
        name,
        type,
        ...spanAttributes,
        exec_counter: executionCounter++
      },
      created: (/* @__PURE__ */ new Date()).toISOString()
    };
    this._id = _nullishCoalesce(eventId, () => ( _uuid.v4.call(void 0, )));
    this._spanId = _nullishCoalesce(args.spanId, () => ( _uuid.v4.call(void 0, )));
    if (args.parentSpanIds) {
      this._rootSpanId = args.parentSpanIds.rootSpanId;
      this._spanParents = "parentSpanIds" in args.parentSpanIds ? args.parentSpanIds.parentSpanIds : [args.parentSpanIds.spanId];
    } else {
      this._rootSpanId = this._spanId;
      this._spanParents = void 0;
    }
    this.isMerge = false;
    this.logInternal({ event, internalData });
    this.isMerge = true;
  }
  get id() {
    return this._id;
  }
  get spanId() {
    return this._spanId;
  }
  get rootSpanId() {
    return this._rootSpanId;
  }
  get spanParents() {
    return _nullishCoalesce(this._spanParents, () => ( []));
  }
  setAttributes(args) {
    this.logInternal({ internalData: { span_attributes: args } });
  }
  setSpanParents(parents) {
    this.logInternal({ internalData: { span_parents: parents } });
  }
  log(event) {
    this.logInternal({ event });
  }
  logInternal({
    event,
    internalData
  }) {
    const [serializableInternalData, lazyInternalData] = splitLoggingData({
      event,
      internalData
    });
    const partialRecord = deepCopyEvent({
      id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      span_parents: this._spanParents,
      ...serializableInternalData,
      [IS_MERGE_FIELD]: this.isMerge
    });
    if (_optionalChain([partialRecord, 'access', _60 => _60.metrics, 'optionalAccess', _61 => _61.end])) {
      this.loggedEndTime = _optionalChain([partialRecord, 'access', _62 => _62.metrics, 'optionalAccess', _63 => _63.end]);
    }
    if ((_nullishCoalesce(partialRecord.tags, () => ( []))).length > 0 && _optionalChain([this, 'access', _64 => _64._spanParents, 'optionalAccess', _65 => _65.length])) {
      throw new Error("Tags can only be logged to the root span");
    }
    const computeRecord = async () => ({
      ...partialRecord,
      ...Object.fromEntries(
        await Promise.all(
          Object.entries(lazyInternalData).map(async ([key, value]) => [
            key,
            await value.get()
          ])
        )
      ),
      ...new SpanComponentsV3({
        object_type: this.parentObjectType,
        object_id: await this.parentObjectId.get()
      }).objectIdFields()
    });
    this._state.bgLogger().log([new LazyValue(computeRecord)]);
  }
  logFeedback(event) {
    logFeedbackImpl(this._state, this.parentObjectType, this.parentObjectId, {
      ...event,
      id: this.id
    });
  }
  traced(callback, args) {
    const { setCurrent, ...argsRest } = _nullishCoalesce(args, () => ( {}));
    const span = this.startSpan(argsRest);
    return runCatchFinally(
      () => {
        if (_nullishCoalesce(setCurrent, () => ( true))) {
          return withCurrent(span, callback);
        } else {
          return callback(span);
        }
      },
      (e) => {
        logError(span, e);
        throw e;
      },
      () => span.end()
    );
  }
  startSpan(args) {
    const parentSpanIds = _optionalChain([args, 'optionalAccess', _66 => _66.parent]) ? void 0 : { spanId: this._spanId, rootSpanId: this._rootSpanId };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: _optionalChain([args, 'optionalAccess', _67 => _67.parent]),
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: _nullishCoalesce(_optionalChain([args, 'optionalAccess', _68 => _68.propagatedEvent]), () => ( this.propagatedEvent))
      })
    });
  }
  startSpanWithParents(spanId, spanParents, args) {
    const parentSpanIds = {
      parentSpanIds: spanParents,
      rootSpanId: this._rootSpanId
    };
    return new _SpanImpl({
      state: this._state,
      ...args,
      ...startSpanParentArgs({
        state: this._state,
        parent: _optionalChain([args, 'optionalAccess', _69 => _69.parent]),
        parentObjectType: this.parentObjectType,
        parentObjectId: this.parentObjectId,
        parentComputeObjectMetadataArgs: this.parentComputeObjectMetadataArgs,
        parentSpanIds,
        propagatedEvent: _nullishCoalesce(_optionalChain([args, 'optionalAccess', _70 => _70.propagatedEvent]), () => ( this.propagatedEvent))
      }),
      spanId
    });
  }
  end(args) {
    let endTime;
    let internalData = {};
    if (!this.loggedEndTime) {
      endTime = _nullishCoalesce(_optionalChain([args, 'optionalAccess', _71 => _71.endTime]), () => ( getCurrentUnixTimestamp()));
      internalData = { metrics: { end: endTime } };
    } else {
      endTime = this.loggedEndTime;
    }
    this.logInternal({ internalData });
    return endTime;
  }
  async export() {
    return new SpanComponentsV3({
      object_type: this.parentObjectType,
      ...this.parentComputeObjectMetadataArgs && !this.parentObjectId.hasSucceeded ? { compute_object_metadata_args: this.parentComputeObjectMetadataArgs } : { object_id: await this.parentObjectId.get() },
      row_id: this.id,
      span_id: this._spanId,
      root_span_id: this._rootSpanId,
      propagated_event: this.propagatedEvent
    }).toStr();
  }
  async permalink() {
    return await permalink(await this.export(), {
      state: this._state
    });
  }
  link() {
    if (!this.id) {
      return NOOP_SPAN_PERMALINK;
    }
    try {
      const orgName = this._state.orgName;
      if (!orgName) {
        throw new Error("log-in-or-provide-org-name");
      }
      return this._link(orgName);
    } catch (e) {
      return getErrPermlink(e instanceof Error ? e.message : String(e));
    }
  }
  _link(orgName) {
    const appUrl = this._state.appUrl || "https://www.braintrust.dev";
    const baseUrl = `${appUrl}/app/${orgName}`;
    const args = this.parentComputeObjectMetadataArgs;
    switch (this.parentObjectType) {
      case 2 /* PROJECT_LOGS */: {
        const projectID = _optionalChain([args, 'optionalAccess', _72 => _72.project_id]) || this.parentObjectId.getSync().value;
        const projectName = _optionalChain([args, 'optionalAccess', _73 => _73.project_name]);
        if (projectID) {
          return `${baseUrl}/object?object_type=project_logs&object_id=${projectID}&id=${this._id}`;
        } else if (projectName) {
          return `${baseUrl}/p/${projectName}/logs?oid=${this._id}`;
        } else {
          return getErrPermlink("provide-project-name-or-id");
        }
      }
      case 1 /* EXPERIMENT */: {
        const expID = _optionalChain([args, 'optionalAccess', _74 => _74.experiment_id]) || _optionalChain([this, 'access', _75 => _75.parentObjectId, 'optionalAccess', _76 => _76.getSync, 'call', _77 => _77(), 'optionalAccess', _78 => _78.value]);
        if (!expID) {
          return getErrPermlink("provide-experiment-id");
        } else {
          return `${baseUrl}/object?object_type=experiment&object_id=${expID}&id=${this._id}`;
        }
      }
      case 3 /* PLAYGROUND_LOGS */: {
        return NOOP_SPAN_PERMALINK;
      }
      default: {
        const _exhaustive = this.parentObjectType;
        _exhaustive;
        return NOOP_SPAN_PERMALINK;
      }
    }
  }
  async flush() {
    return await this._state.bgLogger().flush();
  }
  close(args) {
    return this.end(args);
  }
  state() {
    return this._state;
  }
}, _class11);
function splitLoggingData({
  event,
  internalData
}) {
  const sanitized = validateAndSanitizeExperimentLogPartialArgs(_nullishCoalesce(event, () => ( {})));
  const sanitizedAndInternalData = {};
  mergeDicts(sanitizedAndInternalData, internalData || {});
  mergeDicts(sanitizedAndInternalData, sanitized);
  const serializableInternalData = {};
  const lazyInternalData = {};
  for (const [key, value] of Object.entries(sanitizedAndInternalData)) {
    if (value instanceof BraintrustStream) {
      const streamCopy = value.copy();
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve, reject) => {
          streamCopy.toReadableStream().pipeThrough(createFinalValuePassThroughStream(resolve, reject)).pipeTo(devNullWritableStream());
        });
      });
    } else if (value instanceof ReadableStream) {
      lazyInternalData[key] = new LazyValue(async () => {
        return await new Promise((resolve, reject) => {
          value.pipeThrough(createFinalValuePassThroughStream(resolve, reject)).pipeTo(devNullWritableStream());
        });
      });
    } else {
      serializableInternalData[key] = value;
    }
  }
  return [serializableInternalData, lazyInternalData];
}
var Dataset2 = (_class12 = class extends ObjectFetcher {
  constructor(state, lazyMetadata, pinnedVersion, legacy, _internal_btql) {
    const isLegacyDataset = _nullishCoalesce(legacy, () => ( DEFAULT_IS_LEGACY_DATASET));
    if (isLegacyDataset) {
      console.warn(
        `Records will be fetched from this dataset in the legacy format, with the "expected" field renamed to "output". Please update your code to use "expected", and use \`braintrust.initDataset()\` with \`{ useOutput: false }\`, which will become the default in a future version of Braintrust.`
      );
    }
    super(
      "dataset",
      pinnedVersion,
      (r) => (
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        ensureDatasetRecord(
          enrichAttachments(r, this.state),
          isLegacyDataset
        )
      ),
      _internal_btql
    );_class12.prototype.__init40.call(this);_class12.prototype.__init41.call(this);;
    this.state = state;
    this.lazyMetadata = lazyMetadata;
  }
  
  __init40() {this.__braintrust_dataset_marker = true}
  __init41() {this.newRecords = 0}
  get id() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.id;
    })();
  }
  get name() {
    return (async () => {
      return (await this.lazyMetadata.get()).dataset.name;
    })();
  }
  get project() {
    return (async () => {
      return (await this.lazyMetadata.get()).project;
    })();
  }
  async getState() {
    await this.lazyMetadata.get();
    return this.state;
  }
  validateEvent({
    metadata,
    expected,
    output,
    tags
  }) {
    if (metadata !== void 0) {
      for (const key of Object.keys(metadata)) {
        if (typeof key !== "string") {
          throw new Error("metadata keys must be strings");
        }
      }
    }
    if (expected !== void 0 && output !== void 0) {
      throw new Error(
        "Only one of expected or output (deprecated) can be specified. Prefer expected."
      );
    }
    if (tags) {
      validateTags(tags);
    }
  }
  createArgs({
    id,
    input,
    expected,
    metadata,
    tags,
    output,
    isMerge
  }) {
    return new LazyValue(async () => {
      const dataset_id = await this.id;
      const expectedValue = expected === void 0 ? output : expected;
      const args = {
        id,
        input,
        expected: expectedValue,
        tags,
        dataset_id,
        created: !isMerge ? (/* @__PURE__ */ new Date()).toISOString() : void 0,
        //if we're merging/updating an event we will not add this ts
        metadata,
        ...!!isMerge ? {
          [IS_MERGE_FIELD]: true
        } : {}
      };
      return args;
    });
  }
  /**
   * Insert a single record to the dataset. The record will be batched and uploaded behind the scenes. If you pass in an `id`,
   * and a record with that `id` already exists, it will be overwritten (upsert).
   *
   * @param event The event to log.
   * @param event.input The argument that uniquely define an input case (an arbitrary, JSON serializable object).
   * @param event.expected The output of your application, including post-processing (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) a list of strings that you can use to filter and group records later.
   * @param event.metadata (Optional) a dictionary with additional data about the test example, model outputs, or just
   * about anything else that's relevant, that you can use to help find and analyze examples later. For example, you could log the
   * `prompt`, example's `id`, or anything else that would be useful to slice/dice later. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @param event.id (Optional) a unique identifier for the event. If you don't provide one, Braintrust will generate one for you.
   * @param event.output: (Deprecated) The output of your application. Use `expected` instead.
   * @returns The `id` of the logged record.
   */
  insert({
    input,
    expected,
    metadata,
    tags,
    id,
    output
  }) {
    this.validateEvent({ metadata, expected, output, tags });
    const rowId = id || _uuid.v4.call(void 0, );
    const args = this.createArgs(
      deepCopyEvent({
        id: rowId,
        input,
        expected,
        metadata,
        tags,
        output,
        isMerge: false
      })
    );
    this.state.bgLogger().log([args]);
    this.newRecords++;
    return rowId;
  }
  /**
   * Update fields of a single record in the dataset. The updated fields will be batched and uploaded behind the scenes.
   * You must pass in an `id` of the record to update. Only the fields provided will be updated; other fields will remain unchanged.
   *
   * @param event The fields to update in the record.
   * @param event.id The unique identifier of the record to update.
   * @param event.input (Optional) The new input value for the record (an arbitrary, JSON serializable object).
   * @param event.expected (Optional) The new expected output value for the record (an arbitrary, JSON serializable object).
   * @param event.tags (Optional) A list of strings to update the tags of the record.
   * @param event.metadata (Optional) A dictionary to update the metadata of the record. The values in `metadata` can be any
   * JSON-serializable type, but its keys must be strings.
   * @returns The `id` of the updated record.
   */
  update({
    input,
    expected,
    metadata,
    tags,
    id
  }) {
    this.validateEvent({ metadata, expected, tags });
    const args = this.createArgs(
      deepCopyEvent({
        id,
        input,
        expected,
        metadata,
        tags,
        isMerge: true
      })
    );
    this.state.bgLogger().log([args]);
    return id;
  }
  delete(id) {
    const args = new LazyValue(async () => ({
      id,
      dataset_id: await this.id,
      created: (/* @__PURE__ */ new Date()).toISOString(),
      _object_delete: true
    }));
    this.state.bgLogger().log([args]);
    return id;
  }
  /**
   * Summarize the dataset, including high level metrics about its size and other metadata.
   * @param summarizeData Whether to summarize the data. If false, only the metadata will be returned.
   * @returns `DatasetSummary`
   * @returns A summary of the dataset.
   */
  async summarize(options = {}) {
    const { summarizeData = true } = options || {};
    await this.flush();
    const state = await this.getState();
    const projectUrl = `${state.appPublicUrl}/app/${encodeURIComponent(
      state.orgName
    )}/p/${encodeURIComponent((await this.project).name)}`;
    const datasetUrl = `${projectUrl}/datasets/${encodeURIComponent(
      await this.name
    )}`;
    let dataSummary;
    if (summarizeData) {
      const rawDataSummary = _zod.z.object({
        total_records: _zod.z.number()
      }).parse(
        await state.apiConn().get_json(
          "dataset-summary",
          {
            dataset_id: await this.id
          },
          3
        )
      );
      dataSummary = {
        newRecords: this.newRecords,
        totalRecords: rawDataSummary.total_records
      };
    }
    return {
      projectName: (await this.project).name,
      datasetName: await this.name,
      projectUrl,
      datasetUrl,
      dataSummary
    };
  }
  /**
   * Flush any pending rows to the server.
   */
  async flush() {
    return await this.state.bgLogger().flush();
  }
  /**
   * @deprecated This function is deprecated. You can simply remove it from your code.
   */
  async close() {
    console.warn(
      "close is deprecated and will be removed in a future version of braintrust. It is now a no-op and can be removed"
    );
    return this.id;
  }
  static isDataset(data) {
    return typeof data === "object" && data !== null && "__braintrust_dataset_marker" in data;
  }
}, _class12);
function renderMessage(render, message) {
  return {
    ...message,
    ..."content" in message ? {
      content: isEmpty(message.content) ? void 0 : typeof message.content === "string" ? render(message.content) : message.content.map((c) => {
        switch (c.type) {
          case "text":
            return { ...c, text: render(c.text) };
          case "image_url":
            if (isObject(c.image_url.url)) {
              throw new Error(
                "Attachments must be replaced with URLs before calling `build()`"
              );
            }
            return {
              ...c,
              image_url: {
                ...c.image_url,
                url: render(c.image_url.url)
              }
            };
          default:
            const _exhaustiveCheck = c;
            return _exhaustiveCheck;
        }
      })
    } : {},
    ..."tool_calls" in message ? {
      tool_calls: isEmpty(message.tool_calls) ? void 0 : message.tool_calls.map((t) => {
        return {
          type: t.type,
          id: render(t.id),
          function: {
            name: render(t.function.name),
            arguments: render(t.function.arguments)
          }
        };
      })
    } : {},
    ..."tool_call_id" in message ? {
      tool_call_id: render(message.tool_call_id)
    } : {}
  };
}
function deserializePlainStringAsJSON(s) {
  if (s.trim() === "") {
    return { value: null, error: void 0 };
  }
  try {
    return { value: JSON.parse(s), error: void 0 };
  } catch (e) {
    return { value: s, error: e };
  }
}
function renderTemplatedObject(obj, args, options) {
  if (typeof obj === "string") {
    if (options.strict) {
      lintTemplate(obj, args);
    }
    return _mustache2.default.render(obj, args, void 0, {
      escape: (value) => {
        if (typeof value === "string") {
          return value;
        } else {
          return JSON.stringify(value);
        }
      }
    });
  } else if (isArray(obj)) {
    return obj.map((item) => renderTemplatedObject(item, args, options));
  } else if (isObject(obj)) {
    return Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        renderTemplatedObject(value, args, options)
      ])
    );
  }
  return obj;
}
function renderPromptParams(params, args, options) {
  const schemaParsed = _zod.z.object({
    response_format: _zod.z.object({
      type: _zod.z.literal("json_schema"),
      json_schema: ResponseFormatJsonSchema.omit({ schema: true }).extend({
        schema: _zod.z.unknown()
      })
    })
  }).safeParse(params);
  if (schemaParsed.success) {
    const rawSchema = schemaParsed.data.response_format.json_schema.schema;
    const templatedSchema = renderTemplatedObject(rawSchema, args, options);
    const parsedSchema = typeof templatedSchema === "string" ? deserializePlainStringAsJSON(templatedSchema).value : templatedSchema;
    return {
      ...params,
      response_format: {
        ...schemaParsed.data.response_format,
        json_schema: {
          ...schemaParsed.data.response_format.json_schema,
          schema: parsedSchema
        }
      }
    };
  }
  return params;
}
var Prompt2 = (_class13 = class _Prompt {
  constructor(metadata, defaults, noTrace) {;_class13.prototype.__init42.call(this);_class13.prototype.__init43.call(this);
    this.metadata = metadata;
    this.defaults = defaults;
    this.noTrace = noTrace;
  }
  
  __init42() {this.hasParsedPromptData = false}
  __init43() {this.__braintrust_prompt_marker = true}
  get id() {
    return this.metadata.id;
  }
  get projectId() {
    return this.metadata.project_id;
  }
  get name() {
    return "name" in this.metadata ? this.metadata.name : `Playground function ${this.metadata.id}`;
  }
  get slug() {
    return "slug" in this.metadata ? this.metadata.slug : this.metadata.id;
  }
  get prompt() {
    return _optionalChain([this, 'access', _79 => _79.getParsedPromptData, 'call', _80 => _80(), 'optionalAccess', _81 => _81.prompt]);
  }
  get version() {
    return this.metadata[TRANSACTION_ID_FIELD];
  }
  get options() {
    return _optionalChain([this, 'access', _82 => _82.getParsedPromptData, 'call', _83 => _83(), 'optionalAccess', _84 => _84.options]) || {};
  }
  get promptData() {
    return this.getParsedPromptData();
  }
  /**
   * Build the prompt with the given formatting options. The args you pass in will
   * be forwarded to the mustache template that defines the prompt and rendered with
   * the `mustache-js` library.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  build(buildArgs, options = {}) {
    return this.runBuild(buildArgs, {
      flavor: _nullishCoalesce(options.flavor, () => ( "chat")),
      messages: options.messages,
      strict: options.strict
    });
  }
  /**
   * This is a special build method that first resolves attachment references, and then
   * calls the regular build method. You should use this if you are building prompts from
   * dataset rows that contain attachments.
   *
   * @param buildArgs Args to forward along to the prompt template.
   */
  async buildWithAttachments(buildArgs, options = {}) {
    const hydrated = buildArgs instanceof Object ? await resolveAttachmentsToBase64(buildArgs, options.state) : buildArgs;
    return this.runBuild(hydrated, {
      flavor: _nullishCoalesce(options.flavor, () => ( "chat")),
      messages: options.messages,
      strict: options.strict
    });
  }
  runBuild(buildArgs, options) {
    const { flavor } = options;
    const params = {
      ...this.defaults,
      ...Object.fromEntries(
        Object.entries(this.options.params || {}).filter(
          ([k, _v]) => !BRAINTRUST_PARAMS.includes(k)
        )
      ),
      ...!isEmpty(this.options.model) ? {
        model: this.options.model
      } : {}
    };
    if (!("model" in params) || isEmpty(params.model)) {
      throw new Error(
        "No model specified. Either specify it in the prompt or as a default"
      );
    }
    const spanInfo = this.noTrace ? {} : {
      span_info: {
        metadata: {
          prompt: this.id ? {
            variables: buildArgs,
            id: this.id,
            project_id: this.projectId,
            version: this.version,
            ..."prompt_session_id" in this.metadata ? { prompt_session_id: this.metadata.prompt_session_id } : {}
          } : void 0
        }
      }
    };
    const prompt = this.prompt;
    if (!prompt) {
      throw new Error("Empty prompt");
    }
    const dictArgParsed = _zod.z.record(_zod.z.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    const renderedPrompt = _Prompt.renderPrompt({
      prompt,
      buildArgs,
      options
    });
    if (flavor === "chat") {
      if (renderedPrompt.type !== "chat") {
        throw new Error(
          "Prompt is a completion prompt. Use buildCompletion() instead"
        );
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        messages: renderedPrompt.messages,
        ...renderedPrompt.tools ? {
          tools: ChatCompletionTool.array().parse(JSON.parse(renderedPrompt.tools))
        } : void 0
      };
    } else if (flavor === "completion") {
      if (renderedPrompt.type !== "completion") {
        throw new Error(`Prompt is a chat prompt. Use flavor: 'chat' instead`);
      }
      return {
        ...renderPromptParams(params, variables, { strict: options.strict }),
        ...spanInfo,
        prompt: renderedPrompt.content
      };
    } else {
      throw new Error("never!");
    }
  }
  static renderPrompt({
    prompt,
    buildArgs,
    options
  }) {
    const escape = (v) => {
      if (v === void 0) {
        throw new Error("Missing!");
      } else if (typeof v === "string") {
        return v;
      } else if (v instanceof ReadonlyAttachment) {
        throw new Error(
          "Use buildWithAttachments() to build prompts with attachments"
        );
      } else {
        return JSON.stringify(v);
      }
    };
    const dictArgParsed = _zod.z.record(_zod.z.unknown()).safeParse(buildArgs);
    const variables = {
      input: buildArgs,
      ...dictArgParsed.success ? dictArgParsed.data : {}
    };
    if (prompt.type === "chat") {
      const render = (template) => {
        if (options.strict) {
          lintTemplate(template, variables);
        }
        return _mustache2.default.render(template, variables, void 0, {
          escape
        });
      };
      const baseMessages = (prompt.messages || []).map(
        (m) => renderMessage(render, m)
      );
      const hasSystemPrompt = baseMessages.some((m) => m.role === "system");
      const messages = [
        ...baseMessages,
        ...(_nullishCoalesce(options.messages, () => ( []))).filter(
          (m) => !(hasSystemPrompt && m.role === "system")
        )
      ];
      return {
        type: "chat",
        messages,
        ..._optionalChain([prompt, 'access', _85 => _85.tools, 'optionalAccess', _86 => _86.trim, 'call', _87 => _87()]) ? {
          tools: render(prompt.tools)
        } : void 0
      };
    } else if (prompt.type === "completion") {
      if (options.messages) {
        throw new Error(
          "extra messages are not supported for completion prompts"
        );
      }
      if (options.strict) {
        lintTemplate(prompt.content, variables);
      }
      return {
        type: "completion",
        content: _mustache2.default.render(prompt.content, variables, void 0, {
          escape
        })
      };
    } else {
      const _ = prompt;
      throw new Error(`Invalid prompt type: ${_}`);
    }
  }
  getParsedPromptData() {
    if (!this.hasParsedPromptData) {
      this.parsedPromptData = PromptData.parse(this.metadata.prompt_data);
      this.hasParsedPromptData = true;
    }
    return this.parsedPromptData;
  }
  static isPrompt(data) {
    return typeof data === "object" && data !== null && "__braintrust_prompt_marker" in data;
  }
  static fromPromptData(name, promptData) {
    return new _Prompt(
      {
        name,
        slug: name,
        prompt_data: promptData
      },
      {},
      false
    );
  }
}, _class13);
var TEST_API_KEY = "___TEST_API_KEY__THIS_IS_NOT_REAL___";
function setInitialTestState() {
  if (!_internalGetGlobalState()) {
    _internalSetInitialState();
  }
}
async function simulateLoginForTests() {
  return await login({
    apiKey: TEST_API_KEY,
    appUrl: "https://braintrust.dev"
  });
}
function simulateLogoutForTests() {
  _globalState.resetLoginInfo();
  _globalState.appUrl = "https://www.braintrust.dev";
  return _globalState;
}
async function getPromptVersions(projectId, promptId) {
  const state = _internalGetGlobalState();
  if (!state) {
    throw new Error("Must log in first");
  }
  await state.login({});
  const query = {
    from: {
      op: "function",
      name: {
        op: "ident",
        name: ["project_prompts"]
      },
      args: [
        {
          op: "literal",
          value: projectId
        }
      ]
    },
    select: [
      {
        op: "star"
      }
    ],
    filter: {
      op: "eq",
      left: { op: "ident", name: ["id"] },
      right: { op: "literal", value: promptId }
    }
  };
  const response = await state.apiConn().post(
    "btql",
    {
      query,
      audit_log: true,
      use_columnstore: false,
      brainstore_realtime: true
    },
    { headers: { "Accept-Encoding": "gzip" } }
  );
  if (!response.ok) {
    throw new Error(
      `API request failed: ${response.status} ${response.statusText}`
    );
  }
  const result = await response.json();
  return _optionalChain([result, 'access', _88 => _88.data, 'optionalAccess', _89 => _89.filter, 'call', _90 => _90(
    (entry) => ["upsert", "merge"].includes(_optionalChain([entry, 'access', _91 => _91.audit_data, 'optionalAccess', _92 => _92.action]))
  ), 'access', _93 => _93.map, 'call', _94 => _94((entry) => prettifyXact(entry._xact_id))]) || [];
}
var _exportsForTestingOnly = {
  extractAttachments,
  deepCopyEvent,
  useTestBackgroundLogger,
  clearTestBackgroundLogger,
  simulateLoginForTests,
  simulateLogoutForTests,
  setInitialTestState,
  initTestExperiment,
  isGeneratorFunction,
  isAsyncGeneratorFunction
};

// src/browser-config.ts
var browserConfigured = false;
function configureBrowser() {
  if (browserConfigured) {
    return;
  }
  try {
    if (typeof AsyncLocalStorage !== "undefined") {
      isomorph_default.newAsyncLocalStorage = () => new AsyncLocalStorage();
    }
  } catch (e5) {
  }
  isomorph_default.getEnv = (name) => {
    if (typeof process === "undefined" || typeof process.env === "undefined") {
      return void 0;
    }
    return process.env[name];
  };
  isomorph_default.hash = (data) => {
    let hash = 0;
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    const hashHex = (hash >>> 0).toString(16).padStart(8, "0");
    return hashHex.repeat(8).substring(0, 64);
  };
  _internalSetInitialState();
  browserConfigured = true;
}

// src/exports-browser.ts
var exports_browser_exports = {};
__export(exports_browser_exports, {
  Attachment: () => Attachment,
  BaseAttachment: () => BaseAttachment,
  BraintrustState: () => BraintrustState,
  BraintrustStream: () => BraintrustStream,
  Dataset: () => Dataset2,
  ERR_PERMALINK: () => ERR_PERMALINK,
  Experiment: () => Experiment2,
  ExternalAttachment: () => ExternalAttachment,
  FailedHTTPResponse: () => FailedHTTPResponse,
  INTERNAL_BTQL_LIMIT: () => INTERNAL_BTQL_LIMIT,
  LEGACY_CACHED_HEADER: () => LEGACY_CACHED_HEADER,
  LazyValue: () => LazyValue,
  Logger: () => Logger,
  NOOP_SPAN: () => NOOP_SPAN,
  NOOP_SPAN_PERMALINK: () => NOOP_SPAN_PERMALINK,
  NoopSpan: () => NoopSpan,
  Prompt: () => Prompt2,
  ReadonlyAttachment: () => ReadonlyAttachment,
  ReadonlyExperiment: () => ReadonlyExperiment,
  SpanImpl: () => SpanImpl,
  TestBackgroundLogger: () => TestBackgroundLogger,
  X_CACHED_HEADER: () => X_CACHED_HEADER,
  _exportsForTestingOnly: () => _exportsForTestingOnly,
  _internalGetGlobalState: () => _internalGetGlobalState,
  _internalSetInitialState: () => _internalSetInitialState,
  braintrustStreamChunkSchema: () => braintrustStreamChunkSchema,
  createFinalValuePassThroughStream: () => createFinalValuePassThroughStream,
  currentExperiment: () => currentExperiment,
  currentLogger: () => currentLogger,
  currentSpan: () => currentSpan,
  deserializePlainStringAsJSON: () => deserializePlainStringAsJSON,
  devNullWritableStream: () => devNullWritableStream,
  evaluatorDefinitionSchema: () => evaluatorDefinitionSchema,
  evaluatorDefinitionsSchema: () => evaluatorDefinitionsSchema,
  flush: () => flush,
  getPromptVersions: () => getPromptVersions,
  getSpanParentObject: () => getSpanParentObject,
  init: () => init,
  initDataset: () => initDataset,
  initExperiment: () => initExperiment,
  initFunction: () => initFunction,
  initLogger: () => initLogger,
  invoke: () => invoke,
  loadPrompt: () => loadPrompt,
  log: () => log,
  logError: () => logError,
  login: () => login,
  loginToState: () => loginToState,
  newId: () => newId,
  parseCachedHeader: () => parseCachedHeader,
  permalink: () => permalink,
  renderMessage: () => renderMessage,
  renderPromptParams: () => renderPromptParams,
  setFetch: () => setFetch,
  setMaskingFunction: () => setMaskingFunction,
  spanComponentsToObjectId: () => spanComponentsToObjectId,
  startSpan: () => startSpan,
  summarize: () => summarize,
  traceable: () => traceable,
  traced: () => traced,
  updateSpan: () => updateSpan,
  withCurrent: () => withCurrent,
  withDataset: () => withDataset,
  withExperiment: () => withExperiment,
  withLogger: () => withLogger,
  withParent: () => withParent,
  wrapOpenAI: () => wrapOpenAI,
  wrapOpenAIv4: () => wrapOpenAIv4,
  wrapTraced: () => wrapTraced
});

// src/functions/invoke.ts
async function invoke(args) {
  const {
    orgName,
    apiKey,
    appUrl,
    forceLogin,
    fetch: fetch2,
    input,
    messages,
    parent: parentArg,
    metadata,
    tags,
    state: stateArg,
    stream,
    mode,
    schema,
    strict,
    ...functionIdArgs
  } = args;
  const state = _nullishCoalesce(stateArg, () => ( _internalGetGlobalState()));
  await state.login({
    orgName,
    apiKey,
    appUrl,
    forceLogin,
    fetch: fetch2
  });
  const parent = parentArg ? typeof parentArg === "string" ? parentArg : await parentArg.export() : await getSpanParentObject().export();
  const functionId = FunctionId.safeParse({
    function_id: functionIdArgs.function_id,
    project_name: functionIdArgs.projectName,
    slug: functionIdArgs.slug,
    global_function: functionIdArgs.globalFunction,
    prompt_session_id: functionIdArgs.promptSessionId,
    prompt_session_function_id: functionIdArgs.promptSessionFunctionId,
    version: functionIdArgs.version
  });
  if (!functionId.success) {
    throw new Error(
      `Invalid function ID arguments: ${functionId.error.message}`
    );
  }
  const request = {
    ...functionId.data,
    input,
    messages,
    parent,
    metadata,
    tags,
    stream,
    mode,
    strict
  };
  const resp = await state.proxyConn().post(`function/invoke`, request, {
    headers: {
      Accept: stream ? "text/event-stream" : "application/json"
    }
  });
  if (stream) {
    if (!resp.body) {
      throw new Error("Received empty stream body");
    }
    return new BraintrustStream(resp.body);
  } else {
    const data = await resp.json();
    return schema ? schema.parse(data) : data;
  }
}
function initFunction({
  projectName,
  slug,
  version
}) {
  const f = async (input) => {
    return await invoke({
      projectName,
      slug,
      version,
      input
    });
  };
  Object.defineProperty(f, "name", {
    value: `initFunction-${projectName}-${slug}-${_nullishCoalesce(version, () => ( "latest"))}`
  });
  return f;
}

// src/wrappers/oai_responses.ts
function responsesProxy(openai) {
  if (!openai.responses) {
    return openai;
  }
  return new Proxy(openai.responses, {
    get(target, name, receiver) {
      if (name === "create") {
        return responsesCreateProxy(target.create.bind(target));
      } else if (name === "stream") {
        return responsesStreamProxy(target.stream.bind(target));
      } else if (name === "parse") {
        return responsesParseProxy(target.parse.bind(target));
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function responsesCreateProxy(target) {
  const hooks = {
    name: "openai.responses",
    toSpanFunc: parseSpanFromResponseCreateParams,
    resultToEventFunc: parseEventFromResponseCreateResult,
    traceStreamFunc: traceResponseCreateStream
  };
  return proxyCreate(target, hooks);
}
function parseSpanFromResponseCreateParams(params) {
  const spanArgs = {
    name: "openai.responses.create",
    spanAttributes: {
      type: "llm"
    },
    event: {
      input: params.input,
      metadata: {
        ...filterFrom(params, ["input"]),
        provider: "openai"
      }
    },
    startTime: getCurrentUnixTimestamp()
  };
  return {
    span: startSpan(spanArgs),
    start: spanArgs.startTime
  };
}
function parseEventFromResponseCreateResult(result) {
  const data = {};
  if (_optionalChain([result, 'optionalAccess', _95 => _95.output]) !== void 0) {
    data.output = result.output;
  }
  if (result) {
    const { output, usage, ...metadata } = result;
    if (Object.keys(metadata).length > 0) {
      data.metadata = metadata;
    }
  }
  data.metrics = parseMetricsFromUsage(_optionalChain([result, 'optionalAccess', _96 => _96.usage]));
  return data;
}
function parseSpanFromResponseParseParams(params) {
  const spanArgs = {
    name: "openai.responses.parse",
    spanAttributes: {
      type: "llm"
    },
    event: {
      input: params.input,
      metadata: {
        ...filterFrom(params, ["input"]),
        provider: "openai"
      }
    },
    startTime: getCurrentUnixTimestamp()
  };
  return {
    span: startSpan(spanArgs),
    start: spanArgs.startTime
  };
}
function parseEventFromResponseParseResult(result) {
  const data = {};
  if (_optionalChain([result, 'optionalAccess', _97 => _97.output]) !== void 0) {
    data.output = result.output;
  }
  if (result) {
    const { output, usage, ...metadata } = result;
    if (Object.keys(metadata).length > 0) {
      data.metadata = metadata;
    }
  }
  data.metrics = parseMetricsFromUsage(_optionalChain([result, 'optionalAccess', _98 => _98.usage]));
  return data;
}
function traceResponseCreateStream(stream, timedSpan) {
  const span = timedSpan.span;
  let ttft = -1;
  return async function(...args) {
    const result = await stream.next(...args);
    if (ttft === -1) {
      ttft = getCurrentUnixTimestamp() - timedSpan.start;
      span.log({ metrics: { time_to_first_token: ttft } });
    }
    if (result.done) {
      span.end();
      return result;
    }
    const item = result.value;
    if (!item || !_optionalChain([item, 'optionalAccess', _99 => _99.type]) || !_optionalChain([item, 'optionalAccess', _100 => _100.response])) {
      return result;
    }
    const event = parseLogFromItem(item);
    if (!objectIsEmpty(event)) {
      span.log(event);
    }
    return result;
  };
}
function parseLogFromItem(item) {
  if (!item || !_optionalChain([item, 'optionalAccess', _101 => _101.type]) || !_optionalChain([item, 'optionalAccess', _102 => _102.response])) {
    return {};
  }
  const response = item.response;
  switch (item.type) {
    case "response.completed":
      const data = {};
      if (_optionalChain([response, 'optionalAccess', _103 => _103.output]) !== void 0) {
        data.output = response.output;
      }
      if (response) {
        const { usage, output, ...metadata } = response;
        if (Object.keys(metadata).length > 0) {
          data.metadata = metadata;
        }
      }
      data.metrics = parseMetricsFromUsage(_optionalChain([response, 'optionalAccess', _104 => _104.usage]));
      return data;
    default:
      return {};
  }
}
function responsesStreamProxy(target) {
  return new Proxy(target, {
    apply(target2, thisArg, argArray) {
      const responseStream = Reflect.apply(target2, thisArg, argArray);
      if (!argArray || argArray.length === 0) {
        return responseStream;
      }
      const timedSpan = parseSpanFromResponseCreateParams(argArray[0]);
      const span = timedSpan.span;
      let ttft = -1;
      responseStream.on("event", (event) => {
        if (ttft === -1) {
          ttft = getCurrentUnixTimestamp() - timedSpan.start;
          span.log({ metrics: { time_to_first_token: ttft } });
        }
        const logEvent = parseLogFromItem(event);
        if (!objectIsEmpty(logEvent)) {
          span.log(logEvent);
        }
      });
      responseStream.on("end", () => {
        span.end();
      });
      return responseStream;
    }
  });
}
function responsesParseProxy(target) {
  const hooks = {
    name: "openai.responses.parse",
    toSpanFunc: parseSpanFromResponseParseParams,
    resultToEventFunc: parseEventFromResponseParseResult,
    traceStreamFunc: traceResponseCreateStream
    // Reuse the same stream tracing
  };
  return proxyCreate(target, hooks);
}
var TOKEN_NAME_MAP = {
  input_tokens: "prompt_tokens",
  output_tokens: "completion_tokens",
  total_tokens: "tokens"
};
var TOKEN_PREFIX_MAP = {
  input: "prompt",
  output: "completion"
};
function parseMetricsFromUsage(usage) {
  if (!usage) {
    return {};
  }
  const metrics = {};
  for (const [oai_name, value] of Object.entries(usage)) {
    if (typeof value === "number") {
      const metricName = TOKEN_NAME_MAP[oai_name] || oai_name;
      metrics[metricName] = value;
    } else if (oai_name.endsWith("_tokens_details")) {
      if (!isObject(value)) {
        continue;
      }
      const rawPrefix = oai_name.slice(0, -"_tokens_details".length);
      const prefix = TOKEN_PREFIX_MAP[rawPrefix] || rawPrefix;
      for (const [key, n] of Object.entries(value)) {
        if (typeof n !== "number") {
          continue;
        }
        const metricName = `${prefix}_${key}`;
        metrics[metricName] = n;
      }
    }
  }
  return metrics;
}
function proxyCreate(target, hooks) {
  return new Proxy(target, {
    apply(target2, thisArg, argArray) {
      if (!argArray || argArray.length === 0) {
        return Reflect.apply(target2, thisArg, argArray);
      }
      const params = argArray[0];
      const timedSpan = hooks.toSpanFunc(params);
      const apiPromise = Reflect.apply(target2, thisArg, argArray);
      const onThen = function(result) {
        if (params.stream) {
          return proxyIterable(result, timedSpan, hooks.traceStreamFunc);
        } else {
          const event = hooks.resultToEventFunc(result);
          const span = timedSpan.span;
          span.log(event);
          span.end();
          return result;
        }
      };
      return apiPromiseProxy(
        apiPromise,
        timedSpan,
        onThen,
        hooks.traceStreamFunc
      );
    }
  });
}
function apiPromiseProxy(apiPromise, span, onThen, traceStreamFunc) {
  return new Proxy(apiPromise, {
    get(target, name, receiver) {
      if (name === "then") {
        const thenFunc = Reflect.get(target, name, receiver);
        return function(onF, onR) {
          return thenFunc.call(
            target,
            async (result) => {
              const processed = onThen(result);
              return onF ? onF(processed) : processed;
            },
            onR
            // FIXME[matt] error handling?
          );
        };
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function proxyIterable(stream, span, onNext) {
  return new Proxy(stream, {
    get(target, prop, receiver) {
      if (prop === Symbol.asyncIterator) {
        const original = Reflect.get(target, prop, receiver);
        return function() {
          const iterator = original.call(target);
          return new Proxy(iterator, {
            get(iterTarget, iterProp, iterReceiver) {
              if (iterProp === "next") {
                return onNext(iterator, span);
              }
              return Reflect.get(iterTarget, iterProp, iterReceiver);
            }
          });
        };
      }
      return Reflect.get(target, prop, receiver);
    }
  });
}

// src/wrappers/oai.ts
function wrapOpenAI(openai) {
  const oai = openai;
  if (oai && typeof oai === "object" && "chat" in oai && typeof oai.chat === "object" && oai.chat && "completions" in oai.chat && typeof oai.chat.completions === "object" && oai.chat.completions && "create" in oai.chat.completions) {
    return wrapOpenAIv4(oai);
  } else {
    console.warn("Unsupported OpenAI library (potentially v3). Not wrapping.");
    return openai;
  }
}
globalThis.__inherited_braintrust_wrap_openai = wrapOpenAI;
function wrapOpenAIv4(openai) {
  const completionProxy = new Proxy(openai.chat.completions, {
    get(target, name, receiver) {
      const baseVal = Reflect.get(target, name, receiver);
      if (name === "create") {
        return wrapChatCompletion(baseVal.bind(target));
      } else if (name === "parse") {
        return wrapBetaChatCompletionParse(baseVal.bind(target));
      }
      return baseVal;
    }
  });
  const chatProxy = new Proxy(openai.chat, {
    get(target, name, receiver) {
      if (name === "completions") {
        return completionProxy;
      }
      return Reflect.get(target, name, receiver);
    }
  });
  const embeddingProxy = createEndpointProxy(openai.embeddings, wrapEmbeddings);
  const moderationProxy = createEndpointProxy(openai.moderations, wrapModerations);
  let betaProxy;
  if (_optionalChain([openai, 'access', _105 => _105.beta, 'optionalAccess', _106 => _106.chat, 'optionalAccess', _107 => _107.completions, 'optionalAccess', _108 => _108.stream])) {
    const betaChatCompletionProxy = new Proxy(_optionalChain([openai, 'optionalAccess', _109 => _109.beta, 'optionalAccess', _110 => _110.chat, 'access', _111 => _111.completions]), {
      get(target, name, receiver) {
        const baseVal = Reflect.get(target, name, receiver);
        if (name === "parse") {
          return wrapBetaChatCompletionParse(baseVal.bind(target));
        } else if (name === "stream") {
          return wrapBetaChatCompletionStream(baseVal.bind(target));
        }
        return baseVal;
      }
    });
    const betaChatProxy = new Proxy(openai.beta.chat, {
      get(target, name, receiver) {
        if (name === "completions") {
          return betaChatCompletionProxy;
        }
        return Reflect.get(target, name, receiver);
      }
    });
    betaProxy = new Proxy(openai.beta, {
      get(target, name, receiver) {
        if (name === "chat") {
          return betaChatProxy;
        }
        return Reflect.get(target, name, receiver);
      }
    });
  }
  return new Proxy(openai, {
    get(target, name, receiver) {
      switch (name) {
        case "chat":
          return chatProxy;
        case "embeddings":
          return embeddingProxy;
        case "moderations":
          return moderationProxy;
        case "responses":
          return responsesProxy(openai);
      }
      if (name === "beta" && betaProxy) {
        return betaProxy;
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
function logCompletionResponse(startTime, response, span) {
  const metrics = parseMetricsFromUsage(_optionalChain([response, 'optionalAccess', _112 => _112.usage]));
  metrics.time_to_first_token = getCurrentUnixTimestamp() - startTime;
  span.log({
    output: response.choices,
    metrics
  });
}
function wrapBetaChatCompletionParse(completion) {
  return async (allParams) => {
    const { span_info: _, ...params } = allParams;
    const span = startSpan(
      mergeDicts(
        {
          name: "Chat Completion",
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseChatCompletionParams(allParams)
      )
    );
    const startTime = getCurrentUnixTimestamp();
    const ret = await completion(params);
    try {
      logCompletionResponse(startTime, ret, span);
      return ret;
    } finally {
      span.end();
    }
  };
}
function wrapBetaChatCompletionStream(completion) {
  return (allParams) => {
    const { span_info: _, ...params } = allParams;
    const span = startSpan(
      mergeDicts(
        {
          name: "Chat Completion",
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseChatCompletionParams(allParams)
      )
    );
    const startTime = getCurrentUnixTimestamp();
    const ret = completion(params);
    let first = true;
    ret.on("chunk", (_chunk) => {
      if (first) {
        const now2 = getCurrentUnixTimestamp();
        span.log({
          metrics: {
            time_to_first_token: now2 - startTime
          }
        });
        first = false;
      }
    });
    ret.on("chatCompletion", (completion2) => {
      span.log({
        output: completion2.choices
      });
    });
    ret.on("end", () => {
      span.end();
    });
    return ret;
  };
}
var LEGACY_CACHED_HEADER = "x-cached";
var X_CACHED_HEADER = "x-bt-cached";
function parseCachedHeader(value) {
  return isEmpty(value) ? void 0 : ["true", "hit"].includes(value.toLowerCase()) ? 1 : 0;
}
function logHeaders(response, span) {
  const cachedHeader = response.headers.get(X_CACHED_HEADER);
  if (isEmpty(cachedHeader)) {
    const legacyCacheHeader = response.headers.get(LEGACY_CACHED_HEADER);
    if (!isEmpty(legacyCacheHeader)) {
      span.log({
        metrics: {
          cached: parseCachedHeader(legacyCacheHeader)
        }
      });
    }
  } else {
    span.log({
      metrics: {
        cached: parseCachedHeader(cachedHeader)
      }
    });
  }
}
function wrapChatCompletion(completion) {
  return (allParams, options) => {
    const { span_info: _, ...params } = allParams;
    let executionPromise = null;
    let dataPromise = null;
    const ensureExecuted = () => {
      if (!executionPromise) {
        executionPromise = (async () => {
          const span = startSpan(
            mergeDicts(
              {
                name: "Chat Completion",
                spanAttributes: {
                  type: "llm" /* LLM */
                }
              },
              parseChatCompletionParams(allParams)
            )
          );
          const startTime = getCurrentUnixTimestamp();
          if (params.stream) {
            const { data: ret, response } = await completion(
              // We could get rid of this type coercion if we could somehow enforce
              // that `P extends ChatParams` BUT does not have the property
              // `span_info`.
              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
              params,
              options
            ).withResponse();
            logHeaders(response, span);
            const wrapperStream = new WrapperStream(
              span,
              startTime,
              ret.iterator()
            );
            ret.iterator = () => wrapperStream[Symbol.asyncIterator]();
            return { data: ret, response };
          } else {
            try {
              const completionResponse = completion(
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                params,
                options
              );
              const { data: ret, response } = await completionResponse.withResponse();
              logHeaders(response, span);
              const { messages, ...rest } = params;
              span.log({
                input: messages,
                metadata: {
                  ...rest
                }
              });
              logCompletionResponse(startTime, ret, span);
              return { data: ret, response };
            } finally {
              span.end();
            }
          }
        })();
      }
      return executionPromise;
    };
    return new Proxy({}, {
      get(target, prop, receiver) {
        if (prop === "withResponse") {
          return () => ensureExecuted();
        }
        if (prop === "then" || prop === "catch" || prop === "finally" || prop in Promise.prototype) {
          if (!dataPromise) {
            dataPromise = ensureExecuted().then((result) => result.data);
          }
          const value = Reflect.get(dataPromise, prop, receiver);
          return typeof value === "function" ? value.bind(dataPromise) : value;
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  };
}
function parseBaseParams(allParams, inputField) {
  const { span_info, ...params } = allParams;
  const { metadata: spanInfoMetadata, ...spanInfoRest } = _nullishCoalesce(span_info, () => ( {}));
  const ret = {
    ...spanInfoRest,
    event: {
      metadata: spanInfoMetadata
    }
  };
  const input = params[inputField];
  const paramsRest = { ...params, provider: "openai" };
  delete paramsRest[inputField];
  return mergeDicts(ret, { event: { input, metadata: paramsRest } });
}
function createApiWrapper(name, create, processResponse, parseParams) {
  return async (allParams, options) => {
    const { span_info: _, ...params } = allParams;
    return traced(
      async (span) => {
        const { data: result, response } = await create(
          params,
          options
        ).withResponse();
        logHeaders(response, span);
        processResponse(result, span);
        return result;
      },
      mergeDicts(
        {
          name,
          spanAttributes: {
            type: "llm" /* LLM */
          }
        },
        parseParams(allParams)
      )
    );
  };
}
function createEndpointProxy(target, wrapperFn) {
  return new Proxy(target, {
    get(target2, name, receiver) {
      const baseVal = Reflect.get(target2, name, receiver);
      if (name === "create") {
        return wrapperFn(baseVal.bind(target2));
      }
      return baseVal;
    }
  });
}
function parseChatCompletionParams(params) {
  return parseBaseParams(params, "messages");
}
function processEmbeddingResponse(result, span) {
  span.log({
    output: { embedding_length: result.data[0].embedding.length },
    metrics: parseMetricsFromUsage(_optionalChain([result, 'optionalAccess', _113 => _113.usage]))
  });
}
function processModerationResponse(result, span) {
  span.log({
    output: result.results
  });
}
var wrapEmbeddings = (create) => createApiWrapper(
  "Embedding",
  create,
  processEmbeddingResponse,
  (params) => parseBaseParams(params, "input")
);
var wrapModerations = (create) => createApiWrapper(
  "Moderation",
  create,
  processModerationResponse,
  (params) => parseBaseParams(params, "input")
);
function postprocessStreamingResults(allResults) {
  let role = void 0;
  let content = void 0;
  let tool_calls = void 0;
  let finish_reason = void 0;
  let metrics = {};
  for (const result of allResults) {
    if (result.usage) {
      metrics = {
        ...metrics,
        ...parseMetricsFromUsage(_optionalChain([result, 'optionalAccess', _114 => _114.usage]))
      };
    }
    const delta = _optionalChain([result, 'access', _115 => _115.choices, 'optionalAccess', _116 => _116[0], 'optionalAccess', _117 => _117.delta]);
    if (!delta) {
      continue;
    }
    if (!role && delta.role) {
      role = delta.role;
    }
    if (delta.finish_reason) {
      finish_reason = delta.finish_reason;
    }
    if (delta.content) {
      content = (content || "") + delta.content;
    }
    if (delta.tool_calls) {
      const toolDelta = delta.tool_calls[0];
      if (!tool_calls || toolDelta.id && tool_calls[tool_calls.length - 1].id !== toolDelta.id) {
        tool_calls = [
          ...tool_calls || [],
          {
            id: toolDelta.id,
            type: toolDelta.type,
            function: toolDelta.function
          }
        ];
      } else {
        tool_calls[tool_calls.length - 1].function.arguments += toolDelta.function.arguments;
      }
    }
  }
  return {
    metrics,
    output: [
      {
        index: 0,
        message: {
          role,
          content,
          tool_calls
        },
        logprobs: null,
        finish_reason
      }
    ]
  };
}
var WrapperStream = class {
  
  
  
  constructor(span, startTime, iter) {
    this.span = span;
    this.iter = iter;
    this.startTime = startTime;
  }
  async *[Symbol.asyncIterator]() {
    let first = true;
    const allResults = [];
    try {
      for await (const item of this.iter) {
        if (first) {
          const now2 = getCurrentUnixTimestamp();
          this.span.log({
            metrics: {
              time_to_first_token: now2 - this.startTime
            }
          });
          first = false;
        }
        allResults.push(item);
        yield item;
      }
      this.span.log({
        ...postprocessStreamingResults(allResults)
      });
    } finally {
      this.span.end();
    }
  }
};

// dev/types.ts

var evalBodySchema = _v3.z.object({
  name: _v3.z.string(),
  parameters: _v3.z.record(_v3.z.string(), _v3.z.unknown()).nullish(),
  data: RunEval.shape.data,
  scores: _v3.z.array(
    _v3.z.object({
      function_id: FunctionId,
      name: _v3.z.string()
    })
  ).nullish(),
  experiment_name: _v3.z.string().nullish(),
  project_id: _v3.z.string().nullish(),
  parent: InvokeParent.optional(),
  stream: _v3.z.boolean().optional()
});
var evalParametersSerializedSchema = _v3.z.record(
  _v3.z.string(),
  _v3.z.union([
    _v3.z.object({
      type: _v3.z.literal("prompt"),
      default: PromptData.optional(),
      description: _v3.z.string().optional()
    }),
    _v3.z.object({
      type: _v3.z.literal("data"),
      schema: _v3.z.record(_v3.z.unknown()),
      // JSON Schema
      default: _v3.z.unknown().optional(),
      description: _v3.z.string().optional()
    })
  ])
);
var evaluatorDefinitionSchema = _v3.z.object({
  parameters: evalParametersSerializedSchema.optional()
});
var evaluatorDefinitionsSchema = _v3.z.record(
  _v3.z.string(),
  evaluatorDefinitionSchema
);

// src/browser.ts
configureBrowser();
var browser_default = exports_browser_exports;







































































exports.Attachment = Attachment; exports.BaseAttachment = BaseAttachment; exports.BraintrustState = BraintrustState; exports.BraintrustStream = BraintrustStream; exports.Dataset = Dataset2; exports.ERR_PERMALINK = ERR_PERMALINK; exports.Experiment = Experiment2; exports.ExternalAttachment = ExternalAttachment; exports.FailedHTTPResponse = FailedHTTPResponse; exports.INTERNAL_BTQL_LIMIT = INTERNAL_BTQL_LIMIT; exports.LEGACY_CACHED_HEADER = LEGACY_CACHED_HEADER; exports.LazyValue = LazyValue; exports.Logger = Logger; exports.NOOP_SPAN = NOOP_SPAN; exports.NOOP_SPAN_PERMALINK = NOOP_SPAN_PERMALINK; exports.NoopSpan = NoopSpan; exports.Prompt = Prompt2; exports.ReadonlyAttachment = ReadonlyAttachment; exports.ReadonlyExperiment = ReadonlyExperiment; exports.SpanImpl = SpanImpl; exports.TestBackgroundLogger = TestBackgroundLogger; exports.X_CACHED_HEADER = X_CACHED_HEADER; exports._exportsForTestingOnly = _exportsForTestingOnly; exports._internalGetGlobalState = _internalGetGlobalState; exports._internalSetInitialState = _internalSetInitialState; exports.braintrustStreamChunkSchema = braintrustStreamChunkSchema; exports.createFinalValuePassThroughStream = createFinalValuePassThroughStream; exports.currentExperiment = currentExperiment; exports.currentLogger = currentLogger; exports.currentSpan = currentSpan; exports.default = browser_default; exports.deserializePlainStringAsJSON = deserializePlainStringAsJSON; exports.devNullWritableStream = devNullWritableStream; exports.evaluatorDefinitionSchema = evaluatorDefinitionSchema; exports.evaluatorDefinitionsSchema = evaluatorDefinitionsSchema; exports.flush = flush; exports.getPromptVersions = getPromptVersions; exports.getSpanParentObject = getSpanParentObject; exports.init = init; exports.initDataset = initDataset; exports.initExperiment = initExperiment; exports.initFunction = initFunction; exports.initLogger = initLogger; exports.invoke = invoke; exports.loadPrompt = loadPrompt; exports.log = log; exports.logError = logError; exports.login = login; exports.loginToState = loginToState; exports.newId = newId; exports.parseCachedHeader = parseCachedHeader; exports.permalink = permalink; exports.renderMessage = renderMessage; exports.renderPromptParams = renderPromptParams; exports.setFetch = setFetch; exports.setMaskingFunction = setMaskingFunction; exports.spanComponentsToObjectId = spanComponentsToObjectId; exports.startSpan = startSpan; exports.summarize = summarize; exports.traceable = traceable; exports.traced = traced; exports.updateSpan = updateSpan; exports.withCurrent = withCurrent; exports.withDataset = withDataset; exports.withExperiment = withExperiment; exports.withLogger = withLogger; exports.withParent = withParent; exports.wrapOpenAI = wrapOpenAI; exports.wrapOpenAIv4 = wrapOpenAIv4; exports.wrapTraced = wrapTraced;
