{"version":3,"file":"subscribe.js","sourceRoot":"","sources":["../../src/subscribe.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventSource } from 'eventsource';\nimport version from './version.ts';\nimport {\n  version as coreVersion,\n  InstantAPIError,\n  InstantConfig,\n  InstantSchemaDef,\n  InstaQLResponse,\n  ValidQuery,\n} from '@instantdb/core';\n\nexport type SubscriptionReadyState = 'closed' | 'connecting' | 'open';\n\nexport type SubscribeQueryPayload<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Q extends ValidQuery<Q, Schema>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n> =\n  | {\n      type: 'ok';\n      data: InstaQLResponse<Schema, Q, NonNullable<Config['useDateObjects']>>;\n    }\n  | {\n      type: 'error';\n      error: InstantAPIError;\n      readyState: SubscriptionReadyState;\n      isClosed: boolean;\n    };\n\nexport type SubscribeQueryCallback<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Q extends ValidQuery<Q, Schema>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n> = (payload: SubscribeQueryPayload<Schema, Q, Config>) => void;\n\nexport interface SubscribeQueryResponse<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Q extends ValidQuery<Q, Schema>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n> {\n  /** Stop the subscription and close the connection. */\n  close(): void;\n\n  /** Warns when attempting to iterate synchronously */\n  [Symbol.iterator](): never;\n\n  /** Async iterator of query payloads */\n  [Symbol.asyncIterator](): AsyncIterableIterator<\n    SubscribeQueryPayload<Schema, Q, Config>\n  >;\n\n  /** Ready state of the connection */\n  readonly readyState: SubscriptionReadyState;\n\n  /** `true` if the connection is closed and no more payloads will be delivered */\n  readonly isClosed: boolean;\n}\n\nfunction makeAsyncIterator<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Q extends ValidQuery<Q, Schema>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n>(\n  subscribe: (cb: SubscribeQueryCallback<Schema, Q, Config>) => void,\n  subscribeOnClose: (cb: () => void) => void,\n  unsubscribe: (cb: SubscribeQueryCallback<Schema, Q, Config>) => void,\n  readyState: () => SubscriptionReadyState,\n): AsyncGenerator<SubscribeQueryPayload<Schema, Q, Config>> {\n  let wakeup = null;\n  let closed = false;\n\n  const backlog: SubscribeQueryPayload<Schema, Q, Config>[] = [];\n  const handler: SubscribeQueryCallback<Schema, Q, Config> = (\n    data: SubscribeQueryPayload<Schema, Q, Config>,\n  ): void => {\n    backlog.push(data);\n    if (backlog.length > 100) {\n      // Remove the oldest item to prevent the backlog\n      // from growing forever. This is okay for live queries,\n      // but we need some other machanism if we use this for\n      // event-based subscriptions.\n      backlog.shift();\n    }\n    if (wakeup) {\n      wakeup();\n      wakeup = null;\n    }\n  };\n\n  subscribe(handler);\n\n  const done = () => {\n    unsubscribe(handler);\n    return Promise.resolve({ done: true, value: undefined });\n  };\n\n  const onClose = () => {\n    closed = true;\n    if (wakeup) {\n      wakeup();\n    }\n    done();\n  };\n\n  subscribeOnClose(onClose);\n\n  const next = async () => {\n    while (true) {\n      if (readyState() === 'closed' || closed) {\n        return done();\n      }\n\n      const nextValue = backlog.shift();\n      if (nextValue) {\n        return { value: nextValue, done: false };\n      }\n\n      const p = new Promise((resolve) => {\n        wakeup = resolve;\n      });\n\n      await p;\n    }\n  };\n\n  return {\n    next,\n    return: done,\n    throw(error) {\n      unsubscribe(handler);\n      return Promise.reject(error);\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n\nfunction esReadyState(es: EventSource): SubscriptionReadyState {\n  switch (es.readyState) {\n    case es.CLOSED: {\n      return 'closed';\n    }\n    case es.CONNECTING: {\n      return 'connecting';\n    }\n    case es.OPEN: {\n      return 'open';\n    }\n  }\n}\n\nfunction multiReadFetchResponse(r) {\n  let p = null;\n  return {\n    ...r,\n    text() {\n      if (!p) {\n        p = r.text();\n      }\n      return p;\n    },\n    json() {\n      if (!p) {\n        p = r.text();\n      }\n      return p.then((x) => JSON.parse(x));\n    },\n  };\n}\n\nexport function subscribe<\n  Schema extends InstantSchemaDef<any, any, any>,\n  Q extends ValidQuery<Q, Schema>,\n  Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>,\n>(\n  query: Q,\n  cb,\n  opts: { headers: HeadersInit; inference: boolean; apiURI: string },\n): SubscribeQueryResponse<Schema, Q, Config> {\n  let fetchErrorResponse;\n  let closed = false;\n\n  const es = new EventSource(`${opts.apiURI}/admin/subscribe-query`, {\n    fetch(input, init) {\n      fetchErrorResponse = null;\n      return fetch(input, {\n        ...init,\n        method: 'POST',\n        headers: opts.headers,\n        body: JSON.stringify({\n          query: query,\n          'inference?': opts.inference,\n          versions: {\n            '@instantdb/admin': version,\n            '@instantdb/core': coreVersion,\n          },\n        }),\n      }).then((r) => {\n        if (!r.ok) {\n          fetchErrorResponse = multiReadFetchResponse(r);\n        }\n        return r;\n      });\n    },\n  });\n\n  const subscribers: SubscribeQueryCallback<Schema, Q, Config>[] = [];\n  const onCloseSubscribers = [];\n\n  const subscribe = (cb) => {\n    subscribers.push(cb);\n  };\n\n  const unsubscribe = (cb) => {\n    subscribers.splice(subscribers.indexOf(cb), 1);\n  };\n\n  const subscribeOnClose = (cb) => {\n    onCloseSubscribers.push(cb);\n  };\n\n  if (cb) {\n    subscribe(cb);\n  }\n\n  function deliver(result: SubscribeQueryPayload<Schema, Q, Config>) {\n    if (closed) {\n      return;\n    }\n    for (const sub of subscribers) {\n      try {\n        sub(result);\n      } catch (e) {\n        console.error('Error in subscribeQuery callback', e);\n      }\n    }\n  }\n\n  function handleMessage(msg) {\n    switch (msg.op) {\n      case 'add-query-ok': {\n        deliver({\n          type: 'ok',\n          data: msg.result,\n        });\n        break;\n      }\n      case 'refresh-ok': {\n        if (msg.computations.length) {\n          deliver({\n            type: 'ok',\n            data: msg.computations[0]['instaql-result'],\n          });\n        }\n        break;\n      }\n      case 'error': {\n        deliver({\n          type: 'error',\n          error: new InstantAPIError({ body: msg, status: msg.status }),\n          get readyState() {\n            return esReadyState(es);\n          },\n          get isClosed() {\n            return esReadyState(es) === 'closed';\n          },\n        });\n        break;\n      }\n    }\n  }\n\n  es.onerror = (e) => {\n    if (fetchErrorResponse) {\n      fetchErrorResponse.text().then((t) => {\n        let body = { type: undefined, message: t };\n        try {\n          body = JSON.parse(t);\n        } catch (_e) {}\n        deliver({\n          type: 'error',\n          error: new InstantAPIError({\n            status: fetchErrorResponse.status,\n            body,\n          }),\n          get readyState() {\n            return esReadyState(es);\n          },\n          get isClosed() {\n            return esReadyState(es) === 'closed';\n          },\n        });\n      });\n    } else {\n      const deliverError = () => {\n        deliver({\n          type: 'error',\n          error: new InstantAPIError({\n            status: e.code || 500,\n            body: {\n              type: undefined,\n              message: e.message || 'Unknown error in subscribe query.',\n            },\n          }),\n          get readyState() {\n            return esReadyState(es);\n          },\n          get isClosed() {\n            return esReadyState(es) === 'closed';\n          },\n        });\n      };\n      if (es.readyState === EventSource.CLOSED) {\n        deliverError();\n        return;\n      }\n\n      setTimeout(() => {\n        if (es.readyState !== EventSource.OPEN) {\n          deliverError();\n        }\n      }, 5000);\n    }\n  };\n\n  es.onmessage = (e) => {\n    handleMessage(JSON.parse(e.data));\n  };\n\n  const close = () => {\n    closed = true;\n    for (const sub of onCloseSubscribers) {\n      try {\n        sub();\n      } catch (e) {\n        console.error('Error in onClose callback', e);\n      }\n    }\n    es.close();\n  };\n\n  return {\n    close: close,\n    [Symbol.iterator]: () => {\n      throw new Error(\n        'subscribeQuery does not support synchronous iteration. Use `for await` instead.',\n      );\n    },\n    get readyState() {\n      return esReadyState(es);\n    },\n    get isClosed() {\n      return esReadyState(es) === 'closed';\n    },\n    [Symbol.asyncIterator]: makeAsyncIterator.bind(\n      this,\n      subscribe,\n      subscribeOnClose,\n      unsubscribe,\n      () => 1,\n    ),\n  };\n}\n"]}