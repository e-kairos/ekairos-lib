import { InstantAPIError, InstantConfig, InstantSchemaDef, InstaQLResponse, ValidQuery } from '@instantdb/core';
export type SubscriptionReadyState = 'closed' | 'connecting' | 'open';
export type SubscribeQueryPayload<Schema extends InstantSchemaDef<any, any, any>, Q extends ValidQuery<Q, Schema>, Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>> = {
    type: 'ok';
    data: InstaQLResponse<Schema, Q, NonNullable<Config['useDateObjects']>>;
} | {
    type: 'error';
    error: InstantAPIError;
    readyState: SubscriptionReadyState;
    isClosed: boolean;
};
export type SubscribeQueryCallback<Schema extends InstantSchemaDef<any, any, any>, Q extends ValidQuery<Q, Schema>, Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>> = (payload: SubscribeQueryPayload<Schema, Q, Config>) => void;
export interface SubscribeQueryResponse<Schema extends InstantSchemaDef<any, any, any>, Q extends ValidQuery<Q, Schema>, Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>> {
    /** Stop the subscription and close the connection. */
    close(): void;
    /** Warns when attempting to iterate synchronously */
    [Symbol.iterator](): never;
    /** Async iterator of query payloads */
    [Symbol.asyncIterator](): AsyncIterableIterator<SubscribeQueryPayload<Schema, Q, Config>>;
    /** Ready state of the connection */
    readonly readyState: SubscriptionReadyState;
    /** `true` if the connection is closed and no more payloads will be delivered */
    readonly isClosed: boolean;
}
export declare function subscribe<Schema extends InstantSchemaDef<any, any, any>, Q extends ValidQuery<Q, Schema>, Config extends InstantConfig<Schema, boolean> = InstantConfig<Schema, false>>(query: Q, cb: any, opts: {
    headers: HeadersInit;
    inference: boolean;
    apiURI: string;
}): SubscribeQueryResponse<Schema, Q, Config>;
//# sourceMappingURL=subscribe.d.ts.map