"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _chunkVKR7HDRSjs = require('./chunk-VKR7HDRS.js');




var _chunkCDBUTZMHjs = require('./chunk-CDBUTZMH.js');

// ../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js
var _fs = require('fs');
async function getMachineId() {
  try {
    const result = await _fs.promises.readFile("/etc/hostid", { encoding: "utf8" });
    return result.trim();
  } catch (e) {
    _chunkCDBUTZMHjs.diag.debug(`error reading machine id: ${e}`);
  }
  try {
    const result = await _chunkVKR7HDRSjs.execAsync.call(void 0, "kenv -q smbios.system.uuid");
    return result.stdout.trim();
  } catch (e) {
    _chunkCDBUTZMHjs.diag.debug(`error reading machine id: ${e}`);
  }
  return void 0;
}
var init_getMachineId_bsd = _chunkCDBUTZMHjs.__esm.call(void 0, {
  "../../node_modules/.pnpm/@opentelemetry+resources@2.0.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/detectors/platform/node/machine-id/getMachineId-bsd.js"() {
    _chunkVKR7HDRSjs.init_execAsync.call(void 0, );
    _chunkCDBUTZMHjs.init_esm.call(void 0, );
  }
});
init_getMachineId_bsd();


exports.getMachineId = getMachineId;
