export declare class PersistedObject<T> {
    _subs: any[];
    _persister: Storage;
    _key: string;
    _onMerge: (fromStorage: T, inMemoryValue: T) => any;
    _loadedCbs: Array<() => void>;
    _isLoading: boolean;
    currentValue: T;
    serialize: (T: any) => any;
    parse: (any: any) => T;
    _saveThrottleMs: number;
    _idleCallbackMaxWaitMs: number;
    _pendingSaveCbs: Array<() => void>;
    _version: number;
    _nextSave: null | NodeJS.Timeout;
    constructor(persister: Storage, key: string, defaultValue: T, onMerge: (fromStorage: T, inMemoryValue: T) => any, serialize?: (x: T) => any, parse?: (x: any) => T, saveThrottleMs?: number, idleCallbackMaxWaitMs?: number);
    _getFromStorage(): Promise<T>;
    _load(): Promise<void>;
    waitForLoaded(): Promise<void>;
    isLoading(): boolean;
    version(): number;
    waitForSync(): Promise<void>;
    _writeToStorage(): void;
    flush(): Promise<void>;
    _enqueuePersist(cb: any): void;
    set(f: any, cb: any): void;
    subscribe(cb: any): () => void;
}
//# sourceMappingURL=PersistedObject.d.ts.map